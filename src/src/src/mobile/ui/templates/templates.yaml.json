{
  "templateDefinitions": [
    {
      "name": "action-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "last-item"
          },
          "children": [
            {
              "element": "img",
              "attributes": {
                "id": "{{dataSource.containerId + '-action-' + dataSource.itemId + '-id'}}",
                "src": "{{dataSource.actionIcon}}",
                "class": "{{dataSource.actionClass}}"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "action-template-with-two-icon",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "last-item"
          },
          "children": [
            {
              "element": "img",
              "attributes": {
                "id": "{{dataSource.containerId + '-left-icon-' + dataSource.itemId + '-id'}}",
                "$ngIf": "dataSource.showIcon",
                "src": "{{dataSource.leftIcon}}",
                "class": "{{dataSource.leftActionClass}}"
              }
            },
            {
              "element": "img",
              "attributes": {
                "id": "{{dataSource.containerId + '-action-icon-' + dataSource.itemId + '-id'}}",
                "src": "{{dataSource.actionIcon}}",
                "class": "{{dataSource.actionClass}}"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "default-list-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "list-left-item-container"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "$ngIf": "dataSource.item.image",
                "class": "first-item"
              },
              "children": [
                {
                  "element": "img",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-image-' + dataSource.item.image + '-id'}}",
                    "src": "{{dataSource.item.image}}"
                  },
                  "events": {
                    "error": "dataSource.item.image = null"
                  }
                }
              ]
            },
            {
              "element": "avatar-primitive",
              "attributes": {
                "$ngIf": "!dataSource.item.image"
              },
              "properties": {
                "avatarSize": 52,
                "avatarCornerRadius": 12,
                "name": "dataSource.item.title"
              }
            },
            {
              "element": "div",
              "attributes": {
                "class": "middle-item"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-title-'  + dataSource.item.title + '-id'}}",
                    "class": "title"
                  },
                  "properties": {
                    "$innerHTML": "dataSource.item.title"
                  }
                },
                {
                  "element": "div",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-subtitle-'  + dataSource.item.subTitle + '-id'}}",
                    "class": "subtitle"
                  },
                  "properties": {
                    "$innerHTML": "dataSource.item.subTitle"
                  }
                },
                {
                  "element": "div",
                  "attributes": null,
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "location-container",
                        "$ngIf": "dataSource.item.tagOneIcon || dataSource.item.tagOneLabel || dataSource.item.tagTwoIcon || dataSource.item.tagTwoLabel"
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "$ngIf": "dataSource.item.tagOneIcon",
                            "class": "location"
                          },
                          "children": [
                            {
                              "element": "img",
                              "attributes": {
                                "$ngIf": "dataSource.item.tagOneIcon",
                                "id": "{{dataSource.containerId + '-tagOneIcon-' + dataSource.item.tagOneIcon.toLowerCase() + '-id'}}",
                                "src": "{{ 'assets/icon/flag/' +  dataSource.item.tagOneIcon.toLowerCase() + '.svg' }}"
                              }
                            },
                            {
                              "element": "div",
                              "attributes": {
                                "id": "{{dataSource.containerId + '-tagOneLabel-' + dataSource.item.tagOneLabel + '-id'}}",
                                "class": "location-name"
                              },
                              "properties": {
                                "$innerHTML": "dataSource.item.tagOneLabel"
                              }
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "$ngIf": "dataSource.item.tagTwoIcon",
                            "class": "location"
                          },
                          "children": [
                            {
                              "element": "img",
                              "attributes": {
                                "$ngIf": "dataSource.item.tagTwoIcon",
                                "id": "{{dataSource.containerId + '-tagTwoIcon-' + dataSource.item.tagTwoIcon.toLowerCase() + '-id'}}",
                                "src": "{{ 'assets/icon/flag/' +  dataSource.item.tagTwoIcon.toLowerCase() + '.svg' }}"
                              }
                            },
                            {
                              "element": "div",
                              "attributes": {
                                "id": "{{dataSource.containerId + '-tagTwoLabel-' + dataSource.item.tagTwoLabel + '-id'}}",
                                "class": "location-name"
                              },
                              "properties": {
                                "$innerHTML": "dataSource.item.tagTwoLabel"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "simple-list-with-left-image-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "list-left-item-container"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "class": "first-item",
                "$ngIf": "dataSource.item.thumbnailImage"
              },
              "children": [
                {
                  "element": "img",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-image-' + dataSource.item.thumbnailImage + '-id'}}",
                    "src": "{{dataSource.item.thumbnailImage}}"
                  }
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "class": "first-item",
                "$ngIf": "!dataSource.item.thumbnailImage"
              },
              "children": [
                {
                  "element": "avatar-primitive",
                  "properties": {
                    "avatarSize": 52,
                    "avatarCornerRadius": 12,
                    "name": "dataSource.item.title"
                  }
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "class": "middle-item"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-title-'  + dataSource.item.title + '-id'}}",
                    "class": "title"
                  },
                  "properties": {
                    "$innerHTML": "dataSource.item.title"
                  }
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "subtitle"
                  },
                  "properties": {
                    "$innerHTML": "dataSource.subTitle"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manage-pages-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "list-left-item-container"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "class": "first-item",
                "$ngIf": "dataSource.item.thumbnailImage"
              },
              "events": {
                "click": "$actionHelper.navigateToDomain(dataSource.item.type, dataSource.item.id)"
              },
              "children": [
                {
                  "element": "img",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-image-' + dataSource.item.thumbnailImage + '-id'}}",
                    "src": "{{dataSource.item.thumbnailImage}}"
                  }
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "class": "first-item",
                "$ngIf": "!dataSource.item.thumbnailImage"
              },
              "events": {
                "click": "$actionHelper.navigateToDomain(dataSource.item.type, dataSource.item.id)"
              },
              "children": [
                {
                  "element": "avatar-primitive",
                  "properties": {
                    "avatarSize": 52,
                    "avatarCornerRadius": 12,
                    "name": "dataSource.item.parentTitle"
                  }
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "class": "middle-item"
              },
              "events": {
                "click": "$actionHelper.navigateToGlobalManageDomain(dataSource.item.type, dataSource.item.id)"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-title-'  + dataSource.item.title + '-id'}}",
                    "class": "title"
                  },
                  "properties": {
                    "$innerHTML": "dataSource.item.parentTitle"
                  }
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "subtitle"
                  },
                  "properties": {
                    "$innerHTML": "dataSource.subTitle"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "simple-list-without-action-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "list-left-item-container"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "class": "first-item",
                "$ngIf": "dataSource.item.objectImage"
              },
              "children": [
                {
                  "element": "img",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-image-' + dataSource.item.objectImage + '-id'}}",
                    "src": "{{dataSource.item.objectImage}}"
                  }
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "class": "first-item",
                "$ngIf": "!dataSource.item.objectImage"
              },
              "children": [
                {
                  "element": "avatar-primitive",
                  "properties": {
                    "avatarSize": 52,
                    "avatarCornerRadius": 12,
                    "name": "dataSource.item.objectName"
                  }
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "class": "middle-item"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-title-'  + dataSource.item.message + '-id'}}",
                    "class": "title"
                  },
                  "properties": {
                    "$innerHTML": "dataSource.item.message"
                  }
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "subtitle"
                  },
                  "properties": {
                    "$innerHTML": "dataSource.item.createdDate"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "simple-list-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "quick-link"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "class": "quick-link-container"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "quick-link-logo",
                    "$ngIf": "dataSource.item.icon"
                  },
                  "children": [
                    {
                      "element": "img",
                      "attributes": {
                        "id": "{{dataSource.containerId + '-icon-' + dataSource.item.icon + '-id'}}",
                        "src": "{{dataSource.item.icon}}"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "quick-link-name"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "id": "{{dataSource.containerId + '-title-' + dataSource.item.title + '-id'}}",
                        "class": "title"
                      },
                      "properties": {
                        "$innerHTML": "dataSource.item.title"
                      }
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "id": "{{dataSource.containerId + '-subtitle-' + dataSource.item.subTitle + '-id'}}",
                        "class": "desc"
                      },
                      "properties": {
                        "$innerHTML": "dataSource.item.subTitle"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "simple-list-left-logo",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "simple-list"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "class": "simple-list-container"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "simple-list-image"
                  },
                  "children": [
                    {
                      "element": "img",
                      "attributes": {
                        "id": "{{dataSource.containerId + '-icon-' + dataSource.item.icon + '-id'}}",
                        "src": "{{dataSource.item.icon}}"
                      }
                    }
                  ]
                },
                {
                  "element": "span",
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "id": "{{dataSource.containerId + '-title-' + dataSource.item.title + '-id'}}",
                        "class": "title"
                      },
                      "properties": {
                        "$innerHTML": "dataSource.item.title"
                      }
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "id": "{{dataSource.containerId + '-subtitle-' + dataSource.item.subTitle + '-id'}}",
                        "class": "desc"
                      },
                      "properties": {
                        "$innerHTML": "dataSource.item.subTitle"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "simple-chips-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "chips-carousel-item accent-one",
            "id": "{{dataSource.containerId + '-simple-chip-' + dataSource.item + '-id'}}"
          },
          "properties": {
            "$innerHTML": "dataSource.item"
          }
        }
      ]
    },
    {
      "name": "chips-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "$ngIf": "dataSource.item.selected",
            "class": "chips-carousel-item accent-one",
            "id": "{{dataSource.containerId + '-chip-' + dataSource.item.title + '-id'}}"
          },
          "properties": {
            "$innerHTML": "dataSource.item.title"
          }
        },
        {
          "element": "div",
          "attributes": {
            "$ngIf": "!dataSource.item.selected",
            "class": "chips-carousel-item",
            "id": "{{dataSource.containerId + '-chip-' + dataSource.item.title + '-id'}}"
          },
          "properties": {
            "$innerHTML": "dataSource.item.title"
          }
        }
      ]
    },
    {
      "name": "search-chips-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "$ngIf": "dataSource.item.selected",
            "class": "chips-carousel-item accent-one",
            "id": "{{dataSource.containerId + '-search-chip-' + dataSource.item.name + '-id'}}"
          },
          "properties": {
            "$innerHTML": "dataSource.item.name"
          }
        },
        {
          "element": "div",
          "attributes": {
            "$ngIf": "!dataSource.item.selected",
            "class": "chips-carousel-item",
            "id": "{{dataSource.containerId + '-search-chip-' + dataSource.item.name + '-id'}}"
          },
          "properties": {
            "$innerHTML": "dataSource.item.name"
          }
        }
      ]
    },
    {
      "name": "box-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "$ngIf": "dataSource.topNetworker",
            "class": "cta-box-action top-networker"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "$ngIf": "dataSource.item.firstIcon",
                "class": "first-item"
              },
              "children": [
                {
                  "element": "img",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-first-icon-' + dataSource.item.firstIcon + '-id'}}",
                    "src": "{{dataSource.item.firstIcon}}"
                  }
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "$ngIf": "!dataSource.item.firstIcon",
                "class": "first-item"
              },
              "children": [
                {
                  "element": "avatar-primitive",
                  "properties": {
                    "avatarSize": 36,
                    "avatarCornerRadius": 10,
                    "name": "dataSource.item.title"
                  }
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "class": "middle-item"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "title",
                    "id": "{{dataSource.containerId + '-title-' + dataSource.item.title + '-id'}}"
                  },
                  "properties": {
                    "$innerHTML": "dataSource.item.title"
                  }
                },
                {
                  "element": "div",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-subtitle-' + dataSource.item.subTitle + '-id'}}",
                    "class": "desc"
                  },
                  "properties": {
                    "$innerHTML": "dataSource.item.subTitle"
                  }
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "class": "last-item"
              },
              "children": [
                {
                  "element": "img",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-last-icon-' + dataSource.lastIcon + '-id'}}",
                    "src": "{{dataSource.lastIcon}}"
                  }
                }
              ]
            }
          ]
        },
        {
          "element": "div",
          "attributes": {
            "$ngIf": "!dataSource.topNetworker",
            "class": "cta-box-action"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "$ngIf": "dataSource.item.firstIcon",
                "class": "first-item"
              },
              "children": [
                {
                  "element": "img",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-first-icon-' + dataSource.item.firstIcon + '-id'}}",
                    "src": "{{dataSource.item.firstIcon}}"
                  }
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "$ngIf": "!dataSource.item.firstIcon",
                "class": "first-item"
              },
              "children": [
                {
                  "element": "avatar-primitive",
                  "properties": {
                    "avatarSize": 100,
                    "name": "dataSource.item.title"
                  }
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "class": "middle-item"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-title-' + dataSource.item.title + '-id'}}",
                    "class": "title"
                  },
                  "properties": {
                    "$innerHTML": "dataSource.item.title"
                  }
                },
                {
                  "element": "div",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-subtitle-' + dataSource.item.subTitle + '-id'}}",
                    "class": "desc"
                  },
                  "properties": {
                    "$innerHTML": "dataSource.item.subTitle"
                  }
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "class": "last-item"
              },
              "children": [
                {
                  "element": "img",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-last-icon-' + dataSource.lastIcon + '-id'}}",
                    "src": "{{dataSource.lastIcon}}"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "list-with-right-image-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "list-with-right-image-container"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "class": "list-with-right-image-left-item"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "dataSource.item.actorImage",
                    "class": "list-with-right-image-first-item"
                  },
                  "children": [
                    {
                      "element": "img",
                      "attributes": {
                        "id": "{{dataSource.containerId + '-actorImage-' + dataSource.item.actorImage + '-id'}}",
                        "src": "{{dataSource.item.actorImage}}"
                      },
                      "events": {
                        "error": "dataSource.item.actorImage = null"
                      }
                    },
                    {
                      "element": "span",
                      "attributes": {
                        "id": "{{dataSource.containerId + '-actorName-' + dataSource.item.actorName + '-id'}}"
                      },
                      "properties": {
                        "$innerHTML": "dataSource.item.actorName"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "!dataSource.item.actorImage",
                    "class": "list-with-right-image-first-item"
                  },
                  "children": [
                    {
                      "element": "avatar-primitive",
                      "properties": {
                        "avatarSize": 20,
                        "avatarCornerRadius": 4,
                        "name": "dataSource.item.actorName"
                      }
                    },
                    {
                      "element": "span",
                      "attributes": {
                        "id": "{{dataSource.containerId + '-actorName-' + dataSource.item.actorName + '-id'}}"
                      },
                      "properties": {
                        "$innerHTML": "dataSource.item.actorName"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-title-' + dataSource.item.title + '-id'}}",
                    "class": "list-with-right-image-middle-item"
                  },
                  "children": [
                    {
                      "element": "span",
                      "properties": {
                        "$innerHTML": "dataSource.item.title"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "list-with-right-image-last-item"
                  },
                  "children": [
                    {
                      "element": "span",
                      "attributes": {
                        "id": "{{dataSource.containerId + '-subtitle-' + dataSource.item.subTitle + '-id'}}"
                      },
                      "properties": {
                        "$innerHTML": "dataSource.item.subTitle"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "class": "list-with-right-image-right-item",
                "$ngIf": "dataSource.item.showImage"
              },
              "children": [
                {
                  "element": "img",
                  "attributes": {
                    "#imageCard": "",
                    "id": "{{dataSource.containerId + '-image-' + dataSource.item.image + '-id'}}",
                    "src": "{{dataSource.item.image}}"
                  },
                  "events": {
                    "load": "$actionHelper.getImageBackgroundColor(imageCard);",
                    "error": "dataSource.item.image = null"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main-card-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "main-card"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "class": "main-card-container"
              },
              "events": {
                "click": "dataSource.action"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "dataSource.item.image",
                    "class": "main-card-image"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "main-card-image-container"
                      },
                      "children": [
                        {
                          "element": "img",
                          "attributes": {
                            "id": "{{dataSource.containerId + '-image' + '-id'}}",
                            "src": "{{dataSource.item.image}}"
                          },
                          "events": {
                            "error": "dataSource.item.image = null"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "actor-container"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "actor-name-image"
                      },
                      "children": [
                        {
                          "element": "img",
                          "attributes": {
                            "$ngIf": "dataSource.item.actorImage",
                            "id": "{{dataSource.containerId + '-image-' + dataSource.item.actorImage + '-id'}}",
                            "src": "{{dataSource.item.actorImage}}"
                          },
                          "events": {
                            "error": "dataSource.item.actorImage = null"
                          }
                        },
                        {
                          "element": "avatar-primitive",
                          "attributes": {
                            "$ngIf": "!dataSource.item.actorImage"
                          },
                          "properties": {
                            "avatarSize": 24,
                            "avatarCornerRadius": 6,
                            "name": "dataSource.item.actorName"
                          }
                        }
                      ]
                    },
                    {
                      "element": "span",
                      "attributes": {
                        "id": "{{dataSource.containerId + '-name-' + dataSource.item.actorName + '-id'}}",
                        "class": "actor-name"
                      },
                      "properties": {
                        "$innerHTML": "dataSource.item.actorName"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "main-card-title",
                    "id": "{{dataSource.containerId + '-title-' + dataSource.item.title + '-id'}}"
                  },
                  "properties": {
                    "$innerHTML": "dataSource.item.title"
                  }
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "date",
                    "id": "{{dataSource.containerId + '-subtitle-' + dataSource.item.subTitle + '-id'}}"
                  },
                  "children": [
                    {
                      "element": "span",
                      "properties": {
                        "$innerHTML": "dataSource.item.subTitle"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "card-details-template",
      "functions": {
        "afterInit": "function() {  this.dataSource.description = $actionHelper.enableHyperlink(this.dataSource.description)\n}\n",
        "likeAndUnlikeCard": "function (card) {  let action =  {};\n  if(card.cardType === 'news') {\n    if (card.canLike) {\n      action.query = \"mutation { post { like(id: $templateContext->item.id) }}\"\n    } \n    else {\n      action.query = \"mutation { post { unlike(id: $templateContext->item.id) }}\" \n    }\n  } else {\n    if (card.canLike) {\n      action.query = \"mutation { event { like(id: $templateContext->item.id) }}\"\n    } \n    else {\n      action.query = \"mutation { event { unlike(id: $templateContext->item.id) }}\"  \n    }\n  }\n\n  if (card.canLike) {\n    action.postAction = \"templateContext.item.canLike = false; templateContext.item.likersCount++; $actionHelper.showToast('You Liked this post');\"\n  } else {\n    action.postAction = \"templateContext.item.canLike = true; if(templateContext.item.likersCount > 0) { templateContext.item.likersCount--; }; $actionHelper.showToast('Post Like Removed');\"\n  }\n  action.item = card;\n  this.$actionHelper.callApi(action);\n}\n",
        "saveAndUnsaveCard": "function (card) {  let action =  {};\n  if(card.cardType === 'news') {\n    if (card.canSave) {\n      action.query = \"mutation { post { save(id: $templateContext->item.id) }}\" \n    } \n    else {\n      action.query = \"mutation { post { unsave(id: $templateContext->item.id) }}\"\n    }\n  } else {\n    if (card.canSave) {\n      action.query = \"mutation { event { save(id: $templateContext->item.id) }}\"  \n    } \n    else {\n      action.query = \"mutation { event { unsave(id: $templateContext->item.id) }}\"\n    }\n  }\n\n  if (card.canSave) {\n    action.postAction = \"templateContext.item.canSave = false; $actionHelper.notifiySubscribers(['saved-post']); $actionHelper.showToast('Post saved successfully');\"\n  } else {\n    action.postAction = \"templateContext.item.canSave = true; $actionHelper.notifiySubscribers(['saved-post']); $actionHelper.showToast('Removed from saved posts successfully');\"\n  }\n  action.item = card;\n  this.$actionHelper.callApi(action);          \n}\n"
      },
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "main-card"
          },
          "children": [
            {
              "element": "div"
            },
            {
              "element": "div",
              "attributes": {
                "class": "main-card-container with-actions"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "main-space"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "dataSource?.mainImage",
                        "class": "main-card-image"
                      },
                      "events": {
                        "click": "$actionHelper.showImage(dataSource?.mainImage, dataSource?.createrId, dataSource.createrName)"
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "class": "main-card-image-container",
                            "$ngIf": "(dataSource?.cardType === 'news' && dataSource?.mainImage || dataSource?.cardType === 'event') ? true: false"
                          },
                          "children": [
                            {
                              "element": "img",
                              "attributes": {
                                "id": "{{'card-details-image' + '-id'}}",
                                "src": "{{dataSource?.mainImage}}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "class": "actor-container"
                      },
                      "events": {
                        "click": "$actionHelper.navigateToDomain(dataSource.actorType, dataSource.actorId)"
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "class": "actor-name-image",
                            "id": "{{'card-details-image' + '-id'}}",
                            "$ngIf": "dataSource?.actorName"
                          },
                          "children": [
                            {
                              "element": "img",
                              "events": {
                                "error": "dataSource.actorImage = null"
                              },
                              "attributes": {
                                "$ngIf": "dataSource?.actorImage",
                                "src": "{{dataSource?.actorImage}}"
                              }
                            },
                            {
                              "element": "avatar-primitive",
                              "attributes": {
                                "$ngIf": "!dataSource?.actorImage"
                              },
                              "properties": {
                                "avatarSize": 24,
                                "avatarCornerRadius": 6,
                                "name": "dataSource?.actorName"
                              }
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "id": "{{'card-details-actor-' + dataSource?.actorName + '-id'}}",
                            "class": "actor-name",
                            "$ngIf": "dataSource?.actorName"
                          },
                          "properties": {
                            "$innerHTML": "dataSource?.actorName"
                          }
                        }
                      ]
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "dataSource?.title",
                        "class": "main-card-title",
                        "id": "{{'card-details-title-' + dataSource.title + '-id'}}"
                      },
                      "properties": {
                        "$innerHTML": "dataSource?.title"
                      }
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "dataSource?.cardType === 'news' &&  dataSource?.subTitle",
                        "class": "date",
                        "id": "{{'card-details-subtitle-' + dataSource.subTitle + '-id'}}"
                      },
                      "children": [
                        {
                          "element": "span",
                          "attributes": {
                            "class": "txt"
                          },
                          "properties": {
                            "$innerHTML": "dataSource?.subTitle"
                          }
                        }
                      ]
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "class": "event-details-container",
                        "$ngIf": "dataSource?.cardType === 'event' && (dataSource?.startDate || dataSource?.endDate)"
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "id": "{{'card-details-event-start-date-' + dataSource?.startDate + '-id'}}",
                            "class": "event-details",
                            "$ngIf": "dataSource?.startDate"
                          },
                          "children": [
                            {
                              "element": "img",
                              "attributes": {
                                "src": "assets/icon/dynamic-ui/Calendar.svg"
                              }
                            },
                            {
                              "element": "span",
                              "attributes": {
                                "class": "txt"
                              },
                              "properties": {
                                "$innerHTML": "dataSource?.startDate | date: 'dd MMM yyyy - hh:mm a'"
                              }
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "id": "{{'card-details-event-end-date-' + dataSource?.endDate + '-id'}}",
                            "class": "event-details",
                            "$ngIf": "dataSource?.endDate"
                          },
                          "children": [
                            {
                              "element": "img",
                              "attributes": {
                                "src": "assets/icon/dynamic-ui/Calendar.svg"
                              }
                            },
                            {
                              "element": "span",
                              "attributes": {
                                "class": "txt"
                              },
                              "properties": {
                                "$innerHTML": "dataSource?.endDate | date: 'dd MMM yyyy - hh:mm a'"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "class": "event-details-container",
                        "$ngIf": "dataSource?.cardType === 'event' && dataSource?.location"
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "class": "event-details"
                          },
                          "children": [
                            {
                              "element": "img",
                              "attributes": {
                                "src": "assets/icon/dynamic-ui/Location.svg"
                              }
                            },
                            {
                              "element": "div",
                              "attributes": {
                                "id": "{{'card-details-event-location-' + dataSource.location + '-id'}}",
                                "class": "txt"
                              },
                              "properties": {
                                "$innerHTML": "dataSource.location"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "id": "{{'card-details-subtitle-' + dataSource?.description + '-id'}}",
                        "class": "with-details-desc",
                        "$ngIf": "dataSource?.description"
                      },
                      "properties": {
                        "$innerHTML": "dataSource.description | nlbr | linkify"
                      }
                    }
                  ]
                },
                {
                  "element": "card-action-primitive",
                  "properties": {
                    "card": "dataSource"
                  },
                  "events": {
                    "likeAndUnlikeEventEmitter": "this.likeAndUnlikeCard($event)",
                    "saveAndUnsaveEventEmitter": "this.saveAndUnsaveCard($event)",
                    "shareEventEmitter": "$actionHelper.share( dataSource.cardType === 'event' ?  (initialDataSource?.firstName + ' ' +  initialDataSource?.lastName + ' shared an event with you via DiasporaID, the Global Lebanese Network') : (initialDataSource?.firstName + ' ' + initialDataSource?.lastName  + ' shared a post with you via DiasporaID, the Global Lebanese Network'),  dataSource.image, dataSource.title, (dataSource.cardType === 'event' ? (dataSource.location + ' via ' + dataSource.actorName ) : dataSource.description), dataSource.id, 'DisplayActivityDetails', dataSource.cardType)\n"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "offer-details-template",
      "functions": {
        "likeAndUnlikeCard": "function (card) {  let action =  {};\n\n  if (card.canLike) {\n    action.query = \"mutation { offer { like(id: $templateContext->item.id) }}\"\n    action.postAction = \"templateContext.item.canLike = false; templateContext.item.likersCount++; $actionHelper.showToast('You Liked this Offer');\"\n  } \n  else {\n    action.query = \"mutation { offer { unlike(id: $templateContext->item.id) }}\" \n    action.postAction = \"templateContext.item.canLike = true; if(templateContext.item.likersCount > 0) { templateContext.item.likersCount--; }; $actionHelper.showToast('Offer Like removed');\"\n  }\n  action.item = card;\n  this.$actionHelper.callApi(action);\n}\n",
        "saveAndUnsaveCard": "function (card) {  let action =  {};\n  if (card.canSave) {\n    action.query = \"mutation { offer { save(id: $templateContext->item.id) }}\"  \n  } \n  else {\n    action.query = \"mutation { offer { unsave(id: $templateContext->item.id) }}\"\n  }\n\n  if (card.canSave) {\n    action.postAction = \"templateContext.item.canSave = false; $actionHelper.notifiySubscribers(['saved-post']); $actionHelper.showToast('Offer saved successfully');\"\n  } else {\n    action.postAction = \"templateContext.item.canSave = true; $actionHelper.notifiySubscribers(['saved-post']); $actionHelper.showToast('Offer removed from your saved posts');\"\n  }\n  action.item = card;\n  this.$actionHelper.callApi(action);          \n}\n"
      },
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "main-card"
          },
          "children": [
            {
              "element": "div"
            },
            {
              "element": "div",
              "attributes": {
                "class": "main-card-container with-actions"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "main-space"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "dataSource?.mainImage",
                        "class": "main-card-image"
                      },
                      "children": [
                        {
                          "element": "div",
                          "events": {
                            "click": "$actionHelper.showImage(dataSource?.mainImage, dataSource?.createrId, dataSource.createrName)"
                          },
                          "attributes": {
                            "class": "main-card-image-container"
                          },
                          "children": [
                            {
                              "element": "img",
                              "attributes": {
                                "id": "{{'offer-details-image-id'}}",
                                "src": "{{dataSource?.mainImage}}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "class": "actor-container"
                      },
                      "events": {
                        "click": "$actionHelper.navigateToDomain(dataSource.actorType, dataSource.actorId)"
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "class": "actor-name-image",
                            "$ngIf": "dataSource?.actorName"
                          },
                          "children": [
                            {
                              "element": "img",
                              "events": {
                                "error": "dataSource.actorImage = null"
                              },
                              "attributes": {
                                "$ngIf": "dataSource?.actorImage",
                                "src": "{{dataSource?.actorImage}}"
                              }
                            },
                            {
                              "element": "avatar-primitive",
                              "attributes": {
                                "$ngIf": "!dataSource?.actorImage"
                              },
                              "properties": {
                                "avatarSize": 24,
                                "avatarCornerRadius": 6,
                                "name": "dataSource?.actorName"
                              }
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "actor-name",
                            "id": "{{'offer-details-actor-' + dataSource?.actorName + '-id'}}",
                            "$ngIf": "dataSource?.actorName"
                          },
                          "properties": {
                            "$innerHTML": "dataSource?.actorName"
                          }
                        }
                      ]
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "dataSource?.title",
                        "class": "main-card-title",
                        "id": "{{'offer-details-title-' + dataSource.title + '-id'}}"
                      },
                      "properties": {
                        "$innerHTML": "dataSource?.title"
                      }
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "dataSource?.subTitle",
                        "class": "date",
                        "id": "{{'offer-details-date-' + dataSource.subTitle + '-id'}}"
                      },
                      "children": [
                        {
                          "element": "span",
                          "attributes": {
                            "class": "txt"
                          },
                          "properties": {
                            "$innerHTML": "dataSource?.subTitle"
                          }
                        }
                      ]
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "id": "{{'offer-details-subtitle-' + dataSource?.description + '-id'}}",
                        "class": "with-details-desc",
                        "$ngIf": "dataSource?.description"
                      },
                      "properties": {
                        "$innerHTML": "dataSource.description"
                      }
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "dataSource?.countries && dataSource?.countries.length > 0"
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "class": "card-action-section-title"
                          },
                          "properties": {
                            "$innerHTML": "'Market Availability'"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "slider-badge"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "slider-badge-container"
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "class": "slider-badge-item",
                            "$ngFor": "let country of dataSource.countries"
                          },
                          "children": [
                            {
                              "element": "img",
                              "attributes": {
                                "id": "{{'offer-details-available-country-image-' + country.isoCode + '-id'}}",
                                "src": "{{ 'assets/icon/flag/' + country.isoCode.toLowerCase() + '.svg'}}"
                              }
                            },
                            {
                              "element": "div",
                              "attributes": {
                                "id": "{{'offer-details-available-country-title-' + country.name + '-id'}}",
                                "class": "slider-badge-txt"
                              },
                              "properties": {
                                "$innerHTML": "country.name"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "dataSource?.keywords && dataSource?.keywords.length > 0"
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "class": "main-space"
                          },
                          "children": [
                            {
                              "element": "div",
                              "attributes": {
                                "class": "card-action-section-title"
                              },
                              "properties": {
                                "$innerHTML": "'Keywords'"
                              }
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "card-action-chips"
                          },
                          "children": [
                            {
                              "element": "div",
                              "attributes": {
                                "class": "card-action-chips-container"
                              },
                              "children": [
                                {
                                  "element": "div",
                                  "attributes": {
                                    "$ngFor": "let keyword of dataSource.keywords",
                                    "class": "chips-carousel-item accent-one",
                                    "id": "{{'offer-details-sector-' + keyword.name + '-id'}}"
                                  },
                                  "properties": {
                                    "$innerHTML": "keyword.name"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "dataSource?.canSendMessageToOwner"
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "class": "card-action-section-title center"
                          },
                          "properties": {
                            "$innerHTML": "'Interested in This Listing?'"
                          }
                        },
                        {
                          "element": "button-primitive",
                          "properties": {
                            "text": "'Send Message'"
                          },
                          "events": {
                            "actionEmitter": "$actionHelper.navigateTo('conversationMessages/company/' + dataSource?.actorId + '/' + initialDataSource.userMailboxId + '/' + dataSource.actorMailbox)"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "card-action-primitive",
                  "properties": {
                    "card": "dataSource"
                  },
                  "events": {
                    "likeAndUnlikeEventEmitter": "this.likeAndUnlikeCard($event)",
                    "saveAndUnsaveEventEmitter": "this.saveAndUnsaveCard($event)",
                    "shareEventEmitter": "$actionHelper.share(  (initialDataSource.firstName + ' ' + initialDataSource.lastName + ' shared a ' + dataSource.offerType.toLowerCase() + ' listed by ' +  dataSource?.actorName + ' with you via DiasporaID, the Global Lebanese Business directory'), \ndataSource.image, dataSource.title, dataSource.description, dataSource.id, 'DiasporaOfferDetails')\n"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "card-comment",
      "functions": {
        "likeComment": "function(comment) {  let action =  {};\n  action.query = \"mutation { comment { like(id: $templateContext->additionalParameters.entityId) }}\"\n  action.postAction = \"templateContext.additionalParameters.comment.checkIfCanLike = false; templateContext.additionalParameters.comment.numberOfLikes++;  templateContext.additionalParameters.comment.checkIfCanUnlike = true; $actionHelper.showToast('Comment Liked');\"\n  action.item = comment;\n  action.additionalParameters = {'entityId': comment.id, 'comment': comment};\n  this.$actionHelper.callApi(action);\n}\n",
        "unlikeComment": "function(comment) {  let action =  {};\n  action.query = \"mutation { comment { unlike(id: $templateContext->additionalParameters.entityId) }}\"\n  action.postAction = \"templateContext.additionalParameters.comment.checkIfCanLike = true; if(templateContext.additionalParameters.comment.numberOfLikes > 0) { templateContext.additionalParameters.comment.numberOfLikes--; }; templateContext.additionalParameters.comment.checkIfCanUnlike = false; $actionHelper.showToast('Like removed');\"\n  action.item = comment;\n  action.additionalParameters = {'entityId': comment.id, 'comment': comment };\n  this.$actionHelper.callApi(action);\n}\n"
      },
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "card-with-right-action"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "class": "card-with-right-action-container"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "top-item"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "first-item"
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "class": "image"
                          },
                          "events": {
                            "click": "$actionHelper.navigateToDomain('Profile', dataSource.item.creatorId)"
                          },
                          "children": [
                            {
                              "element": "img",
                              "attributes": {
                                "id": "{{dataSource.containerId + '-image-' + dataSource.item.creatorImage + '-id'}}",
                                "$ngIf": "dataSource.item.creatorImage",
                                "src": "{{dataSource.item.creatorImage}}"
                              },
                              "events": {
                                "error": "dataSource.item.creatorImage = null"
                              }
                            },
                            {
                              "element": "avatar-primitive",
                              "attributes": {
                                "$ngIf": "!dataSource.item.creatorImage"
                              },
                              "properties": {
                                "avatarSize": 32,
                                "avatarCornerRadius": 6,
                                "name": "dataSource.item.creatorName"
                              }
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "txt-container"
                          },
                          "children": [
                            {
                              "element": "div",
                              "attributes": {
                                "id": "{{dataSource.containerId + '-image-' + dataSource.item.creatorName + '-id'}}",
                                "class": "title"
                              },
                              "properties": {
                                "$innerHTML": "dataSource.item.creatorName"
                              }
                            },
                            {
                              "element": "div",
                              "attributes": {
                                "id": "{{dataSource.containerId + '-image-' + dataSource.item.prettyDate + '-id'}}",
                                "class": "subtitle"
                              },
                              "properties": {
                                "$innerHTML": "dataSource.item.prettyDate + ' • ' + dataSource.item.numberOfLikes + (dataSource.item.numberOfLikes === 1 ? ' Like' : ' Likes' )"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "class": "second-item"
                      },
                      "children": [
                        {
                          "element": "img",
                          "attributes": {
                            "id": "{{dataSource.containerId + '-image-' + dataSource.item.creatorName + '-id'}}",
                            "src": "{{dataSource.actionIcon}}"
                          },
                          "events": {
                            "click": "(dataSource.item.myComment ? $actionHelper.openActionSheetWithConditions(initialDataSource?.commentActions, dataSource.item, dataSource.parentDataSource, {'activityId': $actionHelper.getActiveDomainId() }) : (dataSource.item.checkIfCanLike ? this.likeComment(dataSource.item) : this.unlikeComment(dataSource.item) ))"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "bottom-item",
                    "id": "{{dataSource.containerId + '-comment-' + dataSource.item.text + '-id'}}"
                  },
                  "properties": {
                    "$innerHTML": "dataSource.item.text"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "conversation-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "$ngIf": "dataSource?.item?.myMessage",
            "class": "conversation-page-item"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "class": "first-item"
              },
              "events": {
                "click": "$actionHelper.navigateToDomain(dataSource?.item?.conversationOwnerType, dataSource?.item?.conversationOwnerId)"
              },
              "children": [
                {
                  "element": "img",
                  "attributes": {
                    "$ngIf": "dataSource?.item?.conversationOwnerImage",
                    "src": "{{dataSource?.item?.conversationOwnerImage}}",
                    "id": "{{dataSource.containerId + '-image-' + dataSource.item.conversationOwnerImage + '-id'}}"
                  },
                  "events": {
                    "error": "dataSource.item.conversationOwnerImage = null"
                  }
                },
                {
                  "element": "avatar-primitive",
                  "attributes": {
                    "$ngIf": "!dataSource?.item?.conversationOwnerImage"
                  },
                  "properties": {
                    "avatarSize": 36,
                    "avatarCornerRadius": 8,
                    "name": "dataSource?.item?.conversationOwnerName"
                  }
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "class": "second-item"
              },
              "children": [
                {
                  "element": "div",
                  "events": {
                    "click": "$actionHelper.openLink($actionHelper.stylize(dataSource?.item?.messageText))"
                  },
                  "attributes": {
                    "class": "text",
                    "id": "{{dataSource.containerId + '-message-' + dataSource.item.messageText + '-id'}}"
                  },
                  "properties": {
                    "$innerHTML": "dataSource?.item?.messageText | nlbr"
                  }
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "details",
                    "id": "{{dataSource.containerId + '-date-' + dataSource.item.messageDate + '-id'}}"
                  },
                  "properties": {
                    "$innerHTML": "dataSource?.item?.messageDate | date: 'MMM d, y hh:mm a'"
                  }
                }
              ]
            }
          ]
        },
        {
          "element": "div",
          "attributes": {
            "$ngIf": "!dataSource?.item?.myMessage",
            "class": "conversation-page-item received"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "class": "first-item"
              },
              "events": {
                "click": "$actionHelper.navigateToDomain(dataSource?.item?.conversationOwnerType, dataSource?.item?.conversationOwnerId)"
              },
              "children": [
                {
                  "element": "img",
                  "attributes": {
                    "$ngIf": "dataSource?.item?.conversationOwnerImage",
                    "src": "{{dataSource?.item?.conversationOwnerImage}}"
                  },
                  "events": {
                    "error": "dataSource.item.conversationOwnerImage = null"
                  }
                },
                {
                  "element": "avatar-primitive",
                  "attributes": {
                    "$ngIf": "!dataSource?.item?.conversationOwnerImage"
                  },
                  "properties": {
                    "avatarSize": 36,
                    "avatarCornerRadius": 8,
                    "name": "dataSource?.item?.conversationOwnerName"
                  }
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "class": "second-item"
              },
              "children": [
                {
                  "element": "div",
                  "events": {
                    "click": "$actionHelper.openLink($actionHelper.stylize(dataSource?.item?.messageText))"
                  },
                  "attributes": {
                    "class": "text"
                  },
                  "properties": {
                    "$innerHTML": "dataSource?.item?.messageText | nlbr"
                  }
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "details"
                  },
                  "properties": {
                    "$innerHTML": "dataSource?.item?.messageDate | date: 'MMM d, y hh:mm a'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "offers-list-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "card-product-item"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "class": "card-product-image"
              },
              "children": [
                {
                  "element": "img",
                  "attributes": {
                    "#imageCard": "",
                    "id": "{{dataSource.containerId + '-image-' + dataSource.item.image + '-id'}}",
                    "src": "{{dataSource.item.image}}",
                    "$ngIf": "dataSource.item.image"
                  },
                  "events": {
                    "load": "$actionHelper.getImageBackgroundColor(imageCard);",
                    "error": "dataSource.item.image = null"
                  }
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "id": "{{dataSource.containerId + '-title-' + dataSource.item.title + '-id'}}",
                "class": "card-product-desc"
              },
              "properties": {
                "$innerHTML": "dataSource.item.title"
              }
            },
            {
              "element": "div",
              "attributes": {
                "class": "card-product-location"
              },
              "children": [
                {
                  "element": "img",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-icon-' + dataSource.item.icon + '-id'}}",
                    "src": "{{dataSource.item.icon}}"
                  }
                },
                {
                  "element": "span",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-location-' + dataSource.item.location + '-id'}}",
                    "class": "txt"
                  },
                  "properties": {
                    "$innerHTML": "dataSource.item.location"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "offer-card-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "card-product-item"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "class": "card-product-image"
              },
              "children": [
                {
                  "element": "img",
                  "attributes": {
                    "#imageCard": "",
                    "id": "{{dataSource.containerId + '-image-' + dataSource.item.image + '-id'}}",
                    "src": "{{dataSource.item.image}}",
                    "$ngIf": "dataSource.item.image"
                  },
                  "events": {
                    "load": "$actionHelper.getImageBackgroundColor(imageCard);",
                    "error": "dataSource.item.image = null"
                  }
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "id": "{{dataSource.containerId + '-title-' + dataSource.item.title + '-id'}}",
                "class": "card-product-desc"
              },
              "properties": {
                "$innerHTML": "dataSource.item.title"
              }
            },
            {
              "element": "div",
              "attributes": {
                "class": "card-product-location"
              },
              "children": [
                {
                  "element": "img",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-icon-' + dataSource.item.icon + '-id'}}",
                    "src": "{{dataSource.item.icon}}"
                  }
                },
                {
                  "element": "span",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-location-' + dataSource.item.location + '-id'}}",
                    "class": "txt"
                  },
                  "properties": {
                    "$innerHTML": "dataSource.item.location"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "event-list-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "event-card-item"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "class": "event-card-image"
              },
              "children": [
                {
                  "element": "img",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-image-' + dataSource.item.image + '-id'}}",
                    "src": "{{dataSource.item.image}}"
                  },
                  "events": {
                    "error": "dataSource.item.image = null"
                  }
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "class": "event-card-bottom-item"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "event-card-date"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "day"
                      },
                      "properties": {
                        "$innerHTML": "dataSource.item.dateDay"
                      }
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "class": "month"
                      },
                      "properties": {
                        "$innerHTML": "dataSource.item.dateMonth"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "event-card-desc"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "event-card-title",
                        "id": "{{dataSource.containerId + '-title-' + dataSource.item.title + '-id'}}"
                      },
                      "properties": {
                        "$innerHTML": "dataSource.item.title"
                      }
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "class": "event-card-subtitle",
                        "id": "{{dataSource.containerId + '-subtitle-' + dataSource.item.subtitle + '-id'}}"
                      },
                      "properties": {
                        "$innerHTML": "dataSource.item.subTitle"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "message-list-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "list-with-left-image-with-hints-container"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "$ngIf": "dataSource?.item?.myMessage ? (dataSource.item.receiverMailboxOwnerImage) : (dataSource.item.senderMailboxOwnerImage)",
                "class": "first-item"
              },
              "children": [
                {
                  "element": "img",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-image-' + dataSource?.item?.myMessage ? (dataSource.item.receiverMailboxOwnerImage) : (dataSource.item.senderMailboxOwnerImage) + '-id'}}",
                    "src": "{{dataSource?.item?.myMessage ? (dataSource.item.receiverMailboxOwnerImage) : (dataSource.item.senderMailboxOwnerImage)}}"
                  },
                  "events": {
                    "error": "dataSource?.item?.myMessage ? dataSource.item.receiverMailboxOwnerImage = null : dataSource.item.senderMailboxOwnerImage = null"
                  }
                }
              ]
            },
            {
              "element": "avatar-primitive",
              "attributes": {
                "$ngIf": "dataSource?.item?.myMessage ? !dataSource.item.receiverMailboxOwnerImage : !dataSource.item.senderMailboxOwnerImage"
              },
              "properties": {
                "avatarSize": 54,
                "avatarCornerRadius": 12,
                "name": "dataSource?.item?.myMessage ? dataSource.item.receiverMailboxOwnerName :  dataSource.item.senderMailboxOwnerName"
              }
            },
            {
              "element": "div",
              "attributes": {
                "class": "middle-item"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "id": "{{dataSource.containerId + '-image-' + dataSource?.item?.myMessage ? dataSource.item.receiverMailboxOwnerName :  dataSource.item.senderMailboxOwnerName + '-id'}}",
                    "class": "title"
                  },
                  "properties": {
                    "$innerHTML": "dataSource?.item?.myMessage ? dataSource.item.receiverMailboxOwnerName :  dataSource.item.senderMailboxOwnerName"
                  }
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "subtitle"
                  },
                  "properties": {
                    "$innerHTML": "dataSource.item.lastMessageText"
                  }
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "class": "last-item"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "hint-last-item"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": " dataSource.item.lastMessageDate",
                        "class": "time"
                      },
                      "properties": {
                        "$innerHTML": "dataSource.item.lastMessageDate | date:'d MMM'"
                      }
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": " dataSource.item.totalUnreadMessages > 0",
                        "class": "count"
                      },
                      "properties": {
                        "$innerHTML": "dataSource.item.totalUnreadMessages"
                      }
                    }
                  ]
                },
                {
                  "element": "img",
                  "attributes": {
                    "src": "{{dataSource.actionIcon}}"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "tab-template",
      "templateDefinition": [
        {
          "element": "ion-tabs",
          "children": [
            {
              "element": "ion-tab-bar",
              "attributes": {
                "slot": "bottom"
              },
              "children": [
                {
                  "element": "ion-tab-button",
                  "attributes": {
                    "$ngFor": "let tab of $actionHelper.uiDefinition.applicationTabs",
                    "tab": "{{tab.id}}"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "tab-button-icon"
                      },
                      "children": [
                        {
                          "element": "img",
                          "attributes": {
                            "src": "{{tab.icon}}"
                          }
                        },
                        {
                          "element": "img",
                          "attributes": {
                            "class": "active",
                            "src": "{{tab.activeIcon}}"
                          }
                        }
                      ]
                    },
                    {
                      "element": "ion-label",
                      "attributes": {
                        "class": "bottom-bar-inactive"
                      },
                      "properties": {
                        "$innerHTML": "tab.label"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "element": "ng-container",
              "properties": {
                "ngTemplateOutlet": "'tabTemplate'"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "gallery-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "$ngIf": "dataSource.item.type === 'ImageMedia'",
            "class": "gallery-item",
            "id": "{{dataSource.containerId + '-image' + '-id'}}",
            "style": "background: url({{dataSource.item.thumbnailUrl}})"
          }
        },
        {
          "element": "div",
          "attributes": {
            "$ngIf": "dataSource.item.type === 'VideoLinkMedia'",
            "id": "{{dataSource.containerId + '-yt_image' + '-id'}}",
            "class": "gallery-item yt-icon",
            "style": "background: url({{dataSource.item.thumbnailUrl}})"
          }
        }
      ]
    },
    {
      "name": "manage-notification-template",
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "manage-notification-item"
          },
          "children": [
            {
              "element": "div",
              "properties": {
                "$innerHTML": "dataSource.item.key"
              }
            },
            {
              "element": "div",
              "attributes": {
                "class": "manage-checkBox-container"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "checkbox"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "container"
                      },
                      "children": [
                        {
                          "element": "label",
                          "class": "container",
                          "children": [
                            {
                              "element": "input",
                              "attributes": {
                                "type": "checkbox"
                              },
                              "properties": {
                                "(ngModel)": "dataSource.item.pushEnabled"
                              }
                            },
                            {
                              "element": "span",
                              "attributes": {
                                "class": "checkmark"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "checkbox"
                  },
                  "children": [
                    {
                      "element": "div",
                      "atrributes": {
                        "class": "container"
                      },
                      "children": [
                        {
                          "element": "label",
                          "attributes": {
                            "class": "container"
                          },
                          "children": [
                            {
                              "element": "input",
                              "attributes": {
                                "type": "checkbox"
                              },
                              "properties": {
                                "(ngModel)": "dataSource.item.emailEnabled"
                              }
                            },
                            {
                              "element": "span",
                              "attributes": {
                                "class": "checkmark"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "company-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkMainEntity(this.dataSource, followInfo);                \n        $actionHelper.checkFollowList(this.dataSource.teamMembers, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.admins, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.currentAffiliations, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "changeDetectionSubjects": [
        "edit-company",
        "manage-company-team-members",
        "manage-company-administrators",
        "add-company-administrators",
        "manage-company-branches",
        "manage-company-affiliations",
        "manage-company",
        "manage-organization",
        "add-post",
        "add-event",
        "add-media",
        "delete-image",
        "add-offer",
        "edit-post",
        "delete-post",
        "add-business-role",
        "edit-business-role"
      ],
      "templateDefinition": [
        {
          "element": "ion-content",
          "attributes": {
            "class": "{{ (dataSource?.canManage || !dataSource?.canCreateRoleAction) ? 'animated-skeleton-loading grayBg full-screen with-fabButton' : 'animated-skeleton-loading grayBg full-screen'}}"
          },
          "children": [
            {
              "element": "skeleton-primitive",
              "properties": {
                "skeletonType": "'domain-page-skeleton'"
              },
              "attributes": {
                "class": "{{isLoading ? '' : 'hidden'}}"
              }
            },
            {
              "element": "div",
              "attributes": null,
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "main-card-seperator"
                  },
                  "children": [
                    {
                      "element": "main-card-primitive",
                      "children": [
                        {
                          "element": "cover-image-primitive",
                          "properties": {
                            "coverImageUrl": "''",
                            "hasTopBar": true,
                            "overlayType": "'accent-one'",
                            "topBarType": "'simple_top_bar'",
                            "leftIcon": "'assets/icon/dynamic-ui/Back_White.svg'",
                            "leftIconId": "'company-page-cover-image-primitive-back-id'",
                            "rightIcon": "'assets/icon/dynamic-ui/Dots_White.svg'",
                            "rightIconId": "'company-page-cover-image-primitive-dots-id'"
                          },
                          "events": {
                            "leftActionEmitter": "$actionHelper.goBackPage()",
                            "rightActionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource.mainCompanyActions, null, dataSource, {'loggedinFirstName': initialDataSource.firstName, 'loggedinLastName': initialDataSource.lastName})"
                          }
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "profile-details"
                          },
                          "children": [
                            {
                              "element": "div",
                              "attributes": {
                                "class": "profile-details-container"
                              },
                              "children": [
                                {
                                  "element": "logo-primitive",
                                  "properties": {
                                    "logoUrl": "$dynamicUiExtraService.getCompanyImage(dataSource)",
                                    "logoId": "'company-page-logo-primitive-logo-id'",
                                    "name": "$dynamicUiExtraService.getCompanyName(dataSource)"
                                  },
                                  "events": {
                                    "logoEvent": "$actionHelper.showImage($dynamicUiExtraService.getCompanyMainImage(dataSource), $dynamicUiExtraService.getCompanyId(dataSource), $dynamicUiExtraService.getCompanyName(dataSource))",
                                    "avatarEvent": "dataSource?.canManage ? $actionHelper.navigateToSubPage('company/edit'): null"
                                  }
                                },
                                {
                                  "element": "title-primitive",
                                  "properties": {
                                    "title": "$dynamicUiExtraService.getCompanyName(dataSource)",
                                    "titleId": "'company-page-title-primitive-title-' + $dynamicUiExtraService.getCompanyName(dataSource) + '-id'",
                                    "titleColor": "'accent-one'"
                                  }
                                },
                                {
                                  "element": "badges-primitive",
                                  "properties": {
                                    "badgeContainerId": "'company-page-badges-primitive'",
                                    "badges": "dataSource?.badges"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "main-buttons-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.canManage"
                      },
                      "properties": {
                        "leftButtonTitle": "'Manage'",
                        "leftButtonTitleId": "'company-page-main-buttons-primitive-manage-id'",
                        "leftButtonIcon": "'assets/icon/dynamic-ui/Manage_Green.svg'",
                        "leftButtonDisabled": "!dataSource?.canManage",
                        "rightButtonTitle": "'Invite'",
                        "rightButtonTitleId": "'company-page-main-buttons-primitive-invite-id'",
                        "rightButtonIcon": "'assets/icon/dynamic-ui/Invite_Green.svg'",
                        "rightButtonDisabled": "!dataSource?.canInvite"
                      },
                      "events": {
                        "leftButtonActionEmitter": "$actionHelper.navigateToSubPage('company/manageCompany')",
                        "rightButtonActionEmitter": "$actionHelper.share(\ninitialDataSource.firstName + ' ' + initialDataSource.lastName + ' is inviting you to list your profile on ' + $dynamicUiExtraService.getCompanyName(dataSource) + '. Join the team, get updates and explore business opportunities!',\n$dynamicUiExtraService.getCompanyImage(dataSource),\n'Join the ' + $dynamicUiExtraService.getCompanyName(dataSource) + ' Team on DiasporaID',\n'The Global Lebanese Business Network',\n$dynamicUiExtraService.getCompanyId(dataSource), 'DiasporaCompany')"
                      }
                    },
                    {
                      "element": "main-buttons-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.canFollow && !dataSource?.canUnFollow && !dataSource?.canManage"
                      },
                      "properties": {
                        "leftButtonTitle": "'Follow'",
                        "leftButtonTitleId": "'company-page-main-buttons-primitive-follow-id'",
                        "leftButtonIcon": "'assets/icon/dynamic-ui/follow_white.svg'",
                        "rightButtonTitle": "'Message'",
                        "rightButtonTitleId": "'company-page-main-buttons-primitive-message-id'",
                        "rightButtonIcon": "'assets/icon/dynamic-ui/message.svg'",
                        "rightButtonDisabled": "!dataSource?.canSendMessage"
                      },
                      "events": {
                        "leftButtonActionEmitter": "$actionHelper.linkDomain('Company', $dynamicUiExtraService.getCompanyId(dataSource), dataSource)",
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('conversationMessages/company/' + $dynamicUiExtraService.getCompanyId(dataSource) + '/' + initialDataSource.userMailboxId + '/' + dataSource.receiverMailboxId)"
                      }
                    },
                    {
                      "element": "main-buttons-primitive",
                      "attributes": {
                        "$ngIf": "!dataSource?.canFollow && dataSource?.canUnFollow && !dataSource?.canManage"
                      },
                      "properties": {
                        "leftButtonTitle": "'Following'",
                        "leftButtonTitleId": "'company-page-main-buttons-primitive-following-id'",
                        "leftButtonIcon": "'assets/icon/dynamic-ui/Following_white.svg'",
                        "leftButtonDisabled": "!dataSource?.canUnFollow",
                        "rightButtonTitle": "'Message'",
                        "rightButtonTitleId": "'company-page-main-buttons-primitive-message-id'",
                        "rightButtonIcon": "'assets/icon/dynamic-ui/message.svg'",
                        "rightButtonDisabled": "!dataSource?.canSendMessage"
                      },
                      "events": {
                        "leftButtonActionEmitter": "$actionHelper.unLinkDomain('Company', $dynamicUiExtraService.getCompanyId(dataSource), dataSource)",
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('conversationMessages/company/' + $dynamicUiExtraService.getCompanyId(dataSource) + '/' + initialDataSource.userMailboxId + '/' + dataSource.receiverMailboxId)"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.generalDetailsInfo && dataSource?.generalDetailsInfo.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/About_Active.svg'",
                        "mainIconId": "'company-page-about-section-block-header-primitive-main-icon-id'",
                        "title": "'About'",
                        "titleId": "'company-page-about-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Info, sector & contact details'",
                        "subTitleId": "'company-page-about-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "dataSource?.canManage",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'company-page-about-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "'Edit'",
                        "actionLabelId": "'company-page-about-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('company/edit/' + $dynamicUiExtraService.getCompanyId(dataSource))"
                      }
                    },
                    {
                      "element": "about-primitive",
                      "properties": {
                        "aboutUsContainerId": "'company-page-about-us-primitive'",
                        "aboutUsItems": "dataSource?.generalDetailsInfo",
                        "characterLimit": 500,
                        "unTruncatedText": "'Show More'",
                        "truncatedText": "'Show Less'"
                      },
                      "events": {
                        "emptyStateActionEmitter": "(dataSource?.canManage) ? $actionHelper.navigateTo('company/edit/' + $dynamicUiExtraService.getCompanyId(dataSource)) : null"
                      }
                    },
                    {
                      "element": "social-media-strip-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.socialMediaInfo && dataSource?.socialMediaInfo.length > 0)"
                      },
                      "properties": {
                        "socialMediaContainerId": "'company-page-social-media-strip-primitive'",
                        "socialMediaItems": "dataSource?.socialMediaInfo",
                        "showEmptyState": "dataSource?.canManage",
                        "icon": "'assets/icon/dynamic-ui/Social.svg'",
                        "iconId": "'company-page-social-media-strip-primitive-icon-id'",
                        "title": "'Social Media'",
                        "titleId": "'company-page-social-media-strip-primitive-title-id'",
                        "emptyStateMessage": "'Add Social Media Links'",
                        "emptyStateMessageId": "'company-page-social-media-strip-primitive-empty-state-message-id'"
                      },
                      "events": {
                        "emptyStateActionEmitter": "(dataSource?.canManage) ? $actionHelper.navigateTo('company/edit/' + $dynamicUiExtraService.getCompanyId(dataSource)) : null"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "{{dataSource?.teamMembers && dataSource?.teamMembers.length > 0 ? 'border-separtor pdb-0' : 'border-separtor'}}",
                    "$ngIf": "(dataSource?.canManage && dataSource?.teamMembers && dataSource?.teamMembers.length > 0) ||\n(dataSource?.canManage && dataSource?.canInvite && (!dataSource?.teamMembers || dataSource?.teamMembers.length == 0)) ||\n(!dataSource?.canManage && dataSource?.teamMembers && dataSource?.teamMembers.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/People_Active.svg'",
                        "mainIconId": "'company-page-team-members-section-block-header-primitive-main-icon-id'",
                        "title": "'Team Members'",
                        "titleId": "'company-page-team-members-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Company leadership & staff'",
                        "subTitleId": "'company-page-team-members-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.teamMembers && dataSource?.teamMembers.length > 0) || (!dataSource?.canManage && dataSource?.teamMembers && dataSource?.teamMembers.length > 0) ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'company-page-team-members-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'company-page-team-members-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "(dataSource?.canManage && dataSource?.canManage) ? $actionHelper.navigateTo('company/manageCompanyTeamMembers/' + $dynamicUiExtraService.getCompanyId(dataSource)) : $actionHelper.navigateTo('company/viewCompanyTeamMembers/'+ $dynamicUiExtraService.getCompanyId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.teamMembers && dataSource?.teamMembers.length > 0"
                      },
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.teamMembers"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('profile/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'company-page-team-members-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'company-page-team-members-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'company-page-team-members-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.canManage && dataSource?.canInvite && (!dataSource?.teamMembers || dataSource?.teamMembers.length === 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Person.svg'",
                        "imageId": "'company-page-team-members-section-empty-state-primitive-image-id'",
                        "title": "'Invite members of your company to register their roles'",
                        "titleId": "'company-page-team-members-section-empty-state-primitive-title-id'",
                        "buttonLabel": "'Invite Company Members'",
                        "buttonId": "'company-page-team-members-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.share(\ninitialDataSource.firstName + ' ' + initialDataSource.lastName + ' is inviting you to list your profile on ' + $dynamicUiExtraService.getCompanyName(dataSource) + '. Join the team, get updates and explore business opportunities!',\n$dynamicUiExtraService.getCompanyImage(dataSource),\n'Join the ' + $dynamicUiExtraService.getCompanyName(dataSource) + ' Team on DiasporaID',\n'The Global Lebanese Business Network',\n$dynamicUiExtraService.getCompanyId(dataSource), 'DiasporaCompany')"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "(dataSource?.admins && dataSource?.admins.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/administrators.svg'",
                        "mainIconId": "'company-page-admins-section-block-header-primitive-main-icon-id'",
                        "title": "'Administrators'",
                        "titleId": "'company-page-admins-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Page administrators'",
                        "subTitleId": "'company-page-admins-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.admins && dataSource?.admins.length > 0) || (!dataSource?.canManage && dataSource?.admins && dataSource?.admins.length > 0) ? true : false ",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'company-page-admins-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'company-page-admins-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "dataSource?.canManage ? $actionHelper.navigateTo('company/manageCompanyAdministrator/' + $dynamicUiExtraService.getCompanyId(dataSource)) : $actionHelper.navigateTo('company/viewCompanyAdministrator/' + $dynamicUiExtraService.getCompanyId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.admins"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('profile/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'company-page-admins-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'company-page-admins-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'company-page-admins-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "{{dataSource?.currentAffiliations && dataSource?.currentAffiliations.length > 0 ? 'border-separtor pdb-0' : 'border-separtor'}}",
                    "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.currentAffiliations && dataSource?.currentAffiliations.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/affiliation.svg'",
                        "mainIconId": "'company-page-affiliation-section-block-header-primitive-main-icon-id'",
                        "title": "'Member of'",
                        "titleId": "'company-page-affiliation-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Affiliations with other entities'",
                        "subTitleId": "'company-page-affiliation-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.currentAffiliations && dataSource?.currentAffiliations.length > 0) || (!dataSource?.canManage && dataSource?.currentAffiliations && dataSource?.currentAffiliations.length > 0) ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'company-page-affiliation-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'company-page-affiliation-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "dataSource?.canManage ? $actionHelper.navigateTo('company/manageCompanyAffiliations/' + $dynamicUiExtraService.getCompanyId(dataSource)) : $actionHelper.navigateTo('company/viewCompanyAffiliations/' + $dynamicUiExtraService.getCompanyId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.currentAffiliations && dataSource?.currentAffiliations.length > 0"
                      },
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.currentAffiliations"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('organization/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'company-page-affiliation-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Organization', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'company-page-affiliation-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Organization', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'company-page-affiliation-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.canManage && (!dataSource?.currentAffiliations || dataSource?.currentAffiliations.length == 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Member_Companies.svg'",
                        "imageId": "'company-page-affiliation-section-empty-state-primitive-image-id'",
                        "title": "'Listed under a chamber, accelerator, or a business support organization?'",
                        "titleId": "'company-page-affiliation-section-empty-state-primitive-title-id'",
                        "buttonLabel": "dataSource?.canManage ? 'Add Affiliated Entities' : null",
                        "buttonId": "'company-page-affiliation-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('company/manageCompanyAffiliations/' + $dynamicUiExtraService.getCompanyId(dataSource));"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "dataSource?.products && dataSource?.products.length > 0"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/Products_market.svg'",
                        "mainIconId": "'company-page-products-section-block-header-primitive-main-icon-id'",
                        "title": "'Products'",
                        "titleId": "'company-page-products-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Listed by this company'",
                        "subTitleId": "'company-page-products-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "dataSource?.products && dataSource?.products.length > 0 ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'company-page-products-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'company-page-products-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "dataSource?.canManage ? $actionHelper.navigateTo('company/manageCompanyMarketPlace/' + $dynamicUiExtraService.getCompanyId(dataSource)) : $actionHelper.navigateTo('company/viewCompanyProducts/' + $dynamicUiExtraService.getCompanyId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.products && dataSource?.products.length > 0"
                      },
                      "properties": {
                        "listType": "'offer-list'",
                        "arrayOfItems": "dataSource?.products"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "offers-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('offerDetails/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'company-page-products-item' }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "dataSource?.services && dataSource?.services.length > 0"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/Services_market.svg'",
                        "mainIconId": "'company-page-services-section-block-header-primitive-main-icon-id'",
                        "title": "'Services'",
                        "titleId": "'company-page-services-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Listed by this company'",
                        "subTitleId": "'company-page-services-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "dataSource?.services && dataSource?.services.length > 0 ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'company-page-services-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'company-page-services-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "dataSource?.canManage ? $actionHelper.navigateTo('company/manageCompanyMarketPlace/' + $dynamicUiExtraService.getCompanyId(dataSource)) : $actionHelper.navigateTo('company/viewCompanyServices/' + $dynamicUiExtraService.getCompanyId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.services && dataSource?.services.length > 0"
                      },
                      "properties": {
                        "listType": "'offer-list'",
                        "arrayOfItems": "dataSource?.services"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "offers-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('offerDetails/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'company-page-services-item' }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "dataSource?.franchises && dataSource?.franchises.length > 0"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/Franchise_Inactive.svg'",
                        "mainIconId": "'company-page-franchises-section-block-header-primitive-main-icon-id'",
                        "title": "'Franchises'",
                        "titleId": "'company-page-franchises-section-block-header-primitive-title-id'",
                        "titleFontColor": null,
                        "subTitle": "'Listed by this company'",
                        "subTitleId": "'company-page-franchises-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "dataSource?.franchises && dataSource?.franchises.length > 0 ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'company-page-franchises-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'company-page-franchises-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "dataSource?.canManage ? $actionHelper.navigateTo('company/manageCompanyMarketPlace/' + $dynamicUiExtraService.getCompanyId(dataSource)) : $actionHelper.navigateTo('company/viewCompanyFranchises/' + $dynamicUiExtraService.getCompanyId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.franchises && dataSource?.franchises.length > 0"
                      },
                      "properties": {
                        "listType": "'offer-list'",
                        "arrayOfItems": "dataSource?.franchises"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "offers-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('offerDetails/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'company-page-franchises-item' }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "dataSource?.canManage && (!dataSource?.products || dataSource?.products == 0) && (!dataSource?.services || dataSource?.services == 0) && (!dataSource?.franchises || dataSource?.franchises == 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/Franchise_Inactive.svg'",
                        "mainIconId": "'company-page-market-place-block-header-primitive-main-icon-id'",
                        "title": "'Marketplace Listings'",
                        "titleId": "'company-page-market-place-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Products, Services, Franchises'",
                        "subTitleId": "'company-page-market-place-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": false
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": null,
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Marketplace_Listings.svg'",
                        "imageId": "'company-page-market-place-empty-state-primitive-image-id'",
                        "title": "'Access global markets, Lebanese clients and franchise seekers'",
                        "titleId": "'company-page-market-place-empty-state-primitive-title-id'",
                        "buttonLabel": "'Add Business Listings'",
                        "buttonId": "'company-page-market-place-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource?.companyOffersActions, null, dataSource, {targetId: $dynamicUiExtraService.getCompanyId(dataSource), targetName: $dynamicUiExtraService.getCompanyName(dataSource), targetImage: $dynamicUiExtraService.getCompanyImage(dataSource)} )"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "dataSource?.brands && dataSource?.brands.length > 0"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/brands.svg'",
                        "mainIconId": "'company-page-brands-section-block-header-primitive-main-icon-id'",
                        "title": "'Brands'",
                        "titleId": "'company-page-brands-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Brands offered by this company'",
                        "subTitleId": "'company-page-brands-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'"
                      }
                    },
                    {
                      "element": "chips-primitive",
                      "properties": {
                        "chipsType": "'simple-chips'",
                        "arrayOfItems": "dataSource?.brands"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#chipItemsTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "chips-template",
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'company-page-brands-item'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "{{dataSource?.branches && dataSource?.branches.length > 0 ? 'border-separtor pdb-0' : 'border-separtor'}}",
                    "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.branches && dataSource?.branches.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/branches_gray.svg'",
                        "mainIconId": "'company-page-branches-section-block-header-primitive-main-icon-id'",
                        "title": "'Branches'",
                        "titleId": "'company-page-branches-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Company hierarchy'",
                        "subTitleId": "'company-page-branches-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.branches && dataSource?.branches.length > 0) || (!dataSource?.canManage && dataSource?.branches && dataSource?.branches.length > 0) ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'company-page-branches-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'company-page-branches-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "dataSource?.canManage ? $actionHelper.navigateTo('company/manageCompanyBranches/' + $dynamicUiExtraService.getCompanyId(dataSource)) : $actionHelper.navigateTo('company/viewCompanyBranches/'  + $dynamicUiExtraService.getCompanyId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.branches && dataSource?.branches.length > 0"
                      },
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.branches"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('company/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'company-page-branches-item'}"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.canManage && (!dataSource?.branches || dataSource?.branches.length === 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Branches.svg'",
                        "imageId": "'company-page-branches-section-empty-state-primitive-image-id'",
                        "title": "'Every branch in a company can indicate its parent branch'",
                        "titleId": "'company-page-branches-section-empty-state-primitive-title-id'",
                        "buttonLabel": "dataSource?.canManage? 'Choose Your Parent Branch' : null",
                        "buttonId": "'company-page-branches-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('company/manageCompanyBranches/' + $dynamicUiExtraService.getCompanyId(dataSource))"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor box-type",
                    "$ngIf": "dataSource?.canCreateRoleAction"
                  },
                  "children": [
                    {
                      "element": "box-card-primitive",
                      "properties": {
                        "title": "'Work for This Company?'",
                        "titleId": "'company-page-create-role-title-id'",
                        "subTitle": "'Join now and indicate your role'",
                        "subTitleId": "'company-page-create-role-subtitle-id'",
                        "arrayOfItems": "initialDataSource?.companyMemberBoxActions"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#boxItemsTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "box-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('profile/addCompanyRole/' + $dynamicUiExtraService.getCompanyId(dataSource), {'companyId': $dynamicUiExtraService.getCompanyId(dataSource), userId: initialDataSource.profileId})"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'company-page-create-role', 'topNetworker': false, 'lastIcon': 'assets/icon/dynamic-ui/Arrow_Right.svg'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "((dataSource?.canManage) || (!dataSource?.canCreateRoleAction) && (dataSource?.canAddPost || dataSource?.canAddEvent)) || (!dataSource?.canManage && dataSource?.updates && dataSource?.updates.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/News_Active.svg'",
                        "mainIconId": "'company-page-updates-section-block-header-primitive-main-icon-id'",
                        "title": "'Updates'",
                        "titleId": "'company-page-updates-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Posts & discussions'",
                        "subTitleId": "'company-page-updates-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.updates && dataSource?.updates.length > 0) || (!dataSource?.canManage && dataSource?.updates && dataSource?.updates.length > 0) ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'company-page-updates-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'company-page-updates-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('updates/company/' + $dynamicUiExtraService.getCompanyId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.updates && dataSource?.updates.length > 0"
                      },
                      "properties": {
                        "listType": "'news-list'",
                        "arrayOfItems": "dataSource?.updates"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "list-with-right-image-template",
                              "events": {
                                "click": "$actionHelper.navigateTo(item.type == 'Post' ? ('postDetails/' + item.id) : ('eventDetails/' + item.id))"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'company-page-updates-item'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.canManage || !dataSource?.canCreateRoleAction) && (!dataSource?.updates || dataSource?.updates.length === 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Post_Update.svg'",
                        "imageId": "'company-page-updates-section-empty-state-primitive-image-id'",
                        "title": "'Notify followers and potential clients of important updates'",
                        "titleId": "'company-page-updates-section-empty-state-primitive-title-id'",
                        "buttonLabel": "(dataSource?.canAddPost || dataSource?.canAddEvent) ? 'Post News or Events': null",
                        "buttonId": "'company-page-updates-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource.companyNewsAndEventsActions, null, dataSource, {targetId: $dynamicUiExtraService.getCompanyId(dataSource), targetName: $dynamicUiExtraService.getCompanyName(dataSource), targetImage: $dynamicUiExtraService.getCompanyImage(dataSource)} )"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.gallery && dataSource?.gallery.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/View_Gallery.svg'",
                        "mainIconId": "'company-page-gallery-section-block-header-primitive-main-icon-id'",
                        "title": "'Media Gallery'",
                        "titleId": "'company-page-gallery-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Photos & videos'",
                        "subTitleId": "'company-page-gallery-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.gallery && dataSource?.gallery.length > 0) || (!dataSource?.canManage && dataSource?.gallery && dataSource?.gallery.length > 0) ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'company-page-gallery-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'company-page-gallery-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('gallery/company/' + $dynamicUiExtraService.getCompanyId(dataSource))"
                      }
                    },
                    {
                      "element": "media-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.gallery && dataSource?.gallery.length > 0"
                      },
                      "events": {
                        "click": "$actionHelper.navigateTo('gallery/company/' + $dynamicUiExtraService.getCompanyId(dataSource))"
                      },
                      "properties": {
                        "mediaContainerId": "'company-page-gallery'",
                        "youtubeIcon": "'assets/icon/dynamic-ui/YouTube_Video.svg'",
                        "items": "dataSource?.gallery"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.canManage) && !dataSource?.gallery || dataSource?.gallery.length === 0"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Media_Gallery.svg'",
                        "imageId": "'company-page-gallery-section-empty-state-primitive-image-id'",
                        "title": "'Show sights, achievements or projects'",
                        "titleId": "'company-page-gallery-section-empty-state-primitive-title-id'",
                        "buttonLabel": "dataSource?.canUploadMedia ? 'Add Photos or Videos' : null",
                        "buttonId": "'company-page-gallery-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('addMedia/' + dataSource?.galleryId, {'canUploadImage': dataSource.canUploadImage, 'canUploadVideoLink': dataSource.canUploadVideoLink, targetId: $dynamicUiExtraService.getCompanyId(dataSource), targetName: $dynamicUiExtraService.getCompanyName(dataSource), targetImage: $dynamicUiExtraService.getCompanyImage(dataSource)})"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "element": "button-primitive",
          "attributes": {
            "id": "company-page-fab-button",
            "$ngIf": "(dataSource?.canManage && (dataSource?.canManage || dataSource?.canAddPost || dataSource?.canAddEvent || dataSource?.canUploadMedia)) || (!dataSource?.canManage && !dataSource?.canCreateRoleAction && (dataSource?.canAddPost || dataSource?.canAddEvent))"
          },
          "properties": {
            "type": "'fab-button'",
            "icon": "'assets/icon/dynamic-ui/Add_white.svg'",
            "fabButtonId": "'company-fab-button'"
          },
          "events": {
            "actionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource?.companyMissionRoleActions, null, dataSource, {targetId: $dynamicUiExtraService.getCompanyId(dataSource), targetName: $dynamicUiExtraService.getCompanyName(dataSource), targetImage: $dynamicUiExtraService.getCompanyImage(dataSource)} )"
          }
        }
      ]
    },
    {
      "name": "managecompany-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Manage Company'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-company-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "card-list-primitive",
                  "properties": {
                    "listType": "'simple-list'",
                    "classList": "'quick-link-content'",
                    "arrayOfItems": "initialDataSource?.permissions?.company"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#itemListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "simple-list-template",
                          "events": {
                            "click": "$actionHelper.navigateToSubPage(item.pageUrl)"
                          },
                          "properties": {
                            "dataSource": "{'item': item, 'containerId': 'manage-company-page-permission' }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "editCompany-page-template",
      "functions": {
        "uploadPhoto": "function ($id, $event) {  \n  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $photo: Upload!) {\n        company {\n          uploadLogo(id: $id, photo: $photo)\n        }\n      }\n    `, {id: $id, photo: $event}).then(uploadResponse => {              \n        $actionHelper.showToast('Image updated successfully');\n        $actionHelper.notifiySubscribers(['edit-company'], false);              \n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Company Information '",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'edit-company-page-header-primitive-back-id'",
                "buttonLabel": "'Save'",
                "buttonLabelId": "'edit-company-page-header-primitive-save-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation{  company {\n    update(\n      id: $templateContext->activeFormArguments.companyId, \n      model: {\n        name: $templateContext->activeFormArguments.name\n        introduction: $templateContext->activeFormArguments.description,\n        companyType: $dynamicUiExpression((|getParamFromEnum(templateContext.initialDataSource.companyTypes, $templateContext->activeFormArguments.companyType)|))\n        country: $templateContext->activeFormArguments.country,\n        city: $templateContext->activeFormArguments.city,\n        sector: $templateContext->activeFormArguments.sector,\n        keywords: $dynamicUiExpression((|prepareLookup(templateContext.activeFormArguments, 'keyword')|))\n        brands: $dynamicUiExpression((|prepareLookup(templateContext.activeFormArguments, 'brand')|))\n\n        contactUs: {\n          email: $templateContext->activeFormArguments.email,\n          address: $templateContext->activeFormArguments.address,\n          phoneNumber: {\n            countryCode: $templateContext->activeFormArguments.countryCode,\n            isoCode: $templateContext->activeFormArguments.isoCode,\n            number: $templateContext->activeFormArguments.phoneNumber\n          },                            \n          poBox: $templateContext->activeFormArguments.poBox,\n          website: $templateContext->activeFormArguments.website\n        },\n        socialMedia: {\n          facebook: $templateContext->activeFormArguments.facebook,\n          instagram: $templateContext->activeFormArguments.instagram,\n          linkedin: $templateContext->activeFormArguments.linkedin,\n          twitter: $templateContext->activeFormArguments.twitter\n        }\n      }\n    ) {\n      id \n    }\n  }\n}\n",
                  "postAction": "$actionHelper.showToast('Company details updated successfully'); $actionHelper.notifiySubscribers(['edit-company'], true);\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event, null, initialDataSource)"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'edit-company-page-form'",
                    "predefineData": "{'companyId': $actionHelper.getActiveDomainId()}",
                    "formWithImage": "dataSource.actions.canUploadLogo",
                    "isThumbnailImage": true,
                    "imageChooserActionLabel": "'Change Logo'",
                    "initialData": "dataSource.company",
                    "imageFormControlName": "'Image'",
                    "isRequiredImage": false,
                    "imageValue": "'photoCover.imageThumbnailUrl'",
                    "avatarName": "'name'",
                    "withBeforeInitFunction": true,
                    "imageSchemaValidationPath": "'mutation.company.uploadLogo.photo'",
                    "dataSource": {
                      "functions": {
                        "beforeInit": "function() {  this.$actionHelper.getOffersLookups();\n  return this.$actionHelper.prepareLookups()\n}\n",
                        "afterInit": "function () {  const initialDataSource = this.$actionHelper.uiDefinition.initialDataSource \n  if(initialDataSource && initialDataSource.keywords && initialDataSource.keywords.length > 0) {\n    initialDataSource.keywords.forEach(x => {x.selected = false; x.isSelected = false});  \n  }\n  if(initialDataSource && initialDataSource.brands && initialDataSource.brands.length > 0) {\n    initialDataSource.brands.forEach(x => {x.selected = false; x.isSelected = false});  \n  }\n  if(initialDataSource && initialDataSource.countries && initialDataSource.countries.length > 0) {\n    initialDataSource.countries.forEach(x => {x.selected = false; x.isSelected = false});        \n  }\n}\n",
                        "addNewKeyword": "function ($keyword, parentComponent) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($keyword: String!) {\n        company {\n          addKeyword(title: $keyword) {\n            lookupId\n            name\n          }\n        }\n      }\n    `, {keyword: $keyword}).then(data => {    \n        this.$actionHelper.getKeywordsLookups();\n        const newOption = _.get(data, 'company.addKeyword', null);\n        if(newOption) {\n          newOption.isSelected = true;\n          parentComponent.options.unshift(newOption);\n          parentComponent.initialOptions.unshift(newOption);\n          parentComponent.getInitialList();  \n        }\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
                        "openKeywords": "function($event,form, formGroup, initialDataSource, formsData) {  this.$actionHelper.openMultiSelectModal('Keywords', \n    'Tap to add a new keyword', 'Keyword already exists', $event.element, formGroup, initialDataSource.keywords, $event.element.value, false, formsData, true, true, initialDataSource, \n    (newKeyword, parentComponent) => { this.addNewKeyword(newKeyword, parentComponent) })    \n}\n",
                        "addNewBrand": "function ($brand, parentComponent) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($brand: String!) {\n        company {\n          addBrand(title: $brand) {\n            lookupId\n            name\n          }\n        }\n      }\n    `, {brand: $brand}).then(data => {    \n        this.$actionHelper.getBrandsLookups();\n        const newOption = _.get(data, 'company.addBrand', null);\n        if(newOption) {\n          newOption.isSelected = true;\n          parentComponent.options.unshift(newOption);\n          parentComponent.initialOptions.unshift(newOption);\n          parentComponent.getInitialList();  \n        }\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
                        "openBrands": "function($event,form, formGroup, initialDataSource, formsData) {  this.$actionHelper.openMultiSelectModal('Brands', 'Tap to add a new brand', 'Brand already exists', $event.element, formGroup, \n  initialDataSource.brands, $event.element.value, false, formsData, false, true, initialDataSource, \n  (newBrand, parentComponent) => { this.addNewBrand( newBrand, parentComponent) }, true);\n}\n"
                      },
                      "controllers": [
                        {
                          "key": "name",
                          "label": "Name",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter company name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "name",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.update.model.fields.name",
                              "messages": {
                                "isRequired": "Company name is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "description",
                          "label": "Description",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "textarea",
                          "placeholder": "Add a short description here",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "introduction",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.update.model.fields.introduction",
                              "messages": {
                                "maxLength": "15000 Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "companyType",
                          "label": "Company Type",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a company type",
                          "value": null,
                          "valueType": "enumeration",
                          "enumerationType": "companyTypes",
                          "valuePath": "companyType",
                          "withNullValue": false,
                          "actionTitle": "Select Company Type",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select Company Type', $event.element, formGroup, formsData, initialDataSource.companyTypes, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.update.model.fields.companyType",
                              "messages": {
                                "isRequired": "Company type is required"
                              }
                            }
                          ],
                          "lookups": "companyTypes",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "country",
                          "label": "Headquarters Country",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a country",
                          "value": null,
                          "valueType": "country",
                          "valuePath": "place.country",
                          "withNullValue": false,
                          "actionTitle": "Select Country",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openCountriesModal('Select Country', $event.element, formGroup, initialDataSource.countries, false)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(formPrimitive.getGraphQL, $event.newValue).then(\n(data) => {\nformsData.lookups.cities = data.cities;\nconst cityController = formsData.controllers.find(controller => controller.key === 'city');\nif(cityController) {\nif(!cityController.firstLoad) {\n$actionHelper.setFormGroupData('city',null)\ncityController.value = null;\n}\n\nformPrimitive.detectChanges();\ncityController.firstLoad = false;\n}\n}\n)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.update.model.fields.country",
                              "messages": {
                                "isRequired": "Country is required"
                              }
                            }
                          ],
                          "lookups": "countries",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "city",
                          "label": "Headquarters City",
                          "display": true,
                          "relatedTo": null,
                          "firstLoad": true,
                          "controlType": "button-input",
                          "placeholder": "Select a city",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": "place.city",
                          "withNullValue": false,
                          "actionTitle": "Select City",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select City', $event.element, formGroup, formsData, formsData.lookups.cities, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.update.model.fields.city",
                              "messages": {
                                "isRequired": "City is required"
                              }
                            }
                          ],
                          "lookups": "cities",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "address",
                          "label": "Address",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Address details",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.address",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.update.model.fields.contactUs.fields.address",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "keyword",
                          "label": "Keyword",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "chips-button",
                          "placeholder": "Select one or more keywords",
                          "value": null,
                          "valueType": "multiSelect",
                          "valuePath": "keywords",
                          "withNullValue": true,
                          "actionTitle": "Keywords",
                          "itemAddedHint": "Tap to add a new keyword",
                          "itemExistErrorMessage": "Keyword already exists",
                          "required": false,
                          "buttonActionEmitter": "this.openKeywords($event, form, formGroup, initialDataSource, formsData)",
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.update.model.fields.keywords",
                              "messages": {
                                "isRequired": "Keywords is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "lookups": "keywords",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "brand",
                          "label": "Brands",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "chips-button",
                          "placeholder": "Select one or more brands",
                          "value": null,
                          "valueType": "multiSelect",
                          "valuePath": "brands",
                          "withNullValue": true,
                          "actionTitle": "Brands",
                          "itemAddedHint": "Tap to add a new brand",
                          "itemExistErrorMessage": "Brand already exists",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "this.openBrands($event, form, formGroup, initialDataSource, formsData)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.update.model.fields.brands",
                              "messages": {
                                "isRequired": "Brands is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "lookups": "brands",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "sector",
                          "label": "Sector",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a sector",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": "sector",
                          "withNullValue": true,
                          "actionTitle": "Select a Sector",
                          "required": false,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSectorsModal('Select a Sector', $event.element, formGroup, initialDataSource.sectors)",
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.update.model.fields.sector",
                              "messages": {
                                "isRequired": "Sector is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "lookups": "sectors",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "countryCode",
                          "label": "Phone Number",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a country",
                          "countryIsoCodeKey": "isoCode",
                          "countryIsoCodePath": "contactUs.phone.isoCode",
                          "value": null,
                          "valueType": "phoneCountry",
                          "valuePath": "contactUs.phone",
                          "defaultValue": "place.country",
                          "withNullValue": false,
                          "actionTitle": "Select a Country",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openCountriesModal('Select a Country', $event.element, formGroup, phoneCountries, true)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.update.model.fields.contactUs.fields.phoneNumber.fields.countryCode",
                              "messages": {
                                "isRequired": "Country code is required"
                              }
                            }
                          ],
                          "lookups": "phoneCountry",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "phoneNumber",
                          "label": null,
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "number",
                          "placeholder": "Phone number",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.phone.number",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.update.model.fields.contactUs.fields.phoneNumber.fields.number",
                              "messages": {
                                "isRequired": "Country code is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "email",
                          "label": "Contact Email",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "email",
                          "placeholder": "Alternative email for notifications",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.email",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.update.model.fields.contactUs.fields.email",
                              "messages": {
                                "maxLength": "Character limit reached",
                                "pattern": "Please enter a valid email address"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "website",
                          "label": "Website",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Website link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.website",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.update.model.fields.contactUs.fields.website",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "poBox",
                          "label": "P.O. Box",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "number",
                          "placeholder": "Please enter the P.O. box number",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.poBox",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.update.model.fields.contactUs.fields.poBox",
                              "messages": {
                                "isRequired": "P.O. Box is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "facebook",
                          "label": "Facebook",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Facebook link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.facebook",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Facebook.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.update.model.fields.socialMedia.fields.facebook",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "linkedin",
                          "label": "LinkedIn",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "LinkedIn link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.linkedin",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/LinkedIn.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.update.model.fields.socialMedia.fields.linkedin",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "instagram",
                          "label": "Instagram",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Instagram link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.instagram",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Instagram.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.update.model.fields.socialMedia.fields.instagram",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "twitter",
                          "label": "Twitter",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Twitter link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.twitter",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Twitter.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.update.model.fields.socialMedia.fields.twitter",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Basic Information"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "name"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "description"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "companyType"
                            }
                          ]
                        },
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "country"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "city"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "address"
                            }
                          ]
                        },
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "sector"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "keyword"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "brand"
                            }
                          ]
                        },
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Contact Details"
                            },
                            {
                              "type": "group-input-with-button",
                              "children": [
                                {
                                  "type": "controller",
                                  "controllerKey": "countryCode"
                                },
                                {
                                  "type": "controller",
                                  "controllerKey": "phoneNumber"
                                }
                              ]
                            },
                            {
                              "type": "controller",
                              "controllerKey": "email"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "website"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "poBox"
                            }
                          ]
                        },
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Social Media"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "facebook"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "linkedin"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "instagram"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "twitter"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "events": {
                    "photoActionEmitter": "this.uploadPhoto($actionHelper.getActiveDomainId(), $event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "followersCompany-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.followers, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Followers'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'follower-company-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.followers && dataSource?.followers?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'follower-company-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    followers: _.get(data, \"company.searchFollowers.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"company.searchFollowers.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  company(id: $templateContext->additionalData.companyId) {\n    searchFollowers(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.followers = $graphQlResults.followers;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'companyId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.followers"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'follower-company-page-followers-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'follower-company-page-followers-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'follower-company-page-followers-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'company', $activatedRoute.snapshot.params.id, 'followers', dataSource?.cursor, dataSource, 'cursor', 'followers')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'company', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchFollowers', dataSource?.cursor, dataSource, 'cursor', 'followers')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.followers || dataSource?.followers?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Followers'",
                    "titleId": "'follower-company-page-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'follower-company-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.followers || dataSource?.followers?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'follower-company-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'follower-company-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageCompanyTeamMembers-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'skeleton-page-with-two-segment'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Team Members'",
                "headerClass": "'with-no-border'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-company-members-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "segment-primitive",
              "properties": {
                "segmentContainerId": "'manage-company-members-page-segment-container-id'",
                "segmentOneLabel": "'Pending Requests'",
                "segmentTwoLabel": "'Approved'",
                "segmentClass": "'two-segment'"
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentOneContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.unVerifiedEmployees && dataSource?.unVerifiedEmployees?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "inputType": "'search-input'",
                            "searchInputId": "'manage-company-members-page-unverified-employees-search-input-id'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    unVerifiedEmployees: _.get(data, \"company.searchPendingEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    unVerifiedEmployeesCursor: _.get(data, \"company.searchPendingEmployees.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  company(id: $templateContext->additionalData.companyId) {\n    searchPendingEmployees(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.unVerifiedEmployees = $graphQlResults.unVerifiedEmployees;  dataSource.unVerifiedEmployeesCursor = $graphQlResults.unVerifiedEmployeesCursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'companyId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.unVerifiedEmployees"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-company-members-page-unverified-employees-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageCompanyPendingMembersActions, item, dataSource, {'companyId': $actionHelper.getActiveDomainId()})"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', 'itemId': item.title, 'containerId': 'manage-company-members-page-unverified-employees-action'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.unVerifiedEmployeesCursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'company', $activatedRoute.snapshot.params.id, 'pendingEmployees', dataSource?.unVerifiedEmployeesCursor, dataSource, 'unVerifiedEmployeesCursor', 'unVerifiedEmployees')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.unVerifiedEmployeesCursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'company', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchPendingEmployees', dataSource?.unVerifiedEmployeesCursor, dataSource, 'unVerifiedEmployeesCursor', 'unVerifiedEmployees')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.unVerifiedEmployees || dataSource?.unVerifiedEmployees?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Pending Requests'",
                        "titleId": "'manage-company-members-page-unverified-employees-empty-state-primitive-title-id'",
                        "subtitle": "'There are currently no pending requests. We will notify you when a new request arrives'",
                        "subTitleId": "'manage-company-members-page-unverified-employees-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/Person.svg'",
                        "imageId": "'manage-company-members-page-unverified-employees-empty-state-primitive-image-id'"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.unVerifiedEmployees || dataSource?.unVerifiedEmployees?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'manage-company-members-page-unverified-employees-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-company-members-page-unverified-employees-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentTwoContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.verifiedEmployees && dataSource?.verifiedEmployees?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "inputType": "'search-input'",
                            "searchInputId": "'manage-company-members-page-verified-employees-search-input-id'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    verifiedEmployees: _.get(data, \"company.searchVerifiedEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    verifiedEmployeesCursor: _.get(data, \"company.searchVerifiedEmployees.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  company(id: $templateContext->additionalData.companyId) {\n    searchVerifiedEmployees(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.verifiedEmployees = $graphQlResults.verifiedEmployees;  dataSource.verifiedEmployeesCursor = $graphQlResults.verifiedEmployeesCursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'companyId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.verifiedEmployees"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-company-members-page-verified-employees-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageCompanyApprovedMembersActions, item, dataSource, {'companyId': $actionHelper.getActiveDomainId()})"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', itemId: item.title, 'containerId': 'manage-company-members-page-verified-employees-action'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.verifiedEmployeesCursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'company', $activatedRoute.snapshot.params.id, 'verifiedEmployees', dataSource?.verifiedEmployeesCursor, dataSource, 'verifiedEmployeesCursor', 'verifiedEmployees')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.verifiedEmployeesCursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'company', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchVerifiedEmployees', dataSource?.verifiedEmployeesCursor, dataSource, 'verifiedEmployeesCursor', 'verifiedEmployees')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedEmployees || dataSource?.verifiedEmployees?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Members'",
                        "titleId": "'manage-company-members-page-verified-employees-empty-state-primitive-title-id'",
                        "subtitle": "'Approved join requests will appear here'",
                        "subTitleId": "'manage-company-members-page-verified-employees-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/Person.svg'",
                        "imageId": "'manage-company-members-page-verified-employees-empty-state-primitive-image-id'"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedEmployees || dataSource?.verifiedEmployees?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'manage-company-members-page-verified-employees-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-company-members-page-verified-employees-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "viewCompanyTeamMembers-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.verifiedEmployees, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Members'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-company-members-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.verifiedEmployees && dataSource?.verifiedEmployees?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'view-company-members-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    verifiedEmployees: _.get(data, \"company.searchEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"company.searchEmployees.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  company(id: $templateContext->additionalData.companyId) {\n    searchEmployees(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.verifiedEmployees = $graphQlResults.verifiedEmployees;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'companyId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.verifiedEmployees"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'view-company-members-page-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'view-company-members-page-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'view-company-members-page-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'company', $activatedRoute.snapshot.params.id, 'employees', dataSource?.cursor, dataSource, 'cursor', 'verifiedEmployees')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'company', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchEmployees', dataSource?.cursor, dataSource, 'cursor', 'verifiedEmployees')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedEmployees || dataSource?.verifiedEmployees?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Members Listed'",
                    "titleId": "'view-company-members-page-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'view-company-members-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedEmployees || dataSource?.verifiedEmployees?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'view-company-members-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-company-members-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "viewCompanyAdministrators-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.admins, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Page Administrators'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-company-administrator-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.admins && dataSource?.admins?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'view-company-administrator-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    admins: _.get(data, \"company.searchAdmins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"company.searchAdmins.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  company(id: $templateContext->additionalData.companyId) {\n    searchAdmins(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.admins = $graphQlResults.admins;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'companyId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.admins"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'view-company-administrator-page-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'view-company-administrator-page-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'view-company-administrator-page-action', 'actionClass': 'l-icon' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'company', $activatedRoute.snapshot.params.id, 'admins', dataSource?.cursor, dataSource, 'cursor', 'admins')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'company', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchAdmins', dataSource?.cursor, dataSource, 'cursor', 'admins')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.admins || dataSource?.admins?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Page Administrators'",
                    "titleId": "'view-company-administrator-page-empty-state-primitive-title-id'",
                    "subtitle": "'This page doesn’t currently have any administrators.'",
                    "subTitleId": "'view-company-administrator-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'view-company-administrator-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.admins || dataSource?.admins?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'view-company-administrator-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-company-administrator-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageCompanyAdministrators-page-template",
      "changeDetectionSubjects": [
        "add-company-administrators"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Page Administrators'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-company-administrator-page-header-primitive-back-id'",
                "rightIcon": "($actionHelper?.checkSearchInputValue() || (dataSource?.admins && dataSource?.admins?.length > 0)) ? 'assets/icon/dynamic-ui/Add_Grey.svg': ''",
                "rightIconId": "'manage-company-administrator-page-header-primitive-add-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "($actionHelper?.checkSearchInputValue() || (dataSource?.admins && dataSource?.admins?.length > 0)) ? $actionHelper.navigateTo('company/addCompanyAdministrator/' + $actionHelper.getActiveDomainId()): ''"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.admins && dataSource?.admins?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'manage-company-administrator-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    admins: _.get(data, \"company.searchAdmins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"company.searchAdmins.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  company(id: $templateContext->additionalData.companyId) {\n    searchAdmins(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.admins = $graphQlResults.admins;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'companyId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.admins"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'manage-company-administrator-page-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "events": {
                                "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageCompanyCurrentAdministratorsActions, item, dataSource, {'companyId': $actionHelper.getActiveDomainId()})"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', 'itemId': item.title, 'containerId': 'manage-company-administrator-page-action' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'company', $activatedRoute.snapshot.params.id, 'admins', dataSource?.cursor, dataSource, 'cursor', 'admins')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'company', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchAdmins', dataSource?.cursor, dataSource, 'cursor', 'admins')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.admins || dataSource?.admins?.length == 0)"
                  },
                  "events": {
                    "buttonActionEmitter": "$actionHelper.navigateTo('company/addCompanyAdministrator/' + $actionHelper.getActiveDomainId())"
                  },
                  "properties": {
                    "title": "'No Page Administrators'",
                    "titleId": "'manage-company-administrator-page-empty-state-primitive-title-id'",
                    "subtitle": "'This page doesn’t currently have any administrators. You can assign a page member or invite someone via email'",
                    "subTitleId": "'manage-company-administrator-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'manage-company-administrator-page-empty-state-primitive-image-id'",
                    "buttonLabel": "'Add Page Administrator'",
                    "buttonId": "'manage-company-administrator-page-empty-state-primitive-button-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.admins || dataSource?.admins?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'manage-company-administrator-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'manage-company-administrator-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "addCompanyAdministrator-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'skeleton-page-with-two-segment'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Add Page Administrator'",
                "headerClass": "'with-no-border'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'add-company-administrator-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "segment-primitive",
              "properties": {
                "segmentContainerId": "'add-company-administrator-page-segment-container-id'",
                "segmentOneLabel": "'Assign Member'",
                "segmentTwoLabel": "'Invite by Email'",
                "segmentClass": "'two-segment'"
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentOneContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.verifiedEmployees && dataSource?.verifiedEmployees?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "inputType": "'search-input'",
                            "searchInputId": "'add-company-administrator-page-members-search-input-id'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    verifiedEmployees: _.get(data, \"company.searchVerifiedEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"company.searchVerifiedEmployees.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  company(id: $templateContext->additionalData.companyId) {\n    searchVerifiedEmployees(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.verifiedEmployees = $graphQlResults.verifiedEmployees;  dataSource.cursor = $graphQlResults.cursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'companyId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.verifiedEmployees"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'add-company-administrator-page-members-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageCompanyAssignAdministratorsActions, item, dataSource, {'companyId': $actionHelper.getActiveDomainId()})"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', itemId: item.title, 'containerId': 'add-company-administrator-page-members-action'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'company', $activatedRoute.snapshot.params.id, 'verifiedEmployees', dataSource?.cursor, dataSource, 'cursor', 'verifiedEmployees')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'company', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchVerifiedEmployees', dataSource?.cursor, dataSource, 'cursor', 'verifiedEmployees')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedEmployees || dataSource?.verifiedEmployees?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Members'",
                        "titleId": "'add-company-administrator-page-members-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/Person.svg'",
                        "imageId": "'add-company-administrator-page-members-empty-state-primitive-image-id'"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedEmployees || dataSource?.verifiedEmployees?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'add-company-administrator-page-members-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'add-company-administrator-page-members-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentTwoContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "form-primitive",
                      "properties": {
                        "formContainerId": "'add-company-administrator-page-form'",
                        "predefineData": "{'companyId': $actionHelper.getActiveDomainId()}",
                        "dataSource": {
                          "controllers": [
                            {
                              "key": "firstName",
                              "label": "First Name",
                              "display": true,
                              "relatedTo": null,
                              "controlType": "input",
                              "type": "text",
                              "placeholder": "Enter first name",
                              "value": null,
                              "withNullValue": false,
                              "actionTitle": null,
                              "required": true,
                              "icon": null,
                              "leftIcon": null,
                              "validators": [
                                {
                                  "name": "fromSchema",
                                  "fieldPath": "mutation.company.inviteAdmin.firstName",
                                  "messages": {
                                    "isRequired": "First name is required",
                                    "maxLength": "Character limit reached"
                                  }
                                }
                              ],
                              "controlApi": null,
                              "controlAnotherApi": null
                            },
                            {
                              "key": "lastName",
                              "label": "Last Name",
                              "display": true,
                              "relatedTo": null,
                              "controlType": "input",
                              "type": "text",
                              "placeholder": "Enter last name",
                              "value": null,
                              "withNullValue": false,
                              "actionTitle": null,
                              "required": true,
                              "icon": null,
                              "leftIcon": null,
                              "validators": [
                                {
                                  "name": "fromSchema",
                                  "fieldPath": "mutation.company.inviteAdmin.lastName",
                                  "messages": {
                                    "isRequired": "Last name is required",
                                    "maxLength": "Character limit reached"
                                  }
                                }
                              ],
                              "controlApi": null,
                              "controlAnotherApi": null
                            },
                            {
                              "key": "email",
                              "label": "Email Address",
                              "display": true,
                              "relatedTo": null,
                              "controlType": "input",
                              "type": "email",
                              "placeholder": "Enter email address",
                              "value": null,
                              "withNullValue": false,
                              "actionTitle": null,
                              "required": true,
                              "icon": null,
                              "leftIcon": null,
                              "validators": [
                                {
                                  "name": "fromSchema",
                                  "fieldPath": "mutation.company.inviteAdmin.email",
                                  "messages": {
                                    "isRequired": "Email is required",
                                    "maxLength": "Character limit reached",
                                    "pattern": "Please enter a valid email address"
                                  }
                                }
                              ],
                              "controlApi": null,
                              "controlAnotherApi": null
                            }
                          ],
                          "template": [
                            {
                              "type": "block-container",
                              "children": [
                                {
                                  "type": "controller",
                                  "controllerKey": "firstName"
                                },
                                {
                                  "type": "controller",
                                  "controllerKey": "lastName"
                                },
                                {
                                  "type": "controller",
                                  "controllerKey": "email"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    },
                    {
                      "element": "button-primitive",
                      "attributes": {
                        "id": "'add-company-administrator-page-submit-action'",
                        "$ngIf": "dataSource.actions.canInviteAdmin"
                      },
                      "properties": {
                        "text": "'Invite as Page Administrator'",
                        "disableButton": "!$actionHelper.isValidForm()",
                        "action": {
                          "query": "mutation {  company {\n    inviteAdmin(\n      id: $templateContext->activeFormArguments.companyId, \n      lastName: $templateContext->activeFormArguments.lastName,\n      firstName: $templateContext->activeFormArguments.firstName, \n      email: $templateContext->activeFormArguments.email,\n      invitationUrl: $templateContext->additionalData.url\n    )\n  }\n}\n",
                          "postAction": "$actionHelper.showToast('Your admin invitation was sent successfully');"
                        }
                      },
                      "events": {
                        "actionEmitter": "$actionHelper.invite($event, dataSource?.company?.photoCover?.imageThumbnailUrl, 'Assign as Administrator', 'You have been assigned as an admin of ' + dataSource?.company?.name, dataSource?.company?.id, 'DiasporaAdminCompany')"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageCompanyBranches-page-template",
      "functions": {
        "getFullTree": "async function (dataSource) {  const parentBranchesResponse = await $dynamicUiExtraService.getCompanyParentBranches($activatedRoute.snapshot.params.id, $actionHelper);\n  const rootBranchId = parentBranchesResponse.rootBranchId;\n  const hasParentBranch = parentBranchesResponse.hasParentBranch;\n  const parentBranchId = parentBranchesResponse.parentBranchId;\n\n  let branchesTree = [];\n  if(hasParentBranch) {\n    branchesTree = await $dynamicUiExtraService.prepareCompanyChildBranches(rootBranchId, $actionHelper, $activatedRoute.snapshot.params.id);\n  }\n\n  dataSource.branchesTree = branchesTree;\n  dataSource.parentBranchId = parentBranchId;  \n}\n",
        "removeBranch": "function ($id, $branchId, $dynamicUiExtraService, dataSource) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $branchId: String!) {\n        company {\n          removeParentEntity(id: $id, parentId: $branchId)\n        }\n      }\n    `, {id: $id, branchId: $branchId}).then((data) => {\n        $actionHelper.showToast('Company link removed successfully');\n        this.getFullTree(dataSource);\n\n\n        this.getOutgoingRequest(dataSource);\n\n        $actionHelper.notifiySubscribers(['manage-company-branches']);\n      }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
        "getOutgoingRequest": "function (dataSource) {    this.getGraphQL(`\n      query \n        { \n          company(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n            outgoingBranchesRequests(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n              items {\n                company {\n                  ...companyCommonProperties\n                }\n              }\n              cursor\n            }  \n          }\n        }              \n    `).then((data) => {\n        dataSource.outgoingBranchesRequests = _.get(data, 'company.outgoingBranchesRequests.items', []);\n        dataSource.outgoingBranchesRequestsCursor = _.get(data, \"company.outgoingBranchesRequests.cursor\");\n    })\n  }\n"
      },
      "changeDetectionSubjects": [
        "manage-company"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'skeleton-page-with-three-segment'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Branches'",
                "headerClass": "'with-no-border'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-company-branches-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "segment-primitive",
              "properties": {
                "segmentContainerId": "'manage-company-branches-page-segment-container-id'",
                "segmentOneLabel": "'Received'",
                "segmentTwoLabel": "'Sent'",
                "segmentThreeLabel": "'Current'",
                "segmentClass": "'three-segment'"
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentOneContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "dataSource?.incomingBranchesrequests && dataSource?.incomingBranchesrequests?.length > 0"
                      },
                      "children": [
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.incomingBranchesrequests"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Company', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-company-branches-page-incomming-request-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageCompanyReceivedBranchesActions, item, dataSource, {'companyId': $actionHelper.getActiveDomainId(), parentPage: this})"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', 'itemId' : item.title, 'containerId': 'manage-company-branches-page-incomming-request-action'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.incomingBranchesrequestsCursor"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreCompanyData($event, this, 'company', $activatedRoute.snapshot.params.id, 'incomingBranchesrequests', dataSource?.incomingBranchesrequestsCursor, dataSource, 'incomingBranchesrequestsCursor', 'incomingBranchesrequests')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!dataSource?.incomingBranchesrequests || dataSource?.incomingBranchesrequests?.length == 0"
                      },
                      "properties": {
                        "title": "'No Incoming Requests'",
                        "titleId": "'manage-company-branches-page-incomming-request-empty-state-primitive-title-id'",
                        "subtitle": "'Requests to join your company as a branch will appear here'",
                        "subTitleId": "'manage-company-branches-page-incomming-request-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-company-branches-page-incomming-request-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentTwoContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "dataSource?.outgoingBranchesRequests && dataSource?.outgoingBranchesRequests?.length > 0"
                      },
                      "children": [
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.outgoingBranchesRequests"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Company', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-company-branches-page-outgoing-request-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageCompanySentBranchesActions, item, dataSource, {'companyId': $actionHelper.getActiveDomainId(), parentPage: this})"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', 'itemId': item.title, 'containerId': 'manage-company-branches-page-outgoing-request-action'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.outgoingBranchesRequestsCursor"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreCompanyData($event, this, 'company', $activatedRoute.snapshot.params.id, 'outgoingBranchesRequests', dataSource?.outgoingBranchesRequestsCursor, dataSource, 'outgoingBranchesRequestsCursor', 'outgoingBranchesRequests')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!dataSource?.outgoingBranchesRequests || dataSource?.outgoingBranchesRequests?.length == 0"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('searchForCompany', {'companies': [], 'fromLinkAction': true, 'fromBranchAction': true,  'companyId': $activatedRoute.snapshot.params.id})"
                      },
                      "properties": {
                        "title": "'No Outgoing Requests'",
                        "titleId": "'manage-company-branches-page-outgoing-request-empty-state-primitive-title-id'",
                        "subtitle": "'Outgoing requests will appear here'",
                        "subTitleId": "'manage-company-branches-page-outgoing-request-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-company-branches-page-outgoing-request-empty-state-primitive-image-id'",
                        "buttonLabel": "dataSource?.actions?.canAddParentEntity ? 'Add Parent Company' : ''",
                        "buttonId": "'manage-company-branches-page-outgoing-request-empty-state-primitive-button-id'"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentThreeContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "dataSource?.branchesTree && dataSource?.branchesTree.length > 0 "
                      },
                      "children": [
                        {
                          "element": "tree-primitive",
                          "properties": {
                            "containerId": "'manage-company-current-chapter'",
                            "treeType": "'manageCompanyBranches'",
                            "targetId": "$actionHelper.getActiveDomainId()",
                            "rightIcon": "'assets/icon/dynamic-ui/Link.svg'",
                            "hasAction": true,
                            "showChildCount": false,
                            "parentTargetId": "dataSource.parentBranchId",
                            "treeItems": "dataSource.branchesTree"
                          },
                          "events": {
                            "actionEmitter": "this.removeBranch($activatedRoute.snapshot.params.id, $event.targetId, $dynamicUiExtraService, dataSource)"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!dataSource?.branchesTree || dataSource?.branchesTree.length == 0"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('searchForCompany', {'companies': [], 'fromLinkAction': true, 'fromBranchAction': true,  'companyId': $activatedRoute.snapshot.params.id})"
                      },
                      "properties": {
                        "title": "'No Company Branches Listed'",
                        "titleId": "'manage-company-branches-page-current-empty-state-primitive-title-id'",
                        "subtitle": "'Start by adding your parent company. When your request is approved, the company’s structure will appear here'",
                        "subTitleId": "'manage-company-branches-page-current-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-company-branches-page-current-empty-state-primitive-image-id'",
                        "buttonLabel": "dataSource?.actions?.canAddParentEntity ? 'Add Parent Company' : ''",
                        "buttonId": "'manage-company-branches-page-current-empty-state-primitive-button-id'"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "viewCompanyBranches-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'chain-tree-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "ion-content",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Branch'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-company-branches-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "div",
              "children": [
                {
                  "element": "tree-primitive",
                  "attributes": {
                    "$ngIf": "dataSource.branchesTree && dataSource.branchesTree.length > 0"
                  },
                  "properties": {
                    "containerId": "'view-company-branches'",
                    "treeType": "'manageCompanyBranches'",
                    "targetId": "$actionHelper.getActiveDomainId()",
                    "rightIcon": "'assets/icon/dynamic-ui/Chapters_Grey.svg'",
                    "hasAction": true,
                    "showChildCount": true,
                    "parentTargetId": "dataSource.parentBranchId",
                    "treeItems": "dataSource.branchesTree"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "(!dataSource?.branchesTree || dataSource?.branchesTree?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Company Branches Listed'",
                    "titleId": "'view-company-branches-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-company-branches-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageCompanyAffiliations-page-template",
      "changeDetectionSubjects": [
        "manage-organization"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'skeleton-page-with-two-segment'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Networks and Affiliations'",
                "headerClass": "'with-no-border'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-company-affiliations-header-primitive-back-id'",
                "rightIcon": "(dataSource?.currentAffiliations && dataSource?.currentAffiliations?.length > 0) ? 'assets/icon/dynamic-ui/Add_Grey.svg': ''",
                "rightIconId": "'manage-company-affiliations-header-primitive-add-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.navigateTo('searchForOrganization', {'organizations': [], 'fromLinkAction': true, 'fromAffiliationAction': true, 'companyId': $activatedRoute.snapshot.params.id})"
              }
            },
            {
              "element": "segment-primitive",
              "properties": {
                "segmentContainerId": "'manage-company-affiliations-segment-container-id'",
                "segmentOneLabel": "'Received'",
                "segmentTwoLabel": "'Current '",
                "segmentClass": "'two-segment'"
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentOneContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "(dataSource?.requestedAffiliations && dataSource?.requestedAffiliations?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.requestedAffiliations"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Organization', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-company-affiliations-requested-affiliation-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageCompanyReceivedAffiliationActions, item, dataSource, {companyId: $actionHelper.getActiveDomainId()} )"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', itemId: item.title, 'containerId': 'manage-company-affiliations-requested-affiliation-action'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.requestedAffiliationsCursor"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOrganizationData($event, this, 'company', $activatedRoute.snapshot.params.id, 'requestedAffiliations', dataSource?.requestedAffiliationsCursor, dataSource, 'requestedAffiliationsCursor', 'requestedAffiliations')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "(!dataSource?.requestedAffiliations || dataSource?.requestedAffiliations?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Pending Requests '",
                        "titleId": "'manage-company-affiliations-requested-affiliation-empty-state-primitive-title-id'",
                        "subtitle": "'There are no pending requests. We will notify you when a new request arrives '",
                        "subTitleId": "'manage-company-affiliations-requested-affiliation-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-company-affiliations-requested-affiliation-empty-state-primitive-image-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('searchForOrganization', {'organizations': [], 'fromLinkAction': true, 'fromAffiliationAction': true,  'companyId': $activatedRoute.snapshot.params.id});"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentTwoContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.currentAffiliations && dataSource?.currentAffiliations?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "inputType": "'search-input'",
                            "searchInputId": "'manage-company-affiliations-current-affiliation-search-input-id'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    currentAffiliations: _.get(data, \"company.searchCurrentAffiliations.items\", []).map(x => $dynamicUiExtraService.mapOrganizationToItem(x)),\n    currentAffiliationsCursor: _.get(data, \"company.searchCurrentAffiliations.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  company(id: $templateContext->additionalData.companyId) {\n    searchCurrentAffiliations(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        organization {\n          ...organizationCommonProperties  \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.currentAffiliations = $graphQlResults.currentAffiliations;  dataSource.currentAffiliationsCursor = $graphQlResults.currentAffiliationsCursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'companyId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.currentAffiliations"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Organization', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-company-affiliations-current-affiliation-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageCompanyCurrentAffiliationsActions, item, dataSource, {companyId: $actionHelper.getActiveDomainId()})"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', 'containerId': 'manage-company-affiliations-current-affiliation-action', itemId: item.title}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.currentAffiliationsCursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOrganizationData($event, this, 'company', $activatedRoute.snapshot.params.id, 'currentAffiliations', dataSource?.currentAffiliationsCursor, dataSource, 'currentAffiliationsCursor', 'currentAffiliations')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.currentAffiliationsCursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'company', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchCurrentAffiliations', dataSource?.currentAffiliationsCursor, dataSource, 'currentAffiliationsCursor', 'currentAffiliations')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.currentAffiliations || dataSource?.currentAffiliations?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Organizations  '",
                        "titleId": "'manage-company-affiliations-current-affiliation-empty-state-primitive-title-id'",
                        "subtitle": "'Approved join requests will appear here'",
                        "subTitleId": "'manage-company-affiliations-current-affiliation-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-company-affiliations-current-affiliation-empty-state-primitive-image-id'",
                        "buttonLabel": "dataSource.actions.canAddParentOrganization ? 'Add an Affiliation' : ''",
                        "buttonId": "'manage-company-affiliations-current-affiliation-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('searchForOrganization', {'organizations': [], 'fromLinkAction': true, 'fromAffiliationAction': true, 'companyId': $activatedRoute.snapshot.params.id})"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.currentAffiliations || dataSource?.currentAffiliations?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'manage-company-affiliations-current-affiliation-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-company-affiliations-current-affiliation-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "viewCompanyAffiliations-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.currentAffiliations, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Member Of'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-company-affiliations-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.currentAffiliations && dataSource?.currentAffiliations?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'view-company-affiliations-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    currentAffiliations: _.get(data, \"company.searchCurrentAffiliations.items\", []).map(x => $dynamicUiExtraService.mapOrganizationToItem(x)),\n    cursor: _.get(data, \"company.searchCurrentAffiliations.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  company(id: $templateContext->additionalData.companyId) {\n    searchCurrentAffiliations(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        organization {\n          ...organizationCommonProperties  \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.currentAffiliations = $graphQlResults.currentAffiliations;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'companyId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.currentAffiliations"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Organization', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'view-company-affiliations-affiliation-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Organization', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'view-company-affiliations-affiliation-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Organization', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'view-company-affiliations-affiliation-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOrganizationData($event, this, 'company', $activatedRoute.snapshot.params.id, 'currentAffiliations', dataSource?.cursor, dataSource, 'cursor', 'currentAffiliations')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'company', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchCurrentAffiliations', dataSource?.cursor, dataSource, 'cursor', 'currentAffiliations')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.currentAffiliations || dataSource?.currentAffiliations?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Affiliated Entities'",
                    "titleId": "'view-company-affiliations-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-company-affiliations-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.currentAffiliations || dataSource?.currentAffiliations?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'view-company-affiliations-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-company-affiliations-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageCompanyMarketPlace-page-template",
      "changeDetectionSubjects": [
        "edit-post",
        "delete-post"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'offer-page-with-segment-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Marketplace Listings'",
                "headerClass": "'with-no-border'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-company-market-place-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "segment-primitive",
              "properties": {
                "segmentContainerId": "'manage-company-market-place-page-segment-container-id'",
                "segmentOneLabel": "'Products'",
                "segmentTwoLabel": "'Services'",
                "segmentThreeLabel": "'Franchises'",
                "segmentClass": "'three-segment'"
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentOneContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.products && dataSource?.products?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "searchInputId": "'manage-company-market-place-page-products-search-input-id'",
                            "inputType": "'search-input'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    products: _.get(data, \"company.searchProducts.items\", []).map(x => $dynamicUiExtraService.mapCompanyOfferToItem(x)),\n    cursor: _.get(data, \"company.searchProducts.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  company(id: $templateContext->additionalData.companyId) {\n    searchProducts(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n          offer {\n          ...offerProperties\n        }\n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.products = $graphQlResults.products;  dataSource.cursor = $graphQlResults.cursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'companyId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'offer-list'",
                            "cardProductClass": "'not-scrollable'",
                            "arrayOfItems": "dataSource.products"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "offer-card-template",
                                  "events": {
                                    "click": "$actionHelper.navigateTo('offerDetails/' + item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-company-market-place-page-products-item' }"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.productsCursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOffersData($event, this, 'company', $activatedRoute.snapshot.params.id, 'products', dataSource?.productsCursor, dataSource, 'productsCursor', 'products')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.productsCursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOffersSearchData($event, this, 'company', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchProducts', dataSource?.productsCursor, dataSource, 'productsCursor', 'products')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.products || dataSource?.products?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Products Listed'",
                        "titleId": "'manage-company-market-place-page-products-empty-state-primitive-title-id'",
                        "subtitle": "'You haven’t added any products you offer'",
                        "subTitleId": "'manage-company-market-place-page-products-empty-state-primitive-subtitle-id'",
                        "image": "'assets/icon/dynamic-ui/Product.svg'",
                        "imageId": "'manage-company-market-place-page-products-empty-state-primitive-image-id'",
                        "buttonLabel": "'List your product'",
                        "buttonId": "'manage-company-market-place-page-products-empty-state-primitive-action-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateToSubPage('addProduct', {targetId: $dynamicUiExtraService.getCompanyId(dataSource), targetName: $dynamicUiExtraService.getCompanyName(dataSource) , targetImage: $dynamicUiExtraService.getCompanyImage(dataSource) })"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.products || dataSource?.products?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'manage-company-market-place-page-products-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-company-market-place-page-products-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentTwoContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.services && dataSource?.services?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "searchInputId": "'manage-company-market-place-page-services-search-input-id'",
                            "inputType": "'search-input'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    services: _.get(data, \"company.searchServices.items\", []).map(x => $dynamicUiExtraService.mapCompanyOfferToItem(x)),\n    cursor: _.get(data, \"company.searchServices.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  company(id: $templateContext->additionalData.companyId) {\n    searchServices(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n          offer {\n          ...offerProperties\n        }\n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.services = $graphQlResults.services;  dataSource.cursor = $graphQlResults.cursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'companyId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'offer-list'",
                            "cardProductClass": "'not-scrollable'",
                            "arrayOfItems": "dataSource.services"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "offer-card-template",
                                  "events": {
                                    "click": "$actionHelper.navigateTo('offerDetails/' + item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-company-market-place-page-services-item' }"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.serviceCursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOffersData($event, this, 'company', $activatedRoute.snapshot.params.id, 'services', dataSource?.serviceCursor, dataSource, 'serviceCursor', 'services')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.serviceCursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOffersSearchData($event, this, 'company', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchServices', dataSource?.serviceCursor, dataSource, 'serviceCursor', 'services')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.services || dataSource?.services?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Services Listed'",
                        "titleId": "'manage-company-market-place-page-services-empty-state-primitive-title-id'",
                        "subtitle": "'You haven’t added any services you offer'",
                        "subTitleId": "'manage-company-market-place-page-services-empty-state-primitive-subtitle-id'",
                        "image": "'assets/icon/dynamic-ui/Product.svg'",
                        "imageId": "'manage-company-market-place-page-services-empty-state-primitive-image-id'",
                        "buttonLabel": "'List your service'",
                        "buttonId": "'manage-company-market-place-page-services-empty-state-primitive-action-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateToSubPage('addService', {targetId: $dynamicUiExtraService.getCompanyId(dataSource), targetName: $dynamicUiExtraService.getCompanyName(dataSource) , targetImage: $dynamicUiExtraService.getCompanyImage(dataSource) })"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.services || dataSource?.services?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'manage-company-market-place-page-services-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-company-market-place-page-services-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentThreeContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.franchises && dataSource?.franchises?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "searchInputId": "'manage-company-market-place-page-franchises-search-input-id'",
                            "inputType": "'search-input'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    franchises: _.get(data, \"company.searchFranchises.items\", []).map(x => $dynamicUiExtraService.mapCompanyOfferToItem(x)),\n    cursor: _.get(data, \"company.searchFranchises.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  company(id: $templateContext->additionalData.companyId) {\n    searchFranchises(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n          offer {\n          ...offerProperties\n        }\n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.franchises = $graphQlResults.franchises;  dataSource.cursor = $graphQlResults.cursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'companyId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'offer-list'",
                            "cardProductClass": "'not-scrollable'",
                            "arrayOfItems": "dataSource.franchises"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "offer-card-template",
                                  "events": {
                                    "click": "$actionHelper.navigateTo('offerDetails/' + item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-company-market-place-page-franchises-item' }"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.franchisesCursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOffersData($event, this, 'company', $activatedRoute.snapshot.params.id, 'franchises', dataSource?.franchisesCursor, dataSource, 'franchisesCursor', 'franchises')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.franchisesCursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOffersSearchData($event, this, 'company', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchFranchises', dataSource?.franchisesCursor, dataSource, 'franchisesCursor', 'franchises')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.franchises || dataSource?.franchises?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Franchises Listed'",
                        "titleId": "'manage-company-market-place-page-franchises-empty-state-primitive-title-id'",
                        "subtitle": "'You haven’t added any franchises you offer'",
                        "subTitleId": "'manage-company-market-place-page-franchises-empty-state-primitive-subtitle-id'",
                        "image": "'assets/icon/dynamic-ui/Product.svg'",
                        "imageId": "'manage-company-market-place-page-franchises-empty-state-primitive-image-id'",
                        "buttonLabel": "'List your franchise'",
                        "buttonId": "'manage-company-market-place-page-franchises-empty-state-primitive-action-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateToSubPage('addFranchise', {targetId: $dynamicUiExtraService.getCompanyId(dataSource), targetName: $dynamicUiExtraService.getCompanyName(dataSource) , targetImage: $dynamicUiExtraService.getCompanyImage(dataSource) })"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.franchises || dataSource?.franchises?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'manage-company-market-place-page-franchises-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-company-market-place-page-franchises-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "viewCompanyProducts-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'offer-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Product'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-company-products-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.products && dataSource?.products?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "searchInputId": "'view-company-products-page-search-input-id'",
                        "inputType": "'search-input'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    products: _.get(data, \"company.searchProducts.items\", []).map(x => $dynamicUiExtraService.mapCompanyOfferToItem(x)),\n    productsCursor: _.get(data, \"company.searchProducts.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  company(id: $templateContext->additionalData.companyId) {\n    searchProducts(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n          offer {\n          ...offerProperties\n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.products = $graphQlResults.products;  dataSource.productsCursor = $graphQlResults.productsCursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'companyId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'offer-list'",
                        "cardProductClass": "'not-scrollable'",
                        "arrayOfItems": "dataSource.products"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "offer-card-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('offerDetails/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'view-company-products-page-item' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.productsCursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOffersData($event, this, 'company', $activatedRoute.snapshot.params.id, 'products', dataSource?.productsCursor, dataSource, 'productsCursor', 'products')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.productsCursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOffersSearchData($event, this, 'company', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchProducts', dataSource?.productsCursor, dataSource, 'productsCursor', 'products')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.products || dataSource?.products?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Products Listed'",
                    "titleId": "'view-company-products-page-empty-state-primitive-title-id'",
                    "image": "'assets/icon/dynamic-ui/Product.svg'",
                    "imageId": "'view-company-products-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.products || dataSource?.products?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'view-company-products-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-company-products-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "viewCompanyServices-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'offer-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Services'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-company-services-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.services && dataSource?.services?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "searchInputId": "'view-company-services-page-search-input-id'",
                        "inputType": "'search-input'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    services: _.get(data, \"company.searchServices.items\", []).map(x => $dynamicUiExtraService.mapCompanyOfferToItem(x)),\n    serviceCursor: _.get(data, \"company.searchServices.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  company(id: $templateContext->additionalData.companyId) {\n    searchServices(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n          offer {\n          ...offerProperties\n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.services = $graphQlResults.services;  dataSource.serviceCursor = $graphQlResults.serviceCursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'companyId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'offer-list'",
                        "cardProductClass": "'not-scrollable'",
                        "arrayOfItems": "dataSource.services"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "offer-card-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('offerDetails/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'view-company-services-page-item' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.serviceCursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOffersData($event, this, 'company', $activatedRoute.snapshot.params.id, 'services', dataSource?.serviceCursor, dataSource, 'serviceCursor', 'services')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.serviceCursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOffersSearchData($event, this, 'company', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchServices', dataSource?.serviceCursor, dataSource, 'serviceCursor', 'services')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.services || dataSource?.services?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Services Listed'",
                    "titleId": "'view-company-services-page-empty-state-primitive-title-id'",
                    "image": "'assets/icon/dynamic-ui/Product.svg'",
                    "imageId": "'view-company-services-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.services || dataSource?.services?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'view-company-services-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-company-services-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "viewCompanyFranchises-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'offer-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Franchise'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-company-franchises-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.franchises && dataSource?.franchises?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "searchInputId": "'view-company-franchises-page-search-input-id'",
                        "inputType": "'search-input'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    franchises: _.get(data, \"company.searchFranchises.items\", []).map(x => $dynamicUiExtraService.mapCompanyOfferToItem(x)),\n    franchisesCursor: _.get(data, \"company.searchFranchises.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  company(id: $templateContext->additionalData.companyId) {\n    searchFranchises(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n          offer {\n          ...offerProperties\n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.franchises = $graphQlResults.franchises;  dataSource.franchisesCursor = $graphQlResults.franchisesCursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'companyId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'offer-list'",
                        "cardProductClass": "'not-scrollable'",
                        "arrayOfItems": "dataSource.franchises"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "offer-card-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('offerDetails/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'view-company-franchises-page-item' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.franchisesCursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOffersData($event, this, 'company', $activatedRoute.snapshot.params.id, 'franchises', dataSource?.franchisesCursor, dataSource, 'franchisesCursor', 'franchises')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.franchisesCursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOffersSearchData($event, this, 'company', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchFranchises', dataSource?.franchisesCursor, dataSource, 'franchisesCursor', 'franchises')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.franchises || dataSource?.franchises?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Franchise Listed'",
                    "titleId": "'view-company-franchises-page-empty-state-primitive-title-id'",
                    "image": "'assets/icon/dynamic-ui/Product.svg'",
                    "imageId": "'view-company-franchises-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.franchises || dataSource?.franchises?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'view-company-franchises-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-company-franchises-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "claim-company-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'form-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "$ngIf": "isLoading"
              }
            },
            {
              "element": "div",
              "attributes": {
                "class": "resize-page-templates-container",
                "$ngIf": "!isLoading"
              },
              "children": [
                {
                  "element": "page-header-primitive",
                  "properties": {
                    "headerType": "'HeaderForSubPages'",
                    "title": "'Claim this company'",
                    "leftIcon": "'assets/icon/dynamic-ui/Close_Grey.svg'",
                    "leftIconId": "'claim-company-page-header-primitive-back-id'"
                  },
                  "events": {
                    "leftActionEmitter": "$actionHelper.goBackPage()"
                  }
                },
                {
                  "element": "ion-content",
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "hint-txt",
                        "id": "claim-company-page-hint-one-id"
                      },
                      "properties": {
                        "$innerHTML": "'If you are the true legal owner of this entity and someone else is currently in control of the page, you can get in touch with us to take corrective action by clicking on the button below.'"
                      }
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "class": "hint-txt",
                        "id": "claim-company-page-hint-two-id"
                      },
                      "properties": {
                        "$innerHTML": "'Please add any supporting evidence you deem necessary to ensure a rapid response.'"
                      }
                    },
                    {
                      "element": "form-primitive",
                      "properties": {
                        "formContainerId": "'claim-company-page-form'",
                        "predefineData": "{'companyId': $actionHelper.getActiveDomainId() }",
                        "dataSource": {
                          "controllers": [
                            {
                              "key": "claimantContactInfo",
                              "label": "Contact Details",
                              "display": true,
                              "relatedTo": null,
                              "controlType": "textarea",
                              "placeholder": "Please let us know how we can contact you",
                              "value": null,
                              "withNullValue": false,
                              "actionTitle": null,
                              "required": true,
                              "icon": null,
                              "leftIcon": null,
                              "validators": [
                                {
                                  "name": "fromSchema",
                                  "fieldPath": "mutation.company.claim.model.fields.claimantContactInfo",
                                  "messages": {
                                    "isRequired": "You have not provided your contact details"
                                  }
                                }
                              ],
                              "controlApi": null,
                              "controlAnotherApi": null
                            },
                            {
                              "key": "details",
                              "label": "Details",
                              "display": true,
                              "relatedTo": null,
                              "controlType": "textarea",
                              "placeholder": "Explain why you should be made owner of this page",
                              "value": null,
                              "withNullValue": false,
                              "actionTitle": null,
                              "required": true,
                              "icon": null,
                              "leftIcon": null,
                              "validators": [
                                {
                                  "name": "fromSchema",
                                  "fieldPath": "mutation.company.claim.model.fields.details",
                                  "messages": {
                                    "isRequired": "Details required"
                                  }
                                }
                              ],
                              "controlApi": null,
                              "controlAnotherApi": null
                            }
                          ],
                          "template": [
                            {
                              "type": "controller",
                              "controllerKey": "claimantContactInfo"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "details"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "element": "button-primitive",
                      "attributes": {
                        "id": "claim-company-page-action-id"
                      },
                      "properties": {
                        "text": "'Contact Us'",
                        "disableButton": "!$actionHelper.isValidForm()",
                        "action": {
                          "query": "mutation {  company {\n    claim (\n      id: $templateContext->activeFormArguments.companyId,\n      model: {\n      claimantContactInfo: $templateContext->activeFormArguments.claimantContactInfo,\n      details: $templateContext->activeFormArguments.details,\n    }) {\n      id\n    }\n  }\n}\n",
                          "postAction": "$actionHelper.showToast('Your request is under review. We will get back to you soon'); $actionHelper.goBackPage()\n"
                        }
                      },
                      "events": {
                        "actionEmitter": "$actionHelper.submitForm($event)"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "createCompany-page-template",
      "functions": {
        "uploadPhoto": "function ($id, $event) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $photo: Upload!) {\n        company {\n          uploadLogo(id: $id, photo: $photo)\n        }\n      }\n    `, {id: $id, photo: $event}).then(uploadResponse => {\n        $actionHelper.notifiySubscribers(['create-company'], false, true); \n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Create Company'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'create-company-page-header-primitive-back-id'",
                "buttonLabel": "'Save'",
                "buttonLabelId": "'create-company-page-header-primitive-save-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation{  company {\n    create(\n      model: {\n        name: $templateContext->activeFormArguments.name,\n        companyType: $dynamicUiExpression((|getParamFromEnum(templateContext.initialDataSource.companyTypes, $templateContext->activeFormArguments.companyType)|))\n        sector: $templateContext->activeFormArguments.sector,\n        country: $templateContext->activeFormArguments.country,\n        city: $templateContext->activeFormArguments.city,\n        keywords: $dynamicUiExpression((|prepareLookup(templateContext.activeFormArguments, 'keyword')|)),\n        brands: []\n      }, \n      role: {\n        positionName: $templateContext->activeFormArguments.positionName,\n        roleName: $templateContext->activeFormArguments.positionType\n      }\n    ) {\n      id \n    }\n  }\n}\n",
                  "postAction": "if($actionHelper.getFormGroupData('Image'))  templateContext.additionalData.parentPage.uploadPhoto($graphQlResults.company.create.id, $actionHelper.getFormGroupData('Image'))\nelse  $actionHelper.notifiySubscribers(['create-company'], false, true);\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event, {'parentPage': this}, initialDataSource)"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'create-company-page-form'",
                    "formWithImage": true,
                    "isThumbnailImage": true,
                    "imageChooserActionLabel": "'Upload Your Company Logo'",
                    "imageFormControlName": "'Image'",
                    "isRequiredImage": false,
                    "defaultImage": "'assets/icon/dynamic-ui/UploadPhoto.svg'",
                    "predefineData": "{'name': $actionHelper.getSearchInputValue()}",
                    "withBeforeInitFunction": true,
                    "imageSchemaValidationPath": "'mutation.company.uploadLogo.photo'",
                    "dataSource": {
                      "functions": {
                        "beforeInit": "function() {  this.$actionHelper.getKeywordsLookups();\n  return this.$actionHelper.prepareLookups()\n}\n",
                        "afterInit": "function() {  this.formPrimitive.initialDataSource.keywords.forEach(x => {x.selected = false; x.isSelected = false});  \n  this.formPrimitive.initialDataSource.countries.forEach(x => {x.selected = false; x.isSelected = false});\n}\n",
                        "addNewKeyword": "function ($keyword, parentComponent) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($keyword: String!) {\n        company {\n          addKeyword(title: $keyword) {\n            lookupId\n            name\n          }\n        }\n      }\n    `, {keyword: $keyword}).then(data => {   \n        this.$actionHelper.getKeywordsLookups();\n        const newOption = _.get(data, 'company.addKeyword', null);\n        if(newOption) {\n          newOption.isSelected = true;\n          parentComponent.options.unshift(newOption);\n          parentComponent.initialOptions.unshift(newOption);\n          parentComponent.getInitialList();  \n        }\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
                        "openKeywords": "function($event,form, formGroup, initialDataSource, formsData) {  this.$actionHelper.openMultiSelectModal('Keywords', 'Tap to add a new keyword', 'Keyword already exists', $event.element, formGroup, initialDataSource.keywords, \n  $event.element.value, false, formsData, true, true, initialDataSource, (newKeyword, parentComponent) => { this.addNewKeyword(newKeyword, parentComponent) })   \n}\n"
                      },
                      "controllers": [
                        {
                          "key": "name",
                          "label": "Company Name",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter company name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.create.model.fields.name",
                              "messages": {
                                "isRequired": "Company name is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "companyType",
                          "label": "Company Type",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select your company type",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": "Select Company Type",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select Company Type', $event.element, formGroup, formsData, initialDataSource.companyTypes, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.create.model.fields.companyType",
                              "messages": {
                                "isRequired": "Company type is required"
                              }
                            }
                          ],
                          "lookups": "companyTypes",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "sector",
                          "label": "Sector",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a sector",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": "Select a Sector",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSectorsModal('Select a Sector', $event.element, formGroup, initialDataSource.sectors)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.create.model.fields.sector",
                              "messages": {
                                "isRequired": "sector is required"
                              }
                            }
                          ],
                          "lookups": "sectors",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "country",
                          "label": "Headquarters Country",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a city",
                          "defaultValue": "LB",
                          "value": null,
                          "valueType": "country",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": "Select Country",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openCountriesModal('Select Country', $event.element, formGroup, initialDataSource.countries, false)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(formPrimitive.getGraphQL, $event.newValue).then(\n(data) => {\nformsData.lookups.cities = data.cities\nconst cityController = formsData.controllers.find(controller => controller.key === 'city');\nif(cityController) {\n$actionHelper.setFormGroupData('city',null)\ncityController.value = null;\n}\nformPrimitive.detectChanges();\n}\n)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.create.model.fields.country",
                              "messages": {
                                "isRequired": "City is required"
                              }
                            }
                          ],
                          "lookups": "countries",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "city",
                          "label": "Headquarters City",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a City",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": "Select  City",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select  City', $event.element, formGroup, formsData, formsData.lookups.cities, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.create.model.fields.city",
                              "messages": {
                                "isRequired": "City is required"
                              }
                            }
                          ],
                          "lookups": "cities",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "keyword",
                          "label": "Keywords",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "chips-button",
                          "placeholder": "Select one or more keywords",
                          "value": null,
                          "valueType": "multiSelect",
                          "valuePath": null,
                          "withNullValue": true,
                          "actionTitle": "Keywords",
                          "itemAddedHint": "Tap to add a new keyword",
                          "itemExistErrorMessage": "Keyword already exists",
                          "required": false,
                          "buttonActionEmitter": "this.openKeywords($event, form, formGroup, initialDataSource, formsData)",
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.create.model.fields.keywords",
                              "messages": {
                                "isRequired": "Keywords are required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "lookups": "keywords",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "positionType",
                          "label": "Your role in this company",
                          "display": true,
                          "relatedTo": null,
                          "relatedToSecondField": "positionName",
                          "controlType": "button-input",
                          "placeholder": "Select position type",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": "Select Position Type",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select Position Type', $event.element, formGroup, formsData, initialDataSource.companyPositionTypes, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.create.role.fields.roleName",
                              "messages": {
                                "isRequired": "Position type is required"
                              }
                            }
                          ],
                          "lookups": "positionTypes",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "positionName",
                          "label": "Position Name",
                          "display": true,
                          "disabled": "($actionHelper?.getFormGroupData('positionType') === 'Mentor' || $actionHelper?.getFormGroupData('positionType') === 'Advisor')",
                          "relatedValue": "$actionHelper.getFormGroupData('positionType') === 'Mentor' ? 'Mentor' : ($actionHelper.getFormGroupData('positionType') === 'Advisor' ? 'Advisor' : '')",
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter position name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.create.role.fields.positionName",
                              "messages": {
                                "isRequired": "Position name is required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Company Information"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "name"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "companyType"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "sector"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "country"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "city"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "keyword"
                            }
                          ]
                        },
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Role Information"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "positionType"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "positionName"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "events": {
                    "photoActionEmitter": "$actionHelper.setFormGroupData('Image',$event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "diplomatic-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkMainEntity(this.dataSource, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.members, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.verifiedKeyStaff, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.ambassadorialNetworks, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.tradeOffices, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.admins, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "changeDetectionSubjects": [
        "edit-diplomatic",
        "manage-diplomaticMission-key-staff",
        "manage-diplomaticMission-administrators",
        "add-diplomaticMission-administrators",
        "manage-diplomaticMission-ambassadorialNetworks",
        "manage-diplomaticMission-tradeOffice",
        "add-office",
        "edit-office",
        "add-office-member",
        "add-diplomatic-role",
        "remove-office-member",
        "delete-office",
        "manage-company",
        "manage-organization",
        "add-post",
        "add-event",
        "add-media",
        "delete-image",
        "edit-post",
        "delete-post"
      ],
      "templateDefinition": [
        {
          "element": "ion-content",
          "attributes": {
            "class": "{{ dataSource?.canManage ? 'animated-skeleton-loading grayBg full-screen with-fabButton' : 'animated-skeleton-loading grayBg full-screen'}}"
          },
          "children": [
            {
              "element": "skeleton-primitive",
              "properties": {
                "skeletonType": "'domain-page-skeleton'"
              },
              "attributes": {
                "class": "{{isLoading ? '' : 'hidden'}}"
              }
            },
            {
              "element": "div",
              "attributes": {
                "class": null
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "main-card-seperator"
                  },
                  "children": [
                    {
                      "element": "main-card-primitive",
                      "children": [
                        {
                          "element": "cover-image-primitive",
                          "properties": {
                            "coverImageUrl": "''",
                            "hasTopBar": true,
                            "overlayType": "'accent-one'",
                            "topBarType": "'simple_top_bar'",
                            "leftIcon": "'assets/icon/dynamic-ui/Back_White.svg'",
                            "leftIconId": "'diplomatic-mission-page-cover-image-primitive-back-id'",
                            "rightIcon": "'assets/icon/dynamic-ui/Dots_White.svg'",
                            "rightIconId": "'diplomatic-mission-page-cover-image-primitive-dots-id'"
                          },
                          "events": {
                            "leftActionEmitter": "$actionHelper.goBackPage()",
                            "rightActionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource.mainDiplomaticActions, null, dataSource, {'loggedinFirstName': initialDataSource?.firstName, 'loggedinLastName': initialDataSource?.lastName})"
                          }
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "profile-details"
                          },
                          "children": [
                            {
                              "element": "div",
                              "attributes": {
                                "class": "profile-details-container"
                              },
                              "children": [
                                {
                                  "element": "logo-primitive",
                                  "properties": {
                                    "logoId": "'diplomatic-mission-page-logo-primitive-logo-id'",
                                    "logoUrl": "$dynamicUiExtraService.getDiplomaticMissionImage(dataSource)",
                                    "name": "$dynamicUiExtraService.getDiplomaticMissionName(dataSource)"
                                  },
                                  "events": {
                                    "logoEvent": "$actionHelper.showImage($dynamicUiExtraService.getDiplomaticMissionMainImage(dataSource), $dynamicUiExtraService.getDiplomaticMissionId(dataSource), $dynamicUiExtraService.getDiplomaticMissionName(dataSource))",
                                    "avatarEvent": "dataSource?.canManage ? $actionHelper.navigateToSubPage('diplomaticMission/edit') : null"
                                  }
                                },
                                {
                                  "element": "title-primitive",
                                  "properties": {
                                    "title": "$dynamicUiExtraService.getDiplomaticMissionName(dataSource)",
                                    "titleId": "'diplomatic-mission-page-title-primitive-title-' + $dynamicUiExtraService.getDiplomaticMissionName(dataSource) + '-id'"
                                  }
                                },
                                {
                                  "element": "badges-primitive",
                                  "properties": {
                                    "badgeContainerId": "'diplomatic-mission-page-badges-primitive'",
                                    "badges": "dataSource?.badges"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "main-buttons-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.canManage"
                      },
                      "properties": {
                        "leftButtonTitle": "'Manage'",
                        "leftButtonTitleId": "'diplomatic-mission-page-main-buttons-primitive-manage-id'",
                        "leftButtonIcon": "'assets/icon/dynamic-ui/Manage_Green.svg'",
                        "leftButtonDisabled": "!dataSource?.canManage",
                        "rightButtonTitle": "'Invite'",
                        "rightButtonTitleId": "'diplomatic-mission-page-main-buttons-primitive-invite-id'",
                        "rightButtonIcon": "'assets/icon/dynamic-ui/Invite_Green.svg'",
                        "rightButtonDisabled": "!dataSource?.canInvite"
                      },
                      "events": {
                        "leftButtonActionEmitter": "$actionHelper.navigateToSubPage('diplomaticMission/manageDiplomatic')",
                        "rightButtonActionEmitter": "$actionHelper.share(\ninitialDataSource.firstName + ' ' + initialDataSource.lastName + ' and thousands of influential Lebanese diaspora have already registered on the page. Contact the diplomatic mission, get updates and be part of the community. Don’t miss out!',\n$dynamicUiExtraService.getDiplomaticMissionImage(dataSource),\n'Join ' + $dynamicUiExtraService.getDiplomaticMissionName(dataSource) + ' on DiasporaID',\n'The Global Lebanese Network',\n$dynamicUiExtraService.getDiplomaticMissionId(dataSource), 'DiasporaDiplomatic')"
                      }
                    },
                    {
                      "element": "main-buttons-primitive",
                      "attributes": {
                        "$ngIf": "!dataSource?.canManage && dataSource?.canFollow && !dataSource?.canUnFollow"
                      },
                      "properties": {
                        "leftButtonTitle": "'Follow'",
                        "leftButtonTitleId": "'diplomatic-mission-page-main-buttons-primitive-follow-id'",
                        "leftButtonIcon": "'assets/icon/dynamic-ui/follow_white.svg'",
                        "rightButtonTitle": "'Message'",
                        "rightButtonTitleId": "'diplomatic-mission-page-main-buttons-primitive-message-id'",
                        "rightButtonIcon": "'assets/icon/dynamic-ui/message.svg'",
                        "rightButtonDisabled": "!dataSource?.canSendMessage"
                      },
                      "events": {
                        "leftButtonActionEmitter": "$actionHelper.linkDomain('DiplomaticMission', $dynamicUiExtraService.getDiplomaticMissionId(dataSource), dataSource)",
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('conversationMessages/diplomaticMission/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource) + '/' + initialDataSource.userMailboxId + '/' + dataSource.receiverMailboxId)"
                      }
                    },
                    {
                      "element": "main-buttons-primitive",
                      "attributes": {
                        "$ngIf": "!dataSource?.canManage && !dataSource?.canFollow && dataSource?.canUnFollow"
                      },
                      "properties": {
                        "leftButtonTitle": "'Following'",
                        "leftButtonTitleId": "'diplomatic-mission-page-main-buttons-primitive-following-id'",
                        "leftButtonIcon": "'assets/icon/dynamic-ui/Following_white.svg'",
                        "leftButtonDisabled": "!dataSource?.canUnFollow",
                        "rightButtonTitle": "'Message'",
                        "rightButtonTitleId": "'diplomatic-mission-page-main-buttons-primitive-message-id'",
                        "rightButtonIcon": "'assets/icon/dynamic-ui/message.svg'",
                        "rightButtonDisabled": "!dataSource?.canSendMessage"
                      },
                      "events": {
                        "leftButtonActionEmitter": "$actionHelper.unLinkDomain('DiplomaticMission', $dynamicUiExtraService.getDiplomaticMissionId(dataSource), dataSource)",
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('conversationMessages/diplomaticMission/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource) + '/' + initialDataSource.userMailboxId + '/' + dataSource.receiverMailboxId)"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.generalDetailsInfo && dataSource?.generalDetailsInfo.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/About_Active.svg'",
                        "mainIconId": "'diplomatic-mission-page-about-section-block-header-primitive-main-icon-id'",
                        "title": "'About'",
                        "titleId": "'diplomatic-mission-page-about-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Information & contact details'",
                        "subTitleId": "'diplomatic-mission-page-about-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "dataSource?.canManage",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'diplomatic-mission-page-about-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "'Edit'",
                        "actionLabelId": "'diplomatic-mission-page-about-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('diplomaticMission/edit/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource))"
                      }
                    },
                    {
                      "element": "about-primitive",
                      "properties": {
                        "aboutUsContainerId": "'diplomatic-mission-page-about-us-primitive'",
                        "aboutUsItems": "dataSource?.generalDetailsInfo",
                        "characterLimit": 500,
                        "unTruncatedText": "'Show More '",
                        "truncatedText": "'Show Less '"
                      },
                      "events": {
                        "emptyStateActionEmitter": "(dataSource?.canManage) ? $actionHelper.navigateTo('diplomaticMission/edit/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource)) : null"
                      }
                    },
                    {
                      "element": "social-media-strip-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.socialMediaInfo && dataSource?.socialMediaInfo.length > 0)"
                      },
                      "properties": {
                        "socialMediaContainerId": "'diplomatic-mission-page-social-media-strip-primitive'",
                        "socialMediaItems": "dataSource?.socialMediaInfo",
                        "showEmptyState": "dataSource?.canManage",
                        "icon": "'assets/icon/dynamic-ui/Social.svg'",
                        "iconId": "'diplomatic-mission-page-social-media-strip-primitive-icon-id'",
                        "title": "'Social Media'",
                        "titleId": "'diplomatic-mission-page-social-media-strip-primitive-title-id'",
                        "emptyStateMessage": "'Add Social Media Links'",
                        "emptyStateMessageId": "'diplomatic-mission-page-social-media-strip-primitive-empty-state-message-id'"
                      },
                      "events": {
                        "emptyStateActionEmitter": "(dataSource?.canManage) ? $actionHelper.navigateTo('diplomaticMission/edit/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource)) : null"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "{{dataSource?.members && dataSource?.members.length > 0 ? 'border-separtor pdb-0' : 'border-separtor'}}",
                    "$ngIf": "(dataSource?.canManage && dataSource?.members && dataSource?.members.length > 0) ||\n(dataSource?.canManage && dataSource?.canInvite && (!dataSource?.members || dataSource?.members.length == 0)) ||\n(!dataSource?.canManage && dataSource?.members && dataSource?.members.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/People_Active.svg'",
                        "mainIconId": "'diplomatic-mission-page-members-section-block-header-primitive-main-icon-id'",
                        "title": "'People'",
                        "titleId": "'diplomatic-mission-page-members-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Registered diaspora members'",
                        "subTitleId": "'diplomatic-mission-page-members-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.members && dataSource?.members.length > 0) || (!dataSource?.canManage && dataSource?.members && dataSource?.members.length > 0) ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'diplomatic-mission-page-members-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "'More'",
                        "actionLabelId": "'diplomatic-mission-page-members-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('diplomaticMission/members/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.members && dataSource?.members.length > 0"
                      },
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.members"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('profile/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'diplomatic-mission-page-members-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'diplomatic-mission-page-members-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'diplomatic-mission-page-members-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.canManage && dataSource?.canInvite && (!dataSource?.members || dataSource?.members.length == 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/icon/dynamic-ui/People.svg'",
                        "imageId": "'diplomatic-mission-page-members-section-empty-state-primitive-image-id'",
                        "title": "'Invite members to register and receive your updates via DiasporaID'",
                        "titleId": "'diplomatic-mission-page-members-section-empty-state-primitive-title-id'",
                        "buttonLabel": "'Invite Lebanese Diaspora'",
                        "buttonId": "'diplomatic-mission-page-members-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.share(\ninitialDataSource.firstName + ' ' + initialDataSource.lastName + ' and thousands of influential Lebanese diaspora have already registered on the page. Contact the diplomatic mission, get updates and be part of the community. Don’t miss out!',\n$dynamicUiExtraService.getDiplomaticMissionImage(dataSource),\n$dynamicUiExtraService.getDiplomaticMissionName(dataSource) + ' *diplomatic-page.diplomatic.main-card.invite.title*',\n'The Global Lebanese Network',\n$dynamicUiExtraService.getDiplomaticMissionId(dataSource), 'DiasporaDiplomatic')"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "(dataSource?.admins && dataSource?.admins.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/administrators.svg'",
                        "mainIconId": "'diplomatic-mission-page-admins-section-block-header-primitive-main-icon-id'",
                        "title": "'Administrators'",
                        "titleId": "'diplomatic-mission-page-admins-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Page administrators'",
                        "subTitleId": "'diplomatic-mission-page-admins-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.admins && dataSource?.admins.length > 0) || (!dataSource?.canManage && dataSource?.admins && dataSource?.admins.length > 0) ? true : false ",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'diplomatic-mission-page-admins-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'diplomatic-mission-page-admins-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "dataSource?.canManage ? $actionHelper.navigateTo('diplomaticMission/manageDiplomaticAdministrator/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource)) : $actionHelper.navigateTo('diplomaticMission/viewDiplomaticAdministrator/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.admins"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('profile/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'diplomatic-mission-page-admins-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'diplomatic-mission-page-admins-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'diplomatic-mission-page-admins-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor box-type",
                    "$ngIf": "dataSource?.canJoin"
                  },
                  "children": [
                    {
                      "element": "box-card-primitive",
                      "properties": {
                        "title": "'Is This Your Diplomatic Mission?'",
                        "titleId": "'diplomatic-mission-page-create-role-title-id'",
                        "subTitle": "'Are you a diplomat or a diaspora member?'",
                        "subTitleId": "'diplomatic-mission-page-create-role-subtitle-id'",
                        "arrayOfItems": "initialDataSource?.embassyMemberBoxActions"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#boxItemsTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "box-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('profile/addDiplomaticRole/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource), {'diplomaticMissionId': $dynamicUiExtraService.getDiplomaticMissionId(dataSource), userId: initialDataSource.profileId})"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'diplomatic-mission-page-create-role', 'topNetworker': false, 'lastIcon': 'assets/icon/dynamic-ui/Arrow_Right.svg'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "dataSource?.verifiedKeyStaff && dataSource?.verifiedKeyStaff.length > 0"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/vip_badge.svg'",
                        "mainIconId": "'diplomatic-mission-page-key-staff-section-block-header-primitive-main-icon-id'",
                        "title": "'Diplomats & Key Staff'",
                        "titleId": "'diplomatic-mission-page-key-staff-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Ambassadors & consuls'",
                        "subTitleId": "'diplomatic-mission-page-key-staff-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": true,
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'diplomatic-mission-page-key-staff-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "'View All'",
                        "actionLabelId": "'diplomatic-mission-page-key-staff-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('diplomaticMission/viewDiplomaticKeyStaff/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.verifiedKeyStaff"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('profile/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'diplomatic-mission-page-key-staff-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'diplomatic-mission-page-key-staff-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'diplomatic-mission-page-key-staff-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "dataSource?.canAddPost || dataSource?.canAddEvent || (dataSource?.updates && dataSource?.updates.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/News_Active.svg'",
                        "mainIconId": "'diplomatic-mission-page-updates-section-block-header-primitive-main-icon-id'",
                        "title": "'Updates'",
                        "titleId": "'diplomatic-mission-page-updates-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Posts & discussions'",
                        "subTitleId": "'diplomatic-mission-page-updates-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.canManage && dataSource?.updates && dataSource?.updates.length > 0) || (!dataSource?.canManage && dataSource?.updates && dataSource?.updates.length > 0)  ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'diplomatic-mission-page-updates-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'diplomatic-mission-page-updates-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('updates/diplomaticMission/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.updates && dataSource?.updates.length > 0"
                      },
                      "properties": {
                        "listType": "'news-list'",
                        "arrayOfItems": "dataSource?.updates"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "list-with-right-image-template",
                              "events": {
                                "click": "$actionHelper.navigateTo(item.type == 'Post' ? ('postDetails/' + item.id) : ('eventDetails/' + item.id))"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'diplomatic-mission-page-updates-item' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.canManage || dataSource?.canAddPost || dataSource?.canAddEvent)  && (!dataSource?.updates || dataSource?.updates.length === 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Post_Update.svg'",
                        "imageId": "'diplomatic-mission-page-updates-section-empty-state-primitive-image-id'",
                        "title": "'Notify followers and potential clients of important updates'",
                        "titleId": "'diplomatic-mission-page-updates-section-empty-state-primitive-title-id'",
                        "buttonLabel": "(dataSource?.canAddPost || dataSource?.canAddEvent) ? 'Post News or Events': null",
                        "buttonId": "'diplomatic-mission-page-updates-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource.diplomaticMissionNewsAndEventsActions, null, dataSource, {targetId: $dynamicUiExtraService.getDiplomaticMissionId(dataSource), targetName: $dynamicUiExtraService.getDiplomaticMissionName(dataSource), targetImage: $dynamicUiExtraService.getDiplomaticMissionImage(dataSource)} )"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "{{dataSource?.ambassadorialNetworks && dataSource?.ambassadorialNetworks.length > 0 ? 'border-separtor pdb-0' : 'border-separtor'}}",
                    "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.ambassadorialNetworks && dataSource?.ambassadorialNetworks.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/Ambassadorial_Network.svg'",
                        "mainIconId": "'diplomatic-mission-page-ambassadorial-networks-section-block-header-primitive-main-icon-id'",
                        "title": "'Ambassadorial Network'",
                        "titleId": "'diplomatic-mission-page-ambassadorial-networks-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Helping the mission'",
                        "subTitleId": "'diplomatic-mission-page-ambassadorial-networks-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.ambassadorialNetworks && dataSource?.ambassadorialNetworks.length > 0) || (!dataSource?.canManage && dataSource?.ambassadorialNetworks && dataSource?.ambassadorialNetworks.length > 0)  ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'diplomatic-mission-page-ambassadorial-networks-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'diplomatic-mission-page-ambassadorial-networks-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "(dataSource?.canManage) ? $actionHelper.navigateTo('diplomaticMission/manageDiplomaticAmbassadorialNetwork/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource)) : $actionHelper.navigateTo('diplomaticMission/viewDiplomaticAmbassadorialNetwork/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.ambassadorialNetworks && dataSource?.ambassadorialNetworks.length > 0"
                      },
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.ambassadorialNetworks"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('organization/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'diplomatic-mission-page-ambassadorial-networks-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Organization', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'diplomatic-mission-page-ambassadorial-networks-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Organization', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'diplomatic-mission-page-ambassadorial-networks-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.canManage && (!dataSource?.ambassadorialNetworks || dataSource?.ambassadorialNetworks.length == 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Ambassadorial_Network_green.svg'",
                        "imageId": "'diplomatic-mission-page-ambassadorial-networks-section-empty-state-primitive-image-id'",
                        "title": "'Showcase organizations supporting your mission'",
                        "titleId": "'diplomatic-mission-page-ambassadorial-networks-section-empty-state-primitive-title-id'",
                        "buttonLabel": "dataSource?.canManage ? 'Add Supporting Organizations': null",
                        "buttonId": "'diplomatic-mission-page-ambassadorial-networks-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('diplomaticMission/manageDiplomaticAmbassadorialNetwork/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource));"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.supportStaff && dataSource?.supportStaff.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/committee.svg'",
                        "mainIconId": "'diplomatic-mission-page-support-staff-section-block-header-primitive-main-icon-id'",
                        "title": "'Support Staff'",
                        "titleId": "'diplomatic-mission-page-support-staff-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Other diplomatic staff'",
                        "subTitleId": "'diplomatic-mission-page-support-staff-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.supportStaff && dataSource?.supportStaff.length > 0) || (!dataSource?.canManage && dataSource?.supportStaff && dataSource?.supportStaff.length > 0)  ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'diplomatic-mission-page-support-staff-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'diplomatic-mission-page-support-staff-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "(dataSource?.canManage) ? $actionHelper.navigateTo('diplomaticMission/manageDiplomaticOffices/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource)) : $actionHelper.navigateTo('diplomaticMission/viewDiplomaticOffices/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.supportStaff && dataSource?.supportStaff.length > 0"
                      },
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'quick-link-content'",
                        "arrayOfItems": "dataSource?.supportStaff"
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "class": "quick-link-content"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "simple-list-template",
                                  "events": {
                                    "click": "dataSource?.canManage ? $actionHelper.navigateTo('diplomaticMission/manageDiplomaticOfficesDetails/' + item.id, {'diplomaticMissionId': $activatedRoute.snapshot.params.id}) : $actionHelper.navigateTo('diplomaticMission/viewDiplomaticOfficeDetails/' + item.id, {'diplomaticMissionId': $activatedRoute.snapshot.params.id})"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'diplomatic-mission-page-support-staff-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "dataSource?.canManage ? $actionHelper.navigateTo('diplomaticMission/manageDiplomaticOfficesDetails/' + item.id, {'diplomaticMissionId': $activatedRoute.snapshot.params.id}) : $actionHelper.navigateTo('diplomaticMission/viewDiplomaticOfficeDetails/' + item.id, {'diplomaticMissionId': $activatedRoute.snapshot.params.id})"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Arrow_Right_Grey.svg', 'containerId': 'diplomatic-mission-page-support-staff-action', 'actionClass' :'quick-link-last-logo' }"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.canManage && (!dataSource?.supportStaff || dataSource?.supportStaff.length == 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Support_Staff.svg'",
                        "imageId": "'diplomatic-mission-page-support-staff-section-empty-state-primitive-image-id'",
                        "title": "'Create support staff offices. Assign users and manage their roles '",
                        "titleId": "'diplomatic-mission-page-support-staff-section-empty-state-primitive-title-id'",
                        "buttonLabel": "dataSource?.canManage ? 'Create a Support Office' : null",
                        "buttonId": "'diplomatic-mission-page-support-staff-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('diplomaticMission/manageDiplomaticOffices/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource));"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "{{dataSource?.tradeOffices && dataSource?.tradeOffices.length > 0 ? 'border-separtor pdb-0' : 'border-separtor'}}",
                    "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.tradeOffices && dataSource?.tradeOffices.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/affiliation.svg'",
                        "mainIconId": "'diplomatic-mission-page-trade-offices-section-block-header-primitive-main-icon-id'",
                        "title": "'Trade Office '",
                        "titleId": "'diplomatic-mission-page-trade-offices-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Lebanese-owned & vetted companies'",
                        "subTitleId": "'diplomatic-mission-page-trade-offices-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.tradeOffices && dataSource?.tradeOffices.length > 0) || (!dataSource?.canManage && dataSource?.tradeOffices && dataSource?.tradeOffices.length > 0) ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'diplomatic-mission-page-trade-offices-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'diplomatic-mission-page-trade-offices-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "(dataSource?.canManage) ? $actionHelper.navigateTo('diplomaticMission/manageDiplomaticTradeOffice/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource)) : $actionHelper.navigateTo('diplomaticMission/viewDiplomaticTradeOffice/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.tradeOffices && dataSource?.tradeOffices.length > 0"
                      },
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.tradeOffices"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('company/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'diplomatic-mission-page-trade-offices-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Company', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'diplomatic-mission-page-trade-offices-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Company', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'diplomatic-mission-page-trade-offices-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.canManage && (!dataSource?.tradeOffices || dataSource?.tradeOffices.length == 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Trade_Office.svg'",
                        "imageId": "'diplomatic-mission-page-trade-offices-section-empty-state-primitive-image-id'",
                        "title": "'Promote business with Lebanese companies in your community'",
                        "titleId": "'diplomatic-mission-page-trade-offices-section-empty-state-primitive-title-id'",
                        "buttonLabel": "dataSource?.canManage ? 'Add Lebanese Companies' : null",
                        "buttonId": "'diplomatic-mission-page-trade-offices-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('diplomaticMission/manageDiplomaticTradeOffice/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource));"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.gallery && dataSource?.gallery.length > 0)",
                    "class": "border-separtor"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/View_Gallery.svg'",
                        "mainIconId": "'diplomatic-mission-page-gallery-section-block-header-primitive-main-icon-id'",
                        "title": "'Media Gallery'",
                        "titleId": "'diplomatic-mission-page-gallery-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Photos & videos'",
                        "subTitleId": "'diplomatic-mission-page-gallery-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.gallery && dataSource?.gallery.length > 0) || (!dataSource?.canManage && dataSource?.gallery && dataSource?.gallery.length > 0) ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'diplomatic-mission-page-gallery-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'diplomatic-mission-page-gallery-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('gallery/diplomaticMission/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource))"
                      }
                    },
                    {
                      "element": "media-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.gallery && dataSource?.gallery.length > 0"
                      },
                      "events": {
                        "click": "$actionHelper.navigateTo('gallery/diplomaticMission/' + $dynamicUiExtraService.getDiplomaticMissionId(dataSource))"
                      },
                      "properties": {
                        "mediaContainerId": "'diplomatic-mission-page-gallery'",
                        "items": "dataSource?.gallery",
                        "youtubeIcon": "'assets/icon/dynamic-ui/YouTube_Video.svg'"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.canManage) && !dataSource?.gallery || dataSource?.gallery.length === 0"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Media_Gallery.svg'",
                        "imageId": "'diplomatic-mission-page-gallery-section-empty-state-primitive-image-id'",
                        "title": "'Show sights, achievements or projects'",
                        "titleId": "'diplomatic-mission-page-gallery-section-empty-state-primitive-title-id'",
                        "buttonLabel": "dataSource?.canUploadMedia ? 'Add Photos or Videos' : null",
                        "buttonId": "'diplomatic-mission-page-gallery-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('addMedia/' + dataSource?.galleryId, {'canUploadImage': dataSource.canUploadImage, 'canUploadVideoLink': dataSource.canUploadVideoLink, targetId: $dynamicUiExtraService.getDiplomaticMissionId(dataSource), targetName: $dynamicUiExtraService.getDiplomaticMissionName(dataSource), targetImage: $dynamicUiExtraService.getDiplomaticMissionImage(dataSource)})"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "element": "button-primitive",
          "attributes": {
            "$ngIf": "dataSource?.canAddPost || dataSource?.canAddEvent || dataSource?.canUploadMedia",
            "id": "diplomatic-mission-page-fab-button"
          },
          "properties": {
            "type": "'fab-button'",
            "icon": "'assets/icon/dynamic-ui/Add_white.svg'",
            "fabButtonId": "'diplomatic-fab-button'"
          },
          "events": {
            "actionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource?.diplomaticMissionRoleActions, null, dataSource, {targetId: $dynamicUiExtraService.getDiplomaticMissionId(dataSource), targetName: $dynamicUiExtraService.getDiplomaticMissionName(dataSource), targetImage: $dynamicUiExtraService.getDiplomaticMissionImage(dataSource)} )"
          }
        }
      ]
    },
    {
      "name": "manageDiplomaticMission-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Manage Embassy'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-diplomatic-mission-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "card-list-primitive",
                  "properties": {
                    "listType": "'simple-list'",
                    "classList": "'quick-link-content'",
                    "arrayOfItems": "initialDataSource?.permissions?.diplomaticMission"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#itemListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "simple-list-template",
                          "events": {
                            "click": "$actionHelper.navigateToSubPage(item.pageUrl)"
                          },
                          "properties": {
                            "dataSource": "{'item': item, 'containerId': 'manage-diplomatic-mission-page-permission' }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "editDiplomatic-page-template",
      "functions": {
        "uploadPhoto": "function ($id, $event) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $photo: Upload!) {\n        diplomaticMission {\n          uploadLogo(id: $id, photo: $photo)\n        }\n      }\n    `, {id: $id, photo: $event}).then(uploadResponse => {\n        $actionHelper.showToast('Image updated successfully');\n        $actionHelper.notifiySubscribers(['edit-diplomatic'], false);          \n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Embassy Information'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'edit-diplomatic-mission-page-header-primitive-back-id'",
                "buttonLabel": "'Save'",
                "buttonLabelId": "'edit-diplomatic-mission-page-header-primitive-save-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation{  diplomaticMission {\n    update(\n      id: $templateContext->activeFormArguments.diplomaticMissionId, \n      model: {\n        name: $templateContext->activeFormArguments.name\n        introduction: $templateContext->activeFormArguments.description,\n        country: $templateContext->activeFormArguments.country,\n        city: $templateContext->activeFormArguments.city,\n        contactUs: {\n          email: $templateContext->activeFormArguments.email,\n          address: $templateContext->activeFormArguments.address,\n          phoneNumber: {\n            countryCode: $templateContext->activeFormArguments.countryCode,\n            isoCode: $templateContext->activeFormArguments.isoCode,\n            number: $templateContext->activeFormArguments.phoneNumber\n          },                            \n          poBox: $templateContext->activeFormArguments.poBox,\n          website: $templateContext->activeFormArguments.website\n        },\n        socialMedia: {\n          facebook: $templateContext->activeFormArguments.facebook,\n          instagram: $templateContext->activeFormArguments.instagram,\n          linkedin: $templateContext->activeFormArguments.linkedin,\n          twitter: $templateContext->activeFormArguments.twitter\n        }\n      }\n    ) {\n      id \n    }\n  }\n}\n",
                  "postAction": "$actionHelper.showToast('Diplomatic mission details updated successfully'); $actionHelper.notifiySubscribers(['edit-diplomatic'], true);\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event)"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'edit-diplomatic-mission-page-form'",
                    "predefineData": "{'diplomaticMissionId': $actionHelper.getActiveDomainId()}",
                    "formWithImage": "dataSource.actions.canUploadLogo",
                    "isThumbnailImage": true,
                    "imageChooserActionLabel": "'Change Logo'",
                    "initialData": "dataSource.diplomaticMission",
                    "imageFormControlName": "'Image'",
                    "isRequiredImage": false,
                    "imageValue": "'photoCover.imageThumbnailUrl'",
                    "avatarName": "'name'",
                    "withBeforeInitFunction": true,
                    "imageSchemaValidationPath": "'mutation.diplomaticMission.uploadLogo.photo'",
                    "dataSource": {
                      "functions": {
                        "beforeInit": "function() {  return this.$actionHelper.prepareLookups()\n}\n"
                      },
                      "controllers": [
                        {
                          "key": "name",
                          "label": "Name",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter embassy name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "name",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.update.model.fields.name",
                              "messages": {
                                "isRequired": "Embassy name is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "description",
                          "label": "Description",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "textarea",
                          "placeholder": "Add a short description here",
                          "class": "margin-bottom-14",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "introduction",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.update.model.fields.introduction",
                              "messages": {
                                "maxLength": "5000 Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "country",
                          "label": "Headquarters Country",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a country",
                          "value": null,
                          "valueType": "country",
                          "valuePath": "place.country",
                          "withNullValue": false,
                          "actionTitle": "Select Country",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openCountriesModal('Select Country', $event.element, formGroup, initialDataSource.countries, false)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(formPrimitive.getGraphQL, $event.newValue).then(\n(data) => {\nformsData.lookups.cities = data.cities;\nconst cityController = formsData.controllers.find(controller => controller.key === 'city');\nif(cityController) {\nif(!cityController.firstLoad) {\n$actionHelper.setFormGroupData('city',null)\ncityController.value = null;\n}\nformPrimitive.detectChanges();\ncityController.firstLoad = false;\n}\n}\n)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.update.model.fields.country",
                              "messages": {
                                "isRequired": "Country is required"
                              }
                            }
                          ],
                          "lookups": "countries",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "city",
                          "label": "Headquarters City",
                          "display": true,
                          "relatedTo": null,
                          "firstLoad": true,
                          "controlType": "button-input",
                          "placeholder": "Select a city",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": "place.city",
                          "withNullValue": false,
                          "actionTitle": "Select City",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select City', $event.element, formGroup, formsData, formsData.lookups.cities, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.update.model.fields.city",
                              "messages": {
                                "isRequired": "City is required"
                              }
                            }
                          ],
                          "lookups": "cities",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "address",
                          "label": "Address",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter address",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.address",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.update.model.fields.contactUs.fields.address",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "countryCode",
                          "label": "Phone Number",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Country code",
                          "countryIsoCodeKey": "isoCode",
                          "countryIsoCodePath": "contactUs.phone.isoCode",
                          "value": null,
                          "valueType": "phoneCountry",
                          "valuePath": "contactUs.phone",
                          "defaultValue": "place.country",
                          "withNullValue": false,
                          "actionTitle": "Select a Country",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openCountriesModal('Select Country', $event.element, formGroup, phoneCountries, true)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.update.model.fields.contactUs.fields.phoneNumber.fields.countryCode",
                              "messages": {
                                "isRequired": "Country code is required"
                              }
                            }
                          ],
                          "lookups": "phoneCountry",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "phoneNumber",
                          "label": null,
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "number",
                          "placeholder": "Phone number",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.phone.number",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.update.model.fields.contactUs.fields.phoneNumber.fields.number",
                              "messages": {
                                "isRequired": "Phone number is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "email",
                          "label": "Contact Email",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "email",
                          "placeholder": "Alternative email for notifications",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.email",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.update.model.fields.contactUs.fields.email",
                              "messages": {
                                "maxLength": "Character limit reached",
                                "pattern": "Please enter a valid email address"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "website",
                          "label": "Website",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Website link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.website",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.update.model.fields.contactUs.fields.website",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "poBox",
                          "label": "P.O. Box",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "number",
                          "placeholder": "Please enter the P.O. box number",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.poBox",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.update.model.fields.contactUs.fields.poBox",
                              "messages": {
                                "isRequired": "P.O. Box is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "facebook",
                          "label": "Facebook",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Facebook profile link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.facebook",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Facebook.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.update.model.fields.socialMedia.fields.facebook",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "linkedin",
                          "label": "LinkedIn",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "LinkedIn profile link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.linkedin",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/LinkedIn.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.update.model.fields.socialMedia.fields.linkedin",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "instagram",
                          "label": "Instagram",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Instagram profile link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.instagram",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Instagram.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.update.model.fields.socialMedia.fields.instagram",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "twitter",
                          "label": "Twitter",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Twitter profile link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.twitter",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Twitter.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.update.model.fields.socialMedia.fields.twitter",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Basic Information"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "name"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "description"
                            }
                          ]
                        },
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "country"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "city"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "address"
                            }
                          ]
                        },
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Contact Details"
                            },
                            {
                              "type": "group-input-with-button",
                              "children": [
                                {
                                  "type": "controller",
                                  "controllerKey": "countryCode"
                                },
                                {
                                  "type": "controller",
                                  "controllerKey": "phoneNumber"
                                }
                              ]
                            },
                            {
                              "type": "controller",
                              "controllerKey": "email"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "website"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "poBox"
                            }
                          ]
                        },
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Social Media"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "facebook"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "linkedin"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "instagram"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "twitter"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "events": {
                    "photoActionEmitter": "this.uploadPhoto($actionHelper.getActiveDomainId(), $event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "followersDiplomatic-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.followers, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Followers'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'follower-diplomatic-mission-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.followers && dataSource?.followers?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'follower-diplomatic-mission-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    followers: _.get(data, \"diplomaticMission.searchFollowers.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.searchFollowers.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  diplomaticMission(id: $templateContext->additionalData.diplomaticMissionId) {\n    searchFollowers(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.followers = $graphQlResults.followers;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'diplomaticMissionId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.followers"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'follower-diplomatic-mission-page-followers-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'follower-diplomatic-mission-page-followers-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'follower-diplomatic-mission-page-followers-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, 'followers', dataSource?.cursor, dataSource, 'cursor', 'followers')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchFollowers', dataSource?.cursor, dataSource, 'cursor', 'followers')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.followers || dataSource?.followers?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Followers Listed'",
                    "titleId": "'follower-diplomatic-mission-page-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'follower-diplomatic-mission-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.followers || dataSource?.followers?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'follower-diplomatic-mission-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'follower-diplomatic-mission-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "membersDiplomatic-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.verifiedMembers, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Members'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'member-diplomatic-mission-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.verifiedMembers && dataSource?.verifiedMembers?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'member-diplomatic-mission-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    verifiedMembers: _.get(data, \"diplomaticMission.searchEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.searchEmployees.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  diplomaticMission(id: $templateContext->additionalData.diplomaticMissionId) {\n    searchEmployees(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.verifiedMembers = $graphQlResults.verifiedMembers;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'diplomaticMissionId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.verifiedMembers"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'member-diplomatic-mission-page-members-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'member-diplomatic-mission-page-members-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'member-diplomatic-mission-page-members-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, 'employees', dataSource?.cursor, dataSource, 'cursor', 'verifiedMembers')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchEmployees', dataSource?.cursor, dataSource, 'cursor', 'verifiedMembers')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedMembers || dataSource?.verifiedMembers?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Members Listed'",
                    "titleId": "'member-diplomatic-mission-page-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'member-diplomatic-mission-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedMembers || dataSource?.verifiedMembers?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'member-diplomatic-mission-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'member-diplomatic-mission-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageDiplomaticKeyStaff-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'skeleton-page-with-three-segment'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Key Staff'",
                "headerClass": "'with-no-border'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-diplomatic-mission-key-staff-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "segment-primitive",
              "properties": {
                "segmentContainerId": "'manage-diplomatic-mission-key-staff-page-segment-container-id'",
                "segmentOneLabel": "'Pending Requests'",
                "segmentTwoLabel": "'Approved'",
                "segmentClass": "'two-segment'"
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentOneContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.unverifiedKeyStaff && dataSource?.unverifiedKeyStaff?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "inputType": "'search-input'",
                            "searchInputId": "'manage-diplomatic-mission-key-staff-page-unverified-key-staff-search-input-id'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    unverifiedKeyStaff: _.get(data, \"diplomaticMission.searchPendingEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    unverifiedKeyStaffCursor: _.get(data, \"diplomaticMission.searchPendingEmployees.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  diplomaticMission(id: $templateContext->additionalData.diplomaticMissionId) {\n    searchPendingEmployees(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.unverifiedKeyStaff = $graphQlResults.unverifiedKeyStaff;  dataSource.unverifiedKeyStaffCursor = $graphQlResults.unverifiedKeyStaffCursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'diplomaticMissionId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.unverifiedKeyStaff"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-diplomatic-mission-key-staff-page-unverified-key-staff-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageDiplomaticMissionPendingMembersActions, item, dataSource, {'diplomaticMissionId': $actionHelper.getActiveDomainId()})"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', 'itemId': item.title,  'containerId': 'manage-diplomatic-mission-key-staff-page-unverified-action'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.unverifiedKeyStaffCursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, 'pendingEmployees', dataSource?.unverifiedKeyStaffCursor, dataSource, 'unverifiedKeyStaffCursor', 'unverifiedKeyStaff')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.unverifiedKeyStaffCursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchPendingEmployees', dataSource?.unverifiedKeyStaffCursor, dataSource, 'unverifiedKeyStaffCursor', 'unverifiedKeyStaff')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.unverifiedKeyStaff || dataSource?.unverifiedKeyStaff?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Pending Requests'",
                        "titleId": "'manage-diplomatic-mission-key-staff-page-unverified-key-staff-empty-state-primitive-title-id'",
                        "subtitle": "'There are currently no pending requests. We will notify you when a new request arrives'",
                        "subTitleId": "'manage-diplomatic-mission-key-staff-page-unverified-key-staff-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/Person.svg'",
                        "imageId": "'manage-diplomatic-mission-key-staff-page-unverified-key-staff-empty-state-primitive-image-id'"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.unverifiedKeyStaff || dataSource?.unverifiedKeyStaff?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'manage-diplomatic-mission-key-staff-page-unverified-key-staff-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-diplomatic-mission-key-staff-page-unverified-key-staff-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentTwoContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.verifiedKeyStaff && dataSource?.verifiedKeyStaff?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "inputType": "'search-input'",
                            "searchInputId": "'manage-diplomatic-mission-key-staff-page-verified-key-staff-search-input-id'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    verifiedKeyStaff: _.get(data, \"diplomaticMission.searchVerifiedEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    verifiedKeyStaffCursor: _.get(data, \"diplomaticMission.searchVerifiedEmployees.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  diplomaticMission(id: $templateContext->additionalData.diplomaticMissionId) {\n    searchVerifiedEmployees(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.verifiedKeyStaff = $graphQlResults.verifiedKeyStaff;  dataSource.verifiedKeyStaffCursor = $graphQlResults.verifiedKeyStaffCursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'diplomaticMissionId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.verifiedKeyStaff"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-diplomatic-mission-key-staff-page-verified-key-staff-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageDiplomaticMissionApprovedMembersActions, item, dataSource, {'diplomaticMissionId': $actionHelper.getActiveDomainId()})"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', itemId: item.title, 'containerId': 'manage-diplomatic-mission-key-staff-page-verified-key-staff-action'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.verifiedKeyStaffCursor"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, 'verifiedEmployees', dataSource?.verifiedKeyStaffCursor, dataSource, 'verifiedKeyStaffCursor', 'verifiedKeyStaff')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchVerifiedEmployees', dataSource?.verifiedKeyStaffCursor, dataSource, 'verifiedKeyStaffCursor', 'verifiedKeyStaff')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedKeyStaff || dataSource?.verifiedKeyStaff?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Members'",
                        "titleId": "'manage-diplomatic-mission-key-staff-page-verified-key-staff-empty-state-primitive-title-id'",
                        "subtitle": "'Approved join requests will appear here'",
                        "subTitleId": "'manage-diplomatic-mission-key-staff-page-verified-key-staff-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/Person.svg'",
                        "imageId": "'manage-diplomatic-mission-key-staff-page-verified-key-staff-empty-state-primitive-image-id'"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedKeyStaff || dataSource?.verifiedKeyStaff?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'manage-diplomatic-mission-key-staff-page-verified-key-staff-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-diplomatic-mission-key-staff-page-verified-key-staff-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "viewDiplomaticKeyStaff-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.verifiedKeyStaff, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Diplomats & Key Staff'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-diplomatic-mission-key-staff-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.verifiedKeyStaff && dataSource?.verifiedKeyStaff?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'view-diplomatic-mission-key-staff-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    verifiedKeyStaff: _.get(data, \"diplomaticMission.searchVerifiedDiplomatAndKeyStaff.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.searchVerifiedDiplomatAndKeyStaff.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  diplomaticMission(id: $templateContext->additionalData.diplomaticMissionId) {\n    searchVerifiedDiplomatAndKeyStaff(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.verifiedKeyStaff = $graphQlResults.verifiedKeyStaff;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'diplomaticMissionId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.verifiedKeyStaff"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'view-diplomatic-mission-key-staff-page-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'view-diplomatic-mission-key-staff-page-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'view-diplomatic-mission-key-staff-page-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, 'verifiedDiplomatAndKeyStaff', dataSource?.cursor, dataSource, 'cursor', 'verifiedKeyStaff')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchVerifiedDiplomatAndKeyStaff', dataSource?.cursor, dataSource, 'cursor', 'verifiedKeyStaff')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedKeyStaff || dataSource?.verifiedKeyStaff?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Members Listed'",
                    "titleId": "'view-diplomatic-mission-key-staff-page-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'view-diplomatic-mission-key-staff-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedKeyStaff || dataSource?.verifiedKeyStaff?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'view-diplomatic-mission-key-staff-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-diplomatic-mission-key-staff-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "viewDiplomaticMissionAdministrators-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.admins, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Page Administrators'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-diplomatic-mission-administrator-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.admins && dataSource?.admins?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'view-diplomatic-mission-administrator-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    admins: _.get(data, \"diplomaticMission.searchAdmins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.searchAdmins.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  diplomaticMission(id: $templateContext->additionalData.diplomaticMissionId) {\n    searchAdmins(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.admins = $graphQlResults.admins;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'diplomaticMissionId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.admins"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'view-diplomatic-mission-administrator-page-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'view-diplomatic-mission-administrator-page-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'view-diplomatic-mission-administrator-page-action', 'actionClass': 'l-icon' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, 'admins', dataSource?.cursor, dataSource, 'cursor', 'admins')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchAdmins', dataSource?.cursor, dataSource, 'cursor', 'admins')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.admins || dataSource?.admins?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Page Administrators'",
                    "titleId": "'view-diplomatic-mission-administrator-page-empty-state-primitive-title-id'",
                    "subtitle": "'This page doesn’t currently have any administrators.'",
                    "subTitleId": "'view-diplomatic-mission-administrator-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'view-diplomatic-mission-administrator-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.admins || dataSource?.admins?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'view-diplomatic-mission-administrator-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-diplomatic-mission-administrator-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageDiplomaticAdministrators-page-template",
      "changeDetectionSubjects": [
        "add-diplomaticMission-administrators"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Page Administrators'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-diplomatic-mission-administrator-page-header-primitive-back-id'",
                "rightIcon": "($actionHelper?.checkSearchInputValue() || (dataSource?.admins && dataSource?.admins?.length > 0)) ? 'assets/icon/dynamic-ui/Add_Grey.svg': ''",
                "rightIconId": "'manage-diplomatic-mission-administrator-page-header-primitive-add-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "($actionHelper?.checkSearchInputValue() || (dataSource?.admins && dataSource?.admins?.length > 0)) ? $actionHelper.navigateTo('diplomaticMission/addDiplomaticAdministrator/' + $actionHelper.getActiveDomainId()): ''"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.admins && dataSource?.admins?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'manage-diplomatic-mission-administrator-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    admins: _.get(data, \"diplomaticMission.searchAdmins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.searchAdmins.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  diplomaticMission(id: $templateContext->additionalData.diplomaticMissionId) {\n    searchAdmins(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.admins = $graphQlResults.admins;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'diplomaticMissionId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.admins"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'manage-diplomatic-mission-administrator-page-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "events": {
                                "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageDiplomaticMissionCurrentAdministratorsActions, item, dataSource, {'diplomaticMissionId': $actionHelper.getActiveDomainId()})"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', itemId: item.title, 'containerId': 'manage-diplomatic-mission-administrator-page-action'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, 'admins', dataSource?.cursor, dataSource, 'cursor', 'admins')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchAdmins', dataSource?.cursor, dataSource, 'cursor', 'admins')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.admins || dataSource?.admins?.length == 0)"
                  },
                  "events": {
                    "buttonActionEmitter": "$actionHelper.navigateTo('diplomaticMission/addDiplomaticAdministrator/' + $actionHelper.getActiveDomainId())"
                  },
                  "properties": {
                    "title": "'No Page Administrators'",
                    "titleId": "'manage-diplomatic-mission-administrator-page-empty-state-primitive-title-id'",
                    "subtitle": "'This page doesn’t currently have any administrators. You can assign a page member or invite someone by email'",
                    "subTitleId": "'manage-diplomatic-mission-administrator-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'manage-diplomatic-mission-administrator-page-empty-state-primitive-image-id'",
                    "buttonLabel": "'Add Page Administrator'",
                    "buttonId": "'manage-diplomatic-mission-administrator-page-empty-state-primitive-button-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.admins || dataSource?.admins?.length == 0)"
                  },
                  "properties": {
                    "title": "'Search this list'",
                    "titleId": "'manage-diplomatic-mission-administrator-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'manage-diplomatic-mission-administrator-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "addDiplomaticAdministrator-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'skeleton-page-with-two-segment'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Add Page Administrator '",
                "headerClass": "'with-no-border'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'add-diplomatic-mission-administrator-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "segment-primitive",
              "properties": {
                "segmentContainerId": "'add-diplomatic-mission-administrator-page-segment-container-id'",
                "segmentOneLabel": "'Assign Member'",
                "segmentTwoLabel": "'Invite by Email'",
                "segmentClass": "'two-segment'"
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentOneContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.verifiedMembers && dataSource?.verifiedMembers?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "inputType": "'search-input'",
                            "searchInputId": "'add-diplomatic-mission-administrator-page-members-search-input-id'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    verifiedMembers: _.get(data, \"diplomaticMission.searchVerifiedEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.searchVerifiedEmployees.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  diplomaticMission(id: $templateContext->additionalData.diplomaticMissionId) {\n    searchVerifiedEmployees(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.verifiedMembers = $graphQlResults.verifiedMembers;  dataSource.cursor = $graphQlResults.cursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'diplomaticMissionId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.verifiedMembers"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'add-diplomatic-mission-administrator-page-members-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageDiplomaticMissionAssignAdministratorsActions, item, dataSource, {'diplomaticMissionId': $actionHelper.getActiveDomainId()})"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', 'itemId': item.title, 'containerId': 'add-diplomatic-mission-administrator-page-members-action'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, 'verifiedEmployees', dataSource?.cursor, dataSource, 'cursor', 'verifiedMembers')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchVerifiedEmployees', dataSource?.cursor, dataSource, 'cursor', 'verifiedMembers')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedMembers || dataSource?.verifiedMembers?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Members'",
                        "titleId": "'add-diplomatic-mission-administrator-page-members-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/Person.svg'",
                        "imageId": "'add-diplomatic-mission-administrator-page-members-empty-state-primitive-image-id'"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedMembers || dataSource?.verifiedMembers?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'add-diplomatic-mission-administrator-page-members-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'add-diplomatic-mission-administrator-page-members-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentTwoContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "form-primitive",
                      "properties": {
                        "formContainerId": "'add-diplomatic-mission-administrator-page-form'",
                        "predefineData": "{'diplomaticMissionId': $actionHelper.getActiveDomainId()}",
                        "dataSource": {
                          "controllers": [
                            {
                              "key": "firstName",
                              "label": "First Name",
                              "display": true,
                              "relatedTo": null,
                              "controlType": "input",
                              "type": "text",
                              "placeholder": "Enter first name",
                              "value": null,
                              "withNullValue": false,
                              "actionTitle": null,
                              "required": true,
                              "icon": null,
                              "leftIcon": null,
                              "validators": [
                                {
                                  "name": "fromSchema",
                                  "fieldPath": "mutation.diplomaticMission.inviteAdmin.firstName",
                                  "messages": {
                                    "isRequired": "First name is required",
                                    "maxLength": "Character limit reached"
                                  }
                                }
                              ],
                              "controlApi": null,
                              "controlAnotherApi": null
                            },
                            {
                              "key": "lastName",
                              "label": "Last Name",
                              "display": true,
                              "relatedTo": null,
                              "controlType": "input",
                              "type": "text",
                              "placeholder": "Enter Last name",
                              "value": null,
                              "withNullValue": false,
                              "actionTitle": null,
                              "required": true,
                              "icon": null,
                              "leftIcon": null,
                              "validators": [
                                {
                                  "name": "fromSchema",
                                  "fieldPath": "mutation.diplomaticMission.inviteAdmin.lastName",
                                  "messages": {
                                    "isRequired": "Last name is required",
                                    "maxLength": "Character limit reached"
                                  }
                                }
                              ],
                              "controlApi": null,
                              "controlAnotherApi": null
                            },
                            {
                              "key": "email",
                              "label": "Email Address",
                              "display": true,
                              "relatedTo": null,
                              "controlType": "input",
                              "type": "email",
                              "placeholder": "Enter email address",
                              "value": null,
                              "withNullValue": false,
                              "actionTitle": null,
                              "required": true,
                              "icon": null,
                              "leftIcon": null,
                              "validators": [
                                {
                                  "name": "fromSchema",
                                  "fieldPath": "mutation.diplomaticMission.inviteAdmin.email",
                                  "messages": {
                                    "isRequired": "Email is required",
                                    "maxLength": "Character limit reached",
                                    "pattern": "Please enter a valid email address"
                                  }
                                }
                              ],
                              "controlApi": null,
                              "controlAnotherApi": null
                            }
                          ],
                          "template": [
                            {
                              "type": "block-container",
                              "children": [
                                {
                                  "type": "controller",
                                  "controllerKey": "firstName"
                                },
                                {
                                  "type": "controller",
                                  "controllerKey": "lastName"
                                },
                                {
                                  "type": "controller",
                                  "controllerKey": "email"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    },
                    {
                      "element": "button-primitive",
                      "attributes": {
                        "id": "'add-diplomatic-mission-administrator-page-submit-action'",
                        "$ngIf": "dataSource.actions.canInviteAdmin"
                      },
                      "properties": {
                        "text": "'Invite as Page Administrator'",
                        "disableButton": "!$actionHelper.isValidForm()",
                        "action": {
                          "query": "mutation {  diplomaticMission {\n    inviteAdmin(\n      id: $templateContext->activeFormArguments.diplomaticMissionId, \n      firstName: $templateContext->activeFormArguments.firstName, \n      lastName: $templateContext->activeFormArguments.lastName,\n      email: $templateContext->activeFormArguments.email,\n      invitationUrl: $templateContext->additionalData.url\n    )\n  }\n}\n",
                          "postAction": "$actionHelper.showToast(\"Your admin invitation was sent successfully\");"
                        }
                      },
                      "events": {
                        "actionEmitter": "$actionHelper.invite($event, dataSource?.diplomaticMission?.photoCover?.imageThumbnailUrl, 'Assign as Administrator', 'You have been assigned as an admin of ' + dataSource?.diplomaticMission?.name, dataSource?.diplomaticMission?.id, 'DiasporaAdminDiplomatic')"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageDiplomaticAmbassadorialNetwork-page-template",
      "changeDetectionSubjects": [
        "manage-organization"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Ambassadorial Network'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-diplomatic-mission-ambassadorial-network-page-header-primitive-back-id'",
                "rightIcon": "(dataSource.actions.canAddAmbassadorialEntity && dataSource?.ambassadorialNetworks && dataSource?.ambassadorialNetworks?.length > 0) ? 'assets/icon/dynamic-ui/Add_Grey.svg' : ''",
                "rightIconId": "'manage-diplomatic-mission-ambassadorial-network-page-header-primitive-add-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "(dataSource.actions.canAddAmbassadorialEntity && dataSource?.ambassadorialNetworks && dataSource?.ambassadorialNetworks?.length > 0) ? ($actionHelper.navigateTo('searchForOrganization', {'organizations': [], 'fromLinkAction': true, 'fromAmbassadorialNetworkAction': true, 'diplomaticMissionId': $actionHelper.getActiveDomainId()})) : null"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.ambassadorialNetworks && dataSource?.ambassadorialNetworks?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'manage-diplomatic-mission-ambassadorial-network-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    ambassadorialNetworks: _.get(data, \"diplomaticMission.searchAmbassadorialNetwork.items\", []).map(x => $dynamicUiExtraService.mapOrganizationToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.searchAmbassadorialNetwork.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  diplomaticMission(id: $templateContext->additionalData.diplomaticMissionId) {\n    searchAmbassadorialNetwork(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        organization {\n          ...organizationCommonProperties\n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.ambassadorialNetworks = $graphQlResults.ambassadorialNetworks;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'diplomaticMissionId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.ambassadorialNetworks"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Organization', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'manage-diplomatic-mission-ambassadorial-network-page-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "events": {
                                "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageDiplomaticMissionAmbassadorialNetworkActions, item, dataSource, {'diplomaticMissionId': $actionHelper.getActiveDomainId()})"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', itemId: item.title, 'containerId': 'manage-diplomatic-mission-ambassadorial-network-page-action'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOrganizationData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, 'ambassadorialNetwork', dataSource?.cursor, dataSource, 'cursor', 'ambassadorialNetworks')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreSearchOrganizationData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchAmbassadorialNetwork', dataSource?.cursor, dataSource, 'cursor', 'ambassadorialNetworks')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.ambassadorialNetworks || dataSource?.ambassadorialNetworks?.length == 0)"
                  },
                  "events": {
                    "buttonActionEmitter": "$actionHelper.navigateTo('searchForOrganization', {'organizations': [], 'fromLinkAction': true, 'fromAmbassadorialNetworkAction': true, 'diplomaticMissionId': $actionHelper.getActiveDomainId()});"
                  },
                  "properties": {
                    "title": "'No Organizations'",
                    "titleId": "'manage-diplomatic-mission-ambassadorial-network-page-empty-state-primitive-title-id'",
                    "subtitle": "'Approved join requests will appear here'",
                    "subTitleId": "'manage-diplomatic-mission-ambassadorial-network-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'manage-diplomatic-mission-ambassadorial-network-page-empty-state-primitive-image-id'",
                    "buttonLabel": "dataSource.actions.canAddAmbassadorialEntity ? 'Add Organization' : null",
                    "buttonId": "'manage-diplomatic-mission-ambassadorial-network-page-empty-state-primitive-button-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.ambassadorialNetworks || dataSource?.ambassadorialNetworks?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'manage-diplomatic-mission-ambassadorial-network-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'manage-diplomatic-mission-ambassadorial-network-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "viewDiplomaticAmbassadorialNetwork-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.ambassadorialNetworks, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Ambassadorial Network'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-diplomatic-mission-ambassadorial-network-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.ambassadorialNetworks && dataSource?.ambassadorialNetworks?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'view-diplomatic-mission-ambassadorial-network-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    ambassadorialNetworks: _.get(data, \"diplomaticMission.searchAmbassadorialNetwork.items\", []).map(x => $dynamicUiExtraService.mapOrganizationToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.searchAmbassadorialNetwork.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  diplomaticMission(id: $templateContext->additionalData.diplomaticMissionId) {\n    searchAmbassadorialNetwork(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        organization {\n          ...organizationCommonProperties\n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.ambassadorialNetworks = $graphQlResults.ambassadorialNetworks;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'diplomaticMissionId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.ambassadorialNetworks"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Organization', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'view-diplomatic-mission-ambassadorial-network-page-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Organization', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'view-diplomatic-mission-ambassadorial-network-page-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Organization', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'view-diplomatic-mission-ambassadorial-network-page-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOrganizationData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, 'ambassadorialNetwork', dataSource?.cursor, dataSource, 'cursor', 'ambassadorialNetworks')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreSearchOrganizationData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchAmbassadorialNetwork', dataSource?.cursor, dataSource, 'cursor', 'ambassadorialNetworks')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.ambassadorialNetworks || dataSource?.ambassadorialNetworks?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Organizations'",
                    "titleId": "'view-diplomatic-mission-ambassadorial-network-page-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-diplomatic-mission-ambassadorial-network-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.ambassadorialNetworks || dataSource?.ambassadorialNetworks?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'view-diplomatic-mission-ambassadorial-network-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-diplomatic-mission-ambassadorial-network-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageDiplomaticTradeOffice-page-template",
      "changeDetectionSubjects": [
        "manage-company"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Trade Office'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-diplomatic-mission-trade-office-page-header-primitive-back-id'",
                "rightIcon": "(dataSource.actions.canAddTradeOfficeEntity && dataSource?.tradeOffices && dataSource?.tradeOffices?.length > 0) ? 'assets/icon/dynamic-ui/Add_Grey.svg' : ''",
                "rightIconId": "'manage-diplomatic-mission-trade-office-page-header-primitive-add-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "(dataSource.actions.canAddTradeOfficeEntity && dataSource?.tradeOffices && dataSource?.tradeOffices?.length > 0) ? ($actionHelper.navigateTo('searchForCompany', {'companies': [], 'fromLinkAction': true, 'fromTradeOfficeAction': true, 'diplomaticMissionId': $actionHelper.getActiveDomainId()})) : null"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.tradeOffices && dataSource?.tradeOffices?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'manage-diplomatic-mission-trade-office-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    tradeOffices: _.get(data, \"diplomaticMission.searchTradeOffice.items\", []).map(x => $dynamicUiExtraService.mapCompanyToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.searchTradeOffice.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  diplomaticMission(id: $templateContext->additionalData.diplomaticMissionId) {\n    searchTradeOffice(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        company {\n          ...companyCommonProperties\n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.tradeOffices = $graphQlResults.tradeOffices;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'diplomaticMissionId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource.tradeOffices"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Company', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'manage-diplomatic-mission-trade-office-page-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "events": {
                                "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageDiplomaticMissionTradeOfficeActions, item, dataSource, {'diplomaticMissionId': $actionHelper.getActiveDomainId()})"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', 'itemId': item.title, 'containerId': 'manage-diplomatic-mission-trade-office-page-action'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreCompanyData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, 'tradeOffice', dataSource?.cursor, dataSource, 'cursor', 'tradeOffices')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreSeachCompanyData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchTradeOffice', dataSource?.cursor, dataSource, 'cursor', 'tradeOffices')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.tradeOffices || dataSource?.tradeOffices?.length == 0)"
                  },
                  "events": {
                    "buttonActionEmitter": "$actionHelper.navigateTo('searchForCompany', {'companies': [], 'fromLinkAction': true, 'fromTradeOfficeAction': true,  'diplomaticMissionId': $actionHelper.getActiveDomainId()});"
                  },
                  "properties": {
                    "title": "'No Companies or Startups Listed'",
                    "titleId": "'manage-diplomatic-mission-trade-office-page-empty-state-primitive-title-id'",
                    "subtitle": "'Invited or approved Lebanese businesses will appear here'",
                    "subTitleId": "'manage-diplomatic-mission-trade-office-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'manage-diplomatic-mission-trade-office-page-empty-state-primitive-image-id'",
                    "buttonLabel": "'Add Company'",
                    "buttonId": "'manage-diplomatic-mission-trade-office-page-empty-state-primitive-button-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.tradeOffices || dataSource?.tradeOffices?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'manage-diplomatic-mission-trade-office-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'manage-diplomatic-mission-trade-office-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "viewDiplomaticTradeOffice-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.tradeOffices, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Trade Office'",
                "headerClass": "'with-no-border'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-diplomatic-mission-trade-office-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.tradeOffices && dataSource?.tradeOffices?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'view-diplomatic-mission-trade-office-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    tradeOffices: _.get(data, \"diplomaticMission.searchTradeOffice.items\", []).map(x => $dynamicUiExtraService.mapCompanyToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.searchTradeOffice.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  diplomaticMission(id: $templateContext->additionalData.diplomaticMissionId) {\n    searchTradeOffice(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        company {\n          ...companyCommonProperties\n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.tradeOffices = $graphQlResults.tradeOffices;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'diplomaticMissionId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource.tradeOffices"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Company', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'view-diplomatic-mission-trade-office-page-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Company', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'view-diplomatic-mission-trade-office-page-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Company', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'view-diplomatic-mission-trade-office-page-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreCompanyData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, 'tradeOffice', dataSource?.cursor, dataSource, 'cursor', 'tradeOffices')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreSeachCompanyData($event, this, 'diplomaticMission', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchTradeOffice', dataSource?.cursor, dataSource, 'cursor', 'tradeOffices')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.tradeOffices || dataSource?.tradeOffices?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Companies or Startups Listed'",
                    "titleId": "'view-diplomatic-mission-trade-office-page-empty-state-primitive-title-id'",
                    "subtitle": "'Invited or approved Lebanese businesses will appear here'",
                    "subTitleId": "'view-diplomatic-mission-trade-office-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-diplomatic-mission-trade-office-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.tradeOffices || dataSource?.tradeOffices?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'view-diplomatic-mission-trade-office-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-diplomatic-mission-trade-office-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageDiplomaticOffices-page-template",
      "changeDetectionSubjects": [
        "add-office",
        "edit-office",
        "add-office-member",
        "add-diplomatic-role",
        "remove-office-member",
        "delete-office"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Support Staff'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-diplomatic-mission-offices-page-header-primitive-back-id'",
                "rightIcon": "dataSource.canCreateOffice && dataSource?.offices && dataSource?.offices?.length > 0 ? 'assets/icon/dynamic-ui/Add_Grey.svg': ''",
                "rightIconId": "'manage-diplomatic-mission-offices-page-header-primitive-add-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "dataSource.canCreateOffice && dataSource?.offices && dataSource?.offices?.length > 0 ? $actionHelper.navigateToSubPage('diplomaticMission/addDiplomaticOffice'): ''"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "dataSource?.offices && dataSource?.offices?.length > 0"
                  },
                  "children": [
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'quick-link-content'",
                        "arrayOfItems": "dataSource?.offices"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "simple-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('diplomaticMission/manageDiplomaticOfficesDetails/' + item.id, {'diplomaticMissionId': $activatedRoute.snapshot.params.id})"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'manage-diplomatic-mission-offices-page-office-item'}"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('diplomaticMission/manageDiplomaticOfficesDetails/' + item.id, {'diplomaticMissionId': $activatedRoute.snapshot.params.id})"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Arrow_Right_Grey.svg', 'containerId': 'manage-diplomatic-mission-offices-page-office-action', 'actionClass' :'quick-link-last-logo' }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!dataSource?.offices || dataSource?.offices?.length == 0"
                  },
                  "events": {
                    "buttonActionEmitter": "$actionHelper.navigateToSubPage('diplomaticMission/addDiplomaticOffice')"
                  },
                  "properties": {
                    "title": "'No Support Staff Listed'",
                    "titleId": "'manage-diplomatic-mission-offices-page-empty-state-primitive-title-id'",
                    "subtitle": "'This page doesn’t currently have any listed support staff. Tap the button below to create one'",
                    "subTitleId": "'manage-diplomatic-mission-offices-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'manage-diplomatic-mission-offices-page-empty-state-primitive-image-id'",
                    "buttonLabel": "dataSource?.canCreateOffice ? 'Create Office' : null",
                    "buttonId": "'manage-diplomatic-mission-offices-page-empty-state-primitive-button-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "viewDiplomaticOffices-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Support Staff'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-diplomatic-mission-offices-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "dataSource?.offices && dataSource?.offices?.length > 0"
                  },
                  "children": [
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'quick-link-content'",
                        "arrayOfItems": "dataSource?.offices"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "simple-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('diplomaticMission/viewDiplomaticOfficeDetails/' + item.id, {'diplomaticMissionId': $activatedRoute.snapshot.params.id})"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'view-diplomatic-mission-offices-page-office-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('diplomaticMission/viewDiplomaticOfficeDetails/' + item.id, {'diplomaticMissionId': $activatedRoute.snapshot.params.id})"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Arrow_Right_Grey.svg', 'containerId': 'view-diplomatic-mission-offices-page-office-action', 'actionClass' :'quick-link-last-logo' }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!dataSource?.offices || dataSource?.offices?.length == 0"
                  },
                  "properties": {
                    "title": "'No Support Staff Listed'",
                    "titleId": "'view-diplomatic-mission-offices-page-empty-state-primitive-title-id'",
                    "subtitle": "'This page doesn’t currently have any listed support staff.'",
                    "subTitleId": "'view-diplomatic-mission-offices-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-diplomatic-mission-offices-page-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "viewDiplomaticOfficeDetails-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.members, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "changeDetectionSubjects": [
        "add-diplomatic-role"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "dataSource?.name",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-diplomatic-mission-offices-details-page-header-primitive-back-id'",
                "rightIcon": "(dataSource?.canJoinMember && dataSource?.members && dataSource?.members?.length > 0) ? 'assets/icon/dynamic-ui/Add_Grey.svg' : ''",
                "rightIconId": "'view-diplomatic-mission-offices-details-page-header-primitive-add-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "dataSource?.canJoinMember ? $actionHelper.openActionSheetWithConditions(initialDataSource?.viewDiplomaticMissionOfficeActions, null, dataSource, {'diplomaticMissionId': $actionHelper.parameters.diplomaticMissionId, 'officeId': $actionHelper.getActiveDomainId(), userId: initialDataSource.profileId}) : ''"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.members && dataSource?.members?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "searchInputId": "'view-diplomatic-mission-offices-details-page-search-input-id'",
                        "inputType": "'search-input'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    members: _.get(data, \"diplomaticMissionCommittee.searchKeyStaff.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"diplomaticMissionCommittee.searchKeyStaff.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  diplomaticMissionCommittee(id: $templateContext->additionalData.diplomaticMissionOfficeId) {\n    searchKeyStaff(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.members = $graphQlResults.members;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'diplomaticMissionOfficeId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.members"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'view-diplomatic-mission-offices-details-page-office-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'view-diplomatic-mission-offices-details-page-office-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'view-diplomatic-mission-offices-details-page-office-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'diplomaticMissionCommittee', $activatedRoute.snapshot.params.id, 'keyStaff', dataSource?.cursor, dataSource, 'cursor', 'members')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'diplomaticMissionCommittee', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchKeyStaff', dataSource?.cursor, dataSource, 'cursor', 'members')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.members || dataSource?.members?.length == 0)"
                  },
                  "events": {
                    "buttonActionEmitter": "dataSource?.canJoinMember ? $actionHelper.navigateTo('profile/addDiplomaticRole/' + $actionHelper.parameters.diplomaticMissionId, {'diplomaticMissionId': $actionHelper.parameters.diplomaticMissionId, office: {'id': $actionHelper.getActiveDomainId(), 'name': dataSource?.name}, 'positionType': {lookupId: 'CommitteeMember', name: 'Committee or Board Member'}, userId: initialDataSource.profileId, disableForm: true}) : ''"
                  },
                  "properties": {
                    "title": "'No Members'",
                    "titleId": "'view-diplomatic-mission-offices-details-page-empty-state-primitive-title-id'",
                    "subtitle": "'This office doesn’t currently have any members.'",
                    "subTitleId": "'view-diplomatic-mission-offices-details-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'view-diplomatic-mission-offices-details-page-empty-state-primitive-image-id'",
                    "buttonLabel": "dataSource?.canJoinMember ? 'Join Office' : ''",
                    "buttonId": "'view-diplomatic-mission-offices-details-page-empty-state-primitive-button-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.members || dataSource?.members?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'view-diplomatic-mission-offices-details-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-diplomatic-mission-offices-details-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageDiplomaticOfficeDetails-page-template",
      "changeDetectionSubjects": [
        "edit-office",
        "add-office-member",
        "add-diplomatic-role"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "dataSource?.name",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-diplomatic-mission-offices-details-page-header-primitive-back-id'",
                "rightIcon": "'assets/icon/dynamic-ui/Dots_Grey.svg'",
                "rightIconId": "'manage-diplomatic-mission-offices-details-page-header-primitive-add-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageDiplomaticMissionOfficeActions, null, dataSource, {'diplomaticMissionId': $actionHelper.parameters.diplomaticMissionId, 'officeId': $actionHelper.getActiveDomainId(), userId: initialDataSource.profileId})"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.members && dataSource?.members?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'manage-diplomatic-mission-offices-details-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    members: _.get(data, \"diplomaticMissionCommittee.searchKeyStaff.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"diplomaticMissionCommittee.searchKeyStaff.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  diplomaticMissionCommittee(id: $templateContext->additionalData.diplomaticMissionOfficeId) {\n    searchKeyStaff(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.members = $graphQlResults.members;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'diplomaticMissionOfficeId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.members"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'manage-diplomatic-mission-offices-details-page-office-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "events": {
                                "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageDiplomaticMissionOfficeMembersActions, item, dataSource, {'diplomaticMissionId': $actionHelper.parameters.diplomaticMissionId, 'officeId': $actionHelper.getActiveDomainId()})"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', 'itemId': item.title, 'containerId': 'manage-diplomatic-mission-offices-details-page-office-action'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'diplomaticMissionCommittee', $activatedRoute.snapshot.params.id, 'keyStaff', dataSource?.cursor, dataSource, 'cursor', 'members')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'diplomaticMissionCommittee', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchKeyStaff', dataSource?.cursor, dataSource, 'cursor', 'members')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.members || dataSource?.members?.length == 0)"
                  },
                  "events": {
                    "buttonActionEmitter": "$actionHelper.navigateTo('diplomaticMission/addDiplomaticOfficeMember/' + $actionHelper.getActiveDomainId(), {'diplomaticMissionId': $actionHelper.parameters.diplomaticMissionId, 'officeName': dataSource?.name})",
                    "secondButtonActionEmitter": "$actionHelper.navigateTo('profile/addDiplomaticRole/' + $actionHelper.parameters.diplomaticMissionId, {'diplomaticMissionId': $actionHelper.parameters.diplomaticMissionId, office: {'id': $actionHelper.getActiveDomainId(), 'name': dataSource?.name}, 'positionType': {lookupId: 'CommitteeMember', name: 'Committee or Board Member'}, userId: initialDataSource.profileId, disableForm: true})"
                  },
                  "properties": {
                    "title": "'No Members'",
                    "titleId": "'manage-diplomatic-mission-offices-details-page-empty-state-primitive-title-id'",
                    "subtitle": "'This office doesn’t currently have any members. Tap the button below to add yourself or other members'",
                    "subTitleId": "'manage-diplomatic-mission-offices-details-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'manage-diplomatic-mission-offices-details-page-empty-state-primitive-image-id'",
                    "buttonLabel": "'Add Members'",
                    "buttonId": "'manage-diplomatic-mission-offices-details-page-empty-state-primitive-button-id'",
                    "secondButtonLabel": "dataSource?.canJoinMember ? 'Join Office' : null",
                    "secondButtonId": "'manage-diplomatic-mission-offices-details-page-empty-state-primitive-second-button-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.members || dataSource?.members?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'manage-diplomatic-mission-offices-details-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'manage-diplomatic-mission-offices-details-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "addDiplomaticOfficeMember-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'skeleton-page-with-three-segment'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "$ngIf": "isLoading"
              }
            },
            {
              "element": "div",
              "attributes": {
                "class": "resize-page-templates-container",
                "$ngIf": "!isLoading"
              },
              "children": [
                {
                  "element": "page-header-primitive",
                  "properties": {
                    "headerType": "'HeaderForSubPages'",
                    "title": "'Add Members'",
                    "headerClass": "'with-no-border'",
                    "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                    "leftIconId": "'add-diplomatic-mission-office-member-page-header-primitive-back-id'"
                  },
                  "events": {
                    "leftActionEmitter": "$actionHelper.goBackPage()"
                  }
                },
                {
                  "element": "segment-primitive",
                  "properties": {
                    "segmentContainerId": "'add-diplomatic-mission-office-member-page-segment-container-id'",
                    "segmentOneLabel": "'Members List'",
                    "segmentTwoLabel": "'Invite by Email'",
                    "segmentClass": "'two-segment'"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#segmentOneContentTemplate": ""
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.members && dataSource?.members?.length > 0)"
                          },
                          "children": [
                            {
                              "element": "input-primitive",
                              "properties": {
                                "searchInputId": "'add-diplomatic-mission-office-member-page-search-input-id'",
                                "inputType": "'search-input'",
                                "inputPlaceholder": "'Search this list'",
                                "action": {
                                  "dataExpression": "((data) => {\n  const result =  {\n    members: _.get(data, \"diplomaticMission.searchVerifiedEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.searchVerifiedEmployees.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                                  "query": "query {  diplomaticMission(id: $templateContext->additionalData.diplomaticMissionId) {\n    searchVerifiedEmployees(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                                  "postAction": "dataSource.members = $graphQlResults.members;  dataSource.cursor = $graphQlResults.cursor;\n"
                                }
                              },
                              "events": {
                                "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'diplomaticMissionId': $actionHelper.parameters.diplomaticMissionId })"
                              }
                            },
                            {
                              "element": "card-list-primitive",
                              "properties": {
                                "listType": "'simple-list'",
                                "classList": "'list-with-left-image'",
                                "arrayOfItems": "dataSource?.members"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#itemListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "default-list-template",
                                      "events": {
                                        "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                                      },
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'add-diplomatic-mission-office-member-page-members-item' }"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#actionListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "action-template",
                                      "events": {
                                        "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.addDiplomaticMissionOfficeMembersActions, item, dataSource, {'diplomaticMissionId': $actionHelper.parameters.diplomaticMissionId, 'officeId': $actionHelper.getActiveDomainId()})"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', itemId: item.title, 'containerId': 'add-diplomatic-mission-office-member-page-members-action'}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "element": "infinite-scroll",
                              "attributes": {
                                "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                              },
                              "events": {
                                "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'diplomaticMission', $actionHelper.parameters.diplomaticMissionId, 'verifiedEmployees', dataSource?.cursor, dataSource, 'cursor', 'members')"
                              }
                            },
                            {
                              "element": "infinite-scroll",
                              "attributes": {
                                "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                              },
                              "events": {
                                "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'diplomaticMission', $actionHelper.parameters.diplomaticMissionId, $actionHelper.getSearchInputValue(), 'searchVerifiedEmployees', dataSource?.cursor, dataSource, 'cursor', 'members')"
                              }
                            }
                          ]
                        },
                        {
                          "element": "empty-state-primitive",
                          "attributes": {
                            "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.members || dataSource?.members?.length == 0)"
                          },
                          "properties": {
                            "title": "'No Members'",
                            "titleId": "'add-diplomatic-mission-office-member-page-empty-state-primitive-title-id'",
                            "image": "'assets/empty-state/Person.svg'",
                            "imageId": "'add-diplomatic-mission-office-member-page-empty-state-primitive-image-id'"
                          }
                        },
                        {
                          "element": "empty-state-primitive",
                          "attributes": {
                            "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.members || dataSource?.members?.length == 0)"
                          },
                          "properties": {
                            "title": "'No data found'",
                            "titleId": "'add-diplomatic-mission-office-member-page-search-empty-state-primitive-title-id'",
                            "image": "'assets/empty-state/list.svg'",
                            "imageId": "'add-diplomatic-mission-office-member-page-search-empty-state-primitive-image-id'"
                          }
                        }
                      ]
                    },
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#segmentTwoContentTemplate": ""
                      },
                      "children": [
                        {
                          "element": "form-primitive",
                          "properties": {
                            "formContainerId": "'add-diplomatic-mission-office-member-page-form'",
                            "predefineData": "{'committeeId': $actionHelper.getActiveDomainId(), 'diplomaticMissionId': $actionHelper.parameters.diplomaticMissionId}",
                            "dataSource": {
                              "controllers": [
                                {
                                  "key": "firstName",
                                  "label": "First Name",
                                  "display": true,
                                  "relatedTo": null,
                                  "controlType": "input",
                                  "type": "text",
                                  "placeholder": "Enter First name",
                                  "value": null,
                                  "withNullValue": false,
                                  "actionTitle": null,
                                  "required": true,
                                  "icon": null,
                                  "leftIcon": null,
                                  "validators": [
                                    {
                                      "name": "fromSchema",
                                      "fieldPath": "mutation.diplomaticMissionCommittee.inviteMember.firstName",
                                      "messages": {
                                        "isRequired": "First name is required",
                                        "maxLength": "Character limit reached"
                                      }
                                    }
                                  ],
                                  "controlApi": null,
                                  "controlAnotherApi": null
                                },
                                {
                                  "key": "lastName",
                                  "label": "Last Name",
                                  "display": true,
                                  "relatedTo": null,
                                  "controlType": "input",
                                  "type": "text",
                                  "placeholder": "Enter Last name",
                                  "value": null,
                                  "withNullValue": false,
                                  "actionTitle": null,
                                  "required": true,
                                  "icon": null,
                                  "leftIcon": null,
                                  "validators": [
                                    {
                                      "name": "fromSchema",
                                      "fieldPath": "mutation.diplomaticMissionCommittee.inviteMember.lastName",
                                      "messages": {
                                        "isRequired": "Last name is required",
                                        "maxLength": "Character limit reached"
                                      }
                                    }
                                  ],
                                  "controlApi": null,
                                  "controlAnotherApi": null
                                },
                                {
                                  "key": "email",
                                  "label": "Email Address",
                                  "display": true,
                                  "relatedTo": null,
                                  "controlType": "input",
                                  "type": "email",
                                  "placeholder": "Enter email",
                                  "value": null,
                                  "withNullValue": false,
                                  "actionTitle": null,
                                  "required": true,
                                  "icon": null,
                                  "leftIcon": null,
                                  "validators": [
                                    {
                                      "name": "fromSchema",
                                      "fieldPath": "mutation.diplomaticMissionCommittee.inviteMember.email",
                                      "messages": {
                                        "isRequired": "Email is required",
                                        "maxLength": "Character limit reached",
                                        "pattern": "Please enter a valid email address"
                                      }
                                    }
                                  ],
                                  "controlApi": null,
                                  "controlAnotherApi": null
                                }
                              ],
                              "template": [
                                {
                                  "type": "block-container",
                                  "children": [
                                    {
                                      "type": "controller",
                                      "controllerKey": "firstName"
                                    },
                                    {
                                      "type": "controller",
                                      "controllerKey": "lastName"
                                    },
                                    {
                                      "type": "controller",
                                      "controllerKey": "email"
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        },
                        {
                          "element": "button-primitive",
                          "attributes": {
                            "id": "'add-diplomatic-mission-office-member-page-submit-action'",
                            "$ngIf": "dataSource.canInviteMember"
                          },
                          "properties": {
                            "text": "'Send Invitation'",
                            "disableButton": "!$actionHelper.isValidForm()",
                            "action": {
                              "query": "mutation {  diplomaticMissionCommittee {\n    inviteMember(\n      id: $templateContext->activeFormArguments.committeeId, \n      diplomaticMissionId: $templateContext->activeFormArguments.diplomaticMissionId, \n      firstName: $templateContext->activeFormArguments.firstName, \n      lastName: $templateContext->activeFormArguments.lastName,\n      email: $templateContext->activeFormArguments.email,\n      invitationUrl: $templateContext->additionalData.url\n    )\n  }\n}\n",
                              "postAction": "$actionHelper.showToast(\"Your member invitation was sent successfully\");"
                            }
                          },
                          "events": {
                            "actionEmitter": "$actionHelper.invite($event, null, '*diplomatic-page.support-staff.add-diplomatic-office-member.invite-by-email.succeed-message.title*' , 'You have been assigned as member of ' + $actionHelper?.parameters?.officeName, $actionHelper.parameters.diplomaticMissionId, 'DiasporaStaffMember', $actionHelper?.getActiveDomainId())"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "addDiplomaticOffice-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'form-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Create Office'",
                "leftIcon": "'assets/icon/dynamic-ui/Close_Grey.svg'",
                "leftIconId": "'add-diplomatic-mission-office-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "form-primitive",
              "properties": {
                "formContainerId": "'add-diplomatic-mission-office-page-form'",
                "predefineData": "{'id': $actionHelper.getActiveDomainId()}",
                "dataSource": {
                  "controllers": [
                    {
                      "key": "name",
                      "label": "Office Name",
                      "display": true,
                      "relatedTo": null,
                      "controlType": "input",
                      "type": "text",
                      "placeholder": "Enter office name",
                      "value": null,
                      "withNullValue": false,
                      "actionTitle": null,
                      "required": true,
                      "icon": null,
                      "leftIcon": null,
                      "validators": [
                        {
                          "name": "fromSchema",
                          "fieldPath": "mutation.diplomaticMission.createDiplomaticMissionCommittee.name",
                          "messages": {
                            "isRequired": "Office name is required",
                            "maxLength": "Character limit reached"
                          }
                        }
                      ],
                      "controlApi": null,
                      "controlAnotherApi": null
                    }
                  ],
                  "template": [
                    {
                      "type": "controller",
                      "controllerKey": "name"
                    }
                  ]
                }
              }
            },
            {
              "element": "button-primitive",
              "attributes": {
                "id": "add-diplomatic-mission-office-page-action-submit-id"
              },
              "properties": {
                "text": "'Create Office'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation {  diplomaticMission {\n    createDiplomaticMissionCommittee($dynamicUiExpression((|objectToParams(templateContext.activeFormArguments)|))) {\n      id \n      name\n    }\n  }\n}\n",
                  "postAction": "$actionHelper.showToast('Diplomatic office created successfully'); $actionHelper.notifiySubscribers(['add-office'], true);\n"
                }
              },
              "events": {
                "actionEmitter": "$actionHelper.submitForm($event)"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "editDiplomaticOffice-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'form-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Rename Office '",
                "leftIcon": "'assets/icon/dynamic-ui/Close_Grey.svg'",
                "leftIconId": "'edit-diplomatic-mission-office-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "form-primitive",
              "properties": {
                "formContainerId": "'edit-diplomatic-mission-office-page-form'",
                "predefineData": "{'id': $actionHelper.getActiveDomainId()}",
                "initialData": "dataSource.previousPageDataSource",
                "dataSource": {
                  "controllers": [
                    {
                      "key": "name",
                      "label": "Office Name",
                      "display": true,
                      "relatedTo": null,
                      "controlType": "input",
                      "type": "text",
                      "placeholder": "Enter office name",
                      "value": null,
                      "valueType": "input",
                      "valuePath": "name",
                      "withNullValue": false,
                      "actionTitle": null,
                      "required": true,
                      "icon": null,
                      "leftIcon": null,
                      "validators": [
                        {
                          "name": "fromSchema",
                          "fieldPath": "mutation.diplomaticMissionCommittee.update.name",
                          "messages": {
                            "isRequired": "Office name is required",
                            "maxLength": "Character limit reached"
                          }
                        }
                      ],
                      "controlApi": null,
                      "controlAnotherApi": null
                    }
                  ],
                  "template": [
                    {
                      "type": "controller",
                      "controllerKey": "name"
                    }
                  ]
                }
              }
            },
            {
              "element": "button-primitive",
              "attributes": {
                "id": "edit-diplomatic-mission-office-page-action-submit-id"
              },
              "properties": {
                "text": "'Edit Office'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation {  diplomaticMissionCommittee {\n    update($dynamicUiExpression((|objectToParams(templateContext.activeFormArguments)|))) {\n      id \n      name\n    }\n  }\n}\n",
                  "postAction": "$actionHelper.showToast('Diplomatic office edited successfully'); $actionHelper.notifiySubscribers(['edit-office'], true);\n"
                }
              },
              "events": {
                "actionEmitter": "$actionHelper.submitForm($event)"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "report-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'form-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Report a Problem'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'report-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'report-page-form'",
                    "predefineData": "{'page': $actionHelper?.parameters?.problemPage}",
                    "dataSource": {
                      "controllers": [
                        {
                          "key": "description",
                          "label": "What Happened?",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "textarea",
                          "placeholder": "Describe your issue or suggestion briefly and, if possible, any steps that you took for us to reproduce the problem",
                          "value": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.report.create.model.fields.description",
                              "messages": {
                                "isRequired": "Description is required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "contact",
                          "label": "Contact Details",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "textarea",
                          "placeholder": "Please let us know how we can contact you",
                          "value": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.report.create.model.fields.contact",
                              "messages": {
                                "isRequired": "Contact details is required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "controller",
                          "controllerKey": "description"
                        },
                        {
                          "type": "controller",
                          "controllerKey": "contact"
                        }
                      ]
                    }
                  }
                },
                {
                  "element": "button-primitive",
                  "attributes": {
                    "id": "'report-page-submit-action-id'"
                  },
                  "properties": {
                    "text": "'Submit'",
                    "disableButton": "!$actionHelper.isValidForm()",
                    "action": {
                      "query": "mutation {  report {\n    create (model: {\n      contact:$templateContext->activeFormArguments.contact,\n      description:$templateContext->activeFormArguments.description,\n      page:$templateContext->activeFormArguments.page\n    }) {\n      id\n    }\n  }\n}\n",
                      "postAction": "$actionHelper.showToast('Thank you for helping us make DiasporaID better. Our team will be in touch with you soon'); $actionHelper.goBackPage()\n"
                    }
                  },
                  "events": {
                    "actionEmitter": "$actionHelper.submitForm($event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "requestToBeFeature-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'form-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Request to be Featured'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'featured-request-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "manage-account-pages-hint-txt ",
                    "id": "featured-request-page-description-id"
                  },
                  "properties": {
                    "$innerHTML": "'DiasporaID can promote interesting profiles, companies, startups, news, events and business offerings (products, services, franchises)'"
                  }
                },
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'request-featured-page-form'",
                    "predefineData": "{'page': $actionHelper?.parameters?.problemPage}",
                    "dataSource": {
                      "controllers": [
                        {
                          "key": "description",
                          "label": "What would you like to feature or promote?",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "textarea",
                          "placeholder": "Tell us what you want to feature, and what makes it special or worthy of being featured",
                          "value": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.report.create.model.fields.description",
                              "messages": {
                                "isRequired": "Description is required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "contact",
                          "label": "Contact Details",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "textarea",
                          "placeholder": "Please let us know how we can contact you",
                          "value": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.report.create.model.fields.contact",
                              "messages": {
                                "isRequired": "Contact details is required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "controller",
                          "controllerKey": "description"
                        },
                        {
                          "type": "controller",
                          "controllerKey": "contact"
                        }
                      ]
                    }
                  }
                },
                {
                  "element": "button-primitive",
                  "attributes": {
                    "id": "'request-feautured-page-submit-action-id'"
                  },
                  "properties": {
                    "text": "'submit'",
                    "disableButton": "!$actionHelper.isValidForm()",
                    "action": {
                      "query": "mutation {  report {\n    create (model: {\n      contact:$templateContext->activeFormArguments.contact,\n      description:$templateContext->activeFormArguments.description,\n      page:$templateContext->activeFormArguments.page\n    }) {\n      id\n    }\n  }\n}\n",
                      "postAction": "$actionHelper.showToast('Your request was sent. A DiasporaID rep. will get in touch with you soon!'); $actionHelper.goBackPage()\n"
                    }
                  },
                  "events": {
                    "actionEmitter": "$actionHelper.submitForm($event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "advertiseWithUs-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'form-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Advertise with Us'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'advertise-with-us-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "id": "advertise-with-us-page-description-id",
                    "class": "manage-account-pages-hint-txt "
                  },
                  "properties": {
                    "$innerHTML": "'DiasporaID can help your message reach a global Lebanese audience to grow your business, or your network.'"
                  }
                },
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'advertise-with-us-page-form'",
                    "predefineData": "{'page': $actionHelper?.parameters?.problemPage}",
                    "dataSource": {
                      "controllers": [
                        {
                          "key": "description",
                          "label": "What would you like to advertise?",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "textarea",
                          "placeholder": "Describe what you want to advertise, and your target Lebanese demographics, and we’ll get in touch to work out a tailored advertising campaign",
                          "value": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.report.create.model.fields.description",
                              "messages": {
                                "isRequired": "Description is required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "contact",
                          "label": "Contact Details",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "textarea",
                          "placeholder": "Please let us know how we can contact you",
                          "value": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.report.create.model.fields.contact",
                              "messages": {
                                "isRequired": "Contact details is required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "controller",
                          "controllerKey": "description"
                        },
                        {
                          "type": "controller",
                          "controllerKey": "contact"
                        }
                      ]
                    }
                  }
                },
                {
                  "element": "button-primitive",
                  "attributes": {
                    "id": "'advertise-with-us-submit-action-id'"
                  },
                  "properties": {
                    "text": "'submit'",
                    "disableButton": "!$actionHelper.isValidForm()",
                    "action": {
                      "query": "mutation {  report {\n    create (model: {\n      contact:$templateContext->activeFormArguments.contact,\n      description:$templateContext->activeFormArguments.description,\n      page:$templateContext->activeFormArguments.page\n    }) {\n      id\n    }\n  }\n}\n",
                      "postAction": "$actionHelper.showToast('Your request has been sent. A DiasporaID rep. will get in touch with you soon!'); $actionHelper.goBackPage()\n"
                    }
                  },
                  "events": {
                    "actionEmitter": "$actionHelper.submitForm($event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "aboutUs-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'simple-page-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'About Us'",
                "leftIconId": "'about-page-header-primitive-back-id'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "id": "about-page-title-id",
                    "class": "manage-account-pages-title-txt"
                  },
                  "properties": {
                    "$innerHTML": "'What is DiasporaID and How Was it Born'"
                  }
                },
                {
                  "element": "div",
                  "attributes": {
                    "id": "about-page-txt-first-id",
                    "class": "manage-account-pages-hint-txt"
                  },
                  "properties": {
                    "$innerHTML": "'“Diaspora Engagement for Socio-Economic Development in Lebanon” is a United States Agency for International Development (USAID) funded activity that, as the name implies, aims to support the continued economic and social development of Lebanon by activating the underutilized potential of the Lebanese global diaspora.'"
                  }
                },
                {
                  "element": "div",
                  "attributes": {
                    "id": "about-page-txt-second-id",
                    "class": "manage-account-pages-hint-txt"
                  },
                  "properties": {
                    "$innerHTML": "'To support this program - Netways, a leading Lebanese IT and development company - conceived and built DiasporaID. As a novel digital platform, DiasporaID was built from the ground up to strengthen – or rekindle - the connection between the Lebanese diaspora with their hometowns and homeland, providing digital means for purposeful engagement and collaborative action towards Lebanon’s development.'"
                  }
                },
                {
                  "element": "div",
                  "attributes": {
                    "id": "about-page-txt-third-id",
                    "class": "manage-account-pages-hint-txt"
                  },
                  "properties": {
                    "$innerHTML": "'DiasporaID leverages the Lebanese people’s cultural tendency drawing them to work with their fellow countrymen, be it in the same city or halfway across the globe. By linking diaspora members with residents, institutions and businesses in their ancestral towns - and with fellow diaspora members sharing similar interests and working in similar sectors - DiasporaID facilitates collaborative action between Lebanese residents and expats for the mutual benefit of their businesses and communities.'"
                  }
                },
                {
                  "element": "div",
                  "attributes": {
                    "id": "about-page-txt-fourth-id",
                    "class": "manage-account-pages-hint-txt"
                  },
                  "properties": {
                    "$innerHTML": "'The DiasporaID platform and this website were made possible with the support of the American people through the United States Agency for International Development (USAID). The website content is under the responsibility of Netways, and does not directly reflect the views of USAID or the United States Government.'"
                  }
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "manage-account-pages-image-container"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "manage-account-pages-image"
                      },
                      "children": [
                        {
                          "element": "img",
                          "attributes": {
                            "id": "about-page-image-assets/images/aboutUs_Images/default-cover-image.jpg-id",
                            "src": "assets/images/aboutUs_Images/Lebanese Ministry.png"
                          }
                        }
                      ]
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "class": "manage-account-pages-image"
                      },
                      "children": [
                        {
                          "element": "img",
                          "attributes": {
                            "id": "about-page-image-assets/images/aboutUs_Images/usaid_logo.png-id",
                            "src": "assets/images/aboutUs_Images/usaid_logo.png"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "manage-account-pages-image-container"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "manage-account-pages-image"
                      },
                      "children": [
                        {
                          "element": "img",
                          "attributes": {
                            "id": "about-page-image-assets/images/aboutUs_Images/Diasporaid_logo.png-id",
                            "src": "assets/images/aboutUs_Images/Diasporaid_logo.png"
                          }
                        }
                      ]
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "class": "manage-account-pages-image"
                      },
                      "children": [
                        {
                          "element": "img",
                          "attributes": {
                            "id": "about-page-image-assets/images/aboutUs_Images/netways_logo.png-id",
                            "src": "assets/images/aboutUs_Images/netways_logo.png"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageAccounts-page-template",
      "changeDetectionSubjects": [
        "edit-profile-details",
        "edit-company",
        "edit-diplomatic",
        "edit-organization",
        "edit-municipality",
        "create-company",
        "create-organization",
        "add-organizaiton-role",
        "edit-organization-role",
        "add-business-role",
        "edit-business-role",
        "add-diplomatic-role",
        "edit-diplomatic-role",
        "add-committee-member",
        "remove-committee-member",
        "delete-commiteee",
        "add-organization-administrators",
        "manage-organization-administrators",
        "manage-organization-team-members",
        "manage-company-team-members",
        "manage-company-administrators",
        "add-company-administrators",
        "add-office-member",
        "remove-office-member",
        "delete-office",
        "add-diplomaticMission-administrators",
        "manage-diplomaticMission-administrators",
        "manage-diplomaticMission-key-staff"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'",
            "withSearchInput": false
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Manage Account'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-account-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "manage-section-title",
                    "$ngIf": "dataSource?.entitiesRoles && dataSource?.entitiesRoles.length > 0"
                  },
                  "properties": {
                    "$innerHTML": "'Pages You Manage'"
                  }
                },
                {
                  "element": "card-list-primitive",
                  "attributes": {
                    "$ngIf": "dataSource?.entitiesRoles && dataSource?.entitiesRoles.length > 0"
                  },
                  "properties": {
                    "listType": "'simple-list'",
                    "classList": "'list-with-left-image'",
                    "arrayOfItems": "dataSource?.entitiesRoles"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#itemListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "manage-pages-template",
                          "properties": {
                            "dataSource": "{'item': item, 'containerId': 'manage-account-item', 'subTitle':  'Tap to manage'}"
                          }
                        }
                      ]
                    },
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#actionListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "action-template",
                          "events": {
                            "click": "$actionHelper.navigateToGlobalManageDomain(item.type, item.id)"
                          },
                          "properties": {
                            "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Manage_Grey.svg', 'containerId': 'manage-account-item', 'actionClass' :'quick-link-last-logo' }"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "manage-section-border-seperator"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "manage-section-border-seperator-container",
                        "$ngIf": "dataSource?.entitiesRoles && dataSource?.entitiesRoles.length > 0"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "manage-section-title"
                  },
                  "properties": {
                    "$innerHTML": "'Quick Links'"
                  }
                },
                {
                  "element": "card-list-primitive",
                  "attributes": {
                    "$ngIf": "initialDataSource?.quickLinks && initialDataSource?.quickLinks.length > 0"
                  },
                  "properties": {
                    "listType": "'simple-list'",
                    "classList": "'quick-link-content'",
                    "arrayOfItems": "initialDataSource?.quickLinks"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#itemListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "simple-list-left-logo",
                          "events": {
                            "click": "$actionHelper.applyAction(item, initialDataSource)"
                          },
                          "properties": {
                            "dataSource": "{'item': item, 'containerId': 'manage-account-item' }"
                          }
                        }
                      ]
                    },
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#actionListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "action-template",
                          "events": {
                            "click": "$actionHelper.applyAction(item, initialDataSource)"
                          },
                          "properties": {
                            "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Arrow_Right_Grey.svg', 'actionClass' :'quick-link-last-logo' }"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "manage-section-border-seperator"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "manage-section-border-seperator-container margin-top-20"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "properties": {
                    "$innerHTML": "'Support'"
                  },
                  "attributes": {
                    "class": "manage-section-title"
                  }
                },
                {
                  "element": "card-list-primitive",
                  "attributes": {
                    "$ngIf": "initialDataSource?.supports && initialDataSource?.supports.length > 0"
                  },
                  "properties": {
                    "listType": "'simple-list'",
                    "classList": "'quick-link-content'",
                    "arrayOfItems": "initialDataSource?.supports"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#itemListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "simple-list-left-logo",
                          "events": {
                            "click": "$actionHelper.applyAction(item, initialDataSource)"
                          },
                          "properties": {
                            "dataSource": "{'item': item }"
                          }
                        }
                      ]
                    },
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#actionListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "action-template",
                          "events": {
                            "click": "$actionHelper.applyAction(item, initialDataSource)"
                          },
                          "properties": {
                            "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Arrow_Right_Grey.svg', 'actionClass' :'quick-link-last-logo' }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "changePassword-page-template",
      "functions": {
        "changePassword": "function(oldPassword, newPassword, confirmPassword) {  $dynamicUiExtraService.changePassword($actionHelper, oldPassword, newPassword, confirmPassword);\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'form-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Change Your Password'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'change-password-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'change-password-page-form'",
                    "formWithImage": false,
                    "dataSource": {
                      "controllers": [
                        {
                          "key": "oldPassword",
                          "label": "Old Password",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "password",
                          "type": "password",
                          "placeholder": "Enter old password",
                          "value": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": null,
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "newPassword",
                          "label": "New Password",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "password",
                          "type": "password",
                          "placeholder": "Enter new password",
                          "value": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": null,
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "confirmPassword",
                          "label": "Confirm Password",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "password",
                          "type": "password",
                          "placeholder": "Retype password",
                          "value": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": null,
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "controller",
                          "controllerKey": "oldPassword"
                        },
                        {
                          "type": "controller",
                          "controllerKey": "newPassword"
                        },
                        {
                          "type": "controller",
                          "controllerKey": "confirmPassword"
                        }
                      ]
                    }
                  }
                },
                {
                  "element": "button-primitive",
                  "attributes": {
                    "id": "'change-password-submit-action-id'"
                  },
                  "properties": {
                    "text": "'Change Password'",
                    "disableButton": "!$actionHelper.isValidForm()"
                  },
                  "events": {
                    "actionEmitter": "this.changePassword($actionHelper.getFormGroupData('oldPassword'), $actionHelper.getFormGroupData('newPassword'), $actionHelper.getFormGroupData('confirmPassword'))"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "notifications-page-template",
      "functions": {
        "markNotificationAsRead": "function(item) {  if(item.readed) {\n    if(item.objectType === 'Conversation') {\n      $actionHelper.navigateTo('conversationMessages/' + item.conversationTargetType +  '/'+ item.conversationTargetId + '/' + item.conversationSenderMailboxId + '/' + item.conversationReceiverMailboxId);\n    } else if(item.objectType === 'Comment') {\n      $actionHelper.navigateToDomain(item.commentActivityType, item.commentActivityId);\n    } else {\n      $actionHelper.navigateToDomain(item.objectType, item.parentDomainId);\n    }\n  } else {\n    let action =  {};\n    action.query = \"mutation { notification { markNotificationAsRead(notificationId: $templateContext->item.id) }}\"\n    if(item.objectType === 'Conversation') {\n      action.postAction = \"$actionHelper.$notificationService.getUnreadNotification();$actionHelper.notifiySubscribers(['manage-company', 'manage-organization'], true); templateContext.item.readed = true; $actionHelper.navigateTo('conversationMessages/' + templateContext.item.conversationTargetType +  '/'+ templateContext.item.conversationTargetId + '/' + templateContext.item.conversationSenderMailboxId + '/' + templateContext.item.conversationReceiverMailboxId)\"\n    } else if(item.objectType === 'Comment') {\n      action.postAction = \"$actionHelper.$notificationService.getUnreadNotification();$actionHelper.notifiySubscribers(['manage-company', 'manage-organization'], true); templateContext.item.readed = true; $actionHelper.navigateToDomain(templateContext.item.commentActivityType, templateContext.item.commentActivityId)\"\n    } else {\n      action.postAction = \"$actionHelper.$notificationService.getUnreadNotification();$actionHelper.notifiySubscribers(['manage-company', 'manage-organization'], true); templateContext.item.readed = true; $actionHelper.navigateToDomain(templateContext.item.objectType, templateContext.item.parentDomainId)\"\n    }\n    action.item = item;\n    this.$actionHelper.callApi(action);\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'",
            "withSearchInput": false
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Notifications'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'notification-page-header-primitive-back-id'",
                "rightIcon": "'assets/icon/dynamic-ui/Manage_Grey.svg'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.navigateTo('manage/notifications')"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "(dataSource?.notifications && dataSource?.notifications?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "arrayOfItems": "dataSource.notifications",
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image notification-list'"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "div",
                              "attributes": {
                                "class": "{{ item.readed ? 'notification' : 'notification readed'}}"
                              },
                              "children": [
                                {
                                  "element": "simple-list-without-action-template",
                                  "attributes": null,
                                  "events": {
                                    "click": "markNotificationAsRead(item);\n"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'notification-page-item'}"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.notificationCursor"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreNotificationsData($event, this, dataSource?.notificationCursor, dataSource, 'notificationCursor', 'notifications')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "(!dataSource?.notifications || dataSource?.notifications?.length == 0)"
                  },
                  "properties": {
                    "titleId": "'notification-page-empty-state-primitive-title-id'",
                    "title": "'No Notifications'",
                    "subTitleId": "'notification-page-empty-state-primitive-subtitle-id'",
                    "subtitle": "'You haven’t received any notifications yet'",
                    "image": "'assets/empty-state/mainNotifications.svg'",
                    "imageId": "'notification-page-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manage-notifications-page-template",
      "functions": {
        "saveNotificationSettings": "function(initiallNotifications, notificationTypeSettings) {  for (const notificationType of initiallNotifications) {\n    for (const notificationSection of notificationTypeSettings) {\n      if(notificationType.group && notificationType.group.toLowerCase() === 'general') {\n        if (notificationSection.key === notificationType.description) {\n          notificationType.pushEnabled = notificationSection.pushEnabled;\n          notificationType.emailEnabled = notificationSection.emailEnabled;            \n        }\n      } else {\n        if (notificationSection.key === notificationType.group) {\n          notificationType.pushEnabled = notificationSection.pushEnabled;\n          notificationType.emailEnabled = notificationSection.emailEnabled;\n        }\n      }\n    }\n  }\n\n  const updatedNotifications = [];\n  for(let notification of initiallNotifications) {\n    updatedNotifications.push({'NotificationTypeId': notification.id, 'PushEnabled': notification.pushEnabled , 'EmailEnabled': notification.emailEnabled});\n  }\n\n  let action =  {};\n  action.query = \"mutation { notification { updateNotificationSettings(settings: $dynamicUiExpression((|prepareNotificationSettings(templateContext.additionalParameters, 'notificationSettings')|)))}}\"\n  action.postAction = \"$actionHelper.goBackPage();  $actionHelper.showToast('Notification Settings have been updated successfully')\"        \n  action.additionalParameters = {'notificationSettings': updatedNotifications};\n  this.$actionHelper.callApi(action);\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Settings'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-notification-header-primitive-back-id'",
                "rightIcon": "'assets/icon/dynamic-ui/Done_Grey.svg'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "saveNotificationSettings(dataSource.initiallNotifications, dataSource.notificationSettings)"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "notification-header-container"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "notification-header-title"
                      },
                      "properties": {
                        "$innerHTML": "'Notification Type'"
                      }
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "class": "notification-header-subtitle-container"
                      },
                      "children": [
                        {
                          "element": "span",
                          "properties": {
                            "$innerHTML": "'Push'"
                          }
                        },
                        {
                          "element": "span",
                          "properties": {
                            "$innerHTML": "'Email'"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "card-list-primitive",
                  "properties": {
                    "arrayOfItems": "dataSource?.notificationSettings",
                    "listType": "'simple-list'",
                    "classList": "'list-with-left-image'"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#itemListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "manage-notification-template",
                          "properties": {
                            "dataSource": "{'item': item, 'containerId': 'manage-notification-page-item'}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "saved-posts-page-template",
      "changeDetectionSubjects": [
        "saved-post",
        "edit-post",
        "delete-post"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'page-list-right-image-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Saved Posts'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'saved-post-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "dataSource?.favoriteCards && dataSource?.favoriteCards.length > 0"
                  },
                  "children": [
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'news-list'",
                        "arrayOfItems": "dataSource?.favoriteCards"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item",
                            "let-index": "index"
                          },
                          "children": [
                            {
                              "element": "list-with-right-image-template",
                              "attributes": null,
                              "events": {
                                "click": "item.type == 'Post' ? $actionHelper.navigateTo('postDetails/' + item.id)  : (item.type == 'Event' ? $actionHelper.navigateTo('eventDetails/' + item.id) : $actionHelper.navigateTo('offerDetails/' + item.id))\n"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'saved-post-page-item'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreFavoritesCards($event, this, initialDataSource.profileId, dataSource?.cursor, dataSource, 'cursor', 'favoriteCards')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!dataSource?.favoriteCards || dataSource?.favoriteCards.length === 0"
                  },
                  "properties": {
                    "titleId": "'saved-post-page-empty-state-primitive-title-id'",
                    "title": "'No Saved Posts'",
                    "subtitle": "'You haven’t saved anything yet. Once you save a post, it will show up here'",
                    "subTitleId": "'saved-post-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'saved-post-page-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "activities-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Updates'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'activity-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "(dataSource?.activities && dataSource?.activities?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'news-list'",
                        "arrayOfItems": "dataSource?.activities"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item",
                            "let-index": "index"
                          },
                          "children": [
                            {
                              "element": "list-with-right-image-template",
                              "attributes": {
                                "$ngIf": "index != 0"
                              },
                              "events": {
                                "click": "item.type === 'Post' ? $actionHelper.navigateToDomain('Post', item.id) : $actionHelper.navigateToDomain('Event', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'activity-page-item' }"
                              }
                            },
                            {
                              "element": "main-card-template",
                              "attributes": {
                                "$ngIf": "index == 0"
                              },
                              "events": {
                                "click": "item.type === 'Post' ? $actionHelper.navigateToDomain('Post', item.id) : $actionHelper.navigateToDomain('Event', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'activity-page-item' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreActivities($event, this, 'user', $activatedRoute.snapshot.params.id, dataSource?.cursor, dataSource, 'cursor', 'activities')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "(!dataSource?.activities || dataSource?.activities?.length == 0)"
                  },
                  "properties": {
                    "titleId": "'activity-page-empty-state-primitive-title-id'",
                    "title": "'Nothing to Show Here'",
                    "subtitle": "'There are no entries to display on this page'",
                    "subTitleId": "'activity-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'activity-page-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "conversation-page-template",
      "functions": {
        "sendMessage": "function(dataSource, message, targetId, targetType) {  let action =  {};\n  const newMessage = {'myMessage': true, 'conversationOwnerType': 'Profile', 'conversationOwnerId': dataSource.senderId, 'conversationOwnerImage': dataSource.senderImage, 'conversationOwnerName': dataSource.senderName, 'messageText': message, 'messageDate': new Date() };\n  action.query = \"mutation { $dynamicUiExpression((|$templateContext->additionalParameters.targetType|)) { sendMessage(id: $templateContext->additionalParameters.targetId, text: $templateContext->additionalParameters.text, conversationId: $templateContext->additionalParameters.conversationId, fromMailBoxId: $templateContext->additionalParameters.fromMailBoxId, toMailBoxId: $templateContext->additionalParameters.toMailBoxId ) { id } }}\"\n  action.postAction = \"templateContext.additionalParameters.dataSource.messages.push(templateContext.additionalParameters.newMessage); $actionHelper.notifiySubscribers(['add-message']); $actionHelper.scrollToBotton('conversationMailboxDiv')\"\n  action.additionalParameters = {dataSource: dataSource, newMessage: newMessage,'targetType': _.camelCase(targetType), 'targetId':targetId, 'text': message, 'conversationId': dataSource.conversationId, 'fromMailBoxId': dataSource.fromMailBoxId, 'toMailBoxId': dataSource.toMailBoxId };\n  this.$actionHelper.callApi(action);\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'conversation-message'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "dataSource?.mailboxName",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'conversation-page-header-primitive-back-id'",
                "rightIcon": "'assets/icon/dynamic-ui/Dots_Grey.svg'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource?.conversationAction, null, dataSource, {'conversationId': dataSource.conversationId, 'senderMailboxId': dataSource.fromMailBoxId , 'receiverMailboxId': dataSource.toMailBoxId })"
              }
            },
            {
              "element": "ion-content",
              "attributes": {
                "class": "with-input",
                "id": "with-input"
              },
              "children": [
                {
                  "element": "infinite-scroll",
                  "properties": {
                    "position": "'top'",
                    "threshold": "'16px'"
                  },
                  "attributes": {
                    "$ngIf": "dataSource?.cursor && dataSource.messages.length >= 10"
                  },
                  "events": {
                    "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreConversationMessages($event, this, 'conversation', dataSource.conversationId, 'messages', dataSource?.cursor, dataSource, 'cursor', 'messages', dataSource.fromMailBoxId)"
                  }
                },
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "dataSource?.messages && dataSource?.messages?.length > 0"
                  },
                  "children": [
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'conversation-list'",
                        "arrayOfItems": "dataSource.messages"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item",
                            "let-index": "index"
                          },
                          "children": [
                            {
                              "element": "conversation-template",
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'conversation-page-item'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "id": "conversationMailboxDiv"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!dataSource?.messages || dataSource?.messages?.length == 0"
                  },
                  "properties": {
                    "titleId": "'conversation-page-empty-state-primitive-title-id'",
                    "title": "'No Messages'",
                    "subtitle": "'You haven’t received any messages yet'",
                    "subTitleId": "'activity-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/Messages.svg'",
                    "imageId": "'activity-page-empty-state-primitive-image-id'"
                  }
                }
              ]
            },
            {
              "element": "ion-footer",
              "attributes": {
                "class": "ion-no-border"
              },
              "children": [
                {
                  "element": "input-primitive",
                  "properties": {
                    "inputType": "'comment-input'",
                    "inputPlaceholder": "'Send a message...'",
                    "actorImage": "dataSource?.senderImage",
                    "actorName": "dataSource?.senderName",
                    "inputActionText": "'Send'"
                  },
                  "events": {
                    "commentActionEmitter": "this.sendMessage(dataSource, $event, $activatedRoute.snapshot.params.targetId, $activatedRoute.snapshot.params.targetType)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "conversations-domain-page-template",
      "functions": {
        "getMailboxMessages": "async function(mailbox, dataSource, $dynamicUiExtraService, $actionHelper) {  $actionHelper.$loaderService.present().then(async (res) => {\n    const messagesResponse = await $dynamicUiExtraService.getMailboxConversations(mailbox.lookupId);\n    const messages = messagesResponse.messages;\n    const cursor = messagesResponse.cursor; \n    dataSource.messages = messages;\n    dataSource.cursor = cursor;\n    dataSource.targetMailbox = mailbox;\n    $dynamicUiExtraService.saveSelectedMailbox(mailbox.lookupId);\n    $actionHelper.$loaderService.dismiss();\n  });\n}\n",
        "goToConversationMessages": "function(dataSource, item) {  item.totalUnreadMessages = 0 ;\n  let receiverMailboxId;\n  let targetType;\n  let targetId;\n\n  if(dataSource.targetMailbox.lookupId === item.receiverMailboxId) {\n    receiverMailboxId = item.senderMailboxId;\n    targetType = item.senderMailboxOwnerType;\n    targetId = item.senderMailboxOwnerId;          \n  } else {\n    receiverMailboxId = item.receiverMailboxId;\n    targetType = item.receiverMailboxOwnerType;\n    targetId = item.receiverMailboxOwnerId;          \n  }\n\n  $actionHelper.navigateTo('conversationMessages/' + targetType +  '/'+ targetId + '/' + dataSource.targetMailbox.lookupId + '/' + receiverMailboxId)\n}\n"
      },
      "changeDetectionSubjects": [
        "delete-conversation",
        "add-message"
      ],
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "animated-skeleton-loading"
          },
          "children": [
            {
              "element": "skeleton-primitive",
              "properties": {
                "skeletonType": "'item-list-skeleton-hint'",
                "withMainCardSkeleton": true
              },
              "attributes": {
                "class": "{{isLoading ? '' : 'hidden'}}"
              }
            },
            {
              "element": "div",
              "attributes": {
                "class": "resize-page-templates-container"
              },
              "children": [
                {
                  "element": "page-header-primitive",
                  "properties": {
                    "headerType": "'HeaderForSubPages'",
                    "canGoToHomePage": false,
                    "title": "'Settings'",
                    "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                    "leftIconId": "'conversations-header-primitive-back-id'"
                  },
                  "events": {
                    "leftActionEmitter": "$actionHelper.goBackPage()"
                  }
                },
                {
                  "element": "ion-content",
                  "attributes": {
                    "class": "with-header-tabs"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "dataSource?.messages && dataSource?.messages?.length > 0"
                      },
                      "children": [
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'message-list'",
                            "arrayOfItems": "dataSource?.messages"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "message-list-template",
                                  "events": {
                                    "click": "this.goToConversationMessages(dataSource, item)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'tab-conversation-item', 'actionIcon': 'assets/icon/dynamic-ui/Arrow_Right_Grey.svg'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource?.cursor"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreMailboxConversations($event, this, 'mailBox', dataSource.targetMailbox.lookupId, 'conversations', dataSource.cursor, dataSource, 'cursor', 'messages')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!dataSource?.messages || dataSource?.messages?.length === 0"
                      },
                      "properties": {
                        "image": "'assets/empty-state/Messages.svg'",
                        "imageId": "'tab-conversation-page-empty-state-primitive-image-id'",
                        "titleId": "'tab-conversation-page-empty-state-primitive-title-id'",
                        "title": "'No Conversations'",
                        "subtitle": "'You haven’t received any messages yet'",
                        "subTitleId": "'tab-conversation-page-empty-state-primitive-subtitle-id'"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "searchForCompany-page-template",
      "functions": {
        "afterInit": "function() {  let action =  {};\n  action.query = \"query { search { businesses { companies(after: null, first: 10, keyword: null) { items { ...companyCommonProperties } cursor } } } }\"\n  action.postAction = \"templateContext.additionalParameters.dataSource.companies = _.get($graphQlResults, 'search.businesses.companies.items', []).map(x => $dynamicUiExtraService.mapSearchCompanyToItem(x));\"        \n  action.additionalParameters = {'dataSource': $actionHelper.getParameters() };\n  this.$actionHelper.callApi(action);\n}\n",
        "beforeDestroy": "function() {  const dataSource = $actionHelper.getParameters();\n  dataSource.companies = [];\n}\n",
        "linkOrganizationAsAffiliation": "function(item, dataSource) {  let action =  {};\n  action.query = \"mutation { organization { addAffiliatedCompany(id: $templateContext->additionalParameters.organizationId, companyId: $templateContext->item.id)}}\"\n  action.postAction = \"$actionHelper.notifiySubscribers(['manage-company', 'manage-organization'], true); $actionHelper.showToast('A request has been sent successfully');\"\n  action.item = item;\n  action.additionalParameters = dataSource;\n\n  action.actionType = 'deleteItem';\n  action.confirmationInfo = {};\n  action.confirmationInfo.confirmationTitle = \"Send Affiliation Request\";\n  action.confirmationInfo.confirmationMessage =  \"By performing this action, a request will be sent to the company you selected to approve being affiliated with your organization\";\n  action.confirmationInfo.confrimationCancelAction = \"Cancel\";\n  action.confirmationInfo.confrimationAgreeAction = \"Send Request\";\n  action.confirmationInfo.cssClass = 'full-width-button';\n\n  this.$actionHelper.applyAction(action);\n}\n",
        "addParentBranch": "function(item, dataSource) {  let action =  {};\n  action.query = \"mutation { company { addParentEntity(parentId: $templateContext->item.id, id: $templateContext->additionalParameters.companyId )}}\"\n  action.postAction = \"$actionHelper.notifiySubscribers(['manage-company', 'manage-organization'], true); $actionHelper.showToast('Company linked successfully');\"\n  action.item = item;\n  action.additionalParameters = dataSource;\n\n  action.actionType = 'deleteItem';\n  action.confirmationInfo = {};\n  action.confirmationInfo.confirmationTitle = \"Link Parent Company\";\n  action.confirmationInfo.confirmationMessage = \"By performing this action, your company will be listed as a branch under the selected company. Your request will be sent for approval before being listed in your profile\";\n  action.confirmationInfo.confrimationCancelAction = \"Cancel\";\n  action.confirmationInfo.confrimationAgreeAction = \"Link Parent\";\n  action.confirmationInfo.cssClass = 'full-width-button';\n\n  this.$actionHelper.applyAction(action);\n}\n",
        "linkCompanyToDiplomatic": "function(item, dataSource) {  let action =  {};\n  action.query = \"mutation { diplomaticMission { addTradeOfficeEntity(id: $templateContext->additionalParameters.diplomaticMissionId, companyId: $templateContext->item.id )}}\"\n  action.postAction = \"$actionHelper.notifiySubscribers(['manage-company', 'manage-organization'], true); $actionHelper.showToast('Company has been linked successfully');\"\n  action.item = item;\n  action.additionalParameters = dataSource;\n\n  action.actionType = 'deleteItem';\n  action.confirmationInfo = {};\n  action.confirmationInfo.confirmationTitle = \"Link Company\";\n  action.confirmationInfo.confirmationMessage = \"By performing this action, the company you selected will be affiliated with your embassy\";\n  action.confirmationInfo.confrimationCancelAction = \"Cancel\";\n  action.confirmationInfo.confrimationAgreeAction = \"Link\";\n  action.confirmationInfo.cssClass = 'full-width-button';\n\n  this.$actionHelper.applyAction(action);\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Search For A Company'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'search-company-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "input-primitive",
                  "properties": {
                    "dataSource": "dataSource",
                    "inputType": "'search-input'",
                    "inputPlaceholder": "'Search for a company'",
                    "searchInputId": "'search-company-page-search-input-id'",
                    "action": {
                      "dataExpression": "((data) => {\n  const result =  {\n    companies: _.get(data, \"search.businesses.companies.items\", []).map(x => $dynamicUiExtraService.mapSearchCompanyToItem(x))\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                      "query": "query {  search {\n    businesses {\n      companies(after: null, first: 10, keyword: $templateContext->keyword) {\n        items {\n          ...companyCommonProperties\n        }\n        cursor\n      }\n    }\n  }\n}\n",
                      "postAction": "dataSource.companies = $graphQlResults.companies; $actionHelper.focusInput();\n"
                    }
                  },
                  "events": {
                    "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource)"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "initialDataSource?.companyMetadata?.actions?.canCreate && $actionHelper.checkSearchInputValue()"
                  },
                  "properties": {
                    "type": "'emptyStateItem'",
                    "image": "'assets/icon/dynamic-ui/SuggestToAdd.svg'",
                    "title": "$actionHelper.getSearchInputValue()",
                    "titleId": "'organization-search-add-new-organization-title-id'",
                    "subtitle": "'Tap here to setup a new company'",
                    "subTitleId": "'company-search-add-new-company-subtitle-id'"
                  },
                  "events": {
                    "buttonActionEmitter": "$actionHelper.navigateTo('company/createNewCompany')"
                  }
                },
                {
                  "element": "card-list-primitive",
                  "properties": {
                    "listType": "'simple-list'",
                    "classList": "'list-with-left-image'",
                    "arrayOfItems": "dataSource?.companies"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#itemListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "default-list-template",
                          "events": {
                            "click": "dataSource?.fromAffiliationAction  ? linkOrganizationAsAffiliation(item, dataSource) \n    : (dataSource?.fromTradeOfficeAction ? \n        linkCompanyToDiplomatic(item,dataSource)\n        : (dataSource?.fromBranchAction ? \n            addParentBranch(item, dataSource) \n              : item.canCreateRole ? \n                $actionHelper.navigateTo('profile/addCompanyRole/' + item.id, {'companyId': item.id, 'name': item.title, 'image': item.image, userId: initialDataSource.profileId, fromSearchPage: true}) \n                : $actionHelper.showToast('You already have a role in this company')\n          )\n      )\n"
                          },
                          "properties": {
                            "dataSource": "{'item': item, 'containerId': 'search-company-page-item' }"
                          }
                        }
                      ]
                    },
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#actionListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "action-template",
                          "events": {
                            "click": "dataSource?.fromAffiliationAction  ? linkOrganizationAsAffiliation(item, dataSource) \n    : (dataSource?.fromTradeOfficeAction ? \n        linkCompanyToDiplomatic(item,dataSource)\n        : (dataSource?.fromBranchAction ? \n          addParentBranch(item, dataSource) \n          : item.canCreateRole ? \n            $actionHelper.navigateTo('profile/addCompanyRole/' + item.id, {'companyId': item.id, 'name': item.title, 'image': item.image, userId: initialDataSource.profileId, fromSearchPage: true})\n              : $actionHelper.showToast('You already have a role in this company')\n          )\n      )\n"
                          },
                          "properties": {
                            "dataSource": "{'actionIcon': dataSource?.fromLinkAction ? 'assets/icon/dynamic-ui/Link.svg': 'assets/icon/dynamic-ui/Arrow_Right_Grey.svg', containerId: 'search-company-logo', itemId: item.title  }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "searchForOrganization-page-template",
      "functions": {
        "afterInit": "function() {  let action =  {};\n  action.query = \"query { search { networks { organization(after: null, first: 10, keyword: null) { items { ...organizationCommonProperties } cursor } } } }\"\n  action.postAction = \"templateContext.additionalParameters.dataSource.organizations = _.get($graphQlResults, 'search.networks.organization.items', []).map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x));\"        \n  action.additionalParameters = {'dataSource': $actionHelper.getParameters() };\n  this.$actionHelper.callApi(action);\n}\n",
        "beforeDestroy": "function() {  const dataSource = $actionHelper.getParameters();\n  dataSource.organizations = [];\n}\n",
        "linkOrganizationToDiplomatic": "function(item, dataSource) {  let action =  {};\n  action.query = \"mutation { diplomaticMission { addAmbassadorialEntity(organizationId: $templateContext->item.id, id: $templateContext->additionalParameters.diplomaticMissionId )}}\"\n  action.postAction = \"$actionHelper.notifiySubscribers(['manage-company', 'manage-organization'], true); $actionHelper.showToast('Organization linked successfully');\"\n  action.item = item;\n  action.additionalParameters = dataSource;\n\n  action.actionType = 'deleteItem';\n  action.confirmationInfo = {};\n  action.confirmationInfo.confirmationTitle = \"Link Organization\";\n  action.confirmationInfo.confirmationMessage =  \"By performing this action, the organization you selected will be affiliated with your embassy\";\n  action.confirmationInfo.confrimationCancelAction = \"Cancel\";\n  action.confirmationInfo.confrimationAgreeAction = \"Link\";\n  action.confirmationInfo.cssClass = 'full-width-button';\n\n  this.$actionHelper.applyAction(action);\n}\n",
        "linkCompanyAsAffiliation": "function(item, dataSource) {  let action =  {};\n  action.query = \"mutation { company { addParentOrganization(id: $templateContext->additionalParameters.companyId, parentId: $templateContext->item.id )}}\"\n  action.postAction = \"$actionHelper.notifiySubscribers(['manage-company', 'manage-organization'], true); $actionHelper.showToast('Request sent successfully');\"\n  action.item = item;\n  action.additionalParameters = dataSource;\n\n  action.actionType = 'deleteItem';\n  action.confirmationInfo = {};\n  \n  action.confirmationInfo.confirmationTitle = \"Send Affiliation Request\";\n  action.confirmationInfo.confirmationMessage = \"By performing this action, a request will be sent to the selected organization to approve being affiliated with your company\";\n  action.confirmationInfo.confrimationCancelAction = \"Cancel\";\n  action.confirmationInfo.confrimationAgreeAction = \"Send Request\";\n  action.confirmationInfo.cssClass = 'full-width-button';\n\n  this.$actionHelper.applyAction(action);\n}\n",
        "addParentChapter": "function(item, dataSource) {  let action =  {};\n  action.query = \"mutation { organization { addParentEntity(parentId: $templateContext->item.id, id: $templateContext->additionalParameters.organizationId )}}\"\n  action.postAction = \"$actionHelper.notifiySubscribers(['manage-company', 'manage-organization'], true); $actionHelper.showToast('Organization linked successfully');\"\n  action.item = item;\n  action.additionalParameters = dataSource;\n\n  action.actionType = 'deleteItem';\n  action.confirmationInfo = {};\n  action.confirmationInfo.confirmationTitle = \"Link Parent Organization\";\n  action.confirmationInfo.confirmationMessage = \"By performing this action, your organization will be listed as a chapter under the selected organization. Your request will be sent for approval before being listed in your profile\";\n  action.confirmationInfo.confrimationCancelAction = \"Cancel\";\n  action.confirmationInfo.confrimationAgreeAction = \"Link Parent\";\n  action.confirmationInfo.cssClass = 'full-width-button';\n\n  this.$actionHelper.applyAction(action);\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Search for an Organization'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'search-organization-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "input-primitive",
                  "properties": {
                    "dataSource": "dataSource",
                    "inputType": "'search-input'",
                    "inputPlaceholder": "'Search for an organization'",
                    "searchInputId": "'search-organization-page-search-input-id'",
                    "action": {
                      "dataExpression": "((data) => {\n  const result =  {\n    organizations: _.get(data, \"search.networks.organization.items\", []).map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x))                  \n  }\n  $actionHelper.printData({ result, data });\n  return result;\n})(data)",
                      "query": "query {  search {\n    networks {\n      organization(after: null, first: 10, keyword: $templateContext->keyword) {\n        items {\n          ...organizationCommonProperties\n        }\n        cursor\n      }\n    }\n  }\n}\n",
                      "postAction": "dataSource.organizations = $graphQlResults.organizations; $actionHelper.focusInput();\n"
                    }
                  },
                  "events": {
                    "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource)"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "initialDataSource?.organizationMetadata?.actions?.canCreate && $actionHelper.checkSearchInputValue()"
                  },
                  "properties": {
                    "type": "'emptyStateItem'",
                    "image": "'assets/icon/dynamic-ui/SuggestToAdd.svg'",
                    "titleId": "'organization-search-add-new-company-title-id'",
                    "title": "$actionHelper.getSearchInputValue()",
                    "subtitle": "'Tap here to setup a new organization'",
                    "subTitleId": "'organization-search-add-new-company-subtitle-id'"
                  },
                  "events": {
                    "buttonActionEmitter": "$actionHelper.navigateTo('organization/createNewOrganization')"
                  }
                },
                {
                  "element": "card-list-primitive",
                  "properties": {
                    "listType": "'simple-list'",
                    "classList": "'list-with-left-image'",
                    "arrayOfItems": "dataSource?.organizations"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#itemListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "default-list-template",
                          "events": {
                            "click": "dataSource?.fromAffiliationAction  ? linkCompanyAsAffiliation(item, dataSource) \n    : (dataSource?.fromAmbassadorialNetworkAction ?\n      linkOrganizationToDiplomatic(item,dataSource)                      \n      :(dataSource?.fromChapterAction ?\n        addParentChapter(item, dataSource) \n        : item.canCreateRole ? \n          $actionHelper.navigateTo('profile/addOrganizationRole/' + item.id, {'organizationId': item.id, 'name': item.title, 'image': item.image, userId: initialDataSource.profileId, fromSearchPage: true})\n          : $actionHelper.showToast('You already have a role in this organization')\n        )\n      )\n"
                          },
                          "properties": {
                            "dataSource": "{'item': item, 'containerId': 'search-organization-page-item' }"
                          }
                        }
                      ]
                    },
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#actionListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "action-template",
                          "events": {
                            "click": "dataSource?.fromAffiliationAction  ? linkCompanyAsAffiliation(item, dataSource) \n    : (dataSource?.fromAmbassadorialNetworkAction ?\n        linkOrganizationToDiplomatic(item,dataSource)                      \n      :(dataSource?.fromChapterAction ?\n        addParentChapter(item, dataSource) \n          : item.canCreateRole ? \n              $actionHelper.navigateTo('profile/addOrganizationRole/' + item.id, {'organizationId': item.id, 'name': item.title, 'image': item.image, userId: initialDataSource.profileId, fromSearchPage: true})\n              : null\n        )\n      )\n"
                          },
                          "properties": {
                            "dataSource": "{'actionIcon': dataSource?.fromLinkAction ? 'assets/icon/dynamic-ui/Link.svg': 'assets/icon/dynamic-ui/Arrow_Right_Grey.svg', 'containerId': 'search-organization-page-item', itemId: item.title }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "organization-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkMainEntity(this.dataSource, followInfo);                \n        $actionHelper.checkFollowList(this.dataSource.members, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.currentAffiliations, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.leaderShips, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.admins, followInfo);                \n      }\n    });\n  }\n}\n"
      },
      "changeDetectionSubjects": [
        "edit-organization",
        "manage-organization-team-members",
        "manage-organization-administrators",
        "add-organization-administrators",
        "manage-organization-chapters",
        "manage-organization-affiliations",
        "add-committee",
        "edit-committee",
        "add-committee-member",
        "add-organizaiton-role",
        "remove-committee-member",
        "delete-commiteee",
        "manage-company",
        "manage-organization",
        "add-post",
        "add-event",
        "add-media",
        "delete-image",
        "edit-post",
        "delete-post",
        "edit-organization-role"
      ],
      "templateDefinition": [
        {
          "element": "ion-content",
          "attributes": {
            "class": "{{ (dataSource?.canManage || !dataSource?.canJoin) ? 'animated-skeleton-loading grayBg full-screen with-fabButton' : 'animated-skeleton-loading grayBg full-screen'}}"
          },
          "children": [
            {
              "element": "skeleton-primitive",
              "properties": {
                "skeletonType": "'domain-page-skeleton'"
              },
              "attributes": {
                "class": "{{isLoading ? '' : 'hidden'}}"
              }
            },
            {
              "element": "div",
              "attributes": {
                "class": null
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "main-card-seperator"
                  },
                  "children": [
                    {
                      "element": "main-card-primitive",
                      "children": [
                        {
                          "element": "cover-image-primitive",
                          "properties": {
                            "coverImageUrl": "''",
                            "hasTopBar": true,
                            "overlayType": "'accent-one'",
                            "topBarType": "'simple_top_bar'",
                            "leftIcon": "'assets/icon/dynamic-ui/Back_White.svg'",
                            "leftIconId": "'organization-page-cover-image-primitive-back-id'",
                            "rightIcon": "'assets/icon/dynamic-ui/Dots_White.svg'",
                            "rightIconId": "'organization-page-cover-image-primitive-dots-id'"
                          },
                          "events": {
                            "leftActionEmitter": "$actionHelper.goBackPage()",
                            "rightActionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource.mainOrganizationActions, null, dataSource, {'loggedinFirstName': initialDataSource.firstName, 'loggedinLastName': initialDataSource.lastName})"
                          }
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "profile-details"
                          },
                          "children": [
                            {
                              "element": "div",
                              "attributes": {
                                "class": "profile-details-container"
                              },
                              "children": [
                                {
                                  "element": "logo-primitive",
                                  "properties": {
                                    "logoId": "'organization-page-logo-primitive-logo-id'",
                                    "logoUrl": "$dynamicUiExtraService.getOrganizationImage(dataSource)",
                                    "name": "$dynamicUiExtraService.getOrganizationName(dataSource)"
                                  },
                                  "events": {
                                    "logoEvent": "$actionHelper.showImage($dynamicUiExtraService.getOrganizationMainImage(dataSource), $dynamicUiExtraService.getOrganizationId(dataSource), $dynamicUiExtraService.getOrganizationName(dataSource))",
                                    "avatarEvent": "dataSource?.canManage ? $actionHelper.navigateToSubPage('organization/edit') : null"
                                  }
                                },
                                {
                                  "element": "title-primitive",
                                  "properties": {
                                    "title": "$dynamicUiExtraService.getOrganizationName(dataSource)",
                                    "titleId": "'organization-page-title-primitive-' + $dynamicUiExtraService.getOrganizationName(dataSource)"
                                  }
                                },
                                {
                                  "element": "badges-primitive",
                                  "properties": {
                                    "badgeContainerId": "'organization-page-badges-primitive'",
                                    "badges": "dataSource?.badges"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "main-buttons-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.canManage"
                      },
                      "properties": {
                        "leftButtonTitle": "'Manage'",
                        "leftButtonTitleId": "'organization-page-main-buttons-primitive-manage-id'",
                        "leftButtonIcon": "'assets/icon/dynamic-ui/Manage_Green.svg'",
                        "leftButtonDisabled": "!dataSource?.canManage",
                        "rightButtonTitle": "'Invite'",
                        "rightButtonTitleId": "'organization-page-main-buttons-primitive-invite-id'",
                        "rightButtonIcon": "'assets/icon/dynamic-ui/Invite_Green.svg'",
                        "rightButtonDisabled": "!dataSource?.canInvite"
                      },
                      "events": {
                        "leftButtonActionEmitter": "$actionHelper.navigateToSubPage('organization/manageOrganization')",
                        "rightButtonActionEmitter": "$actionHelper.share(\n'List your profile with the organization page on DiasporaID alongside influential Lebanese people from the diaspora. Network with your organization members, get updates and be part of the community!',\n$dynamicUiExtraService.getOrganizationImage(dataSource),\n'Join ' + $dynamicUiExtraService.getOrganizationName(dataSource) + ' on DiasporaID',\n'The Global Lebanese Network',\n$dynamicUiExtraService.getOrganizationId(dataSource), 'DiasporaOrganization')"
                      }
                    },
                    {
                      "element": "main-buttons-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.canFollow && !dataSource?.canUnFollow && !dataSource?.canManage"
                      },
                      "properties": {
                        "leftButtonTitle": "'Follow'",
                        "leftButtonTitleId": "'organization-page-main-buttons-primitive-follow-id'",
                        "leftButtonIcon": "'assets/icon/dynamic-ui/follow_white.svg'",
                        "rightButtonTitle": "'Message'",
                        "rightButtonTitleId": "'organization-page-main-buttons-primitive-message-id'",
                        "rightButtonIcon": "'assets/icon/dynamic-ui/message.svg'",
                        "rightButtonDisabled": "!dataSource?.canSendMessage"
                      },
                      "events": {
                        "leftButtonActionEmitter": "$actionHelper.linkDomain('Organization', $dynamicUiExtraService.getOrganizationId(dataSource), dataSource)",
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('conversationMessages/organization/' + $dynamicUiExtraService.getOrganizationId(dataSource) + '/' + initialDataSource.userMailboxId + '/' + dataSource.receiverMailboxId)"
                      }
                    },
                    {
                      "element": "main-buttons-primitive",
                      "attributes": {
                        "$ngIf": "!dataSource?.canFollow && dataSource?.canUnFollow && !dataSource?.canManage"
                      },
                      "properties": {
                        "leftButtonTitle": "'Following'",
                        "leftButtonTitleId": "'organization-page-main-buttons-primitive-following-id'",
                        "leftButtonIcon": "'assets/icon/dynamic-ui/Following_white.svg'",
                        "leftButtonDisabled": "!dataSource?.canUnFollow",
                        "rightButtonTitle": "'Message'",
                        "rightButtonTitleId": "'organization-page-main-buttons-primitive-message-id'",
                        "rightButtonIcon": "'assets/icon/dynamic-ui/message.svg'",
                        "rightButtonDisabled": "!dataSource?.canSendMessage"
                      },
                      "events": {
                        "leftButtonActionEmitter": "$actionHelper.unLinkDomain('Organization', $dynamicUiExtraService.getOrganizationId(dataSource), dataSource)",
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('conversationMessages/organization/' + $dynamicUiExtraService.getOrganizationId(dataSource) + '/' + initialDataSource.userMailboxId + '/' + dataSource.receiverMailboxId)"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.generalDetailsInfo && dataSource?.generalDetailsInfo.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/About_Active.svg'",
                        "mainIconId": "'organization-page-about-section-block-header-primitive-main-icon-id'",
                        "title": "'About'",
                        "titleId": "'organization-page-about-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Info, sector and contact details'",
                        "subTitleId": "'organization-page-about-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "dataSource?.canManage",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'organization-page-about-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "'Edit'",
                        "actionLabelId": "'organization-page-about-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('organization/edit/' + $dynamicUiExtraService.getOrganizationId(dataSource))"
                      }
                    },
                    {
                      "element": "about-primitive",
                      "properties": {
                        "aboutUsContainerId": "'organization-page-about-us-primitive'",
                        "aboutUsItems": "dataSource?.generalDetailsInfo",
                        "characterLimit": 500,
                        "unTruncatedText": "'Show More'",
                        "truncatedText": "'Show Less'"
                      },
                      "events": {
                        "emptyStateActionEmitter": "(dataSource?.canManage) ? $actionHelper.navigateTo('organization/edit/' + $dynamicUiExtraService.getOrganizationId(dataSource)) : null"
                      }
                    },
                    {
                      "element": "social-media-strip-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.socialMediaInfo && dataSource?.socialMediaInfo.length > 0)"
                      },
                      "properties": {
                        "socialMediaContainerId": "'organization-page-social-media-strip-primitive'",
                        "socialMediaItems": "dataSource?.socialMediaInfo",
                        "showEmptyState": "dataSource?.canManage",
                        "icon": "'assets/icon/dynamic-ui/Social.svg'",
                        "iconId": "'organization-page-social-media-strip-primitive-icon-id'",
                        "title": "'Social Media'",
                        "titleId": "'organization-page-social-media-strip-primitive-title-id'",
                        "emptyStateMessage": "'Add Social Media Links'",
                        "emptyStateMessageId": "'organization-page-social-media-strip-primitive-empty-state-message-id'"
                      },
                      "events": {
                        "emptyStateActionEmitter": "(dataSource?.canManage) ? $actionHelper.navigateTo('organization/edit/' + $dynamicUiExtraService.getOrganizationId(dataSource)) : null"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "{{dataSource?.members && dataSource?.members.length > 0 ? 'border-separtor pdb-0' : 'border-separtor'}}",
                    "$ngIf": "(dataSource?.canManage && dataSource?.members && dataSource?.members.length > 0) ||\n(dataSource?.canManage && dataSource?.canInvite && (!dataSource?.members || dataSource?.members.length == 0)) ||\n(!dataSource?.canManage && dataSource?.members && dataSource?.members.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/People_Active.svg'",
                        "mainIconId": "'organization-page-members-section-block-header-primitive-main-icon-id'",
                        "title": "'Members'",
                        "titleId": "'organization-page-members-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Members of this organization'",
                        "subTitleId": "'organization-page-members-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.members && dataSource?.members.length > 0) || (!dataSource?.canManage && dataSource?.members && dataSource?.members.length > 0) ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'organization-page-members-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'organization-page-members-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "(dataSource?.canManage) ? $actionHelper.navigateTo('organization/manageOrganizationMembers/' + $dynamicUiExtraService.getOrganizationId(dataSource)) : $actionHelper.navigateTo('organization/viewOrganizationMembers/' + $dynamicUiExtraService.getOrganizationId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.members && dataSource?.members.length > 0"
                      },
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.members"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('profile/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'organization-page-members-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'organization-page-members-action',  'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'organization-page-members-action', 'actionClass': 'l-icon' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.canManage  && dataSource?.canInvite && (!dataSource?.members || dataSource?.members.length === 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Person.svg'",
                        "imageId": "'organization-page-members-section-empty-state-primitive-image-id'",
                        "title": "'Invite members of your organization to register and receive updates'",
                        "titleId": "'organization-page-members-section-empty-state-primitive-title-id'",
                        "buttonLabel": "'Invite Organization Members'",
                        "buttonId": "'organization-page-members-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.share(\n'List your profile with the organization page on DiasporaID alongside influential Lebanese people from the diaspora. Network with your organization members, get updates and be part of the community!',\n$dynamicUiExtraService.getOrganizationImage(dataSource),\n'Join ' + $dynamicUiExtraService.getOrganizationName(dataSource) + ' on DiasporaID',\n'The Global Lebanese Network',\n$dynamicUiExtraService.getOrganizationId(dataSource), 'DiasporaOrganization')"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "{{dataSource?.currentAffiliations && dataSource?.currentAffiliations.length > 0 ? 'border-separtor pdb-0' : 'border-separtor' }}",
                    "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.currentAffiliations && dataSource?.currentAffiliations.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/affiliation.svg'",
                        "mainIconId": "'organization-page-affiliation-section-block-header-primitive-main-icon-id'",
                        "title": "'Member Companies'",
                        "titleId": "'organization-page-affiliation-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Affiliated with this org'",
                        "subTitleId": "'organization-page-affiliation-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.currentAffiliations && dataSource?.currentAffiliations.length > 0) || (!dataSource?.canManage && dataSource?.currentAffiliations && dataSource?.currentAffiliations.length > 0) ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'organization-page-affiliation-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'organization-page-affiliation-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "(dataSource?.canManage) ? $actionHelper.navigateTo('organization/manageOrganizationAffiliations/' + $dynamicUiExtraService.getOrganizationId(dataSource)) : $actionHelper.navigateTo('organization/viewOrganizationAffiliations/' + $dynamicUiExtraService.getOrganizationId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.currentAffiliations && dataSource?.currentAffiliations.length > 0"
                      },
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.currentAffiliations"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('company/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'organization-page-affiliation-item'}"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Company', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'organization-page-affiliation-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Company', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'organization-page-affiliation-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.canManage && (!dataSource?.currentAffiliations || dataSource?.currentAffiliations.length == 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Member_Companies.svg'",
                        "imageId": "'organization-page-affiliation-section-empty-state-primitive-image-id'",
                        "title": "'Showcase companies & startups affiliated with you'",
                        "titleId": "'organization-page-affiliation-section-empty-state-primitive-title-id'",
                        "buttonLabel": "dataSource?.canManage ? 'Add Affiliated Companies': null ",
                        "buttonId": "'organization-page-affiliation-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('organization/manageOrganizationAffiliations/' + $dynamicUiExtraService.getOrganizationId(dataSource));"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor box-type",
                    "$ngIf": "dataSource?.canJoin"
                  },
                  "children": [
                    {
                      "element": "box-card-primitive",
                      "properties": {
                        "title": "'Member of this Organization?'",
                        "titleId": "'organization-page-create-role-title-id'",
                        "subTitle": "'Join now and list your role'",
                        "subTitleId": "'organization-page-create-role-subtitle-id'",
                        "arrayOfItems": "initialDataSource?.organizationMemberBoxActions"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#boxItemsTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "box-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('profile/addOrganizationRole/' + $dynamicUiExtraService.getOrganizationId(dataSource), {'organizationId': $dynamicUiExtraService.getOrganizationId(dataSource), userId: initialDataSource.profileId})"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'organization-page-create-role', 'topNetworker': false, 'lastIcon': 'assets/icon/dynamic-ui/Arrow_Right.svg' }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "dataSource?.leaderShips && dataSource?.leaderShips.length > 0"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/vip_badge.svg'",
                        "mainIconId": "'organization-page-leaderships-section-block-header-primitive-main-icon-id'",
                        "title": "'Leadership'",
                        "titleId": "'organization-page-leaderships-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Leaders & management'",
                        "subTitleId": "'organization-page-leaderships-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": true,
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'organization-page-leaderships-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "'View All'",
                        "actionLabelId": "'organization-page-leaderships-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('organization/leaderships/' + $dynamicUiExtraService.getOrganizationId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.leaderShips"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('profile/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'organization-page-leaderships-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'organization-page-leaderships-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'organization-page-leaderships-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "(dataSource?.admins && dataSource?.admins.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/administrators.svg'",
                        "mainIconId": "'organization-page-admins-section-block-header-primitive-main-icon-id'",
                        "title": "'Administrators'",
                        "titleId": "'organization-page-admins-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Page administrators'",
                        "subTitleId": "'organization-page-admins-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.admins && dataSource?.admins.length > 0) || (!dataSource?.canManage && dataSource?.admins && dataSource?.admins.length > 0) ? true : false ",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'organization-page-admins-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'organization-page-admins-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "dataSource?.canManage ? $actionHelper.navigateTo('organization/manageOrganizationAdministrator/' + $dynamicUiExtraService.getOrganizationId(dataSource)) : $actionHelper.navigateTo('organization/viewOrganizationAdministrator/' + $dynamicUiExtraService.getOrganizationId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.admins"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('profile/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'organization-page-admins-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'organization-page-admins-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'organization-page-admins-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "((dataSource?.canManage) || (!dataSource?.canJoin) && (dataSource?.canAddPost || dataSource?.canAddEvent)) || (!dataSource?.canManage && dataSource?.updates && dataSource?.updates.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/News_Active.svg'",
                        "mainIconId": "'organization-page-updates-section-block-header-primitive-main-icon-id'",
                        "title": "'Updates'",
                        "titleId": "'organization-page-updates-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Posts & discussions'",
                        "subTitleId": "'organization-page-updates-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.updates && dataSource?.updates.length > 0) || (!dataSource?.canManage && dataSource?.updates && dataSource?.updates.length > 0) ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'organization-page-updates-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'organization-page-updates-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('updates/organization/' + $dynamicUiExtraService.getOrganizationId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.updates && dataSource?.updates.length > 0"
                      },
                      "properties": {
                        "listType": "'news-list'",
                        "arrayOfItems": "dataSource?.updates"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "list-with-right-image-template",
                              "events": {
                                "click": "$actionHelper.navigateTo(item.type == 'Post' ? ('postDetails/' + item.id) : ('eventDetails/' + item.id))"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'organization-page-updates-item'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.canManage || !dataSource?.canJoin) && (!dataSource?.updates || dataSource?.updates.length === 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Post_Update.svg'",
                        "imageId": "'organization-page-updates-section-empty-state-primitive-image-id'",
                        "title": "'Share news, discussions and events with your community'",
                        "titleId": "'organization-page-updates-section-empty-state-primitive-title-id'",
                        "buttonLabel": "(dataSource?.canAddPost || dataSource?.canAddEvent) ? 'Add Post or Event' : null",
                        "buttonId": "'organization-page-updates-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource.organizationNewsAndEventActions, null, dataSource, {targetId: $dynamicUiExtraService.getOrganizationId(dataSource), targetName: $dynamicUiExtraService.getOrganizationName(dataSource), targetImage: $dynamicUiExtraService.getOrganizationImage(dataSource)} )"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "{{dataSource?.chapters && dataSource?.chapters.length > 0 ? 'border-separtor pdb-0' : 'border-separtor'}}",
                    "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.chapters && dataSource?.chapters.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/branches_gray.svg'",
                        "mainIconId": "'organization-page-chapters-section-block-header-primitive-main-icon-id'",
                        "title": "'Chapters'",
                        "titleId": "'organization-page-chapters-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Org hierarchy'",
                        "subTitleId": "'organization-page-chapters-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.chapters && dataSource?.chapters.length > 0) || (!dataSource?.canManage && dataSource?.chapters && dataSource?.chapters.length > 0) ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'organization-page-chapters-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'organization-page-chapters-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "(dataSource?.canManage) ? $actionHelper.navigateTo('organization/manageOrganizationChapters/' + $dynamicUiExtraService.getOrganizationId(dataSource)) : $actionHelper.navigateTo('organization/viewOrganizationChapters/'  + $dynamicUiExtraService.getOrganizationId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.chapters && dataSource?.chapters.length > 0"
                      },
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.chapters"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('organization/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'organization-page-chapters-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.canManage && (!dataSource?.chapters || dataSource?.chapters.length === 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Branches.svg'",
                        "imageId": "'organization-page-chapters-section-empty-state-primitive-image-id'",
                        "title": "'Every chapter in an organization can indicate its parent chapter'",
                        "titleId": "'organization-page-chapters-section-empty-state-primitive-title-id'",
                        "buttonLabel": "dataSource?.canManage? 'Choose Your Parent Chapter' : null",
                        "buttonId": "'organization-page-chapters-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateToSubPage('organization/manageOrganizationChapters')"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.committees && dataSource?.committees.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/committee.svg'",
                        "mainIconId": "'organization-page-committees-section-block-header-primitive-main-icon-id'",
                        "title": "'Committees'",
                        "titleId": "'organization-page-committees-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Organizational committees'",
                        "subTitleId": "'organization-page-committees-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.committees && dataSource?.committees.length) || (!dataSource?.canManage && dataSource?.committees && dataSource?.committees.length) > 0 ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'organization-page-committees-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'organization-page-committees-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "(dataSource?.canManage)  ? $actionHelper.navigateTo('organization/manageOrganizationCommittees/' + $dynamicUiExtraService.getOrganizationId(dataSource)) : $actionHelper.navigateTo('organization/viewOrganizationCommittees/' + $dynamicUiExtraService.getOrganizationId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.committees && dataSource?.committees.length > 0"
                      },
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'quick-link-content'",
                        "arrayOfItems": "dataSource?.committees"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "simple-list-template",
                              "events": {
                                "click": "dataSource?.canManage ? $actionHelper.navigateTo('organization/manageCommitteeDetails/' + item.id, {'organizationId': $activatedRoute.snapshot.params.id}) : $actionHelper.navigateTo('organization/viewOrganizationCommitteeDetails/' + item.id, {'organizationId': $activatedRoute.snapshot.params.id})"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'organization-page-committees-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "events": {
                                "click": "dataSource?.canManage ? $actionHelper.navigateTo('organization/manageCommitteeDetails/' + item.id, {'organizationId': $activatedRoute.snapshot.params.id}) : $actionHelper.navigateTo('organization/viewOrganizationCommitteeDetails/' + item.id, {'organizationId': $activatedRoute.snapshot.params.id})"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Arrow_Right_Grey.svg', 'containerId': 'organization-page-committees-action', 'actionClass' :'quick-link-last-logo' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.canManage && (!dataSource?.committees || dataSource?.committees.length == 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Committees.svg'",
                        "imageId": "'organization-page-committees-section-empty-state-primitive-image-id'",
                        "title": "'Create committees. List and manage member roles'",
                        "titleId": "'organization-page-committees-section-empty-state-primitive-title-id'",
                        "buttonLabel": "dataSource?.canManage? 'Create a Committee': null",
                        "buttonId": "'organization-page-committees-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('organization/manageOrganizationCommittees/' + $dynamicUiExtraService.getOrganizationId(dataSource));"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.gallery && dataSource?.gallery.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/View_Gallery.svg'",
                        "mainIconId": "'organization-page-gallery-section-block-header-primitive-main-icon-id'",
                        "title": "'Media Gallery'",
                        "titleId": "'organization-page-gallery-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Photos & videos'",
                        "subTitleId": "'organization-page-gallery-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.gallery && dataSource?.gallery.length > 0) || (!dataSource?.canManage && dataSource?.gallery && dataSource?.gallery.length > 0) ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'organization-page-gallery-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'organization-page-gallery-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('gallery/organization/' + $dynamicUiExtraService.getOrganizationId(dataSource))"
                      }
                    },
                    {
                      "element": "media-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.gallery && dataSource?.gallery.length > 0"
                      },
                      "events": {
                        "click": "$actionHelper.navigateTo('gallery/organization/' + $dynamicUiExtraService.getOrganizationId(dataSource))"
                      },
                      "properties": {
                        "mediaContainerId": "'organization-page-gallery'",
                        "youtubeIcon": "'assets/icon/dynamic-ui/YouTube_Video.svg'",
                        "items": "dataSource?.gallery"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.canManage) && !dataSource?.gallery || dataSource?.gallery.length === 0"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Media_Gallery.svg'",
                        "imageId": "'organization-page-gallery-section-empty-state-primitive-image-id'",
                        "title": "'Show sights, achievements or projects with images and videos'",
                        "titleId": "'organization-page-gallery-section-empty-state-primitive-title-id'",
                        "buttonLabel": "dataSource?.canUploadMedia ? 'Add Photos or Videos' : null",
                        "buttonId": "'organization-page-gallery-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('addMedia/'+ dataSource?.galleryId, {'canUploadImage': dataSource.canUploadImage, 'canUploadVideoLink': dataSource.canUploadVideoLink, targetId: $dynamicUiExtraService.getOrganizationId(dataSource), targetName: $dynamicUiExtraService.getOrganizationName(dataSource), targetImage: $dynamicUiExtraService.getOrganizationImage(dataSource)})"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "element": "button-primitive",
          "attributes": {
            "$ngIf": "(dataSource?.canManage && (dataSource?.canAddPost || dataSource?.canAddEvent || dataSource?.canUploadMedia)) || (!dataSource?.canManage && !dataSource?.canJoin && (dataSource?.canAddPost || dataSource?.canAddEvent))",
            "id": "organization-page-fab-button"
          },
          "properties": {
            "type": "'fab-button'",
            "icon": "'assets/icon/dynamic-ui/Add_white.svg'"
          },
          "events": {
            "actionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource?.organizationRoleActions, null, dataSource, {targetId: $dynamicUiExtraService.getOrganizationId(dataSource), targetName: $dynamicUiExtraService.getOrganizationName(dataSource), targetImage: $dynamicUiExtraService.getOrganizationImage(dataSource)} )"
          }
        }
      ]
    },
    {
      "name": "manageOrganization-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'My Organization'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-organization-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "card-list-primitive",
                  "properties": {
                    "listType": "'simple-list'",
                    "classList": "'quick-link-content'",
                    "arrayOfItems": "initialDataSource?.permissions?.organization"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#itemListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "simple-list-template",
                          "events": {
                            "click": "$actionHelper.navigateToSubPage(item.pageUrl)"
                          },
                          "properties": {
                            "dataSource": "{'item': item, 'containerId': 'manage-organization-page-permission' }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "editOrganization-page-template",
      "functions": {
        "uploadPhoto": "function ($id, $event) {  \n  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $photo: Upload!) {\n        organization {\n          uploadLogo(id: $id, photo: $photo)\n        }\n      }\n    `, {id: $id, photo: $event}).then(uploadResponse => {\n        $actionHelper.notifiySubscribers(['edit-organization'], false);\n        $actionHelper.showToast('Image updated successfully');\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Organization Information'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'edit-organization-page-header-primitive-back-id'",
                "buttonLabel": "'Save'",
                "buttonLabelId": "'edit-organization-page-header-primitive-save-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation{  organization {\n    update(id: $templateContext->activeFormArguments.organizationId, \n      model: {\n        name: $templateContext->activeFormArguments.name\n        description: $templateContext->activeFormArguments.description,\n        organizationType: $dynamicUiExpression((|getParamFromEnum(templateContext.initialDataSource.organizationTypes, $templateContext->activeFormArguments.organizationType)|)),\n        organizationCategory: $dynamicUiExpression((|getParamFromEnum(templateContext.initialDataSource.organizationCategories, $templateContext->activeFormArguments.organizationCategory)|)),\n        country: $templateContext->activeFormArguments.country,\n        city: $templateContext->activeFormArguments.city,\n        \n        contactUs: {\n          email: $templateContext->activeFormArguments.email,\n          address: $templateContext->activeFormArguments.address,\n          phoneNumber: {\n            countryCode: $templateContext->activeFormArguments.countryCode,\n            isoCode: $templateContext->activeFormArguments.isoCode,\n            number: $templateContext->activeFormArguments.phoneNumber\n          },                            \n          poBox: $templateContext->activeFormArguments.poBox,\n          website: $templateContext->activeFormArguments.website\n        },\n        socialMedia: {\n          facebook: $templateContext->activeFormArguments.facebook,\n          instagram: $templateContext->activeFormArguments.instagram,\n          linkedin: $templateContext->activeFormArguments.linkedin,\n          twitter: $templateContext->activeFormArguments.twitter\n        }\n      }\n    ) {\n      id \n    }\n  }\n}\n",
                  "postAction": "$actionHelper.showToast('Details updated successfully'); $actionHelper.notifiySubscribers(['edit-organization'], true);\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event, null, initialDataSource)"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'edit-organization-page-form'",
                    "predefineData": "{'organizationId': $actionHelper.getActiveDomainId()}",
                    "formWithImage": "dataSource.actions.canUploadLogo",
                    "isThumbnailImage": true,
                    "imageChooserActionLabel": "'Change Logo'",
                    "initialData": "dataSource.organization",
                    "imageFormControlName": "'Image'",
                    "isRequiredImage": false,
                    "imageValue": "'photoCover.imageThumbnailUrl'",
                    "avatarName": "'name'",
                    "withBeforeInitFunction": true,
                    "imageSchemaValidationPath": "'mutation.organization.uploadLogo.photo'",
                    "dataSource": {
                      "functions": {
                        "beforeInit": "function() {  return this.$actionHelper.prepareLookups()\n}\n"
                      },
                      "controllers": [
                        {
                          "key": "name",
                          "label": "Name",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Organization name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "name",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.update.model.fields.name",
                              "messages": {
                                "isRequired": "Organization name is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "description",
                          "label": "Description",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "textarea",
                          "placeholder": "Add a short description here",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "description",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.update.model.fields.description",
                              "messages": {
                                "maxLength": "5000 Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "organizationType",
                          "label": "Organization Type",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select an organization type",
                          "value": null,
                          "valueType": "enumeration",
                          "enumerationType": "organizationTypes",
                          "valuePath": "organizationType",
                          "withNullValue": false,
                          "actionTitle": "Select Organization Type",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select Organization Type', $event.element, formGroup, formsData, initialDataSource.organizationTypes, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.update.model.fields.organizationType",
                              "messages": {
                                "isRequired": "Organization type is required"
                              }
                            }
                          ],
                          "lookups": "organizationTypes",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "organizationCategory",
                          "label": "Organization Category",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a category",
                          "value": null,
                          "valueType": "enumeration",
                          "enumerationType": "organizationCategories",
                          "valuePath": "organizationCategory",
                          "withNullValue": false,
                          "actionTitle": "Select Organization Category",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select Organization Category', $event.element, formGroup, formsData, initialDataSource.organizationCategories, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.update.model.fields.organizationCategory",
                              "messages": {
                                "isRequired": "Organization category is required"
                              }
                            }
                          ],
                          "lookups": "organizationCategories",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "country",
                          "label": "Headquarters Country",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a country",
                          "value": null,
                          "valueType": "country",
                          "valuePath": "place.country",
                          "withNullValue": false,
                          "actionTitle": "Select Country",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openCountriesModal('Select Country', $event.element, formGroup, initialDataSource.countries, false)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(formPrimitive.getGraphQL, $event.newValue).then(\n(data) => {\nformsData.lookups.cities = data.cities;\nconst cityController = formsData.controllers.find(controller => controller.key === 'city');\nif(cityController) {\nif(!cityController.firstLoad) {\n$actionHelper.setFormGroupData('city',null)\ncityController.value = null;\n}\nformPrimitive.detectChanges();\ncityController.firstLoad = false;\n}\n}\n)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.update.model.fields.country",
                              "messages": {
                                "isRequired": "Country is required"
                              }
                            }
                          ],
                          "lookups": "countries",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "city",
                          "label": "City",
                          "display": true,
                          "relatedTo": null,
                          "firstLoad": true,
                          "controlType": "button-input",
                          "placeholder": "Select a city",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": "place.city",
                          "withNullValue": false,
                          "actionTitle": "Select City",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select City', $event.element, formGroup, formsData, formsData.lookups.cities, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.update.model.fields.city",
                              "messages": {
                                "isRequired": "City is required"
                              }
                            }
                          ],
                          "lookups": "cities",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "address",
                          "label": "Address",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter address",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.address",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.update.model.fields.contactUs.fields.address",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "countryCode",
                          "label": "Phone Number",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Country Code",
                          "countryIsoCodeKey": "isoCode",
                          "countryIsoCodePath": "contactUs.phone.isoCode",
                          "value": null,
                          "valueType": "phoneCountry",
                          "valuePath": "contactUs.phone",
                          "defaultValue": "place.country",
                          "withNullValue": false,
                          "actionTitle": "Select Country",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openCountriesModal('Select Country', $event.element, formGroup, phoneCountries, true)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.update.model.fields.contactUs.fields.phoneNumber.fields.countryCode",
                              "messages": {
                                "isRequired": "Country code is required"
                              }
                            }
                          ],
                          "lookups": "phoneCountry",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "phoneNumber",
                          "label": null,
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "number",
                          "placeholder": "Phone number",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.phone.number",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.update.model.fields.contactUs.fields.phoneNumber.fields.number",
                              "messages": {
                                "isRequired": "Phone number is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "email",
                          "label": "Contact Email",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "email",
                          "placeholder": "Alternative email for notifications",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.email",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.update.model.fields.contactUs.fields.email",
                              "messages": {
                                "maxLength": "Character limit reached",
                                "pattern": "Please enter a valid email address"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "website",
                          "label": "Website",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Website link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.website",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.update.model.fields.contactUs.fields.website",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "poBox",
                          "label": "P.O. Box",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "number",
                          "placeholder": "Add a P.O. box number",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.poBox",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.update.model.fields.contactUs.fields.poBox",
                              "messages": {
                                "isRequired": "Phone number is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "facebook",
                          "label": "Facebook",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Facebook profile link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.facebook",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Facebook.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.update.model.fields.socialMedia.fields.facebook",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "linkedin",
                          "label": "LinkedIn",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "LinkedIn profile link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.linkedin",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/LinkedIn.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.update.model.fields.socialMedia.fields.linkedin",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "instagram",
                          "label": "Instagram",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Instagram profile link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.instagram",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Instagram.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.update.model.fields.socialMedia.fields.instagram",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "twitter",
                          "label": "Twitter",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Twitter profile link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.twitter",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Twitter.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.update.model.fields.socialMedia.fields.twitter",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Basic Information"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "name"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "description"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "organizationType"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "organizationCategory"
                            }
                          ]
                        },
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "country"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "city"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "address"
                            }
                          ]
                        },
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Contact Details"
                            },
                            {
                              "type": "group-input-with-button",
                              "children": [
                                {
                                  "type": "controller",
                                  "controllerKey": "countryCode"
                                },
                                {
                                  "type": "controller",
                                  "controllerKey": "phoneNumber"
                                }
                              ]
                            },
                            {
                              "type": "controller",
                              "controllerKey": "email"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "website"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "poBox"
                            }
                          ]
                        },
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Social Media"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "facebook"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "linkedin"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "instagram"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "twitter"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "events": {
                    "photoActionEmitter": "this.uploadPhoto($actionHelper.getActiveDomainId(), $event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "followersOrganization-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.followers, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Followers'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'follower-organization-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.followers && dataSource?.followers?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'follower-organization-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    followers: _.get(data, \"organization.searchFollowers.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"organization.searchFollowers.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  organization(id: $templateContext->additionalData.organizationId) {\n    searchFollowers(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.followers = $graphQlResults.followers;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'organizationId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.followers"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'follower-organization-page-followers-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'follower-organization-page-followers-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'follower-organization-page-followers-action', 'actionClass': 'l-icon' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'organization', $activatedRoute.snapshot.params.id, 'followers', dataSource?.cursor, dataSource, 'cursor', 'followers')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'organization', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchFollowers', dataSource?.cursor, dataSource, 'cursor', 'followers')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.followers || dataSource?.followers?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Followers'",
                    "titleId": "'follower-organization-page-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'follower-organization-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.followers || dataSource?.followers?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Data found'",
                    "titleId": "'follower-organization-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'follower-organization-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "leadershipsOrganization-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.leaderShips, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Leadership'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'leaderships-organization-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.leaderShips && dataSource?.leaderShips?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'leaderships-organization-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    leaderShips: _.get(data, \"organization.searchLeaderships\", []).map(x => $dynamicUiExtraService.mapUserToItem(x))\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  organization(id: $templateContext->additionalData.organizationId) {\n    searchLeaderships(keyword: $templateContext->keyword) {\n      user {\n        id\n        firstName\n        lastName      \n        actions {\n          canFollow\t\n          canUnfollow\n        }\n        ...userImage\n        ...userPlaceDetails\n        ...userFeaturedRole       \n      }\n    }\n  }\n}\n",
                          "postAction": "dataSource.leaderShips = $graphQlResults.leaderShips;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'organizationId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.leaderShips"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'leaderships-organization-page-leaderships-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'leaderships-organization-page-leaderships-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'leaderships-organization-page-leaderships-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.leaderShips || dataSource?.leaderShips?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Leadership Roles Listed'",
                    "titleId": "'leaderships-organization-page-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'leaderships-organization-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.leaderShips || dataSource?.leaderShips?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Data found'",
                    "titleId": "'leaderships-organization-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'leaderships-organization-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageOrganizationMembers-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'skeleton-page-with-two-segment'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Organization Members'",
                "headerClass": "'with-no-border'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-organization-members-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "segment-primitive",
              "properties": {
                "segmentContainerId": "'manage-organization-members-page-segment-container-id'",
                "segmentOneLabel": "'Pending Requests'",
                "segmentTwoLabel": "'Approved'",
                "segmentClass": "'two-segment'"
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentOneContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.unverifiedMembers && dataSource?.unverifiedMembers?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "inputType": "'search-input'",
                            "searchInputId": "'manage-organization-members-page-unverified-members-search-input-id'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    unverifiedMembers: _.get(data, \"organization.searchPendingEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    unverifiedMembersCursor: _.get(data, \"organization.searchPendingEmployees.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  organization(id: $templateContext->additionalData.organizationId) {\n    searchPendingEmployees(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.unverifiedMembers = $graphQlResults.unverifiedMembers;  dataSource.unverifiedMembersCursor = $graphQlResults.unverifiedMembersCursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'organizationId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.unverifiedMembers"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-organization-members-page-unverified-members-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageOrganizationPendingMembersActions, item, dataSource, {'organizationId': $actionHelper.getActiveDomainId()})"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', 'itemId': item.title , 'containerId': 'manage-organization-members-page-unverified-members-action'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.unverifiedMembersCursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'organization', $activatedRoute.snapshot.params.id, 'pendingEmployees', dataSource?.unverifiedMembersCursor, dataSource, 'unverifiedMembersCursor', 'unverifiedMembers')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.unverifiedMembersCursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'organization', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchPendingEmployees', dataSource?.unverifiedMembersCursor, dataSource, 'unverifiedMembersCursor', 'unverifiedMembers')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.unverifiedMembers || dataSource?.unverifiedMembers?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Pending Requests'",
                        "titleId": "'manage-organization-members-page-unverified-members-empty-state-primitive-title-id'",
                        "subtitle": "'There are no pending join requests. We will notify you when a new request arrives'",
                        "subTitleId": "'manage-organization-members-page-unverified-members-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/Person.svg'",
                        "imageId": "'manage-organization-members-page-unverified-members-empty-state-primitive-image-id'"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.unverifiedMembers || dataSource?.unverifiedMembers?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'manage-organization-members-page-unverified-members-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-organization-members-page-unverified-members-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentTwoContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.verifiedMembers && dataSource?.verifiedMembers?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "inputType": "'search-input'",
                            "searchInputId": "'manage-organization-members-page-verified-members-search-input-id'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    verifiedMembers: _.get(data, \"organization.searchVerifiedEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    verifiedMembersCursor: _.get(data, \"organization.searchVerifiedEmployees.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  organization(id: $templateContext->additionalData.organizationId) {\n    searchVerifiedEmployees(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.verifiedMembers = $graphQlResults.verifiedMembers;  dataSource.verifiedMembersCursor = $graphQlResults.verifiedMembersCursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'organizationId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.verifiedMembers"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item,  'containerId': 'manage-organization-members-page-verified-members-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageOrganizationApprovedMembersActions, item , dataSource, {'organizationId': $actionHelper.getActiveDomainId()})"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', 'itemId': item.title, 'containerId': 'manage-organization-members-page-verified-members-action'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.verifiedMembersCursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'organization', $activatedRoute.snapshot.params.id, 'verifiedEmployees', dataSource?.verifiedMembersCursor, dataSource, 'verifiedMembersCursor', 'verifiedMembers')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.verifiedMembersCursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'organization', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchVerifiedEmployees', dataSource?.verifiedMembersCursor, dataSource, 'verifiedMembersCursor', 'verifiedMembers')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedMembers || dataSource?.verifiedMembers?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Members'",
                        "titleId": "'manage-organization-members-page-verified-members-empty-state-primitive-title-id'",
                        "subtitle": "'Approved members will appear here'",
                        "subTitleId": "'manage-organization-members-page-verified-members-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/Person.svg'",
                        "imageId": "'manage-organization-members-page-verified-members-empty-state-primitive-image-id'"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedMembers || dataSource?.verifiedMembers?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'manage-organization-members-page-verified-members-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-organization-members-page-verified-members-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "viewOrganizationMembers-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.verifiedMembers, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Organization Members'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-organization-members-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.verifiedMembers && dataSource?.verifiedMembers?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'view-organization-members-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    verifiedMembers: _.get(data, \"organization.searchEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"organization.searchEmployees.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  organization(id: $templateContext->additionalData.organizationId) {\n    searchEmployees(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.verifiedMembers = $graphQlResults.verifiedMembers;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'organizationId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.verifiedMembers"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'view-organization-members-page-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'view-organization-members-page-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'view-organization-members-page-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'organization', $activatedRoute.snapshot.params.id, 'employees', dataSource?.cursor, dataSource, 'cursor', 'verifiedMembers')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'organization', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchEmployees', dataSource?.cursor, dataSource, 'cursor', 'verifiedMembers')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedMembers || dataSource?.verifiedMembers?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Members Listed'",
                    "titleId": "'view-organization-members-page-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'view-organization-members-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedMembers || dataSource?.verifiedMembers?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'view-organization-members-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-organization-members-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "viewOrganizationAdministrator-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.admins, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Page Administrators'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-organization-administrator-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.admins && dataSource?.admins?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'manage-organization-administrator-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    admins: _.get(data, \"organization.searchAdmins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"organization.searchAdmins.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  organization(id: $templateContext->additionalData.organizationId) {\n    searchAdmins(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.admins = $graphQlResults.admins;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'organizationId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.admins"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'view-organization-administrator-page-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'view-organization-administrator-page-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'view-organization-administrator-page-action', 'actionClass': 'l-icon' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'organization', $activatedRoute.snapshot.params.id, 'admins', dataSource?.cursor, dataSource, 'cursor', 'admins')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'organization', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchAdmins', dataSource?.cursor, dataSource, 'cursor', 'admins')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.admins || dataSource?.admins?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Page Administrators'",
                    "titleId": "'view-organization-administrator-page-empty-state-primitive-title-id'",
                    "subtitle": "'This page doesn’t currently have any administrators.'",
                    "subTitleId": "'view-organization-administrator-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'view-organization-administrator-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.admins || dataSource?.admins?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Data found'",
                    "titleId": "'view-organization-administrator-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-organization-administrator-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageOrganizationAdministrator-page-template",
      "changeDetectionSubjects": [
        "add-organization-administrators"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Page Administrators'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-organization-administrator-page-header-primitive-back-id'",
                "rightIcon": "($actionHelper?.checkSearchInputValue() || (dataSource?.admins && dataSource?.admins?.length > 0)) ? 'assets/icon/dynamic-ui/Add_Grey.svg': ''",
                "rightIconId": "'manage-organization-administrator-page-header-primitive-add-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "($actionHelper?.checkSearchInputValue() || (dataSource?.admins && dataSource?.admins?.length > 0)) ? $actionHelper.navigateTo('organization/addOrganizationAdministrator/' + $actionHelper.getActiveDomainId()): ''"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.admins && dataSource?.admins?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'manage-organization-administrator-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    admins: _.get(data, \"organization.searchAdmins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"organization.searchAdmins.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  organization(id: $templateContext->additionalData.organizationId) {\n    searchAdmins(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.admins = $graphQlResults.admins;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'organizationId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.admins"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'manage-organization-administrator-page-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "events": {
                                "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageOrganizationAdministratorsActions, item, dataSource, {'organizationId': $actionHelper.getActiveDomainId()})"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', itemId: item.title, 'containerId': 'manage-organization-administrator-page-action'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'organization', $activatedRoute.snapshot.params.id, 'admins', dataSource?.cursor, dataSource, 'cursor', 'admins')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'organization', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchAdmins', dataSource?.cursor, dataSource, 'cursor', 'admins')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.admins || dataSource?.admins?.length == 0)"
                  },
                  "events": {
                    "buttonActionEmitter": "$actionHelper.navigateTo('organization/addOrganizationAdministrator/' + $actionHelper.getActiveDomainId())"
                  },
                  "properties": {
                    "title": "'No Page Administrators'",
                    "titleId": "'manage-organization-administrator-page-empty-state-primitive-title-id'",
                    "subtitle": "'This page doesn’t currently have any administrators. You can assign a page member or invite someone by email'",
                    "subTitleId": "'manage-organization-administrator-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'manage-organization-administrator-page-empty-state-primitive-image-id'",
                    "buttonLabel": "'Add Page Administrator'",
                    "buttonId": "'manage-organization-administrator-page-empty-state-primitive-button-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.admins || dataSource?.admins?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Data found'",
                    "titleId": "'manage-organization-administrator-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'manage-organization-administrator-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "addOrganizationAdministrator-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'skeleton-page-with-two-segment'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Add Page Administrator'",
                "headerClass": "'with-no-border'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'add-organization-administrator-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "segment-primitive",
              "properties": {
                "segmentContainerId": "'add-organization-administrator-page-segment-container-id'",
                "segmentOneLabel": "'Assign Member'",
                "segmentTwoLabel": "'Invite by Email'",
                "segmentClass": "'two-segment'"
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentOneContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.verifiedMembers && dataSource?.verifiedMembers?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "inputType": "'search-input'",
                            "searchInputId": "'add-organization-administrator-page-members-search-input-id'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    verifiedMembers: _.get(data, \"organization.searchVerifiedEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"organization.searchVerifiedEmployees.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  organization(id: $templateContext->additionalData.organizationId) {\n    searchVerifiedEmployees(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.verifiedMembers = $graphQlResults.verifiedMembers;  dataSource.cursor = $graphQlResults.cursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'organizationId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.verifiedMembers"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'add-organization-administrator-page-members-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageOrganizationAssignAdministratorActions, item, dataSource, {'organizationId': $actionHelper.getActiveDomainId()})"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', itemId: item.title, 'containerId': 'add-organization-administrator-page-members-action'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'organization', $activatedRoute.snapshot.params.id, 'verifiedEmployees', dataSource?.cursor, dataSource, 'cursor', 'verifiedMembers')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'organization', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchVerifiedEmployees', dataSource?.cursor, dataSource, 'cursor', 'verifiedMembers')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedMembers || dataSource?.verifiedMembers?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Members'",
                        "titleId": "'add-organization-administrator-page-members-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/Person.svg'",
                        "imageId": "'add-organization-administrator-page-members-empty-state-primitive-image-id'"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.verifiedMembers || dataSource?.verifiedMembers?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Data found'",
                        "titleId": "'add-organization-administrator-page-members-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'add-organization-administrator-page-members-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentTwoContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "form-primitive",
                      "properties": {
                        "formContainerId": "'add-organization-administrator-page-form'",
                        "predefineData": "{'organizationId': $actionHelper.getActiveDomainId()}",
                        "dataSource": {
                          "controllers": [
                            {
                              "key": "firstName",
                              "label": "First Name",
                              "display": true,
                              "relatedTo": null,
                              "controlType": "input",
                              "type": "text",
                              "placeholder": "Enter first name",
                              "value": null,
                              "withNullValue": false,
                              "actionTitle": null,
                              "required": true,
                              "icon": null,
                              "leftIcon": null,
                              "validators": [
                                {
                                  "name": "fromSchema",
                                  "fieldPath": "mutation.organization.inviteAdmin.firstName",
                                  "messages": {
                                    "isRequired": "First name is required",
                                    "maxLength": "Character limit reached"
                                  }
                                }
                              ],
                              "controlApi": null,
                              "controlAnotherApi": null
                            },
                            {
                              "key": "lastName",
                              "label": "Last Name",
                              "display": true,
                              "relatedTo": null,
                              "controlType": "input",
                              "type": "text",
                              "placeholder": "Enter last name",
                              "value": null,
                              "withNullValue": false,
                              "actionTitle": null,
                              "required": true,
                              "icon": null,
                              "leftIcon": null,
                              "validators": [
                                {
                                  "name": "fromSchema",
                                  "fieldPath": "mutation.organization.inviteAdmin.lastName",
                                  "messages": {
                                    "isRequired": "Last name is required",
                                    "maxLength": "Character limit reached"
                                  }
                                }
                              ],
                              "controlApi": null,
                              "controlAnotherApi": null
                            },
                            {
                              "key": "email",
                              "label": "Email Address",
                              "display": true,
                              "relatedTo": null,
                              "controlType": "input",
                              "type": "email",
                              "placeholder": "Enter email",
                              "value": null,
                              "withNullValue": false,
                              "actionTitle": null,
                              "required": true,
                              "icon": null,
                              "leftIcon": null,
                              "validators": [
                                {
                                  "name": "fromSchema",
                                  "fieldPath": "mutation.organization.inviteAdmin.email",
                                  "messages": {
                                    "isRequired": "Email is required",
                                    "maxLength": "Character limit reached",
                                    "pattern": "Please enter a valid email address"
                                  }
                                }
                              ],
                              "controlApi": null,
                              "controlAnotherApi": null
                            }
                          ],
                          "template": [
                            {
                              "type": "block-container",
                              "children": [
                                {
                                  "type": "controller",
                                  "controllerKey": "firstName"
                                },
                                {
                                  "type": "controller",
                                  "controllerKey": "lastName"
                                },
                                {
                                  "type": "controller",
                                  "controllerKey": "email"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    },
                    {
                      "element": "button-primitive",
                      "attributes": {
                        "id": "'add-organization-administrator-page-submit-action'",
                        "$ngIf": "dataSource.actions.canInviteAdmin"
                      },
                      "properties": {
                        "text": "'Invite to be a Page Administrator'",
                        "disableButton": "!$actionHelper.isValidForm()",
                        "action": {
                          "query": "mutation {  organization {\n    inviteAdmin(\n      id: $templateContext->activeFormArguments.organizationId, \n      lastName: $templateContext->activeFormArguments.lastName,\n      firstName: $templateContext->activeFormArguments.firstName, \n      email: $templateContext->activeFormArguments.email,\n      invitationUrl: $templateContext->additionalData.url\n    )\n  }\n}\n",
                          "postAction": "$actionHelper.showToast('Your invitation was sent successfully');"
                        }
                      },
                      "events": {
                        "actionEmitter": "$actionHelper.invite($event, dataSource?.organization?.photoCover?.imageThumbnailUrl, 'Assigned as an admin', 'You have been assigned as an admin to ' + dataSource?.organization?.name, dataSource?.organization?.id, 'DiasporaAdminOrganization')"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageOrganizationChapters-page-template",
      "changeDetectionSubjects": [
        "manage-organization"
      ],
      "functions": {
        "getFullTree": "async function (dataSource) {  const parentChapterResponse = await $dynamicUiExtraService.getOrganizationParentChapters($activatedRoute.snapshot.params.id, $actionHelper);\n  const rootChapterId = parentChapterResponse.rootChapterId;\n  const hasParentChapter = parentChapterResponse.hasParentChapter;\n  const parentChapterId = parentChapterResponse.parentChapterId;\n\n  let chaptersTree = [];\n  if(hasParentChapter) {\n    chaptersTree = await $dynamicUiExtraService.prepareOrganizationChildChapters(rootChapterId, $actionHelper, $activatedRoute.snapshot.params.id);\n  }\n  dataSource.chaptersTree = chaptersTree;\n  dataSource.parentChapterId = parentChapterId;  \n}\n",
        "removeChapter": "function ($id,$chapterId, $dynamicUiExtraService, dataSource) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $chapterId: String!) {\n        organization {\n          removeParentEntity(id: $id, parentId: $chapterId)\n        }\n      }\n    `, {id: $id, chapterId: $chapterId}).then((data) => {\n        $actionHelper.showToast('Chapter link removed successfully');\n        this.getFullTree(dataSource);\n\n\n        this.getOutgoingRequest(dataSource);\n        $actionHelper.notifiySubscribers(['manage-organization-chapters']); \n      }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
        "getOutgoingRequest": "function (dataSource) {    this.getGraphQL(`\n      query \n        { \n          organization(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n            outgoingChaptersRequests(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n              items {\n                organization {\n                  ...organizationCommonProperties\n                }\n              }\n              cursor\n            }  \n          }\n        }              \n    `).then((data) => {\n        dataSource.outgoingChaptersRequests = _.get(data, 'organization.outgoingChaptersRequests.items', []);\n        dataSource.outgoingChaptersRequestsCursor = _.get(data, \"organization.outgoingChaptersRequests.cursor\");\n    })\n  }\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'skeleton-page-with-three-segment'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Chapters'",
                "headerClass": "'with-no-border'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-organization-chapters-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "segment-primitive",
              "properties": {
                "segmentContainerId": "'manage-organization-chapters-page-segment-container-id'",
                "segmentOneLabel": "'Received'",
                "segmentTwoLabel": "'Sent'",
                "segmentThreeLabel": "'Current'",
                "segmentClass": "'three-segment'"
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentOneContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "dataSource?.incomingChaptersRequests && dataSource?.incomingChaptersRequests?.length > 0"
                      },
                      "children": [
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.incomingChaptersRequests"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Organization', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-organization-chapters-page-incomming-request-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageOrganizationReceivedChaptersActions, item, dataSource, {'organizationId': $actionHelper.getActiveDomainId(), parentPage: this})"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', 'containerId': 'manage-organization-chapters-page-incomming-request-action', itemId: item.title}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.incomingChaptersRequestsCursor"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOrganizationData($event, this, 'organization', $activatedRoute.snapshot.params.id, 'incomingChaptersRequests', dataSource?.incomingChaptersRequestsCursor, dataSource, 'incomingChaptersRequestsCursor', 'incomingChaptersRequests')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!dataSource?.incomingChaptersRequests || dataSource?.incomingChaptersRequests?.length == 0"
                      },
                      "properties": {
                        "title": "'No Incoming Requests'",
                        "titleId": "'manage-organization-chapters-page-incomming-request-empty-state-primitive-title-id'",
                        "subtitle": "'There are no requests from child chapters yet. We will notify you when a request arrives'",
                        "subTitleId": "'manage-organization-chapters-page-incomming-request-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-organization-chapters-page-incomming-request-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentTwoContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "dataSource?.outgoingChaptersRequests && dataSource?.outgoingChaptersRequests?.length > 0"
                      },
                      "children": [
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.outgoingChaptersRequests"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Organization', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-organization-chapters-page-outgoing-request-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageOrganizationSentChaptersActions, item, dataSource, {'organizationId': $actionHelper.getActiveDomainId(), parentPage: this})"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', 'containerId': 'manage-organization-chapters-page-outgoing-request-action', itemId: item.title}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.outgoingChaptersRequestsCursor"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreOrganizationData($event, this, 'organization', $activatedRoute.snapshot.params.id, 'outgoingChaptersRequests', dataSource?.outgoingChaptersRequestsCursor, dataSource, 'outgoingChaptersRequestsCursor', 'outgoingChaptersRequests')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!dataSource?.outgoingChaptersRequests || dataSource?.outgoingChaptersRequests?.length == 0"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('searchForOrganization', {'organizations': [], 'fromLinkAction': true, 'fromChapterAction': true,  'organizationId': $activatedRoute.snapshot.params.id})"
                      },
                      "properties": {
                        "title": "'No Outgoing Requests'",
                        "titleId": "'manage-organization-chapters-page-outgoing-request-empty-state-primitive-title-id'",
                        "subtitle": "'You haven’t sent any requests to parent chapters'",
                        "subTitleId": "'manage-organization-chapters-page-outgoing-request-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-organization-chapters-page-outgoing-request-empty-state-primitive-image-id'",
                        "buttonLabel": "dataSource?.actions?.canAddParentEntity ? 'Add Parent Organization' : ''",
                        "buttonId": "'manage-organization-chapters-page-outgoing-request-empty-state-primitive-button-id'"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentThreeContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "dataSource.chaptersTree && dataSource.chaptersTree.length > 0"
                      },
                      "children": [
                        {
                          "element": "tree-primitive",
                          "properties": {
                            "containerId": "'manage-organization-current-chapter'",
                            "treeType": "'manageOrganizationChapters'",
                            "targetId": "$actionHelper.getActiveDomainId()",
                            "rightIcon": "'assets/icon/dynamic-ui/Link.svg'",
                            "hasAction": true,
                            "showChildCount": false,
                            "parentTargetId": "dataSource.parentChapterId",
                            "treeItems": "dataSource.chaptersTree"
                          },
                          "events": {
                            "actionEmitter": "this.removeChapter($activatedRoute.snapshot.params.id, $event.targetId, $dynamicUiExtraService, dataSource)"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "(!dataSource?.chaptersTree || dataSource?.chaptersTree?.length == 0)"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('searchForOrganization', {'organizations': [], 'fromLinkAction': true, 'fromChapterAction': true,  'organizationId': $activatedRoute.snapshot.params.id})"
                      },
                      "properties": {
                        "title": "'No Organization Chapters Listed'",
                        "titleId": "'manage-organization-chapters-page-current-empty-state-primitive-title-id'",
                        "subtitle": "'Send a request to be listed under the parent chapter. If they approve, your chapter will be shown here as part of the organization’s structure'",
                        "subTitleId": "'manage-organization-chapters-page-current-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-organization-chapters-page-current-empty-state-primitive-image-id'",
                        "buttonLabel": "dataSource?.actions?.canAddParentEntity ? 'Add Parent Organization': ''",
                        "buttonId": "'manage-organization-chapters-page-current-empty-state-primitive-button-id'"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "viewOrganizationChapters-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'chain-tree-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "ion-content",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Chapters'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-organization-chapters-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "div",
              "children": [
                {
                  "element": "tree-primitive",
                  "attributes": {
                    "$ngIf": "dataSource.chaptersTree && dataSource.chaptersTree.length > 0"
                  },
                  "properties": {
                    "containerId": "'view-organization-chapters'",
                    "treeType": "'manageOrganizationChapters'",
                    "targetId": "$actionHelper.getActiveDomainId()",
                    "rightIcon": "'assets/icon/dynamic-ui/Chapters_Grey.svg'",
                    "hasAction": false,
                    "showChildCount": true,
                    "parentTargetId": "dataSource.parentChapterId",
                    "treeItems": "dataSource.chaptersTree"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "(!dataSource?.chaptersTree || dataSource?.chaptersTree?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Organization Chapters Listed'",
                    "titleId": "'view-organization-chapters-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-organization-chapters-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageOrganizationAffiliations-page-template",
      "changeDetectionSubjects": [
        "manage-company"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'skeleton-page-with-two-segment'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Networks and Affiliations'",
                "headerClass": "'with-no-border'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-organization-affiliations-header-primitive-back-id'",
                "rightIcon": "(dataSource?.currentAffiliations && dataSource?.currentAffiliations?.length > 0) ? 'assets/icon/dynamic-ui/Add_Grey.svg': ''",
                "rightIconId": "'manage-organization-affiliations-header-primitive-add-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.navigateTo('searchForCompany', {'companies': [], 'fromLinkAction': true, 'fromAffiliationAction': true, 'organizationId': $activatedRoute.snapshot.params.id});"
              }
            },
            {
              "element": "segment-primitive",
              "properties": {
                "segmentContainerId": "'manage-organization-affiliations-segment-container-id'",
                "segmentOneLabel": "'Received'",
                "segmentTwoLabel": "'Current'",
                "segmentClass": "'two-segment'"
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentOneContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "(dataSource?.requestedAffiliations && dataSource?.requestedAffiliations?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.requestedAffiliations"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Company', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-organization-affiliations-requested-affiliation-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageOrganizationReceivedAffiliationActions, item, dataSource, {organizationId: $actionHelper.getActiveDomainId()} )"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', 'itemId': item.title, 'containerId': 'manage-organization-affiliations-requested-affiliation-action'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.requestedAffiliationsCursor"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreCompanyData($event, this, 'organization', $activatedRoute.snapshot.params.id, 'requestedAffiliations', dataSource?.requestedAffiliationsCursor, dataSource, 'requestedAffiliationsCursor', 'requestedAffiliations')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "(!dataSource?.requestedAffiliations || dataSource?.requestedAffiliations?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Pending Requests'",
                        "titleId": "'manage-organization-affiliations-requested-affiliation-empty-state-primitive-title-id'",
                        "subtitle": "'There are currently no pending requests. We will notify you when a new request arrives'",
                        "subTitleId": "'manage-organization-affiliations-requested-affiliation-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-organization-affiliations-requested-affiliation-empty-state-primitive-image-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('searchForCompany', {'companies': [], 'fromLinkAction': true, 'fromAffiliationAction': true,  'organizationId': $activatedRoute.snapshot.params.id});"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentTwoContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.currentAffiliations && dataSource?.currentAffiliations?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "inputType": "'search-input'",
                            "searchInputId": "'manage-organization-affiliations-current-affiliation-search-input-id'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    currentAffiliations: _.get(data, \"organization.searchCurrentAffiliations.items\", []).map(x => $dynamicUiExtraService.mapCompanyToItem(x)),\n    currentAffiliationsCursor: _.get(data, \"organization.searchCurrentAffiliations.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  organization(id: $templateContext->additionalData.organizationId) {\n    searchCurrentAffiliations(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        company {\n          ...companyCommonProperties\n        }   \n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.currentAffiliations = $graphQlResults.currentAffiliations;  dataSource.currentAffiliationsCursor = $graphQlResults.currentAffiliationsCursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'organizationId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource.currentAffiliations"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Company', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-organization-affiliations-current-affiliation-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageOrganizationCurrentAffiliationsActions, item, dataSource, {organizationId: $actionHelper.getActiveDomainId()})"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', itemId: item.title, 'containerId': 'manage-organization-affiliations-current-affiliation-action'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.currentAffiliationsCursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreCompanyData($event, this, 'organization', $activatedRoute.snapshot.params.id, 'currentAffiliations', dataSource?.currentAffiliationsCursor, dataSource, 'currentAffiliationsCursor', 'currentAffiliations')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.currentAffiliationsCursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreSeachCompanyData($event, this, 'organization', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchCurrentAffiliations', dataSource?.currentAffiliationsCursor, dataSource, 'currentAffiliationsCursor', 'currentAffiliations')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.currentAffiliations || dataSource?.currentAffiliations?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Affiliated Companies'",
                        "titleId": "'manage-organization-affiliations-current-affiliation-empty-state-primitive-title-id'",
                        "subtitle": "'Approved affiliation requests will appear here'",
                        "subTitleId": "'manage-organization-affiliations-current-affiliation-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-organization-affiliations-current-affiliation-empty-state-primitive-image-id'",
                        "buttonLabel": "dataSource.actions.canAddAffiliatedCompany ? 'Add an Affiliation': ''",
                        "buttonId": "'manage-organization-affiliations-current-affiliation-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('searchForCompany', {'companies': [], 'fromLinkAction': true, 'fromAffiliationAction': true, 'organizationId': $activatedRoute.snapshot.params.id});"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.currentAffiliations || dataSource?.currentAffiliations?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'manage-organization-affiliations-current-affiliation-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-organization-affiliations-current-affiliation-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "viewOrganizationAffiliations-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.currentAffiliations, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Member Of'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-organization-affiliations-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.currentAffiliations && dataSource?.currentAffiliations?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'view-organization-affiliations-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    currentAffiliations: _.get(data, \"organization.searchCurrentAffiliations.items\", []).map(x => $dynamicUiExtraService.mapCompanyToItem(x)),\n    cursor: _.get(data, \"organization.searchCurrentAffiliations.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  organization(id: $templateContext->additionalData.organizationId) {\n    searchCurrentAffiliations(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        company {\n          ...companyCommonProperties\n        }   \n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.currentAffiliations = $graphQlResults.currentAffiliations;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'organizationId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.currentAffiliations"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Company', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'view-organization-affiliations-affiliation-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Company', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'view-organization-affiliations-affiliation-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Company', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'view-organization-affiliations-affiliation-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreCompanyData($event, this, 'organization', $activatedRoute.snapshot.params.id, 'currentAffiliations', dataSource?.cursor, dataSource, 'cursor', 'currentAffiliations')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreSeachCompanyData($event, this, 'organization', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchCurrentAffiliations', dataSource?.cursor, dataSource, 'cursor', 'currentAffiliations')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.currentAffiliations || dataSource?.currentAffiliations?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Affiliated Companies'",
                    "titleId": "'view-organization-affiliations-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-organization-affiliations-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.currentAffiliations || dataSource?.currentAffiliations?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'view-organization-affiliations-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-organization-affiliations-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageOrganizationCommittees-page-template",
      "changeDetectionSubjects": [
        "add-committee",
        "edit-committee",
        "add-committee-member",
        "add-organizaiton-role",
        "remove-committee-member",
        "delete-commiteee"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Committees'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-organization-committees-page-header-primitive-back-id'",
                "rightIcon": "dataSource?.canCreateCommittee && dataSource?.committees && dataSource?.committees?.length > 0 ? 'assets/icon/dynamic-ui/Add_Grey.svg': ''",
                "rightIconId": "'manage-organization-committees-page-header-primitive-add-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "dataSource?.canCreateCommittee && dataSource?.committees && dataSource?.committees?.length > 0 ? $actionHelper.navigateToSubPage('organization/addOrganizationCommittee'): ''"
              }
            },
            {
              "element": "ion-content",
              "attributes": {
                "$ngIf": "dataSource?.committees && dataSource?.committees?.length > 0"
              },
              "children": [
                {
                  "element": "card-list-primitive",
                  "properties": {
                    "listType": "'simple-list'",
                    "classList": "'quick-link-content'",
                    "arrayOfItems": "dataSource?.committees"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#itemListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "simple-list-template",
                          "events": {
                            "click": "$actionHelper.navigateTo('organization/manageCommitteeDetails/' + item.id, {'organizationId': $activatedRoute.snapshot.params.id})"
                          },
                          "properties": {
                            "dataSource": "{'item': item, 'containerId': 'manage-organization-committees-page-committee-item'}"
                          }
                        }
                      ]
                    },
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#actionListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "action-template",
                          "events": {
                            "click": "$actionHelper.navigateTo('organization/manageCommitteeDetails/' + item.id, {'organizationId': $activatedRoute.snapshot.params.id})"
                          },
                          "properties": {
                            "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Arrow_Right_Grey.svg', 'containerId': 'manage-organization-committees-page-committee-action', 'actionClass' :'quick-link-last-logo' }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "element": "empty-state-primitive",
              "attributes": {
                "$ngIf": "!dataSource?.committees || dataSource?.committees?.length == 0"
              },
              "events": {
                "buttonActionEmitter": "$actionHelper.navigateToSubPage('organization/addOrganizationCommittee')"
              },
              "properties": {
                "title": "'No Committees Listed'",
                "titleId": "'manage-organization-committees-page-empty-state-primitive-title-id'",
                "subtitle": "'This page doesn’t currently have any listed committees. Tap the button below to create one'",
                "subTitleId": "'manage-organization-committees-page-empty-state-primitive-subtitle-id'",
                "image": "'assets/empty-state/list.svg'",
                "imageId": "'manage-organization-committees-page-empty-state-primitive-image-id'",
                "buttonLabel": "dataSource?.canCreateCommittee ? 'Create Committee' : null",
                "buttonId": "'manage-organization-committees-page-empty-state-primitive-button-id'"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "viewOrganizationCommittees-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Committees'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-organization-committees-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "attributes": {
                "$ngIf": "dataSource?.committees && dataSource?.committees?.length > 0"
              },
              "children": [
                {
                  "element": "card-list-primitive",
                  "properties": {
                    "listType": "'simple-list'",
                    "classList": "'quick-link-content'",
                    "arrayOfItems": "dataSource?.committees"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#itemListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "simple-list-template",
                          "events": {
                            "click": "$actionHelper.navigateTo('organization/viewOrganizationCommitteeDetails/' + item.id, {'organizationId': $activatedRoute.snapshot.params.id})"
                          },
                          "properties": {
                            "dataSource": "{'item': item, 'containerId': 'view-organization-committees-page-committee-item' }"
                          }
                        }
                      ]
                    },
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#actionListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "action-template",
                          "events": {
                            "click": "$actionHelper.navigateTo('organization/viewOrganizationCommitteeDetails/' + item.id, {'organizationId': $activatedRoute.snapshot.params.id})"
                          },
                          "properties": {
                            "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Arrow_Right_Grey.svg', 'containerId': 'view-organization-committees-page-committee-action', 'actionClass' :'quick-link-last-logo' }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "element": "empty-state-primitive",
              "attributes": {
                "$ngIf": "!dataSource?.committees || dataSource?.committees?.length == 0"
              },
              "properties": {
                "title": "'No Committees Listed'",
                "titleId": "'view-organization-committees-page-empty-state-primitive-title-id'",
                "subtitle": "'This page doesn’t currently list any support staff.'",
                "subTitleId": "'view-organization-committees-page-empty-state-primitive-subtitle-id'",
                "image": "'assets/empty-state/list.svg'",
                "imageId": "'view-organization-committees-page-empty-state-primitive-image-id'"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "addOrganizationCommittee-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'form-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Create Committee'",
                "leftIcon": "'assets/icon/dynamic-ui/Close_Grey.svg'",
                "leftIconId": "'add-organization-committees-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'add-organization-committees-page-form'",
                    "predefineData": "{'id': $actionHelper.getActiveDomainId()}",
                    "dataSource": {
                      "controllers": [
                        {
                          "key": "name",
                          "label": "Committee Name",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter committee name",
                          "value": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.createOrganizationCommitte.name",
                              "messages": {
                                "isRequired": "Committee name is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "controller",
                          "controllerKey": "name"
                        }
                      ]
                    }
                  }
                },
                {
                  "element": "button-primitive",
                  "attributes": {
                    "id": "add-organization-committees-page-action-submit-id"
                  },
                  "properties": {
                    "text": "'Create Committee'",
                    "disableButton": "!$actionHelper.isValidForm()",
                    "action": {
                      "query": "mutation {  organization {\n    createOrganizationCommitte($dynamicUiExpression((|objectToParams(templateContext.activeFormArguments)|))) {\n      id \n      name\n    }\n  }\n}\n",
                      "postAction": "$actionHelper.showToast('Committee created successfully'); $actionHelper.notifiySubscribers(['add-committee'], true);\n"
                    }
                  },
                  "events": {
                    "actionEmitter": "$actionHelper.submitForm($event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "editOrganizationCommittee-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'form-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Rename Committee'",
                "leftIcon": "'assets/icon/dynamic-ui/Close_Grey.svg'",
                "leftIconId": "'edit-organization-committee-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'edit-organization-committee-page-form'",
                    "predefineData": "{'id': $actionHelper.getActiveDomainId()}",
                    "initialData": "dataSource.previousPageDataSource",
                    "dataSource": {
                      "controllers": [
                        {
                          "key": "name",
                          "label": "Committee Name",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter committee name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "name",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organizationCommittee.update.name",
                              "messages": {
                                "isRequired": "Committee name is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "controller",
                          "controllerKey": "name"
                        }
                      ]
                    }
                  }
                },
                {
                  "element": "button-primitive",
                  "attributes": {
                    "id": "edit-organization-committee-page-action-submit-id"
                  },
                  "properties": {
                    "text": "'Edit Committee'",
                    "disableButton": "!$actionHelper.isValidForm()",
                    "action": {
                      "query": "mutation {  organizationCommittee {\n    update($dynamicUiExpression((|objectToParams(templateContext.activeFormArguments)|))) {\n      id \n      name\n    }\n  }\n}\n",
                      "postAction": "$actionHelper.showToast('Committee edited successfully'); $actionHelper.notifiySubscribers(['edit-committee'], true);\n"
                    }
                  },
                  "events": {
                    "actionEmitter": "$actionHelper.submitForm($event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "viewOrganizationCommitteeDetails-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.members, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "changeDetectionSubjects": [
        "add-organizaiton-role"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "dataSource?.name",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-organization-committee-details-page-header-primitive-back-id'",
                "rightIcon": "(dataSource?.canJoinMember && dataSource?.members && dataSource?.members?.length > 0) ? 'assets/icon/dynamic-ui/Add_Grey.svg' : ''",
                "rightIconId": "'view-diplomatic-mission-offices-details-page-header-primitive-add-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "dataSource?.canJoinMember ? $actionHelper.openActionSheetWithConditions(initialDataSource?.viewOrganizationCommitteeActions, null, dataSource, {'organizationId': $actionHelper.parameters.organizationId, 'committeeId': $actionHelper.getActiveDomainId(), userId: initialDataSource.profileId}) : ''"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.members && dataSource?.members?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "searchInputId": "'view-organization-committee-details-page-search-input-id'",
                        "inputType": "'search-input'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    members: _.get(data, \"organizationCommittee.searchEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"organizationCommittee.searchEmployees.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  organizationCommittee(id: $templateContext->additionalData.organizationCommitteeId) {\n    searchEmployees(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.members = $graphQlResults.members;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'organizationCommitteeId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.members"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'view-organization-committee-details-page-committee-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'view-organization-committee-details-page-committee-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'view-organization-committee-details-page-committee-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'organizationCommittee', $activatedRoute.snapshot.params.id, 'employees', dataSource?.cursor, dataSource, 'cursor', 'members')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'organizationCommittee', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchEmployees', dataSource?.cursor, dataSource, 'cursor', 'members')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.members || dataSource?.members?.length == 0)"
                  },
                  "events": {
                    "buttonActionEmitter": "$actionHelper.navigateTo('profile/addOrganizationRole/' + $actionHelper.parameters.organizationId, {'organizationId': $actionHelper.parameters.organizationId, 'committee': {'id': $actionHelper.getActiveDomainId(), 'name': dataSource?.name}, 'positionType': {lookupId: 'CommitteeMember', name: 'Committee or Board Member'}, userId: initialDataSource.profileId, disableForm: true})"
                  },
                  "properties": {
                    "title": "'No Members'",
                    "titleId": "'view-organization-committee-details-page-empty-state-primitive-title-id'",
                    "subtitle": "'This committee doesn’t currently have any members.'",
                    "subTitleId": "'view-organization-committee-details-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'view-organization-committee-details-page-empty-state-primitive-image-id'",
                    "buttonLabel": "dataSource?.canJoinMember ? 'Join Committee': ''",
                    "buttonId": "'view-organization-committee-details-page-empty-state-primitive-button-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.members || dataSource?.members?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'view-organization-committee-details-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'view-organization-committee-details-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageOrganizationCommitteeDetails-page-template",
      "changeDetectionSubjects": [
        "edit-committee",
        "add-committee-member",
        "add-organizaiton-role"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "dataSource?.name",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-organization-committee-details-page-header-primitive-back-id'",
                "rightIcon": "'assets/icon/dynamic-ui/Dots_Grey.svg'",
                "rightIconId": "'manage-organization-committee-details-page-header-primitive-add-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageOrganizationCommitteeActions, null, dataSource, {'organizationId': $actionHelper.parameters.organizationId, 'committeeId': $actionHelper.getActiveDomainId(), userId: initialDataSource.profileId})"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.members && dataSource?.members?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'manage-organization-committee-details-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    members: _.get(data, \"organizationCommittee.searchEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"organizationCommittee.searchEmployees.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  organizationCommittee(id: $templateContext->additionalData.organizationCommitteeId) {\n    searchEmployees(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.members = $graphQlResults.members;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'organizationCommitteeId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.members"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'manage-organization-committee-details-page-committee-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "events": {
                                "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageOrganizationCommitteeMembersActions, item, dataSource, {'organizationId': $actionHelper.parameters.organizationId, 'committeeId': $actionHelper.getActiveDomainId()})"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', itemId: item.title,  'containerId': 'manage-organization-committee-details-page-committee-action'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'organizationCommittee', $activatedRoute.snapshot.params.id, 'employees', dataSource?.cursor, dataSource, 'cursor', 'members')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'organizationCommittee', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchEmployees', dataSource?.cursor, dataSource, 'cursor', 'members')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.members || dataSource?.members?.length == 0)"
                  },
                  "events": {
                    "buttonActionEmitter": "$actionHelper.navigateTo('organization/addOrganizationCommitteeMember/' + $actionHelper.getActiveDomainId(), {'organizationId': $actionHelper.parameters.organizationId, 'committeeName': dataSource?.name})",
                    "secondButtonActionEmitter": "$actionHelper.navigateTo('profile/addOrganizationRole/' + $actionHelper.parameters.organizationId, {'organizationId': $actionHelper.parameters.organizationId, 'committee': {'id': $actionHelper.getActiveDomainId(), 'name': dataSource?.name}, 'positionType': {lookupId: 'CommitteeMember', name: 'Committee or Board Member'}, userId: initialDataSource.profileId, disableForm: true})"
                  },
                  "properties": {
                    "title": "'No Members'",
                    "titleId": "'manage-organization-committee-details-page-empty-state-primitive-title-id'",
                    "subtitle": "'This committee doesn’t currently list any members. Tap a button below to add yourself or others'",
                    "subTitleId": "'manage-organization-committee-details-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'manage-organization-committee-details-page-empty-state-primitive-image-id'",
                    "buttonLabel": "'Add Members'",
                    "buttonId": "'manage-organization-committee-details-page-empty-state-primitive-button-id'",
                    "secondButtonLabel": "dataSource?.canJoinMember ? 'Join Committee' : null",
                    "secondButtonId": "'manage-organization-committee-details-page-empty-state-primitive-second-button-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.members || dataSource?.members?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'manage-organization-committee-details-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'manage-organization-committee-details-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "addOrganizationCommitteeMember-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'skeleton-page-with-two-segment'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Add Members'",
                "headerClass": "'with-no-border'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'add-organization-committee-member-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "segment-primitive",
              "properties": {
                "segmentContainerId": "'add-organization-committee-member-page-segment-container-id'",
                "segmentOneLabel": "'Members List'",
                "segmentTwoLabel": "'Invite by Email'",
                "segmentClass": "'two-segment'"
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentOneContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.members && dataSource?.members?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "searchInputId": "'add-organization-committee-member-page-search-input-id'",
                            "inputType": "'search-input'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    members: _.get(data, \"organization.searchVerifiedEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"organization.searchVerifiedEmployees.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  organization(id: $templateContext->additionalData.organizationId) {\n    searchVerifiedEmployees(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.members = $graphQlResults.members;  dataSource.cursor = $graphQlResults.cursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'organizationId': $actionHelper.parameters.organizationId })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.members"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'add-organization-committee-member-page-members-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.addOrganizationCommitteeMembersActions, item, dataSource, {'committeeId': $actionHelper.getActiveDomainId(), 'organizationId': $actionHelper.parameters.organizationId})"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg',itemId: item.title, 'containerId': 'add-organization-committee-member-page-members-action'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'organization', $actionHelper.parameters.organizationId, 'verifiedEmployees', dataSource?.cursor, dataSource, 'cursor', 'members')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'organization', $actionHelper.parameters.organizationId, $actionHelper.getSearchInputValue(), 'searchVerifiedEmployees', dataSource?.cursor, dataSource, 'cursor', 'members')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.members || dataSource?.members?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Members'",
                        "titleId": "'add-organization-committee-member-page-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/Person.svg'",
                        "imageId": "'add-organization-committee-member-page-empty-state-primitive-image-id'"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.members || dataSource?.members?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'add-organization-committee-member-page-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'add-organization-committee-member-page-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentTwoContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "form-primitive",
                      "properties": {
                        "formContainerId": "'add-organization-committee-member-page-form'",
                        "predefineData": "{'committeeId': $actionHelper.getActiveDomainId(), 'organizationId': $actionHelper.parameters.organizationId }",
                        "dataSource": {
                          "controllers": [
                            {
                              "key": "firstName",
                              "label": "First Name",
                              "display": true,
                              "relatedTo": null,
                              "controlType": "input",
                              "type": "text",
                              "placeholder": "Enter first name",
                              "value": null,
                              "withNullValue": false,
                              "actionTitle": null,
                              "required": true,
                              "icon": null,
                              "leftIcon": null,
                              "validators": [
                                {
                                  "name": "fromSchema",
                                  "fieldPath": "mutation.organizationCommittee.inviteMember.firstName",
                                  "messages": {
                                    "isRequired": "First name is required",
                                    "maxLength": "Character limit reached"
                                  }
                                }
                              ],
                              "controlApi": null,
                              "controlAnotherApi": null
                            },
                            {
                              "key": "lastName",
                              "label": "Last Name",
                              "display": true,
                              "relatedTo": null,
                              "controlType": "input",
                              "type": "text",
                              "placeholder": "Enter last name",
                              "value": null,
                              "withNullValue": false,
                              "actionTitle": null,
                              "required": true,
                              "icon": null,
                              "leftIcon": null,
                              "validators": [
                                {
                                  "name": "fromSchema",
                                  "fieldPath": "mutation.organizationCommittee.inviteMember.lastName",
                                  "messages": {
                                    "isRequired": "Last name is required",
                                    "maxLength": "Character limit reached"
                                  }
                                }
                              ],
                              "controlApi": null,
                              "controlAnotherApi": null
                            },
                            {
                              "key": "email",
                              "label": "Email Address",
                              "display": true,
                              "relatedTo": null,
                              "controlType": "input",
                              "type": "email",
                              "placeholder": "Enter email address",
                              "value": null,
                              "withNullValue": false,
                              "actionTitle": null,
                              "required": true,
                              "icon": null,
                              "leftIcon": null,
                              "validators": [
                                {
                                  "name": "fromSchema",
                                  "fieldPath": "mutation.organizationCommittee.inviteMember.email",
                                  "messages": {
                                    "isRequired": "Email is required",
                                    "maxLength": "Character limit reached",
                                    "pattern": "Please enter a valid email address"
                                  }
                                }
                              ],
                              "controlApi": null,
                              "controlAnotherApi": null
                            }
                          ],
                          "template": [
                            {
                              "type": "block-container",
                              "children": [
                                {
                                  "type": "controller",
                                  "controllerKey": "firstName"
                                },
                                {
                                  "type": "controller",
                                  "controllerKey": "lastName"
                                },
                                {
                                  "type": "controller",
                                  "controllerKey": "email"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    },
                    {
                      "element": "button-primitive",
                      "attributes": {
                        "id": "'add-organization-committee-member-page-submit-action'",
                        "$ngIf": "dataSource?.canInviteMember"
                      },
                      "properties": {
                        "text": "'Send Invitation'",
                        "disableButton": "!$actionHelper.isValidForm()",
                        "action": {
                          "query": "mutation {  organizationCommittee {\n    inviteMember(\n      id: $templateContext->activeFormArguments.committeeId, \n      organizationId: $templateContext->activeFormArguments.organizationId,\n      lastName: $templateContext->activeFormArguments.lastName,\n      firstName: $templateContext->activeFormArguments.firstName, \n      email: $templateContext->activeFormArguments.email,\n      invitationUrl: $templateContext->additionalData.url\n    )\n  }\n}\n",
                          "postAction": "$actionHelper.showToast('Invitation to join committee sent successfully');"
                        }
                      },
                      "events": {
                        "actionEmitter": "$actionHelper.invite($event, null, 'Assigned as member', 'You have been assigned as a committee member:  ' + $actionHelper?.parameters?.committeeName, $actionHelper.parameters.organizationId, 'DiasporaCommitteeMember', $actionHelper?.getActiveDomainId())"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "claim-organization-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": null,
          "skeletonType": "'item-list-skeleton'",
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Claim this organization'",
                "leftIcon": "'assets/icon/dynamic-ui/Close_Grey.svg'",
                "leftIconId": "'claim-organization-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "hint-txt",
                    "id": "claim-organization-page-hint-one-id"
                  },
                  "properties": {
                    "$innerHTML": "'If you are the true legal owner of this entity and someone else is currently in control of the page, you can get in touch with us to take corrective action by clicking on the button below'"
                  }
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "hint-txt",
                    "id": "claim-organization-page-hint-two-id"
                  },
                  "properties": {
                    "$innerHTML": "'Please add any supporting evidence you deem necessary to ensure a rapid response'"
                  }
                },
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'claim-organization-page-form'",
                    "predefineData": "{'organizationId': $actionHelper.getActiveDomainId() }",
                    "dataSource": {
                      "controllers": [
                        {
                          "key": "claimantContactInfo",
                          "label": "Contact Details",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "textarea",
                          "placeholder": "Please let us know how we can contact you",
                          "value": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.claim.model.fields.claimantContactInfo",
                              "messages": {
                                "isRequired": "Contact details required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "details",
                          "label": "Details",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "textarea",
                          "placeholder": "Explain why you are entitled to be the owner of this page and add any supporting evidence you may have",
                          "value": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.claim.model.fields.details",
                              "messages": {
                                "isRequired": "Details required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "controller",
                          "controllerKey": "claimantContactInfo"
                        },
                        {
                          "type": "controller",
                          "controllerKey": "details"
                        }
                      ]
                    }
                  }
                },
                {
                  "element": "button-primitive",
                  "attributes": {
                    "id": "claim-organization-page-action-id"
                  },
                  "properties": {
                    "text": "'Contact Us'",
                    "disableButton": "!$actionHelper.isValidForm()",
                    "action": {
                      "query": "mutation {  organization {\n    claim (\n      id: $templateContext->activeFormArguments.organizationId,\n      model: {\n      claimantContactInfo: $templateContext->activeFormArguments.claimantContactInfo,\n      details: $templateContext->activeFormArguments.details,\n    }) {\n      id\n    }\n  }\n}\n",
                      "postAction": "$actionHelper.showToast('Your request is under review. We will get back to you soon.'); $actionHelper.goBackPage()\n"
                    }
                  },
                  "events": {
                    "actionEmitter": "$actionHelper.submitForm($event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "createOrganization-page-template",
      "functions": {
        "uploadPhoto": "function ($id, $event) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $photo: Upload!) {\n        organization {\n          uploadLogo(id: $id, photo: $photo)\n        }\n      }\n    `, {id: $id, photo: $event}).then(uploadResponse => {\n        $actionHelper.showToast('Organization created successfully');\n        $actionHelper.notifiySubscribers(['create-organization'], false, true); \n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "attributes": {
                "$ngIf": "$actionHelper.getFormGroupData('positionType') === 'CommitteeMember'"
              },
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Create Organization'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'create-organization-page-header-primitive-back-id'",
                "buttonLabel": "'Save'",
                "buttonLabelId": "'create-organization-page-header-primitive-save-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation {  organization {\n    create(\n      model: {\n        name: $templateContext->activeFormArguments.name,\n        organizationType: $dynamicUiExpression((|getParamFromEnum(templateContext.initialDataSource.organizationTypes, $templateContext->activeFormArguments.organizationType)|)),\n        organizationCategory: $dynamicUiExpression((|getParamFromEnum(templateContext.initialDataSource.organizationCategories, $templateContext->activeFormArguments.organizationCategory)|)),\n        country: $templateContext->activeFormArguments.country,\n        city: $templateContext->activeFormArguments.city,\n      }, \n      role: {\n        positionName: $templateContext->activeFormArguments.positionName,\n        roleName: $templateContext->activeFormArguments.positionType,\n      },\n      committeeName: $templateContext->activeFormArguments.committeeName\n    ) {\n      id\n    }\n  }\n}\n",
                  "postAction": "if($actionHelper.getFormGroupData('Image'))  templateContext.additionalData.parentPage.uploadPhoto($graphQlResults.organization.create.id, $actionHelper.getFormGroupData('Image'))\nelse {  $actionHelper.showToast('Organization created successfully');\n  $actionHelper.notifiySubscribers(['create-organization'], false, true); \n}\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event,  {'parentPage': this}, initialDataSource)"
              }
            },
            {
              "element": "page-header-primitive",
              "attributes": {
                "$ngIf": "$actionHelper.getFormGroupData('positionType') !== 'CommitteeMember'"
              },
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Create Organization'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'create-organization-page-header-primitive-back-id'",
                "buttonLabel": "'Save'",
                "buttonLabelId": "'create-organization-page-header-primitive-save-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation {  organization {\n    create(\n      model: {\n        name: $templateContext->activeFormArguments.name,\n        organizationType: $dynamicUiExpression((|getParamFromEnum(templateContext.initialDataSource.organizationTypes, $templateContext->activeFormArguments.organizationType)|)),\n        organizationCategory: $dynamicUiExpression((|getParamFromEnum(templateContext.initialDataSource.organizationCategories, $templateContext->activeFormArguments.organizationCategory)|)),\n        country: $templateContext->activeFormArguments.country,\n        city: $templateContext->activeFormArguments.city,\n      }, \n      role: {\n        positionName: $templateContext->activeFormArguments.positionName,\n        roleName: $templateContext->activeFormArguments.positionType,\n      }\n    ) {\n      id\n    }\n  }\n}\n",
                  "postAction": "if($actionHelper.getFormGroupData('Image'))  templateContext.additionalData.parentPage.uploadPhoto($graphQlResults.organization.create.id, $actionHelper.getFormGroupData('Image'))\nelse {  $actionHelper.showToast('Organization created successfully');\n  $actionHelper.notifiySubscribers(['create-organization'], false, true); \n}\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event, {'parentPage': this}, initialDataSource)"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'create-organization-page-form'",
                    "formWithImage": true,
                    "isThumbnailImage": true,
                    "imageChooserActionLabel": "'Upload Your Logo'",
                    "imageFormControlName": "'Image'",
                    "isRequiredImage": false,
                    "defaultImage": "'assets/icon/dynamic-ui/UploadPhoto.svg'",
                    "predefineData": "{'name': $actionHelper.getSearchInputValue()}",
                    "withBeforeInitFunction": true,
                    "imageSchemaValidationPath": "'mutation.organization.uploadLogo.photo'",
                    "dataSource": {
                      "functions": {
                        "beforeInit": "function() {  return this.$actionHelper.prepareLookups()\n}\n"
                      },
                      "controllers": [
                        {
                          "key": "name",
                          "label": "Name",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Organization name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.create.model.fields.name",
                              "messages": {
                                "isRequired": "Organization name is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "organizationType",
                          "label": "Organization Type",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select your organization type",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": "Select Organization Type",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select Organization Type', $event.element, formGroup, formsData, initialDataSource.organizationTypes, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.create.model.fields.organizationType",
                              "messages": {
                                "isRequired": "Organization type is required"
                              }
                            }
                          ],
                          "lookups": "organizationTypes",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "organizationCategory",
                          "label": "Organization Category",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a category for this org",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": "Select Organization Category",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select Organization Category', $event.element, formGroup, formsData, initialDataSource.organizationCategories, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.create.model.fields.organizationCategory",
                              "messages": {
                                "isRequired": "Organization category is required"
                              }
                            }
                          ],
                          "lookups": "organizationCategories",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "country",
                          "label": "Headquarters Country",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a country",
                          "defaultValue": "LB",
                          "value": null,
                          "valueType": "country",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": "Select Country",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openCountriesModal('Select Country', $event.element, formGroup, initialDataSource.countries, false)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(formPrimitive.getGraphQL, $event.newValue).then(\n(data) => {\nformsData.lookups.cities = data.cities;\nconst cityController = formsData.controllers.find(controller => controller.key === 'city');\nif(cityController) {\n$actionHelper.setFormGroupData('city',null)\ncityController.value = null;\n}\nformPrimitive.detectChanges();\n}\n)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.create.model.fields.country",
                              "messages": {
                                "isRequired": "Country is required"
                              }
                            }
                          ],
                          "lookups": "countries",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "city",
                          "label": "Headquarters City",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a city",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": "Select City",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select City', $event.element, formGroup, formsData, formsData.lookups.cities, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.create.model.fields.city",
                              "messages": {
                                "isRequired": "City is required"
                              }
                            }
                          ],
                          "lookups": "cities",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "positionType",
                          "label": "Your role in this organization",
                          "display": true,
                          "relatedTo": "committeeName",
                          "relatedToSecondField": "positionName",
                          "controlType": "button-input",
                          "placeholder": "Select position type",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": "Select position type",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select position type', $event.element, formGroup, formsData, initialDataSource.organizationPositionTypes, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.create.role.fields.roleName",
                              "messages": {
                                "isRequired": "Position type is required"
                              }
                            }
                          ],
                          "lookups": "positionTypes",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "committeeName",
                          "label": "Committee Name",
                          "display": "$actionHelper.getFormGroupData('positionType') == 'CommitteeMember'",
                          "relatedTo": null,
                          "forceRequired": true,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter committee name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": "$actionHelper.getFormGroupData('positionType') == 'CommitteeMember'",
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.create.committeeName",
                              "messages": {
                                "isRequired": "Committee name is required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "positionName",
                          "label": "Position Name",
                          "display": true,
                          "disabled": "$actionHelper?.getFormGroupData('positionType') === 'Member'",
                          "relatedValue": "$actionHelper.getFormGroupData('positionType') === 'Member' ? 'Member' : ''",
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter position name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.create.role.fields.positionName",
                              "messages": {
                                "isRequired": "Position name is required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Organization Information"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "name"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "organizationType"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "organizationCategory"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "country"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "city"
                            }
                          ]
                        },
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Role Information"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "positionType"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "committeeName"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "positionName"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "events": {
                    "photoActionEmitter": "$actionHelper.setFormGroupData('Image',$event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "my-profile-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkMainEntity(this.dataSource, followInfo);                \n        $actionHelper.checkFollowList(this.dataSource.peoples, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.networkRoles, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.businessRoles, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "changeDetectionSubjects": [
        "edit-profile",
        "edit-company",
        "edit-diplomatic",
        "edit-organization",
        "edit-municipality",
        "create-company",
        "create-organization",
        "add-organizaiton-role",
        "edit-organization-role",
        "add-business-role",
        "edit-business-role",
        "add-diplomatic-role",
        "edit-diplomatic-role",
        "manage-company",
        "manage-organization",
        "add-post",
        "add-event",
        "add-media",
        "delete-image",
        "edit-post",
        "delete-post",
        "add-committee-member",
        "remove-committee-member",
        "delete-commiteee",
        "add-organization-administrators",
        "manage-organization-administrators",
        "manage-organization-team-members",
        "manage-company-team-members",
        "manage-company-administrators",
        "add-company-administrators",
        "add-office-member",
        "remove-office-member",
        "delete-office",
        "add-diplomaticMission-administrators",
        "manage-diplomaticMission-administrators",
        "manage-diplomaticMission-key-staff"
      ],
      "templateDefinition": [
        {
          "element": "ion-content",
          "attributes": {
            "class": "animated-skeleton-loading grayBg with-fabButton"
          },
          "children": [
            {
              "element": "skeleton-primitive",
              "properties": {
                "skeletonType": "'domain-page-skeleton'",
                "coverSearchBar": true
              },
              "attributes": {
                "class": "{{isLoading ? '' : 'hidden'}}"
              }
            },
            {
              "element": "div",
              "attributes": null,
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "main-card-seperator"
                  },
                  "children": [
                    {
                      "element": "main-card-primitive",
                      "children": [
                        {
                          "element": "cover-image-primitive",
                          "properties": {
                            "coverImageUrl": "$dynamicUiExtraService.getUserCoverImage(dataSource?.user)",
                            "hasTopBar": true,
                            "overlayType": "(initialDataSource?.hasAmbassadorDiplomaticRole || initialDataSource?.hasTownRole) ? 'accent-two': 'accent-one'",
                            "topBarType": "'search_top_bar'",
                            "leftIconId": "'my-profile-page-cover-image-primitive-notification-id'",
                            "leftIcon": "'assets/icon/dynamic-ui/Notifications_White.svg'",
                            "rightIconId": "'my-profile-page-cover-image-primitive-manage-id'",
                            "rightIcon": "'assets/icon/dynamic-ui/Burger_Menu_White.svg'",
                            "badgeContainerId": "'profile-page-badge-id'",
                            "searchInputId": "'my-profile-page-cover-image-primitive-search-input-id'",
                            "searchInputPlaceholder": "'Search DiasporaID'"
                          },
                          "events": {
                            "leftActionEmitter": "$actionHelper.navigateTo('notifications')",
                            "rightActionEmitter": "$actionHelper.navigateTo('manageAccounts')",
                            "searchInputActionEmitter": "$actionHelper.navigateTo('searchPage')"
                          }
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "profile-details"
                          },
                          "children": [
                            {
                              "element": "div",
                              "attributes": {
                                "class": "profile-details-container"
                              },
                              "children": [
                                {
                                  "element": "logo-primitive",
                                  "attributes": {
                                    "$ngIf": "dataSource?.user"
                                  },
                                  "properties": {
                                    "logoId": "'my-profile-page-logo-primitive-logo-id'",
                                    "logoUrl": "$dynamicUiExtraService.getUserImage(dataSource?.user)",
                                    "name": "$dynamicUiExtraService.getUserFullName(dataSource?.user)"
                                  },
                                  "events": {
                                    "logoEvent": "$actionHelper.showImage($dynamicUiExtraService.getUserMainImage(dataSource?.user), $dynamicUiExtraService.getUserId(dataSource?.user), $dynamicUiExtraService.getUserFullName(dataSource?.user))",
                                    "avatarEvent": "$actionHelper.navigateTo('profile/edit/' + initialDataSource.profileId)"
                                  }
                                },
                                {
                                  "element": "title-primitive",
                                  "attributes": {
                                    "$ngIf": "dataSource?.user"
                                  },
                                  "properties": {
                                    "title": "$dynamicUiExtraService.getUserFullName(dataSource?.user)",
                                    "titleId": "'my-profile-page-title-primitive-title-id'",
                                    "subTitle": "$dynamicUiExtraService.getUserFeaturedRole(dataSource?.user)",
                                    "subTitleId": "'my-profile-page-title-primitive-subtitle-' + $dynamicUiExtraService.getUserFeaturedRole(dataSource?.user) + '-id' ",
                                    "subTitleColor": "'main-color'"
                                  }
                                },
                                {
                                  "element": "badges-primitive",
                                  "properties": {
                                    "badgeContainerId": "'my-profile-page-badges-primitive'",
                                    "badges": "dataSource?.badges"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "main-buttons-primitive",
                      "properties": {
                        "leftButtonTitle": "'Manage'",
                        "leftButtonTitleId": "'my-profile-page-main-buttons-primitive-manage-id'",
                        "leftButtonIcon": "'assets/icon/dynamic-ui/Manage_Green.svg'",
                        "leftButtonDisabled": "!dataSource?.canManage",
                        "rightButtonTitle": "'Share'",
                        "rightButtonTitleId": "'my-profile-page-main-buttons-primitive-share-id'",
                        "rightButtonIcon": "'assets/icon/dynamic-ui/Share_Green.svg'",
                        "rightButtonDisabled": "!dataSource?.canShare"
                      },
                      "events": {
                        "leftButtonActionEmitter": "$actionHelper.navigateTo('profile/manageProfile/' + initialDataSource.profileId)",
                        "rightButtonActionEmitter": "$actionHelper.share(\n'Lebanese people from your hometown and the diaspora - Entrepreneurs, business people, diplomats and influential profiles - are joining DiasporaID, the fastest growing international Lebanese network. Don’t miss out, register now!',\n$dynamicUiExtraService.getUserImage(dataSource?.user),\n'Join ' + $dynamicUiExtraService.getUserFullName(dataSource?.user) + ' and Influential Lebanese on DiasporaID',\n'The Global Lebanese Network',\ninitialDataSource.profileId, 'DiasporaProfile')"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/About_Active.svg'",
                        "mainIconId": "'my-profile-page-about-section-block-header-primitive-main-icon-id'",
                        "title": "'About'",
                        "titleId": "'my-profile-page-about-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Info, sector and contact details'",
                        "subTitleId": "'my-profile-page-about-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "dataSource?.canManage",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'my-profile-page-about-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "'Edit'",
                        "actionLabelId": "'my-profile-page-about-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('profile/edit/' + initialDataSource.profileId)"
                      }
                    },
                    {
                      "element": "about-primitive",
                      "properties": {
                        "aboutUsContainerId": "'my-profile-page-about-us-primitive'",
                        "aboutUsItems": "dataSource?.generalDetailsInfo",
                        "characterLimit": 150,
                        "unTruncatedText": "'Show More'",
                        "truncatedText": "'Show Less'"
                      },
                      "events": {
                        "emptyStateActionEmitter": "(dataSource?.canManage) ? $actionHelper.navigateTo('profile/edit/' + initialDataSource.profileId) : null"
                      }
                    },
                    {
                      "element": "social-media-strip-primitive",
                      "properties": {
                        "socialMediaContainerId": "'my-profile-page-social-media-strip-primitive'",
                        "socialMediaItems": "dataSource?.socialMediaInfo",
                        "showEmptyState": "dataSource?.canManage",
                        "icon": "'assets/icon/dynamic-ui/Social.svg'",
                        "iconId": "'my-profile-page-social-media-strip-primitive-icon-id'",
                        "title": "'Social Media'",
                        "titleId": "'my-profile-page-social-media-strip-primitive-title-id'",
                        "emptyStateMessage": "'Add Social Media Links'",
                        "emptyStateMessageId": "'my-profile-page-social-media-strip-primitive-empty-state-message-id'"
                      },
                      "events": {
                        "emptyStateActionEmitter": "(dataSource?.canManage) ? $actionHelper.navigateTo('profile/edit/' + initialDataSource.profileId) : null"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "dataSource?.peoples && dataSource?.peoples?.length > 0"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/People_Active.svg'",
                        "mainIconId": "'my-profile-page-people-section-block-header-primitive-main-icon-id'",
                        "title": "'People'",
                        "titleId": "'my-profile-page-people-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Following & Followers ' + dataSource?.user?.firstName",
                        "subTitleId": "'my-profile-page-people-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": true,
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'my-profile-page-people-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "'See All'",
                        "actionLabelId": "'my-profile-page-people-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('profile/viewFollowers/' + initialDataSource.profileId)"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.peoples"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('profile/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'my-profile-page-people-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'actionClass': 'l-icon', 'containerId': 'my-profile-page-people-action'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'actionClass': 'l-icon', 'containerId': 'my-profile-page-people-action' }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "{{(dataSource?.networkRoles && dataSource.networkRoles?.length > 0) ? 'border-separtor pdb-0' : 'border-separtor'}}"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/Networks_Active.svg'",
                        "mainIconId": "'my-profile-page-networks-section-block-header-primitive-main-icon-id'",
                        "title": "'Networks'",
                        "titleId": "'my-profile-page-networks-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "dataSource?.user?.firstName + '’s communities & orgs'",
                        "subTitleId": "'my-profile-page-networks-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.networkRoles && dataSource?.networkRoles?.length > 0)",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'my-profile-page-networks-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "'Edit'",
                        "actionLabelId": "'my-profile-page-networks-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('profile/manageNetworkRole/'  + initialDataSource.profileId)"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.networkRoles && dataSource.networkRoles?.length > 0)"
                      },
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.networkRoles"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain(item.parentDomainType, item.parentDomainId)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'itemId': item.title, 'containerId': 'my-profile-page-networks-item'}"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain(item.parentDomainType, item.parentDomainId, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'itemId': item.title, 'actionClass': 'l-icon', 'containerId': 'my-profile-page-networks-action'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain(item.parentDomainType, item.parentDomainId, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'itemId': item.title, 'actionClass': 'l-icon', 'containerId': 'my-profile-page-networks-action'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "(!dataSource?.networkRoles || dataSource?.networkRoles?.length === 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Network_Roles.svg'",
                        "imageId": "'my-profile-page-networks-section-empty-state-primitive-image-id'",
                        "title": "'Are you a member of an organization or community?'",
                        "titleId": "'my-profile-page-networks-section-empty-state-primitive-title-id'",
                        "buttonLabel": "'Add a Network Role'",
                        "buttonId": "'my-profile-page-networks-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('profile/manageNetworkRole/' + initialDataSource.profileId);"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "{{(dataSource?.businessRoles && dataSource?.businessRoles.length > 0) ? 'border-separtor pdb-0' : 'border-separtor'}}"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/Business_Inactive.svg'",
                        "mainIconId": "'my-profile-page-business-section-block-header-primitive-main-icon-id'",
                        "title": "'Business'",
                        "titleId": "'my-profile-page-business-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Companies, Startups, Freelancers'",
                        "subTitleId": "'my-profile-page-business-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.businessRoles && dataSource?.businessRoles.length > 0)",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'my-profile-page-business-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "'Edit'",
                        "actionLabelId": "'my-profile-page-business-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('profile/manageBusinessRole/' + initialDataSource.profileId)"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.businessRoles && dataSource?.businessRoles.length > 0)"
                      },
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource.businessRoles"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('company/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'my-profile-page-business-item'}"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Company', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'actionClass': 'l-icon', 'containerId': 'my-profile-page-business-action'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Company', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'actionClass': 'l-icon', 'containerId': 'my-profile-page-business-action'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "(!dataSource?.businessRoles || dataSource?.businessRoles?.length === 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Business_Roles_Green.svg'",
                        "imageId": "'my-profile-page-business-section-empty-state-primitive-image-id'",
                        "title": "'Do you manage or work in a company or startup?'",
                        "titleId": "'my-profile-page-business-section-empty-state-primitive-title-id'",
                        "buttonLabel": "'Add a Business Role'",
                        "buttonId": "'my-profile-page-business-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('profile/manageBusinessRole/' + initialDataSource.profileId);"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/News_Active.svg'",
                        "mainIconId": "'my-profile-page-updates-section-block-header-primitive-main-icon-id'",
                        "title": "'Updates'",
                        "titleId": "'my-profile-page-updates-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "dataSource?.user?.firstName + '’s recent posts & events'",
                        "subTitleId": "'my-profile-page-updates-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.updates && dataSource?.updates.length > 0)",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'my-profile-page-updates-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "'Edit'",
                        "actionLabelId": "'my-profile-page-updates-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('userUpdates/' + initialDataSource.profileId)"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.updates && dataSource?.updates.length > 0"
                      },
                      "properties": {
                        "listType": "'news-list'",
                        "arrayOfItems": "dataSource?.updates"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "list-with-right-image-template",
                              "events": {
                                "click": "$actionHelper.navigateTo(item.type == 'Post' ? ('postDetails/' + item.id) : ('eventDetails/' + item.id))"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'my-profile-page-updates-item' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!dataSource?.updates || dataSource?.updates.length === 0"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Post_Update.svg'",
                        "imageId": "'my-profile-page-updates-section-empty-state-primitive-image-id'",
                        "title": "'Posts and events you create under various pages appear here'",
                        "titleId": "'my-profile-page-updates-section-empty-state-primitive-title-id'",
                        "buttonLabel": "dataSource?.canAddPost ? 'Create a Post Under Your Profile' : null",
                        "buttonId": "'my-profile-page-updates-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('createPost/user/' + initialDataSource.profileId, {targetName: $dynamicUiExtraService.getUserFullName(dataSource?.user), targetImage: $dynamicUiExtraService.getUserImage(dataSource?.user)})"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/View_Gallery.svg'",
                        "mainIconId": "'my-profile-page-gallery-section-block-header-primitive-main-icon-id'",
                        "title": "'Media Gallery'",
                        "titleId": "'my-profile-page-gallery-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Photos and videos'",
                        "subTitleId": "'my-profile-page-gallery-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.gallery && dataSource?.gallery?.length > 0)",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'my-profile-page-gallery-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "'Edit'",
                        "actionLabelId": "'my-profile-page-gallery-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('gallery/user/' + initialDataSource.profileId)"
                      }
                    },
                    {
                      "element": "media-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.gallery && dataSource?.gallery?.length > 0)"
                      },
                      "events": {
                        "click": "$actionHelper.navigateTo('gallery/user/' + initialDataSource.profileId)"
                      },
                      "properties": {
                        "mediaContainerId": "'my-profile-page-gallery'",
                        "youtubeIcon": "'assets/icon/dynamic-ui/YouTube_Video.svg'",
                        "items": "dataSource?.gallery"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!dataSource?.gallery || dataSource?.gallery?.length === 0"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Media_Gallery.svg'",
                        "imageId": "'my-profile-page-gallery-section-empty-state-primitive-image-id'",
                        "title": "'Show Lebanese vistas, milestones & projects'",
                        "titleId": "'my-profile-page-gallery-section-empty-state-primitive-title-id'",
                        "buttonLabel": "dataSource?.canUploadMedia ? 'Add Photos or Videos' : null",
                        "buttonId": "'my-profile-page-gallery-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('addMedia/' + dataSource.galleryId, {'canUploadImage': dataSource.canUploadImage, 'canUploadVideoLink': dataSource.canUploadVideoLink, targetId: initialDataSource.profileId, targetName: $dynamicUiExtraService.getUserFullName(dataSource?.user), targetImage: $dynamicUiExtraService.getUserImage(dataSource?.user)})"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "element": "button-primitive",
          "attributes": {
            "$ngIf": "dataSource?.canAddPost || dataSource?.canUploadMedia",
            "id": "my-profile-page-fab-button"
          },
          "properties": {
            "type": "'fab-button'",
            "icon": "'assets/icon/dynamic-ui/Add_white.svg'"
          },
          "events": {
            "actionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource?.profileActions, null, dataSource, {targetId: initialDataSource.profileId, targetName: $dynamicUiExtraService.getUserFullName(dataSource?.user), targetImage: $dynamicUiExtraService.getUserImage(dataSource?.user)})"
          }
        }
      ]
    },
    {
      "name": "profile-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkMainEntity(this.dataSource, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.peoples, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.networkRoles, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.businessRoles, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "changeDetectionSubjects": [
        "edit-profile",
        "edit-company",
        "edit-diplomatic",
        "edit-organization",
        "edit-municipality",
        "create-company",
        "create-organization",
        "add-organizaiton-role",
        "edit-organization-role",
        "add-business-role",
        "edit-business-role",
        "add-diplomatic-role",
        "edit-diplomatic-role",
        "manage-company",
        "manage-organization",
        "add-post",
        "add-event",
        "add-media",
        "delete-image",
        "edit-post",
        "delete-post",
        "add-committee-member",
        "remove-committee-member",
        "delete-commiteee",
        "add-organization-administrators",
        "manage-organization-administrators",
        "manage-organization-team-members",
        "manage-company-team-members",
        "manage-company-administrators",
        "add-company-administrators",
        "add-office-member",
        "remove-office-member",
        "delete-office",
        "add-diplomaticMission-administrators",
        "manage-diplomaticMission-administrators",
        "manage-diplomaticMission-key-staff"
      ],
      "templateDefinition": [
        {
          "element": "ion-content",
          "attributes": {
            "class": "{{dataSource?.myProfile && (dataSource?.canAddPost || dataSource?.canUploadMedia) ? 'animated-skeleton-loading grayBg full-screen with-fabButton' : 'animated-skeleton-loading grayBg full-screen'}}"
          },
          "children": [
            {
              "element": "skeleton-primitive",
              "properties": {
                "skeletonType": "'domain-page-skeleton'"
              },
              "attributes": {
                "class": "{{isLoading ? '' : 'hidden'}}"
              }
            },
            {
              "element": "div",
              "attributes": {
                "class": "'grayBg full-screen'"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "main-card-seperator"
                  },
                  "children": [
                    {
                      "element": "main-card-primitive",
                      "children": [
                        {
                          "element": "cover-image-primitive",
                          "properties": {
                            "coverImageUrl": "$dynamicUiExtraService.getUserCoverImage(dataSource?.user)",
                            "hasTopBar": true,
                            "overlayType": "(dataSource?.hasDiplomaticRole || dataSource?.hasTownRole) ? 'accent-two': 'accent-one'",
                            "topBarType": "'simple_top_bar'",
                            "leftIcon": "'assets/icon/dynamic-ui/Back_White.svg'",
                            "leftIconId": "'profile-page-cover-image-primitive-back-id'",
                            "rightIcon": "!dataSource?.myProfile ? 'assets/icon/dynamic-ui/Dots_White.svg': ''",
                            "rightIconId": "'profile-page-cover-image-primitive-dots-id'"
                          },
                          "events": {
                            "leftActionEmitter": "$actionHelper.goBackPage()",
                            "rightActionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource?.mainProfileActions, null, dataSource, {'loggedinFirstName': initialDataSource.firstName, 'loggedinLastName': initialDataSource.lastName})"
                          }
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "profile-details"
                          },
                          "children": [
                            {
                              "element": "div",
                              "attributes": {
                                "class": "profile-details-container"
                              },
                              "children": [
                                {
                                  "element": "logo-primitive",
                                  "properties": {
                                    "logoId": "'profile-page-logo-primitive-logo-id'",
                                    "logoUrl": "$dynamicUiExtraService.getUserImage(dataSource?.user)",
                                    "name": "$dynamicUiExtraService.getUserFullName(dataSource?.user)"
                                  },
                                  "events": {
                                    "logoEvent": "$actionHelper.showImage($dynamicUiExtraService.getUserMainImage(dataSource?.user), $dynamicUiExtraService.getUserId(dataSource?.user), $dynamicUiExtraService.getUserFullName(dataSource?.user))",
                                    "avatarEvent": "(dataSource?.myProfile && dataSource?.canManage) ? $actionHelper.navigateToSubPage('profile/edit') : null"
                                  }
                                },
                                {
                                  "element": "title-primitive",
                                  "properties": {
                                    "title": "$dynamicUiExtraService.getUserFullName(dataSource?.user)",
                                    "titleId": "'profile-page-title-primitive-title-id'",
                                    "titleColor": "'accent-one'",
                                    "subTitle": "$dynamicUiExtraService.getUserFeaturedRole(dataSource?.user)",
                                    "subTitleId": "'profile-page-title-primitive-subtitle-id'",
                                    "subTitleColor": "'main-color'"
                                  },
                                  "events": {
                                    "supTitleActionEmitter": "$actionHelper.navigateTo('profile/managePrimaryRole/' + $dynamicUiExtraService.getUserId(dataSource?.user))"
                                  }
                                },
                                {
                                  "element": "badges-primitive",
                                  "properties": {
                                    "badgeContainerId": "'profile-page-badges-primitive'",
                                    "badges": "dataSource?.badges"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "main-buttons-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.myProfile"
                      },
                      "properties": {
                        "leftButtonTitle": "'Manage'",
                        "leftButtonTitleId": "'profile-page-main-buttons-primitive-manage-id'",
                        "leftButtonIcon": "'assets/icon/dynamic-ui/Manage_Green.svg'",
                        "leftButtonDisabled": "!dataSource?.canManage",
                        "rightButtonTitle": "'Share'",
                        "rightButtonTitleId": "'profile-page-main-buttons-primitive-share-id'",
                        "rightButtonIcon": "'assets/icon/dynamic-ui/Share_Green.svg'",
                        "rightButtonDisabled": "!dataSource?.canShare"
                      },
                      "events": {
                        "leftButtonActionEmitter": "$actionHelper.navigateTo('profile/manageProfile/' + $dynamicUiExtraService.getUserId(dataSource?.user))",
                        "rightButtonActionEmitter": "$actionHelper.share(\n$dynamicUiExtraService.getUserFullName(dataSource?.user) + ' Lebanese people from your hometown and the diaspora - Entrepreneurs, business people, diplomats and influential profiles - are joining DiasporaID, the fastest growing international Lebanese network. Don’t miss out, register now!',\n$dynamicUiExtraService.getUserImage(dataSource?.user),\n'Join ' + $dynamicUiExtraService.getUserFullName(dataSource?.user) + ' and Influential Lebanese on DiasporaID',\n'The Global Lebanese Network',\n$dynamicUiExtraService.getUserId(dataSource?.user), 'DiasporaProfile')"
                      }
                    },
                    {
                      "element": "main-buttons-primitive",
                      "attributes": {
                        "$ngIf": "!dataSource?.myProfile && dataSource?.canFollow && !dataSource?.canUnFollow"
                      },
                      "properties": {
                        "leftButtonTitle": "'Follow'",
                        "leftButtonTitleId": "'profile-page-main-buttons-primitive-follow-id'",
                        "leftButtonIcon": "'assets/icon/dynamic-ui/follow_white.svg'",
                        "rightButtonTitle": "'Message'",
                        "rightButtonTitleId": "'profile-page-main-buttons-primitive-message-id'",
                        "rightButtonIcon": "'assets/icon/dynamic-ui/message.svg'",
                        "rightButtonDisabled": "!dataSource?.canSendMessage"
                      },
                      "events": {
                        "leftButtonActionEmitter": "$actionHelper.linkDomain('Profile', $dynamicUiExtraService.getUserId(dataSource?.user), dataSource)",
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('conversationMessages/user/' + $dynamicUiExtraService.getUserId(dataSource?.user) + '/' + initialDataSource.userMailboxId + '/' + dataSource.receiverMailboxId)"
                      }
                    },
                    {
                      "element": "main-buttons-primitive",
                      "attributes": {
                        "$ngIf": "!dataSource?.myProfile && !dataSource?.canFollow && dataSource?.canUnFollow"
                      },
                      "properties": {
                        "leftButtonTitle": "'Following'",
                        "leftButtonTitleId": "'profile-page-main-buttons-primitive-following-id'",
                        "leftButtonIcon": "'assets/icon/dynamic-ui/Following_white.svg'",
                        "leftButtonDisabled": "!dataSource?.canUnFollow",
                        "rightButtonTitle": "'Message'",
                        "rightButtonTitleId": "'profile-page-main-buttons-primitive-message-id'",
                        "rightButtonIcon": "'assets/icon/dynamic-ui/message.svg'",
                        "rightButtonDisabled": "!dataSource?.canSendMessage"
                      },
                      "events": {
                        "leftButtonActionEmitter": "$actionHelper.unLinkDomain('Profile', $dynamicUiExtraService.getUserId(dataSource?.user), dataSource)",
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('conversationMessages/user/' + $dynamicUiExtraService.getUserId(dataSource?.user) + '/' + initialDataSource.userMailboxId + '/' + dataSource.receiverMailboxId)"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "(dataSource?.myProfile) || (!dataSource?.myProfile && dataSource?.generalDetailsInfo && dataSource?.generalDetailsInfo.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/About_Active.svg'",
                        "mainIconId": "'profile-page-about-section-block-header-primitive-main-icon-id'",
                        "title": "'About'",
                        "titleId": "'profile-page-about-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Info, sector and contact details'",
                        "subTitleId": "'profile-page-about-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "dataSource?.myProfile && dataSource?.canManage",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'profile-page-about-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "'Edit'",
                        "actionLabelId": "'profile-page-about-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('profile/edit/' + initialDataSource.profileId)"
                      }
                    },
                    {
                      "element": "about-primitive",
                      "properties": {
                        "aboutUsContainerId": "'profile-page-about-us-primitive'",
                        "aboutUsItems": "dataSource?.generalDetailsInfo",
                        "characterLimit": 150,
                        "unTruncatedText": "'Show More'",
                        "truncatedText": "'Show Less'"
                      },
                      "events": {
                        "emptyStateActionEmitter": "(dataSource?.canManage) ? $actionHelper.navigateTo('profile/edit/' + initialDataSource.profileId) : null"
                      }
                    },
                    {
                      "element": "social-media-strip-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.myProfile) || (!dataSource?.myProfile && dataSource?.socialMediaInfo && dataSource?.socialMediaInfo.length > 0)"
                      },
                      "properties": {
                        "socialMediaContainerId": "'profile-page-social-media-strip-primitive'",
                        "socialMediaItems": "dataSource?.socialMediaInfo",
                        "showEmptyState": "dataSource?.myProfile && dataSource?.canManage",
                        "icon": "'assets/icon/dynamic-ui/Social.svg'",
                        "iconId": "'profile-page-social-media-strip-primitive-icon-id'",
                        "title": "'Social Media'",
                        "titleId": "'profile-page-social-media-strip-primitive-title-id'",
                        "emptyStateMessage": "'Add Social Media Links'",
                        "emptyStateMessageId": "'profile-page-social-media-strip-primitive-empty-state-message-id'"
                      },
                      "events": {
                        "emptyStateActionEmitter": "(dataSource?.canManage) ? $actionHelper.navigateTo('profile/edit/' + $dynamicUiExtraService.getUserId(dataSource?.user)): null"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "dataSource?.peoples && dataSource?.peoples?.length > 0"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/People_Active.svg'",
                        "mainIconId": "'profile-page-people-section-block-header-primitive-main-icon-id'",
                        "title": "'People'",
                        "titleId": "'profile-page-people-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Following & followers ' + dataSource?.user?.firstName",
                        "subTitleId": "'profile-page-people-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": true,
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'profile-page-people-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "'See All'",
                        "actionLabelId": "'profile-page-people-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('profile/viewFollowers/' +  $dynamicUiExtraService.getUserId(dataSource?.user))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.peoples"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('profile/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'profile-page-people-item'}"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'actionClass': 'l-icon', 'containerId': 'profile-page-people-action'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'actionClass': 'l-icon', 'containerId': 'profile-page-people-action' }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "{{(dataSource?.networkRoles &&  dataSource?.networkRoles.length > 0) ? 'border-separtor pdb-0' : 'border-separtor'}}",
                    "$ngIf": "(dataSource?.myProfile) || (!dataSource?.myProfile && dataSource?.networkRoles && dataSource?.networkRoles.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/Networks_Active.svg'",
                        "mainIconId": "'profile-page-networks-section-block-header-primitive-main-icon-id'",
                        "title": "'Networks'",
                        "titleId": "'profile-page-networks-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "dataSource?.user?.firstName +  '’s communities & orgs'",
                        "subTitleId": "'profile-page-networks-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "dataSource?.networkRoles && dataSource?.networkRoles.length > 0 ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'profile-page-networks-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "!dataSource?.myProfile ? 'More': 'Edit'",
                        "actionLabelId": "'profile-page-networks-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "!dataSource?.myProfile ? $actionHelper.navigateTo('profile/viewNetworkRole/'+ $dynamicUiExtraService.getUserId(dataSource?.user)) : $actionHelper.navigateTo('profile/manageNetworkRole/'+ $dynamicUiExtraService.getUserId(dataSource?.user))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.networkRoles &&  dataSource?.networkRoles.length > 0)"
                      },
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.networkRoles"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain(item.parentDomainType, item.parentDomainId)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'profile-page-networks-item'}"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain(item.parentDomainType, item.parentDomainId, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'actionClass': 'l-icon', 'containerId': 'profile-page-networks-action'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain(item.parentDomainType, item.parentDomainId, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'actionClass': 'l-icon', 'containerId': 'profile-page-networks-action' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.myProfile && (!dataSource?.networkRoles ||  dataSource?.networkRoles.length === 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Network_Roles.svg'",
                        "imageId": "'profile-page-networks-section-empty-state-primitive-image-id'",
                        "title": "'Are you a member of an organization or community?'",
                        "titleId": "'profile-page-networks-section-empty-state-primitive-title-id'",
                        "buttonLabel": "'Add a Network Role'",
                        "buttonId": "'profile-page-networks-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('profile/manageNetworkRole/' + initialDataSource.profileId);"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "{{(dataSource?.businessRoles &&  dataSource?.businessRoles.length > 0) ? 'border-separtor pdb-0' : 'border-separtor'}}",
                    "$ngIf": "(dataSource?.myProfile) || (!dataSource?.myProfile && dataSource?.businessRoles && dataSource?.businessRoles.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/Business_Inactive.svg'",
                        "mainIconId": "'profile-page-business-section-block-header-primitive-main-icon-id'",
                        "title": "'Business'",
                        "titleId": "'profile-page-business-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Companies, startups and freelancers'",
                        "subTitleId": "'profile-page-business-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "dataSource?.businessRoles && dataSource?.businessRoles.length > 0 ? true : false",
                        "actionIconId": "'profile-page-business-section-block-header-primitive-action-icon-id'",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionLabelId": "'profile-page-business-section-block-header-primitive-action-label-id'",
                        "actionLabel": "!dataSource?.myProfile ? 'More': 'Edit'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "!dataSource?.myProfile ? $actionHelper.navigateTo('profile/viewBusinessRole/'+ $dynamicUiExtraService.getUserId(dataSource?.user)) : $actionHelper.navigateTo('profile/manageBusinessRole/'+ $dynamicUiExtraService.getUserId(dataSource?.user))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.businessRoles &&  dataSource?.businessRoles.length > 0)"
                      },
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.businessRoles"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('company/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'profile-page-business-item'}"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Company', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'actionClass': 'l-icon', 'containerId': 'profile-page-business-action'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Company', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'actionClass': 'l-icon', 'containerId': 'profile-page-business-action'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.myProfile && (!dataSource?.businessRoles ||  dataSource?.businessRoles.length === 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Business_Roles.svg'",
                        "imageId": "'profile-page-business-section-empty-state-primitive-image-id'",
                        "title": "'Do you manage or work in a company or startup?'",
                        "titleId": "'profile-page-business-section-empty-state-primitive-title-id'",
                        "buttonLabel": "'Add a Business Role'",
                        "buttonId": "'profile-page-business-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('profile/manageBusinessRole/' + initialDataSource.profileId);"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "dataSource?.myProfile || (!dataSource?.myProfile && dataSource?.updates && dataSource?.updates.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/News_Active.svg'",
                        "mainIconId": "'profile-page-updates-section-block-header-primitive-main-icon-id'",
                        "title": "'Updates'",
                        "titleId": "'profile-page-updates-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "dataSource?.user?.firstName+ '’s recent posts & events'",
                        "subTitleId": "'profile-page-updates-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.myProfile && dataSource?.canManage && dataSource?.updates && dataSource?.updates.length > 0) || (!dataSource?.myProfile && dataSource?.updates && dataSource?.updates.length > 0 ) ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'profile-page-updates-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.myProfile ? 'Edit' : 'More'",
                        "actionLabelId": "'profile-page-updates-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('userUpdates/' + $dynamicUiExtraService.getUserId(dataSource?.user))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.updates && dataSource?.updates.length > 0"
                      },
                      "properties": {
                        "listType": "'news-list'",
                        "arrayOfItems": "dataSource?.updates"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "list-with-right-image-template",
                              "events": {
                                "click": "$actionHelper.navigateTo(item.type == 'Post' ? ('postDetails/' + item.id) : ('eventDetails/' + item.id))"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'profile-page-updates-item' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.myProfile && (!dataSource?.updates || dataSource?.updates.length === 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Post_Update.svg'",
                        "imageId": "'profile-page-updates-section-empty-state-primitive-image-id'",
                        "title": "'Posts and events you create under various pages appear here'",
                        "titleId": "'profile-page-updates-section-empty-state-primitive-title-id'",
                        "buttonLabel": "dataSource?.canAddPost ? 'Create a Post Under Your Profile': null",
                        "buttonId": "'profile-page-updates-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('createPost/user/' + $dynamicUiExtraService.getUserId(dataSource?.user))"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "dataSource?.myProfile || (!dataSource?.myProfile && dataSource?.gallery && dataSource?.gallery.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/View_Gallery.svg'",
                        "mainIconId": "'profile-page-gallery-section-block-header-primitive-main-icon-id'",
                        "title": "'Media Gallery'",
                        "titleId": "'profile-page-gallery-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Your photos and videos'",
                        "subTitleId": "'profile-page-gallery-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.myProfile && dataSource?.canManage && dataSource?.gallery && dataSource?.gallery.length > 0) || (!dataSource?.myProfile && dataSource?.gallery && dataSource?.gallery.length > 0) ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'profile-page-gallery-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.myProfile ? 'Edit' : 'More'",
                        "actionLabelId": "'profile-page-gallery-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('gallery/user/' + $dynamicUiExtraService.getUserId(dataSource?.user))"
                      }
                    },
                    {
                      "element": "media-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.gallery && dataSource?.gallery.length > 0"
                      },
                      "events": {
                        "click": "$actionHelper.navigateTo('gallery/user/' + $dynamicUiExtraService.getUserId(dataSource?.user))"
                      },
                      "properties": {
                        "youtubeIcon": "'assets/icon/dynamic-ui/YouTube_Video.svg'",
                        "items": "dataSource?.gallery",
                        "mediaContainerId": "'profile-page-gallery'"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.myProfile && (!dataSource?.gallery || dataSource?.gallery.length === 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Media_Gallery.svg'",
                        "imageId": "'profile-page-gallery-section-empty-state-primitive-image-id'",
                        "title": "'Show Lebanese vistas, milestones & projects'",
                        "titleId": "'profile-page-gallery-section-empty-state-primitive-title-id'",
                        "buttonLabel": "dataSource?.canUploadMedia ? 'Add Photos or Videos' : null",
                        "buttonId": "'profile-page-gallery-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('addMedia/'+ dataSource.galleryId, {'canUploadImage': dataSource.canUploadImage, 'canUploadVideoLink': dataSource.canUploadVideoLink, targetId: initialDataSource.profileId, targetName: $dynamicUiExtraService.getUserFullName(dataSource?.user), targetImage: $dynamicUiExtraService.getUserImage(dataSource?.user)})"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "element": "button-primitive",
          "attributes": {
            "$ngIf": "dataSource?.myProfile && (dataSource?.canAddPost || dataSource?.canUploadMedia)",
            "id": "profile-page-fab-button"
          },
          "properties": {
            "type": "'fab-button'",
            "icon": "'assets/icon/dynamic-ui/Add_white.svg'"
          },
          "events": {
            "actionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource?.profileActions, null, dataSource, {targetId: $dynamicUiExtraService.getUserId(dataSource?.user), targetName: $dynamicUiExtraService.getUserFullName(dataSource?.user), targetImage: $dynamicUiExtraService.getUserImage(dataSource?.user)})"
          }
        }
      ]
    },
    {
      "name": "manageprofile-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'My Profile'",
                "leftIconId": "'manage-profile-page-header-primitive-back-id'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "card-list-primitive",
                  "properties": {
                    "listType": "'simple-list'",
                    "classList": "'quick-link-content'",
                    "arrayOfItems": "initialDataSource?.permissions?.profile"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#itemListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "simple-list-template",
                          "events": {
                            "click": "$actionHelper.navigateToSubPage(item.pageUrl)"
                          },
                          "properties": {
                            "dataSource": "{'item': item, 'containerId': 'manage-profile-page-permission' }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "editprofile-page-template",
      "functions": {
        "uploadPhoto": "function ($event) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($photo: Upload) {\n        user {\n          uploadPhoto(photo: $photo)\n        }\n      }\n    `, {photo: $event}).then(uploadResponse => {\n        $actionHelper.notifiySubscribers(['edit-profile', 'edit-profile-details'], false);\n        $actionHelper.showToast('Image updated successfully');\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Profile Information'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'edit-profile-page-header-primitive-back-id'",
                "buttonLabel": "'Save'",
                "buttonLabelId": "'edit-profile-page-header-primitive-save-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation {  user {\n    update(model:\n      {\n        firstName: $templateContext->activeFormArguments.firstName,\n        lastName: $templateContext->activeFormArguments.lastName,\n        shortBio: $templateContext->activeFormArguments.shortBio,\n        sector: $templateContext->activeFormArguments.sector,\n        profession: $templateContext->activeFormArguments.profession,\n        placeOfOrigin: {\n          country: $templateContext->activeFormArguments.countryOfOrigin,\n          city: $templateContext->activeFormArguments.hometown\n        }\n        placeOfResidence: {\n          country: $templateContext->activeFormArguments.countryOfResidence,\n          city: $templateContext->activeFormArguments.city \n        },\n        contactUs: {\n          email: $templateContext->activeFormArguments.contactEmail,\n          phoneNumber: {\n            countryCode: $templateContext->activeFormArguments.countryCode,\n            isoCode: $templateContext->activeFormArguments.isoCode,\n            number: $templateContext->activeFormArguments.phoneNumber\n          }\n        },\n        socialMedia: {\n          facebook: $templateContext->activeFormArguments.facebook,\n          instagram: $templateContext->activeFormArguments.instagram,\n          linkedin: $templateContext->activeFormArguments.linkedin,\n          twitter: $templateContext->activeFormArguments.twitter\n        }\n      }\n    ) {\n      id\n    }\n  }\n}\n",
                  "postAction": "$actionHelper.showToast('Profile details updated successfully'); $actionHelper.notifiySubscribers(['edit-profile', 'edit-profile-details'], true);\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event)"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'edit-profile-page-form'",
                    "predefineData": "{'userId': $actionHelper.getActiveDomainId()}",
                    "formWithImage": "dataSource.canUpdatePhoto",
                    "isThumbnailImage": true,
                    "imageChooserActionLabel": "'Change profile picture'",
                    "initialData": "dataSource.user",
                    "imageFormControlName": "'Image'",
                    "imageValue": "'photoCover.imageThumbnailUrl'",
                    "avatarName": "'fullName'",
                    "withBeforeInitFunction": true,
                    "isRequiredImage": false,
                    "imageSchemaValidationPath": "'mutation.user.uploadPhoto.photo'",
                    "dataSource": {
                      "functions": {
                        "beforeInit": "function() {  return this.$actionHelper.prepareLookups()\n}\n",
                        "addNewProfession": "function ($profession, parentComponent) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($profession: String!) {\n        user {\n          addProfession(title: $profession) {\n            lookupId\n            name\n          }\n        }\n      }\n    `, {profession: $profession}).then(data => {    \n        this.$actionHelper.getProfessionLookups();\n        const newOption = _.get(data, 'user.addProfession', null);\n        if(newOption) {\n          parentComponent.options.unshift(newOption);\n          parentComponent.initialOptions.unshift(newOption);\n          parentComponent.getInitialList();  \n        }\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
                        "openProfessions": "function($event, formGroup, initialDataSource, formsData, evalScope, validatorsByKey) {  this.$actionHelper.openModalFromReactiveForm('Select Profession', $event.element, formGroup, formsData, initialDataSource.professions, evalScope, validatorsByKey,\n    true, 'Tap to add a new profession', 'Profession already exists', (newProfession, parentComponent) => { this.addNewProfession(newProfession, parentComponent)} \n  );\n}\n"
                      },
                      "controllers": [
                        {
                          "key": "firstName",
                          "label": "First Name",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Your first name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "firstName",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.user.update.model.fields.firstName",
                              "messages": {
                                "isRequired": "First Name is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "lastName",
                          "label": "Last Name",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Your last name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "lastName",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.user.update.model.fields.lastName",
                              "messages": {
                                "isRequired": "Last Name is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "shortBio",
                          "label": "Biography",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "textarea",
                          "placeholder": "Add a short bio here",
                          "class": "margin-bottom-14",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "shortBio",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.user.update.model.fields.shortBio",
                              "messages": {
                                "maxLength": "5000 Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "sector",
                          "label": "Sector",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Choose your sector",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": "sector",
                          "withNullValue": true,
                          "actionTitle": "Choose your sector",
                          "required": null,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSectorsModal('Choose your sector', $event.element, formGroup, initialDataSource.sectors)",
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.user.update.model.fields.sector",
                              "messages": {
                                "isRequired": "Sector is required"
                              }
                            }
                          ],
                          "lookups": "sectors",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "profession",
                          "label": "Profession",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Choose your profession",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": "profession",
                          "withNullValue": false,
                          "actionTitle": "Select Profession",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "buttonActionEmitter": "this.openProfessions($event, formGroup, initialDataSource, formsData, evalScope, validatorsByKey)",
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.user.update.model.fields.profession",
                              "messages": {
                                "isRequired": "Profession is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "lookups": "professions",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "countryOfOrigin",
                          "label": "Country of Origin",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Your ancestral country (e.g. Lebanon)",
                          "value": null,
                          "valueType": "country",
                          "valuePath": "placeOfOrigin.country",
                          "required": true,
                          "withNullValue": false,
                          "actionTitle": "Select Country",
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openCountriesModal('Select Country', $event.element, formGroup, initialDataSource.countries, false)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(formPrimitive.getGraphQL, $event.newValue).then(\n(data) => {\nformsData.lookups.countryOfOriginCities = data.cities;\nconst homeTownController = formsData.controllers.find(controller => controller.key === 'hometown');\nif(homeTownController) {\nif(!homeTownController.firstLoad) {\n$actionHelper.setFormGroupData('hometown',null)\nhomeTownController.value = null;\n}\nformPrimitive.detectChanges();\nhomeTownController.firstLoad = false;\n}\n}\n)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.user.update.model.fields.placeOfOrigin.fields.country",
                              "messages": {
                                "isRequired": "Country of origin is required"
                              }
                            }
                          ],
                          "lookups": "countries",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "hometown",
                          "label": "Hometown",
                          "display": true,
                          "relatedTo": null,
                          "firstLoad": true,
                          "controlType": "button-input",
                          "placeholder": "Select your ancestral town",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": "placeOfOrigin.city",
                          "withNullValue": false,
                          "actionTitle": "Select Hometown",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select Hometown', $event.element, formGroup, formsData, formsData.lookups.countryOfOriginCities, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.user.update.model.fields.placeOfOrigin.fields.city",
                              "messages": {
                                "isRequired": "Hometown is required"
                              }
                            }
                          ],
                          "lookups": "cities",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "countryOfResidence",
                          "label": "Country of Residence",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Country where you currently reside",
                          "value": null,
                          "valueType": "country",
                          "valuePath": "placeOfResidence.country",
                          "withNullValue": false,
                          "actionTitle": "Select Country",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openCountriesModal('Select Country', $event.element, formGroup, initialDataSource.countries, false)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(formPrimitive.getGraphQL, $event.newValue).then(\n(data) => {\nformsData.lookups.countryOfResidenceCities = data.cities;\nconst cityController = formsData.controllers.find(controller => controller.key === 'city');\nif(cityController) {\nif(!cityController.firstLoad) {\n$actionHelper.setFormGroupData('city',null)\ncityController.value = null;\n}\nformPrimitive.detectChanges();\ncityController.firstLoad = false;\n}\n}\n)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.user.update.model.fields.placeOfResidence.fields.country",
                              "messages": {
                                "isRequired": "Country of residence is required"
                              }
                            }
                          ],
                          "lookups": "countries",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "city",
                          "label": "City of Residence",
                          "display": true,
                          "relatedTo": null,
                          "firstLoad": true,
                          "controlType": "button-input",
                          "placeholder": "City in which you reside",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": "placeOfResidence.city",
                          "withNullValue": false,
                          "actionTitle": "Select City",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select City', $event.element, formGroup, formsData, formsData.lookups.countryOfResidenceCities, evalScope, validatorsByKey)",
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.user.update.model.fields.placeOfResidence.fields.city",
                              "messages": {
                                "isRequired": "City is required"
                              }
                            }
                          ],
                          "lookups": "cities",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "countryCode",
                          "label": "Phone Number",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Country Code",
                          "countryIsoCodeKey": "isoCode",
                          "countryIsoCodePath": "contactDetails.phone.isoCode",
                          "value": null,
                          "valueType": "phoneCountry",
                          "valuePath": "contactDetails.phone",
                          "defaultValue": "placeOfResidence.country",
                          "withNullValue": false,
                          "actionTitle": "Select Country",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openCountriesModal('Select Country', $event.element, formGroup, phoneCountries, true)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.user.update.model.fields.contactUs.fields.phoneNumber.fields.countryCode",
                              "messages": {
                                "isRequired": "Country code is required"
                              }
                            }
                          ],
                          "lookups": "phoneCountry",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "phoneNumber",
                          "label": null,
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "number",
                          "placeholder": "Add your phone number",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactDetails.phone.number",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.user.update.model.fields.contactUs.fields.phoneNumber.fields.number",
                              "messages": {
                                "isRequired": "Phone number is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "contactEmail",
                          "label": "Contact Email",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "email",
                          "placeholder": "Alternative email for notifications",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactDetails.contactEmail",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.user.update.model.fields.contactUs.fields.email",
                              "messages": {
                                "maxLength": "Character limit reached",
                                "pattern": "Please enter a valid email address"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "facebook",
                          "label": "Facebook",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Facebook profile link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.facebook",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Facebook.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.user.update.model.fields.socialMedia.fields.facebook",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "linkedin",
                          "label": "LinkedIn",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "LinkedIn profile link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.linkedin",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/LinkedIn.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.user.update.model.fields.socialMedia.fields.linkedin",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "instagram",
                          "label": "Instagram",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Instagram profile link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.instagram",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Instagram.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.user.update.model.fields.socialMedia.fields.instagram",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "twitter",
                          "label": "Twitter",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Twitter profile link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.twitter",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Twitter.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.user.update.model.fields.socialMedia.fields.twitter",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Basic Information"
                            },
                            {
                              "type": "group-input",
                              "children": [
                                {
                                  "type": "controller",
                                  "controllerKey": "firstName"
                                },
                                {
                                  "type": "controller",
                                  "controllerKey": "lastName"
                                }
                              ]
                            },
                            {
                              "type": "controller",
                              "controllerKey": "shortBio"
                            }
                          ]
                        },
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "sector"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "profession"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "countryOfOrigin"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "hometown"
                            }
                          ]
                        },
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "countryOfResidence"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "city"
                            }
                          ]
                        },
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Contact Details"
                            },
                            {
                              "type": "group-input-with-button",
                              "children": [
                                {
                                  "type": "controller",
                                  "controllerKey": "countryCode"
                                },
                                {
                                  "type": "controller",
                                  "controllerKey": "phoneNumber"
                                }
                              ]
                            },
                            {
                              "type": "controller",
                              "controllerKey": "contactEmail"
                            }
                          ]
                        },
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Social Media"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "facebook"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "linkedin"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "instagram"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "twitter"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "events": {
                    "photoActionEmitter": "this.uploadPhoto($event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "editprivacy-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'form-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Privacy Settings'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'edit-privacy-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "card-list-primitive",
                  "properties": {
                    "listType": "'simple-list'",
                    "arrayOfItems": "dataSource?.privacySettings"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#itemListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "class": "page-input"
                          },
                          "children": [
                            {
                              "element": "div",
                              "children": [
                                {
                                  "element": "input-primitive",
                                  "attributes": {
                                    "inputId": "{{'edit-privacy-page-privacy-type-' + item.label + '-' + item.value + '-id'}}"
                                  },
                                  "properties": {
                                    "inputType": "'button-input'",
                                    "inputLabel": "item?.label  | translate",
                                    "inputValue": "item?.value | translate",
                                    "inputIcon": "'assets/icon/dynamic-ui/Arrow_Down_Grey.svg'"
                                  },
                                  "events": {
                                    "buttonActionEmitter": "$actionHelper.openModal('Set Privacy', item, initialDataSource?.privacyTypes)"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "button-primitive",
                  "properties": {
                    "text": "'Save'",
                    "action": {
                      "query": "mutation {  user {\n    updatePrivacysettings(privacySettings: {\n      contactEmail: $dynamicUiExpression((|getParamFromArray(templateContext.additionalData, 'contactEmail')|)),\n      contactPhone: $dynamicUiExpression((|getParamFromArray(templateContext.additionalData, 'contactPhone')|))\n    }) {\n      id\n    }\n  }\n}\n",
                      "postAction": "$actionHelper.goBackPage(['edit-profile']);"
                    }
                  },
                  "attributes": {
                    "$ngIf": "dataSource.canUpdatePrivacySettings",
                    "id": "edit-privacy-page-update-action-id"
                  },
                  "events": {
                    "actionEmitter": "$actionHelper.submitForm($event, dataSource.privacySettings)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "managenetworkroles-page-template",
      "changeDetectionSubjects": [
        "add-organizaiton-role",
        "edit-organization-role",
        "add-diplomatic-role",
        "edit-diplomatic-role",
        "create-organization",
        "add-committee-member",
        "remove-committee-member",
        "delete-commiteee",
        "add-organization-administrators",
        "manage-organization-administrators",
        "manage-organization-team-members",
        "add-office-member",
        "remove-office-member",
        "delete-office",
        "add-diplomaticMission-administrators",
        "manage-diplomaticMission-administrators",
        "manage-diplomaticMission-key-staff"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Network Roles'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-network-role-page-header-primitive-back-id'",
                "rightIcon": "'assets/icon/dynamic-ui/Add_Grey.svg'",
                "rightIconId": "'manage-network-role-page-header-primitive-add-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.navigateTo('searchForOrganization', {'organizations': []})"
              }
            },
            {
              "element": "ion-content",
              "attributes": {
                "$ngIf": "dataSource?.networkRoles && dataSource?.networkRoles?.length > 0"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "page-hint"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "page-hint-container"
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "class": "page-hint-title",
                            "id": "manage-network-role-page-hint-title-id"
                          },
                          "properties": {
                            "$innerHTML": "'Manage your roles'"
                          }
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "page-hint-subtitle",
                            "id": "manage-network-role-page-hint-subtitle-id"
                          },
                          "properties": {
                            "$innerHTML": "'You can edit, delete or set a role as your primary (featured) role. Tap the dots to get started.'"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "card-list-primitive",
                  "properties": {
                    "listType": "'simple-list'",
                    "classList": "'list-with-left-image'",
                    "arrayOfItems": "dataSource?.networkRoles"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#itemListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "default-list-template",
                          "events": {
                            "click": "$actionHelper.navigateToDomain(item.parentDomainType, item.parentDomainId)"
                          },
                          "properties": {
                            "dataSource": "{'item': item, 'containerId': 'manage-network-role-page-item' }"
                          }
                        }
                      ]
                    },
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#actionListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "action-template-with-two-icon",
                          "attributes": {
                            "$ngIf": "item.type !== 'Municipality'"
                          },
                          "events": {
                            "click": "item.type === 'Organization' || item.type === 'OrganizationCommittee' ?    $actionHelper.openActionSheetWithConditions(initialDataSource?.manageOrganizationRoleActions, item, dataSource, {'userId': initialDataSource.profileId})\n  : $actionHelper.openActionSheetWithConditions(initialDataSource?.manageDiplomaticRoleActions  , item, dataSource, {'userId': initialDataSource.profileId})\n"
                          },
                          "properties": {
                            "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', 'itemId': item.title, 'containerId': 'manage-network-role-page-action', 'showIcon': item.featured, 'leftIcon': 'assets/icon/dynamic-ui/featured_role.svg', 'leftActionClass': ''}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "element": "empty-state-primitive",
              "attributes": {
                "$ngIf": "!dataSource?.networkRoles || dataSource?.networkRoles?.length === 0"
              },
              "properties": {
                "title": "'No Network Roles'",
                "titleId": "'manage-network-role-page-empty-state-primitive-title-id'",
                "subtitle": "'This user did not list any network roles yet'",
                "subTitleId": "'manage-network-role-page-empty-state-primitive-subtitle-id'",
                "image": "'assets/empty-state/Network_Roles.svg'",
                "imageId": "'manage-network-role-page-empty-state-primitive-image-id'"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "viewnetworksroles-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Network Roles'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-network-role-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "attributes": {
                "$ngIf": "dataSource?.networkRoles && dataSource?.networkRoles?.length > 0"
              },
              "children": [
                {
                  "element": "card-list-primitive",
                  "properties": {
                    "listType": "'simple-list'",
                    "classList": "'list-with-left-image'",
                    "arrayOfItems": "dataSource?.networkRoles"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#itemListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "default-list-template",
                          "events": {
                            "click": "$actionHelper.navigateToDomain(item.parentDomainType, item.parentDomainId)"
                          },
                          "properties": {
                            "dataSource": "{'item': item, 'containerId': 'view-network-role-page-item' }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "element": "empty-state-primitive",
              "attributes": {
                "$ngIf": "!dataSource?.networkRoles || dataSource?.networkRoles?.length === 0"
              },
              "properties": {
                "title": "'No Network Roles'",
                "titleId": "'view-network-role-page-empty-state-primitive-title-id'",
                "subtitle": "'This user did not list any network roles yet'",
                "subTitleId": "'view-network-role-page-empty-state-primitive-subtitle-id'",
                "image": "'assets/empty-state/Network_Roles.svg'",
                "imageId": "'view-network-role-page-empty-state-primitive-image-id'"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "managebusinessroles-page-template",
      "changeDetectionSubjects": [
        "add-business-role",
        "edit-business-role",
        "create-company",
        "manage-company-team-members",
        "manage-company-administrators",
        "add-company-administrators"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Business Roles'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-business-role-page-header-primitive-back-id'",
                "rightIcon": "'assets/icon/dynamic-ui/Add_Grey.svg'",
                "rightIconId": "'manage-business-role-page-header-primitive-add-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.navigateTo('searchForCompany', {'companies': []})"
              }
            },
            {
              "element": "ion-content",
              "attributes": {
                "$ngIf": "dataSource?.businessRoles && dataSource?.businessRoles?.length > 0"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "page-hint"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "page-hint-container"
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "class": "page-hint-title",
                            "id": "manage-business-role-page-hint-title-id"
                          },
                          "properties": {
                            "$innerHTML": "'What is a primary role?'"
                          }
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "page-hint-subtitle",
                            "id": "manage-business-role-page-hint-subtitle-id"
                          },
                          "properties": {
                            "$innerHTML": "'By setting a role as primary, it will appear below your name in your profile. It will also be associated with your profile card in different places in the app'"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "card-list-primitive",
                  "properties": {
                    "listType": "'simple-list'",
                    "classList": "'list-with-left-image'",
                    "arrayOfItems": "dataSource?.businessRoles"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#itemListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "default-list-template",
                          "events": {
                            "click": "$actionHelper.navigateToDomain('Company', item.id)"
                          },
                          "properties": {
                            "dataSource": "{'item': item, 'containerId': 'manage-business-role-page-item' }"
                          }
                        }
                      ]
                    },
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#actionListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "action-template-with-two-icon",
                          "events": {
                            "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageBusinessesRoleActions, item, dataSource, {'userId': initialDataSource.profileId})"
                          },
                          "properties": {
                            "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', 'containerId': 'manage-business-role-page-action', 'itemId': item.title, 'showIcon': item.featured, 'leftIcon': 'assets/icon/dynamic-ui/featured_role.svg', 'leftActionClass': ''}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "element": "empty-state-primitive",
              "attributes": {
                "$ngIf": "!dataSource?.businessRoles || dataSource?.businessRoles?.length === 0"
              },
              "properties": {
                "title": "'No Business Roles'",
                "titleId": "'manage-business-role-page-empty-state-primitive-title-id'",
                "subtitle": "'This user did not list any business roles yet'",
                "subTitleId": "'manage-business-role-page-empty-state-primitive-subtitle-id'",
                "image": "'assets/empty-state/Business_Roles.svg'",
                "imageId": "'manage-business-role-page-empty-state-primitive-image-id'"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "viewbusinesssroles-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Business Roles'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'view-business-role-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "attributes": {
                "$ngIf": "dataSource?.businessRoles && dataSource?.businessRoles?.length > 0"
              },
              "children": [
                {
                  "element": "card-list-primitive",
                  "properties": {
                    "listType": "'simple-list'",
                    "classList": "'list-with-left-image'",
                    "arrayOfItems": "dataSource?.businessRoles"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#itemListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "default-list-template",
                          "events": {
                            "click": "$actionHelper.navigateToDomain('Company', item.id)"
                          },
                          "properties": {
                            "dataSource": "{'item': item, 'containerId': 'view-business-role-page-item' }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "element": "empty-state-primitive",
              "attributes": {
                "$ngIf": "!dataSource?.businessRoles || dataSource?.businessRoles?.length === 0"
              },
              "properties": {
                "title": "'No Business Roles'",
                "titleId": "'view-business-role-page-empty-state-primitive-title-id'",
                "subtitle": "'This user did not list any business roles yet'",
                "subTitleId": "'view-business-role-page-empty-state-primitive-subtitle-id'",
                "image": "'assets/empty-state/Business_Roles.svg'",
                "imageId": "'view-business-role-page-empty-state-primitive-image-id'"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "managePrimaryRole-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Set Primary Role'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "page-hint"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "page-hint-container"
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "class": "page-hint-title"
                          },
                          "properties": {
                            "$innerHTML": "'What is a primary role?'"
                          }
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "page-hint-subtitle"
                          },
                          "properties": {
                            "$innerHTML": "'By setting a role as primary, it will appear below your name in your profile. It will also be displayed under your name in different places in the app'"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "element": "card-list-primitive",
              "properties": {
                "listType": "'simple-list'",
                "classList": "'list-with-left-image'",
                "dataSource": {
                  "$dynamicUI:resourceType": "fetch",
                  "$dynamicUI:fetchParams": {
                    "url": "assets/data/entities/primaryRoles.json",
                    "data": {
                      "method": "get"
                    }
                  }
                }
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#itemListTemplate": "",
                    "let-item": "item"
                  },
                  "children": [
                    {
                      "element": "default-list-template",
                      "events": {
                        "click": "$actionHelper.navigateToDomain(item.type, item.id)"
                      },
                      "properties": {
                        "dataSource": "{'item': item }"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#actionListTemplate": "",
                    "let-item": "item"
                  },
                  "children": [
                    {
                      "element": "action-template",
                      "attributes": {
                        "$ngIf": "item.canFollow && !item.canUnFollow"
                      },
                      "events": {
                        "click": "$actionHelper.callApi('Follow item: ' + item.id)"
                      },
                      "properties": {
                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Primary_Role_Grey.svg'}"
                      }
                    },
                    {
                      "element": "action-template",
                      "attributes": {
                        "$ngIf": "!item.canFollow && item.canUnFollow"
                      },
                      "events": {
                        "click": "$actionHelper.callApi('unFollow item: ' + item.id)"
                      },
                      "properties": {
                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Primary_Role_Gold.svg' }"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "managefollowers-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.followers, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.followedBy, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'skeleton-page-with-two-segment'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'People'",
                "headerClass": "'with-no-border'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-followers-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "segment-primitive",
              "properties": {
                "segmentContainerId": "'manage-followers-page-segment-container-id'",
                "segmentOneLabel": "'Followers'",
                "segmentTwoLabel": "'Following'",
                "segmentClass": "'two-segment'"
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentOneContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.followers && dataSource?.followers?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "inputType": "'search-input'",
                            "searchInputId": "'manage-followers-page-followers-search-input-id'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    followers: _.get(data, \"user.searchFollowers.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    followerCursor: _.get(data, \"user.searchFollowers.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  user(id: $templateContext->additionalData.userId) {\n    searchFollowers(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.followers = $graphQlResults.followers;  dataSource.followerCursor = $graphQlResults.followerCursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'userId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.followers"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-followers-page-followers-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "attributes": {
                                    "$ngIf": "item.canFollow && !item.canUnFollow"
                                  },
                                  "events": {
                                    "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', itemId:item.title, 'containerId': 'manage-followers-page-followers-action', 'actionClass': 'l-icon'}"
                                  }
                                },
                                {
                                  "element": "action-template",
                                  "attributes": {
                                    "$ngIf": "!item.canFollow && item.canUnFollow"
                                  },
                                  "events": {
                                    "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', itemId:item.title, 'containerId': 'manage-followers-page-followers-action', 'actionClass': 'l-icon' }"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.followerCursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this,  'user', $activatedRoute.snapshot.params.id, 'followers', dataSource?.followerCursor, dataSource, 'followerCursor', 'followers')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.followerCursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this,  'user', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchFollowers', dataSource?.followerCursor, dataSource, 'followerCursor', 'followers')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.followers || dataSource?.followers?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Followers'",
                        "titleId": "'manage-followers-page-followers-empty-state-primitive-title-id'",
                        "subtitle": "'This user does not have any followers yet'",
                        "subTitleId": "'manage-followers-page-followers-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-followers-page-followers-empty-state-primitive-image-id'"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.followers || dataSource?.followers?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'manage-followers-page-followers-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-followers-page-followers-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentTwoContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.followedBy && dataSource?.followedBy?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "inputType": "'search-input'",
                            "searchInputId": "'manage-followers-page-following-search-input-id'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    followedBy: _.get(data, \"user.searchFollowedBy.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    followingCursor: _.get(data, \"user.searchFollowedBy.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  user (id: $templateContext->additionalData.userId) {\n    searchFollowedBy(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.followedBy = $graphQlResults.followedBy;  dataSource.followingCursor =  $graphQlResults.followingCursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'userId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource.followedBy"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-followers-page-following-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "attributes": {
                                    "$ngIf": "item.canFollow && !item.canUnFollow"
                                  },
                                  "events": {
                                    "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'itemId': item.title, 'containerId': 'manage-followers-page-following-action', 'actionClass': 'l-icon'}"
                                  }
                                },
                                {
                                  "element": "action-template",
                                  "attributes": {
                                    "$ngIf": "!item.canFollow && item.canUnFollow"
                                  },
                                  "events": {
                                    "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'itemId': item.title, 'containerId': 'manage-followers-page-following-action', 'actionClass': 'l-icon' }"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.followingCursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this,  'user', $activatedRoute.snapshot.params.id, 'followedBy', dataSource?.followingCursor, dataSource, 'followingCursor', 'followedBy')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.followingCursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this,  'user', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchFollowedBy', dataSource?.followingCursor, dataSource, 'followingCursor', 'followedBy')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.followedBy || dataSource?.followedBy?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Following'",
                        "titleId": "'manage-followers-page-following-empty-state-primitive-title-id'",
                        "subtitle": "'This user is not following anyone yet'",
                        "subTitleId": "'manage-followers-page-following-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-followers-page-following-empty-state-primitive-image-id'"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.followedBy || dataSource?.followedBy?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'manage-followers-page-following-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-followers-page-following-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "managefollowing-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.followingNetworks, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.followingBusinesses, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'skeleton-page-with-two-segment'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Accounts I Follow'",
                "headerClass": "'with-no-border'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-following-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "segment-primitive",
              "properties": {
                "segmentContainerId": "'manage-following-page-segment-container-id'",
                "segmentOneLabel": "'Networks'",
                "segmentTwoLabel": "'Business'",
                "segmentClass": "'two-segment'"
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentOneContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.followingNetworks && dataSource?.followingNetworks?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "inputType": "'search-input'",
                            "searchInputId": "'manage-following-page-networks-search-input-id'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    followingNetworks: _.get(data, \"user.searchFollowingNetworks.items\", []).map(x => $dynamicUiExtraService.mapNetworkToItem(x)),\n    networkCursor: _.get(data, \"user.searchFollowingNetworks.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  user (id: $templateContext->additionalData.userId) {\n    searchFollowingNetworks(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        entity {\n          __typename\n          ... on Organization {\n            ...organizationCommonProperties\n          }\n          ... on DiplomaticMission {\n            ...diplomaticCommonProperties\n          }\n          ... on Municipality {\n            ...municipalityCommonProperties\n          }\n        }\n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.followingNetworks = $graphQlResults.followingNetworks;  dataSource.networkCursor = $graphQlResults.networkCursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'userId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.followingNetworks"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain(item.type, item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-following-page-networks-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "attributes": {
                                    "$ngIf": "item.canFollow && !item.canUnFollow"
                                  },
                                  "events": {
                                    "click": "$actionHelper.linkDomain(item.type, item.id, item)"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'manage-following-page-networks-item', 'actionClass': 'l-icon'}"
                                  }
                                },
                                {
                                  "element": "action-template",
                                  "attributes": {
                                    "$ngIf": "!item.canFollow && item.canUnFollow"
                                  },
                                  "events": {
                                    "click": "$actionHelper.unLinkDomain(item.type, item.id, item)"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', itemId:item.title, 'containerId': 'manage-following-page-networks-item', 'actionClass': 'l-icon'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.networkCursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreNetowrkData($event, this, 'user', $activatedRoute.snapshot.params.id, 'followingNetworks', dataSource?.networkCursor, dataSource, 'networkCursor', 'followingNetworks')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.networkCursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreSearchNetowrkData($event, this, 'user', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchFollowingNetworks', dataSource?.networkCursor, dataSource, 'networkCursor', 'followingNetworks')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.followingNetworks || dataSource?.followingNetworks?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Networks'",
                        "titleId": "'manage-following-page-networks-empty-state-primitive-title-id'",
                        "subtitle": "'You are not following any networks yet'",
                        "subTitleId": "'manage-following-page-networks-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-following-page-networks-empty-state-primitive-image-id'"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.followingNetworks || dataSource?.followingNetworks?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'manage-following-page-networks-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-following-page-networks-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentTwoContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.followingBusinesses && dataSource?.followingBusinesses?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "inputType": "'search-input'",
                            "searchInputId": "'manage-following-page-business-search-input-id'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    followingBusinesses: _.get(data, \"user.searchFollowingBusinesses.items\", []).map(x => $dynamicUiExtraService.mapCompanyToItem(x)),\n    businessCursor: _.get(data, \"user.searchFollowingBusinesses.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                              "query": "query {  user(id: $templateContext->additionalData.userId) {\n    searchFollowingBusinesses(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        company {\n          ...companyCommonProperties\n        }  \n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.followingBusinesses = $graphQlResults.followingBusinesses;    dataSource.businessCursor = $graphQlResults.businessCursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'userId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.followingBusinesses"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Company', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'manage-following-page-business-item'}"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "attributes": {
                                    "$ngIf": "item.canFollow && !item.canUnFollow"
                                  },
                                  "events": {
                                    "click": "$actionHelper.linkDomain('Company', item.id, item)"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'manage-following-page-business-action', 'actionClass': 'l-icon'}"
                                  }
                                },
                                {
                                  "element": "action-template",
                                  "attributes": {
                                    "$ngIf": "!item.canFollow && item.canUnFollow"
                                  },
                                  "events": {
                                    "click": "$actionHelper.unLinkDomain('Company', item.id, item)"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', itemId: item.title, 'containerId': 'manage-following-page-business-action', 'actionClass': 'l-icon'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.businessCursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreCompanyData($event, this,  'user', $activatedRoute.snapshot.params.id, 'followingBusinesses', dataSource?.businessCursor, dataSource, 'businessCursor', 'followingBusinesses')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.businessCursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreSeachCompanyData($event, this, 'user', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchFollowingBusinesses', dataSource?.businessCursor, dataSource, 'businessCursor', 'followingBusinesses')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.followingBusinesses || dataSource?.followingBusinesses?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Business'",
                        "titleId": "'manage-following-page-business-empty-state-primitive-title-id'",
                        "subtitle": "'You are not following any businesses yet'",
                        "subTitleId": "'manage-following-page-business-empty-state-primitive-subtitle-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-following-page-business-empty-state-primitive-image-id'"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.followingBusinesses || dataSource?.followingBusinesses?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'manage-following-page-business-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'manage-following-page-business-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "addCompanyRole-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Add a Company Role'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'add-company-role-page-header-primitive-back-id'",
                "buttonLabel": "'Save'",
                "buttonLabelId": "'add-company-role-page-header-primitive-save-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation {  company {\n    createRole(\n      id: $templateContext->activeFormArguments.companyId, \n      role: {\n        positionName: $templateContext->activeFormArguments.positionName, \n        roleName: $templateContext->activeFormArguments.positionType\n      }\n    )\n  }\n}\n",
                  "postAction": "$actionHelper.showToast('Role or profession added successfully');  $actionHelper.goBackPage(['add-business-role'], templateContext.additionalData.fromSearchPage ? true : false)"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event, dataSource)"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'add-company-role-page-form'",
                    "predefineData": "{'companyId': $actionHelper.getActiveDomainId(), 'userId': dataSource.userId, 'disableForm': dataSource.disableForm}",
                    "initialData": "dataSource",
                    "dataSource": {
                      "controllers": [
                        {
                          "key": "positionType",
                          "label": "Your role in this company",
                          "display": true,
                          "relatedTo": null,
                          "relatedToSecondField": "positionName",
                          "controlType": "button-input",
                          "placeholder": "Select your role type (e.g. leadership)",
                          "value": null,
                          "valueType": "enumeration",
                          "enumerationType": "companyPositionTypes",
                          "valuePath": "positionType",
                          "withNullValue": false,
                          "actionTitle": "Select Position Type",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select Position Type', $event.element, formGroup, formsData, initialDataSource.companyPositionTypes, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.createRole.role.fields.roleName",
                              "messages": {
                                "isRequired": "Position type is required"
                              }
                            }
                          ],
                          "lookups": "positionTypes",
                          "controlWithApi": false,
                          "controlApiInfo": null
                        },
                        {
                          "key": "positionName",
                          "label": "Position Name",
                          "display": true,
                          "disabled": "($actionHelper?.getFormGroupData('positionType') === 'Mentor' || $actionHelper?.getFormGroupData('positionType') === 'Advisor')",
                          "relatedValue": "$actionHelper.getFormGroupData('positionType') === 'Mentor' ? 'Mentor' : ($actionHelper.getFormGroupData('positionType') === 'Advisor' ? 'Advisor' : '')",
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter your position name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "positionName",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.createRole.role.fields.positionName",
                              "messages": {
                                "isRequired": "Position name is required"
                              }
                            }
                          ],
                          "controlWithApi": false,
                          "controlApiInfo": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "positionType"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "positionName"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "editCompanyRole-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Edit Role in Company'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'edit-company-role-page-header-primitive-back-id'",
                "buttonLabel": "'Save'",
                "buttonLabelId": "'edit-company-role-page-header-primitive-save-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation {  company {\n    updateRole (\n      id: $templateContext->activeFormArguments.companyId, \n      role: {\n        positionName: $templateContext->activeFormArguments.positionName, \n        roleName: $templateContext->activeFormArguments.positionType\n      }\n    )\n  }\n}\n",
                  "postAction": "$actionHelper.showToast('Your role was updated successfully');  $actionHelper.goBackPage(['edit-business-role'])"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event)"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'edit-company-role-page-form'",
                    "initialData": "dataSource",
                    "predefineData": "{'companyId': $actionHelper.getActiveDomainId(), 'userId': dataSource.userId }",
                    "dataSource": {
                      "controllers": [
                        {
                          "key": "positionType",
                          "label": "Your role in this company",
                          "display": true,
                          "relatedTo": null,
                          "relatedToSecondField": "positionName",
                          "controlType": "button-input",
                          "placeholder": "Select your role type (e.g. leadership)",
                          "value": null,
                          "valueType": "enumeration",
                          "enumerationType": "companyPositionTypes",
                          "valuePath": "positionType",
                          "withNullValue": false,
                          "actionTitle": "Select Position Type",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select Position Type', $event.element, formGroup, formsData, initialDataSource.companyPositionTypes, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.updateRole.role.fields.roleName",
                              "messages": {
                                "isRequired": "Position type is required"
                              }
                            }
                          ],
                          "lookups": "positionTypes",
                          "controlWithApi": false,
                          "controlApiInfo": null
                        },
                        {
                          "key": "positionName",
                          "label": "Position Name",
                          "display": true,
                          "disabled": "($actionHelper?.getFormGroupData('positionType') === 'Mentor' || $actionHelper?.getFormGroupData('positionType') === 'Advisor')",
                          "relatedValue": "$actionHelper.getFormGroupData('positionType') === 'Mentor' ? 'Mentor' : ($actionHelper.getFormGroupData('positionType') === 'Advisor' ? 'Advisor' : '')",
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter Your position name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "positionName",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.updateRole.role.fields.positionName",
                              "messages": {
                                "isRequired": "Position name is required"
                              }
                            }
                          ],
                          "controlWithApi": false,
                          "controlApiInfo": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "positionType"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "positionName"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "addOrganizationRole-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "attributes": {
                "$ngIf": "$actionHelper.getFormGroupData('positionType') === 'CommitteeMember'"
              },
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Add Role in Organization'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'add-organization-role-page-header-primitive-back-id'",
                "buttonLabel": "'Save'",
                "buttonLabelId": "'add-organization-role-page-header-primitive-save-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation {  organizationCommittee {\n    joinMember(\n      organizationId: $templateContext->activeFormArguments.organizationId, \n      id: $templateContext->activeFormArguments.committee,\n      role: {\n        positionName: $templateContext->activeFormArguments.positionName, \n        roleName: $templateContext->activeFormArguments.positionType\n      }\n    )\n  }\n}\n",
                  "postAction": "$actionHelper.showToast('Role added successfully');  $actionHelper.goBackPage(['add-organizaiton-role'], templateContext.additionalData.fromSearchPage ? true : false)"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event, dataSource)"
              }
            },
            {
              "element": "page-header-primitive",
              "attributes": {
                "$ngIf": "$actionHelper.getFormGroupData('positionType') !== 'CommitteeMember'"
              },
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Add Role in Organization'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'add-organization-role-page-header-primitive-back-id'",
                "buttonLabel": "'Save'",
                "buttonLabelId": "'add-organization-role-page-header-primitive-save-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation {  organization {\n    createRole(\n      id: $templateContext->activeFormArguments.organizationId, \n      role: {\n        positionName: $templateContext->activeFormArguments.positionName, \n        roleName: $templateContext->activeFormArguments.positionType\n      }\n    )\n  }\n}\n",
                  "postAction": "$actionHelper.showToast('Role added successfully');  $actionHelper.goBackPage(['add-organizaiton-role'], templateContext.additionalData.fromSearchPage ? true : false)"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event, dataSource)"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'add-organization-role-page-form'",
                    "predefineData": "{'organizationId': $actionHelper.getActiveDomainId(), 'userId': dataSource.userId, 'disableForm': dataSource.disableForm}",
                    "initialData": "dataSource",
                    "dataSource": {
                      "functions": {
                        "openCommittees": "function(organizationId, $event, formGroup, formsData, evalScope, validatorsByKey) {  this.$dynamicUiExtraService.$actionHelper.$loaderService.present().then((res) => {\n    this.$dynamicUiExtraService.getOrganizationCommittees(this.getGraphQL, organizationId).then(\n      (committees) =>  {                          \n        this.$actionHelper.openModalWithQueryFromReactiveForm('Committees', $event.element, formGroup, formsData, evalScope, committees, (newOption)=> {this.addNewCommittee(organizationId, newOption, committees)}, validatorsByKey);\n        this.$dynamicUiExtraService.$actionHelper.$loaderService.dismiss();\n      }\n    ).catch(()=> {\n        this.$dynamicUiExtraService.$actionHelper.$loaderService.dismiss();\n    })\n  })\n}\n",
                        "addNewCommittee": "function(organizationId, committeeName, options) {  this.$actionHelper.$loaderService.present().then(() => {\n    this.getGraphQL(`\n      mutation {\n        organization {\n          createOrganizationCommitte(name:${JSON.stringify(committeeName)}, id:\"${organizationId}\") {\n            id,\n            name\n          }\n        }\n      }\n    `).then(mutationData => {\n        options.unshift({'id': mutationData.organization.createOrganizationCommitte.id, 'name': mutationData.organization.createOrganizationCommitte.name });\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })                        \n  });\n\n}\n"
                      },
                      "controllers": [
                        {
                          "key": "positionType",
                          "label": "Your role in this organization",
                          "display": true,
                          "relatedTo": "committee",
                          "relatedToSecondField": "positionName",
                          "controlType": "button-input",
                          "placeholder": "Select position type",
                          "disabled": "$actionHelper.getFormGroupData('disableForm')",
                          "value": null,
                          "valueType": "lookup",
                          "enumerationType": "organizationPositionTypes",
                          "valuePath": "positionType",
                          "withNullValue": false,
                          "actionTitle": "Select Position Type",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select Position Type', $event.element, formGroup, formsData, initialDataSource.organizationPositionTypes, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.createRole.role.fields.roleName",
                              "messages": {
                                "isRequired": "Position type is required"
                              }
                            }
                          ],
                          "lookups": "positionTypes",
                          "controlWithApi": false,
                          "controlApiInfo": null
                        },
                        {
                          "key": "committee",
                          "label": "Committee Name",
                          "display": "$actionHelper.getFormGroupData('positionType') == 'CommitteeMember'",
                          "relatedTo": null,
                          "forceRequired": true,
                          "controlType": "button-input",
                          "placeholder": "Select committee",
                          "disabled": "$actionHelper.getFormGroupData('disableForm')",
                          "value": null,
                          "valueType": "item",
                          "valuePath": "committee",
                          "withNullValue": false,
                          "actionTitle": "Committees",
                          "required": "$actionHelper.getFormGroupData('positionType') === 'CommitteeMember'",
                          "buttonActionEmitter": "openCommittees($actionHelper.getActiveDomainId(), $event, formGroup, formsData, evalScope, validatorsByKey)",
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.createRole.committeeId",
                              "messages": {
                                "isRequired": "Committee name is required"
                              }
                            }
                          ],
                          "controlWithApi": true,
                          "controlApiInfo": {
                            "hasManageConrtol": true,
                            "manageControlTitle": "Create Committee",
                            "manageControlLabel": "Committee Name",
                            "manageControlPlaceholder": "Enter committee name",
                            "manageControlAction": "Create Committee"
                          }
                        },
                        {
                          "key": "positionName",
                          "label": "Position Name",
                          "display": true,
                          "disabled": "$actionHelper?.getFormGroupData('positionType') === 'Member'",
                          "relatedValue": "$actionHelper.getFormGroupData('positionType') === 'Member' ? 'Member' : ''",
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter position name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "positionName",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.createRole.role.fields.positionName",
                              "messages": {
                                "isRequired": "Position name is required"
                              }
                            }
                          ],
                          "controlWithApi": false,
                          "controlApiInfo": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Role Information"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "positionType"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "committee"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "positionName"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "editOrganizationRole-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "attributes": {
                "$ngIf": "$actionHelper.getFormGroupData('positionType') === 'CommitteeMember'"
              },
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Edit Role in Organization'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'edit-organization-role-page-header-primitive-back-id'",
                "buttonLabel": "'Save'",
                "buttonLabelId": "'edit-organization-role-page-header-primitive-save-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation {  organization {\n    updateRole(\n      role: {\n        positionName: $templateContext->activeFormArguments.positionName, \n        roleName: $templateContext->activeFormArguments.positionType\n      },\n      id: $templateContext->activeFormArguments.organizationId, \n      committeeId: $templateContext->activeFormArguments.committee, \n      oldCommitteeId:  $templateContext->activeFormArguments.oldCommitteeId                      \n    )\n  }\n}\n",
                  "postAction": "$actionHelper.showToast('Your role was updated successfully'); $actionHelper.goBackPage(['edit-organization-role'])"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event)"
              }
            },
            {
              "element": "page-header-primitive",
              "attributes": {
                "$ngIf": "$actionHelper.getFormGroupData('positionType') !== 'CommitteeMember'"
              },
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Edit Role in Organization'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'edit-organization-role-page-header-primitive-back-id'",
                "buttonLabel": "'Save'",
                "buttonLabelId": "'edit-organization-role-page-header-primitive-save-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation {  organization {\n    updateRole(\n      role: {\n        positionName: $templateContext->activeFormArguments.positionName, \n        roleName: $templateContext->activeFormArguments.positionType\n      },\n      id: $templateContext->activeFormArguments.organizationId, \n      committeeId: $templateContext->activeFormArguments.committee, \n      oldCommitteeId:  $templateContext->activeFormArguments.oldCommitteeId\n    )\n  }\n}\n",
                  "postAction": "$actionHelper.showToast('Your role was updated successfully');  $actionHelper.goBackPage(['edit-organization-role'])"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event)"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "initialData": "dataSource",
                    "formContainerId": "'edit-organization-role-page-form'",
                    "predefineData": "{'organizationId': $actionHelper.getActiveDomainId(), 'userId': dataSource.userId, 'oldCommitteeId': dataSource.committee.id }",
                    "dataSource": {
                      "functions": {
                        "openCommittees": "function(organizationId, $event, formGroup, formsData, evalScope, validatorsByKey) {  this.$dynamicUiExtraService.$actionHelper.$loaderService.present().then((res) => {\n    this.$dynamicUiExtraService.getOrganizationCommittees(this.getGraphQL, organizationId).then(\n      (committees) =>  {                          \n        this.$actionHelper.openModalWithQueryFromReactiveForm('Committees', $event.element, formGroup, formsData, evalScope, committees, (newOption)=> {this.addNewCommittee(organizationId, newOption, committees)}, validatorsByKey);\n        this.$dynamicUiExtraService.$actionHelper.$loaderService.dismiss();\n      }\n    ).catch(()=> {\n      this.$dynamicUiExtraService.$actionHelper.$loaderService.dismiss();\n    }) \n  })      \n}\n",
                        "addNewCommittee": "function(organizationId, committeeName, options) {  this.$actionHelper.$loaderService.present();\n  this.getGraphQL(`\n    mutation {\n      organization {\n        createOrganizationCommitte(name:${JSON.stringify(committeeName)}, id:\"${organizationId}\") {\n          id,\n          name\n        }\n      }\n    }\n  `).then(mutationData => {\n      options.unshift({'id': mutationData.organization.createOrganizationCommitte.id, 'name': mutationData.organization.createOrganizationCommitte.name });\n  }).finally(() => {\n    this.$actionHelper.$loaderService.dismiss();\n  })\n}\n"
                      },
                      "controllers": [
                        {
                          "key": "positionType",
                          "label": "Your role in this organization",
                          "display": true,
                          "relatedTo": "committee",
                          "relatedToSecondField": "positionName",
                          "controlType": "button-input",
                          "placeholder": "Select position type",
                          "value": null,
                          "valueType": "enumeration",
                          "enumerationType": "organizationPositionTypes",
                          "valuePath": "positionType",
                          "withNullValue": false,
                          "actionTitle": "Select Position Type",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select Position Type', $event.element, formGroup, formsData, initialDataSource.organizationPositionTypes, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.updateRole.role.fields.roleName",
                              "messages": {
                                "isRequired": "Position type is required"
                              }
                            }
                          ],
                          "lookups": "positionTypes",
                          "controlWithApi": false,
                          "controlApiInfo": null
                        },
                        {
                          "key": "committee",
                          "label": "Committee Name",
                          "display": "$actionHelper.getFormGroupData('positionType') === 'CommitteeMember'",
                          "relatedTo": null,
                          "forceRequired": true,
                          "controlType": "button-input",
                          "placeholder": "Select committee",
                          "value": null,
                          "valueType": "item",
                          "valuePath": "committee",
                          "withNullValue": false,
                          "actionTitle": "Committees",
                          "required": "$actionHelper.getFormGroupData('positionType') === 'CommitteeMember'",
                          "buttonActionEmitter": "openCommittees($actionHelper.getActiveDomainId(), $event, formGroup, formsData, evalScope, validatorsByKey)",
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.updateRole.committeeId",
                              "messages": {
                                "isRequired": "Committee is required"
                              }
                            }
                          ],
                          "controlWithApi": true,
                          "controlApiInfo": {
                            "hasManageConrtol": true,
                            "manageControlTitle": "Create Committee",
                            "manageControlLabel": "Committee Name",
                            "manageControlPlaceholder": "Enter committee name",
                            "manageControlAction": "Create Committee"
                          }
                        },
                        {
                          "key": "positionName",
                          "label": "Position Name",
                          "display": true,
                          "disabled": "$actionHelper?.getFormGroupData('positionType') === 'Member'",
                          "relatedValue": "$actionHelper.getFormGroupData('positionType') === 'Member' ? 'Member' : ''",
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter position name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "positionName",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.organization.updateRole.role.fields.positionName",
                              "messages": {
                                "isRequired": "Position name is required"
                              }
                            }
                          ],
                          "controlWithApi": false,
                          "controlApiInfo": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Role Information"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "positionType"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "committee"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "positionName"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "addDiplomaticRole-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "attributes": {
                "$ngIf": "$actionHelper.getFormGroupData('positionType') === 'CommitteeMember'"
              },
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Add Role in Diplomatic Mission'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'add-diplomatic-role-page-header-primitive-back-id'",
                "buttonLabel": "'Save'",
                "buttonLabelId": "'add-diplomatic-role-page-header-primitive-save-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation {  diplomaticMissionCommittee {\n    joinMember(\n      id: $templateContext->activeFormArguments.office, \n      diplomaticMissionId: $templateContext->activeFormArguments.diplomaticMissionId, \n      role: {\n        positionName: $templateContext->activeFormArguments.positionName, \n        roleName: $templateContext->activeFormArguments.positionType\n      }\n    )\n  }\n}\n",
                  "postAction": "$actionHelper.showToast('Role added successfully');  $actionHelper.goBackPage(['add-diplomatic-role'])"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event)"
              }
            },
            {
              "element": "page-header-primitive",
              "attributes": {
                "$ngIf": "$actionHelper.getFormGroupData('positionType') !== 'CommitteeMember'"
              },
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Add Role in Diplomatic Mission'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'add-diplomatic-role-page-header-primitive-back-id'",
                "buttonLabel": "'Save'",
                "buttonLabelId": "'add-diplomatic-role-page-header-primitive-save-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation {  diplomaticMission {\n    createRole(\n      id: $templateContext->activeFormArguments.diplomaticMissionId, \n      role: {\n        positionName: $templateContext->activeFormArguments.positionName, \n        roleName: $templateContext->activeFormArguments.positionType\n      }\n    )\n  }\n}\n",
                  "postAction": "$actionHelper.showToast('Role added successfully');  $actionHelper.goBackPage(['add-diplomatic-role'])"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event)"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'add-diplomatic-role-page-form'",
                    "predefineData": "{'diplomaticMissionId': $actionHelper.getActiveDomainId(), 'userId': dataSource.userId, 'disableForm': dataSource.disableForm}",
                    "initialData": "dataSource",
                    "dataSource": {
                      "functions": {
                        "openOffices": "function(diplomaticMissionId, $event, formGroup, formsData, evalScope, validatorsByKey) {  this.$dynamicUiExtraService.$actionHelper.$loaderService.present().then((res) => {\n    this.$dynamicUiExtraService.getDiplomaticOffices(this.getGraphQL, diplomaticMissionId).then(\n      (committees) =>  {                          \n        this.$actionHelper.openModalWithQueryFromReactiveForm('Offices', $event.element, formGroup, formsData, evalScope, committees, null, validatorsByKey);\n        this.$dynamicUiExtraService.$actionHelper.$loaderService.dismiss();\n      }\n    ).catch(()=> {\n      this.$dynamicUiExtraService.$actionHelper.$loaderService.dismiss();\n    })\n  })          \n}\n"
                      },
                      "controllers": [
                        {
                          "key": "positionType",
                          "label": "Your role in this diplomatic mission",
                          "display": true,
                          "relatedTo": "office",
                          "relatedToSecondField": "positionName",
                          "controlType": "button-input",
                          "placeholder": "Select position type",
                          "disabled": "$actionHelper.getFormGroupData('disableForm')",
                          "value": null,
                          "valueType": "lookup",
                          "enumerationType": "diplomaticPositionMissionTypes",
                          "valuePath": "positionType",
                          "withNullValue": false,
                          "actionTitle": "Select Position Type",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select Position Type', $event.element, formGroup, formsData, initialDataSource.diplomaticPositionMissionTypes, evalScope, validatorsByKey)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.createRole.role.fields.roleName",
                              "messages": {
                                "isRequired": "Position type is required"
                              }
                            }
                          ],
                          "lookups": "positionTypes",
                          "controlWithApi": false,
                          "controlApiInfo": null
                        },
                        {
                          "key": "office",
                          "label": "Office Name",
                          "display": "$actionHelper.getFormGroupData('positionType') === 'CommitteeMember'",
                          "relatedTo": null,
                          "forceRequired": true,
                          "controlType": "button-input",
                          "placeholder": "Select office",
                          "disabled": "$actionHelper.getFormGroupData('disableForm')",
                          "value": null,
                          "valueType": "item",
                          "valuePath": "office",
                          "withNullValue": false,
                          "actionTitle": "Offices",
                          "required": "$actionHelper.getFormGroupData('positionType') === 'CommitteeMember'",
                          "buttonActionEmitter": "openOffices($actionHelper.getActiveDomainId(), $event, formGroup, formsData, evalScope, validatorsByKey)",
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.createRole.committeeId",
                              "messages": {
                                "isRequired": "Office name is required"
                              }
                            }
                          ],
                          "controlWithApi": true,
                          "controlApiInfo": {
                            "hasManageConrtol": false,
                            "manageControlTitle": null,
                            "manageControlLabel": null,
                            "manageControlPlaceholder": null,
                            "manageControlAction": null
                          }
                        },
                        {
                          "key": "positionName",
                          "label": "Position Name",
                          "display": true,
                          "disabled": "$actionHelper?.getFormGroupData('positionType') === 'Member'",
                          "relatedValue": "$actionHelper.getFormGroupData('positionType') === 'Member' ? 'Diaspora Member' : ''",
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter position name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "positionName",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.createRole.role.fields.positionName",
                              "messages": {
                                "isRequired": "Position name is required"
                              }
                            }
                          ],
                          "controlWithApi": false,
                          "controlApiInfo": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "positionType"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "office"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "positionName"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "editDiplomaticRole-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "attributes": {
                "$ngIf": "$actionHelper.getFormGroupData('positionType') === 'CommitteeMember'"
              },
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Edit Diplomatic Mission Role'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'edit-diplomatic-role-page-header-primitive-back-id'",
                "buttonLabel": "'Save'",
                "buttonLabelId": "'edit-diplomatic-role-page-header-primitive-save-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation {  diplomaticMission {\n    updateRole(\n      role: {\n        positionName: $templateContext->activeFormArguments.positionName, \n        roleName: $templateContext->activeFormArguments.positionType\n      },\n      id: $templateContext->activeFormArguments.diplomaticMissionId,\n      committeeId: $templateContext->activeFormArguments.office, \n      oldCommitteeId:  $templateContext->activeFormArguments.oldCommitteeId                      \n    )\n  }\n}\n",
                  "postAction": "$actionHelper.showToast('Your role was updated successfully');  $actionHelper.goBackPage(['edit-diplomatic-role'])"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event)"
              }
            },
            {
              "element": "page-header-primitive",
              "attributes": {
                "$ngIf": "$actionHelper.getFormGroupData('positionType') !== 'CommitteeMember'"
              },
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Edit Diplomatic Mission Role'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'edit-diplomatic-role-page-header-primitive-back-id'",
                "buttonLabel": "'Save'",
                "buttonLabelId": "'edit-diplomatic-role-page-header-primitive-save-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation {  diplomaticMission {\n    updateRole(\n      role: {\n        positionName: $templateContext->activeFormArguments.positionName, \n        roleName: $templateContext->activeFormArguments.positionType\n      },\n      id: $templateContext->activeFormArguments.diplomaticMissionId, \n      committeeId: $templateContext->activeFormArguments.office, \n      oldCommitteeId:  $templateContext->activeFormArguments.oldCommitteeId\n    )\n  }\n}\n",
                  "postAction": " $actionHelper.showToast('Your role was updated successfully');  $actionHelper.goBackPage(['edit-diplomatic-role'])"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event)"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'edit-diplomatic-role-page-form'",
                    "initialData": "dataSource",
                    "predefineData": "{'diplomaticMissionId':  $actionHelper.getActiveDomainId(), 'userId': dataSource.userId, 'oldCommitteeId': dataSource.office.id }",
                    "dataSource": {
                      "functions": {
                        "openOffices": "function(diplomaticMissionId, $event, formGroup, formsData, evalScope, validatorsByKey) {  this.$dynamicUiExtraService.$actionHelper.$loaderService.present().then((res) => {\n    this.$dynamicUiExtraService.getDiplomaticOffices(this.getGraphQL, diplomaticMissionId).then(\n      (committees) =>  {                          \n        this.$actionHelper.openModalWithQueryFromReactiveForm('Offices', $event.element, formGroup, formsData, evalScope, committees, null, validatorsByKey);\n        this.$dynamicUiExtraService.$actionHelper.$loaderService.dismiss();\n      }\n    ).catch(()=> {\n      this.$dynamicUiExtraService.$actionHelper.$loaderService.dismiss();\n    })\n  })         \n}\n"
                      },
                      "controllers": [
                        {
                          "key": "positionType",
                          "label": "Your role in this diplomatic mission",
                          "display": true,
                          "relatedTo": "office",
                          "relatedToSecondField": "positionName",
                          "controlType": "button-input",
                          "placeholder": "Select position type",
                          "value": null,
                          "valueType": "enumeration",
                          "enumerationType": "diplomaticPositionMissionTypes",
                          "valuePath": "positionType",
                          "withNullValue": false,
                          "actionTitle": "Select Position Type",
                          "required": true,
                          "buttonActionEmitter": "$actionHelper.openModalFromReactiveForm('Select Position Type', $event.element, formGroup, formsData, initialDataSource.diplomaticPositionMissionTypes, evalScope, validatorsByKey)",
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.updateRole.role.fields.roleName",
                              "messages": {
                                "isRequired": "Position type is required"
                              }
                            }
                          ],
                          "lookups": "positionTypes",
                          "controlWithApi": false,
                          "controlApiInfo": null
                        },
                        {
                          "key": "office",
                          "label": "Office Name",
                          "display": "$actionHelper.getFormGroupData('positionType') === 'CommitteeMember'",
                          "relatedTo": null,
                          "controlType": "button-input",
                          "forceRequired": true,
                          "placeholder": "Select office",
                          "value": null,
                          "valueType": "item",
                          "valuePath": "office",
                          "withNullValue": false,
                          "actionTitle": "Offices",
                          "required": "$actionHelper.getFormGroupData('positionType') === 'CommitteeMember'",
                          "buttonActionEmitter": "openOffices($actionHelper.getActiveDomainId(), $event, formGroup, formsData, evalScope, validatorsByKey)",
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.updateRole.committeeId",
                              "messages": {
                                "isRequired": "Office is required"
                              }
                            }
                          ],
                          "controlWithApi": true,
                          "controlApiInfo": {
                            "hasManageConrtol": false,
                            "manageControlTitle": null,
                            "manageControlLabel": null,
                            "manageControlPlaceholder": null,
                            "manageControlAction": null
                          }
                        },
                        {
                          "key": "positionName",
                          "label": "Position Name",
                          "display": true,
                          "disabled": "$actionHelper?.getFormGroupData('positionType') === 'Member'",
                          "relatedValue": "$actionHelper.getFormGroupData('positionType') === 'Member' ? 'Diaspora Member' : ''",
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter position name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "positionName",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.diplomaticMission.updateRole.role.fields.positionName",
                              "messages": {
                                "isRequired": "Position name is required"
                              }
                            }
                          ],
                          "controlWithApi": false,
                          "controlApiInfo": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "positionType"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "office"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "positionName"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "tabs-template",
      "templateDefinition": [
        {
          "element": "tabs-primitive",
          "properties": {
            "applicationTabs": "$actionHelper.uiDefinition.applicationTabs"
          }
        }
      ]
    },
    {
      "name": "marketplace-page-template",
      "templateDefinition": [
        {
          "element": "h1",
          "properties": {
            "$innerHTML": "'Market Place Page'"
          }
        }
      ]
    },
    {
      "name": "conversations-page-template",
      "functions": {
        "getMailboxMessages": "async function(mailbox, dataSource, $dynamicUiExtraService, $actionHelper) {  $actionHelper.$loaderService.present().then(async (res) => {\n    const messagesResponse = await $dynamicUiExtraService.getMailboxConversations(mailbox.lookupId);\n    const messages = messagesResponse.messages;\n    const cursor = messagesResponse.cursor; \n    dataSource.messages = messages;\n    dataSource.cursor = cursor;\n    dataSource.targetMailbox = mailbox;\n    $dynamicUiExtraService.saveSelectedMailbox(mailbox.lookupId);\n    $actionHelper.$loaderService.dismiss();\n  });\n}\n",
        "goToConversationMessages": "function(dataSource, item) {  item.totalUnreadMessages = 0 ;\n  let receiverMailboxId;\n  let targetType;\n  let targetId;\n\n  if(dataSource.targetMailbox.lookupId === item.receiverMailboxId) {\n    receiverMailboxId = item.senderMailboxId;\n    targetType = item.senderMailboxOwnerType;\n    targetId = item.senderMailboxOwnerId;          \n  } else {\n    receiverMailboxId = item.receiverMailboxId;\n    targetType = item.receiverMailboxOwnerType;\n    targetId = item.receiverMailboxOwnerId;          \n  }\n\n  $actionHelper.navigateTo('conversationMessages/' + targetType +  '/'+ targetId + '/' + dataSource.targetMailbox.lookupId + '/' + receiverMailboxId)\n}\n"
      },
      "changeDetectionSubjects": [
        "delete-conversation",
        "add-message",
        "create-company",
        "create-organization",
        "add-organizaiton-role",
        "add-business-role",
        "add-diplomatic-role",
        "add-committee-member",
        "remove-committee-member",
        "delete-commiteee",
        "add-organization-administrators",
        "manage-organization-administrators",
        "manage-organization-team-members",
        "manage-company-team-members",
        "manage-company-administrators",
        "add-company-administrators",
        "add-office-member",
        "remove-office-member",
        "delete-office",
        "add-diplomaticMission-administrators",
        "manage-diplomaticMission-administrators",
        "manage-diplomaticMission-key-staff"
      ],
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "animated-skeleton-loading"
          },
          "children": [
            {
              "element": "skeleton-primitive",
              "properties": {
                "skeletonType": "'item-list-skeleton-hint'",
                "withMainCardSkeleton": true
              },
              "attributes": {
                "class": "{{isLoading ? '' : 'hidden'}}"
              }
            },
            {
              "element": "div",
              "attributes": {
                "class": "resize-page-templates-container"
              },
              "children": [
                {
                  "element": "page-header-primitive",
                  "properties": {
                    "headerType": "'HeaderWithModalAction'",
                    "leftImage": "dataSource?.targetMailbox?.thumbnail",
                    "title": "dataSource?.targetMailbox?.name",
                    "actionLabel": "'Select Mailbox'",
                    "actionLabelId": "'Select Mailbox'",
                    "showBadge": "dataSource?.showBadge",
                    "modalIcon": "'assets/icon/dynamic-ui/Arrow_Down_Green.svg'",
                    "options": "dataSource?.mailboxes"
                  },
                  "events": {
                    "rightActionEmitter": "this.getMailboxMessages($event, dataSource, $dynamicUiExtraService, $actionHelper)"
                  }
                },
                {
                  "element": "ion-content",
                  "attributes": {
                    "class": "with-header-tabs"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "dataSource?.messages && dataSource?.messages?.length > 0"
                      },
                      "children": [
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'message-list'",
                            "arrayOfItems": "dataSource?.messages"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "message-list-template",
                                  "events": {
                                    "click": "this.goToConversationMessages(dataSource, item)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'tab-conversation-item', 'actionIcon': 'assets/icon/dynamic-ui/Arrow_Right_Grey.svg'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource?.cursor"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreMailboxConversations($event, this, 'mailBox', dataSource.targetMailbox.lookupId, 'conversations', dataSource.cursor, dataSource, 'cursor', 'messages')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!dataSource?.messages || dataSource?.messages?.length === 0"
                      },
                      "properties": {
                        "image": "'assets/empty-state/Messages.svg'",
                        "imageId": "'tab-conversation-page-empty-state-primitive-image-id'",
                        "titleId": "'tab-conversation-page-empty-state-primitive-title-id'",
                        "title": "'No Conversations'",
                        "subtitle": "'You haven’t received any messages yet'",
                        "subTitleId": "'tab-conversation-page-empty-state-primitive-subtitle-id'"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "town-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkMainEntity(this.dataSource, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.electedMembers, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.ambassadors, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.members, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.admins, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "changeDetectionSubjects": [
        "edit-municipality",
        "manage-municipality-administrators",
        "add-municipality-administrators",
        "apply-to-municipality-ambassador",
        "add-post",
        "add-event",
        "add-media",
        "delete-image",
        "edit-post",
        "delete-post"
      ],
      "templateDefinition": [
        {
          "element": "ion-content",
          "attributes": {
            "class": "{{ (dataSource?.canManage || dataSource.myHomeTown) ? 'animated-skeleton-loading grayBg full-screen with-fabButton' : 'animated-skeleton-loading grayBg full-screen'}}"
          },
          "children": [
            {
              "element": "skeleton-primitive",
              "properties": {
                "skeletonType": "'domain-page-skeleton'",
                "skeletonClass": "'no-badge'"
              },
              "attributes": {
                "class": "{{isLoading ? '' : 'hidden'}}"
              }
            },
            {
              "element": "div",
              "attributes": {
                "class": null
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "main-card-seperator"
                  },
                  "children": [
                    {
                      "element": "main-card-primitive",
                      "children": [
                        {
                          "element": "cover-image-primitive",
                          "properties": {
                            "coverImageUrl": "$dynamicUiExtraService.getTownImage(dataSource)",
                            "hasTopBar": true,
                            "overlayType": "'accent-one'",
                            "topBarType": "'simple_top_bar'",
                            "leftIcon": "'assets/icon/dynamic-ui/Back_White.svg'",
                            "leftIconId": "'town-page-cover-image-primitive-back-id'",
                            "rightIcon": "'assets/icon/dynamic-ui/Dots_White.svg'",
                            "rightIconId": "'town-page-cover-image-primitive-dots-id'"
                          },
                          "events": {
                            "actionEmitter": "$actionHelper.showImage($dynamicUiExtraService.getTownMainImage(dataSource), $dynamicUiExtraService.getTownId(dataSource), $dynamicUiExtraService.getTownName(dataSource))",
                            "leftActionEmitter": "$actionHelper.goBackPage()",
                            "rightActionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource.mainTownActions, null, dataSource, {'loggedinFirstName': initialDataSource.firstName, 'loggedinLastName': initialDataSource.lastName})"
                          }
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "profile-With-only-actions"
                          },
                          "children": [
                            {
                              "element": "title-primitive",
                              "properties": {
                                "title": "$dynamicUiExtraService.getTownName(dataSource)",
                                "titleId": "'town-page-title-primitive-title-id'",
                                "titleColor": "'accent-one'"
                              }
                            },
                            {
                              "element": "badges-primitive",
                              "properties": {
                                "badgeContainerId": "'town-page-badges-primitive'",
                                "badges": "dataSource?.badges"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "main-buttons-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.canManage"
                      },
                      "properties": {
                        "leftButtonTitle": "'Manage'",
                        "leftButtonTitleId": "'town-page-main-buttons-primitive-manage-id'",
                        "leftButtonIcon": "'assets/icon/dynamic-ui/Manage_Green.svg'",
                        "leftButtonDisabled": "!dataSource?.canManage",
                        "rightButtonTitle": "'Invite'",
                        "rightButtonTitleId": "'town-page-main-buttons-primitive-invite-id'",
                        "rightButtonIcon": "'assets/icon/dynamic-ui/Invite_Green.svg'",
                        "rightButtonDisabled": "!dataSource?.canInvite",
                        "mainCardCalss": "'padding-0'"
                      },
                      "events": {
                        "leftButtonActionEmitter": "$actionHelper.navigateTo('town/manageTown/' + $dynamicUiExtraService.getTownId(dataSource))",
                        "rightButtonActionEmitter": "$actionHelper.share(\ninitialDataSource.firstName + ' ' + initialDataSource.lastName + ' is inviting you to join the global community of ' + $dynamicUiExtraService.getTownName(dataSource) + ' on DiasporaID. Contact the municipality or mukhtars. Meet influential diaspora hailing from your town, Don’t miss out!',\n$dynamicUiExtraService.getTownImage(dataSource),\ninitialDataSource.firstName + ' ' + initialDataSource.lastName + ' Is Inviting You to ' + $dynamicUiExtraService.getTownName(dataSource) + ' on DiasporaID',\n'The Global Lebanese Network',\ndataSource.cityOriginId, 'InviteToTown')"
                      }
                    },
                    {
                      "element": "main-buttons-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.canFollow && !dataSource?.canUnFollow && !dataSource?.canManage && !dataSource?.canInvite"
                      },
                      "properties": {
                        "leftButtonTitle": "'Follow'",
                        "leftButtonTitleId": "'town-page-main-buttons-primitive-follow-id'",
                        "leftButtonIcon": "'assets/icon/dynamic-ui/follow_white.svg'",
                        "rightButtonTitle": "'Message'",
                        "rightButtonTitleId": "'town-page-main-buttons-primitive-message-id'",
                        "rightButtonIcon": "'assets/icon/dynamic-ui/message.svg'",
                        "rightButtonDisabled": "!dataSource?.canSendMessage",
                        "mainCardCalss": "'padding-0'"
                      },
                      "events": {
                        "leftButtonActionEmitter": "$actionHelper.linkDomain('Municipality', $dynamicUiExtraService.getTownId(dataSource), dataSource)",
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('conversationMessages/municipality/' + $dynamicUiExtraService.getTownId(dataSource) + '/' + initialDataSource.userMailboxId + '/' + dataSource.receiverMailboxId)"
                      }
                    },
                    {
                      "element": "main-buttons-primitive",
                      "attributes": {
                        "$ngIf": "!dataSource?.canFollow && dataSource?.canUnFollow && !dataSource?.canManage && !dataSource?.canInvite"
                      },
                      "properties": {
                        "leftButtonTitle": "'Following'",
                        "leftButtonIcon": "'assets/icon/dynamic-ui/Following_white.svg'",
                        "leftButtonTitleId": "'town-page-main-buttons-primitive-following-id'",
                        "leftButtonDisabled": "!dataSource?.canUnFollow",
                        "rightButtonTitle": "'Message'",
                        "rightButtonTitleId": "'town-page-main-buttons-primitive-message-id'",
                        "rightButtonIcon": "'assets/icon/dynamic-ui/message.svg'",
                        "rightButtonDisabled": "!dataSource?.canSendMessage",
                        "mainCardCalss": "'padding-0'"
                      },
                      "events": {
                        "leftButtonActionEmitter": "$actionHelper.unLinkDomain('Municipality', $dynamicUiExtraService.getTownId(dataSource), dataSource)",
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('conversationMessages/municipality/' + $dynamicUiExtraService.getTownId(dataSource) + '/' + initialDataSource.userMailboxId + '/' + dataSource.receiverMailboxId)"
                      }
                    },
                    {
                      "element": "main-buttons-primitive",
                      "attributes": {
                        "$ngIf": "!dataSource?.canManage && dataSource?.canInvite"
                      },
                      "properties": {
                        "leftButtonTitle": "'Invite'",
                        "leftButtonTitleId": "'town-page-main-buttons-primitive-invite-id'",
                        "leftButtonIcon": "'assets/icon/dynamic-ui/Invite.svg'",
                        "rightButtonTitle": "'Message'",
                        "rightButtonTitleId": "'town-page-main-buttons-primitive-message-id'",
                        "rightButtonIcon": "'assets/icon/dynamic-ui/message.svg'",
                        "rightButtonDisabled": "!dataSource?.canSendMessage",
                        "mainCardCalss": "'padding-0'"
                      },
                      "events": {
                        "leftButtonActionEmitter": "$actionHelper.share(\ninitialDataSource.firstName + ' ' + initialDataSource.lastName + ' is inviting you to join the global community of ' + $dynamicUiExtraService.getTownName(dataSource) + ' on DiasporaID. Contact the municipality or mukhtars. Meet influential diaspora hailing from your town, Don’t miss out!',\n$dynamicUiExtraService.getTownImage(dataSource),\ninitialDataSource.firstName + ' ' + initialDataSource.lastName + ' Is Inviting You to ' + $dynamicUiExtraService.getTownName(dataSource)  + ' on DiasporaID',\n'The Global Lebanese Network',\ndataSource.cityOriginId, 'InviteToTown')",
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('conversationMessages/municipality/' + $dynamicUiExtraService.getTownId(dataSource) + '/' + initialDataSource.userMailboxId + '/' + dataSource.receiverMailboxId)"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.generalDetailsInfo && dataSource?.generalDetailsInfo.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/About_Active.svg'",
                        "mainIconId": "'town-page-about-section-block-header-primitive-main-icon-id'",
                        "title": "'About'",
                        "titleId": "'town-page-about-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Municipality & town info'",
                        "subTitleId": "'town-page-about-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "dataSource?.canManage",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'town-page-about-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "'Edit'",
                        "actionLabelId": "'town-page-about-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('town/edit/' + $dynamicUiExtraService.getTownId(dataSource))"
                      }
                    },
                    {
                      "element": "about-primitive",
                      "properties": {
                        "aboutUsContainerId": "'town-page-about-us-primitive'",
                        "aboutUsItems": "dataSource?.generalDetailsInfo",
                        "characterLimit": 500,
                        "unTruncatedText": "'Show More'",
                        "truncatedText": "'Show Less'"
                      },
                      "events": {
                        "emptyStateActionEmitter": "(dataSource?.canManage) ? $actionHelper.navigateTo('town/edit/' + $dynamicUiExtraService.getTownId(dataSource)) : null"
                      }
                    },
                    {
                      "element": "social-media-strip-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.canManage) || (!dataSource?.canManage && dataSource?.socialMediaInfo && dataSource?.socialMediaInfo.length > 0)"
                      },
                      "properties": {
                        "socialMediaContainerId": "'town-page-social-media-strip-primitive'",
                        "socialMediaItems": "dataSource?.socialMediaInfo",
                        "showEmptyState": "dataSource?.canManage",
                        "icon": "'assets/icon/dynamic-ui/Social.svg'",
                        "iconId": "'town-page-social-media-strip-primitive-icon-id'",
                        "title": "'Social Media'",
                        "titleId": "'town-page-social-media-strip-primitive-title-id'",
                        "emptyStateMessage": "'Add Social Media Links'",
                        "emptyStateMessageId": "'town-page-social-media-strip-primitive-empty-state-message-id'"
                      },
                      "events": {
                        "emptyStateActionEmitter": "(dataSource?.canManage) ? $actionHelper.navigateTo('town/edit/' + $dynamicUiExtraService.getTownId(dataSource)) : null"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "id": "official-section-id",
                    "$ngIf": "(dataSource?.electedMembers && dataSource?.electedMembers.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/municipality.svg'",
                        "mainIconId": "'town-page-elected-members-section-block-header-primitive-main-icon-id'",
                        "title": "'Municipality & Mukhtars'",
                        "titleId": "'town-page-elected-members-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Mayor, mukhtars, elected members'",
                        "subTitleId": "'town-page-elected-members-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": false
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.electedMembers"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('profile/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'town-page-elected-members-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'town-page-elected-members-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'town-page-elected-members-action', 'actionClass': 'l-icon' }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "(dataSource?.ambassadors && dataSource?.ambassadors.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/ambassador-member.svg'",
                        "mainIconId": "'town-page-ambassadors-section-block-header-primitive-main-icon-id'",
                        "title": "'Town Ambassadors'",
                        "titleId": "'town-page-ambassadors-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Representing the town & its people'",
                        "subTitleId": "'town-page-ambassadors-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": false
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.ambassadors"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('profile/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'town-page-ambassadors-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'town-page-ambassadors-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'town-page-ambassadors-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor box-type",
                    "$ngIf": "dataSource?.canApplyToBeAmbassadorAction"
                  },
                  "children": [
                    {
                      "element": "box-card-primitive",
                      "properties": {
                        "title": "'Become Your Town’s Ambassador'",
                        "titleId": "'town-page-apply-to-be-ambassador-title-id'",
                        "subTitle": "'Be your community’s champion. Network with the Diaspora and assist the town in enriching your town’s page'",
                        "subTitleId": "'town-page-apply-to-be-ambassador-subtitle-id'",
                        "arrayOfItems": "initialDataSource?.ambassadorBoxActions"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#boxItemsTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "box-template",
                              "events": {
                                "click": "$actionHelper.navigateToSubPage('town/applyToBeAmbassadorNotes')"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'town-page-apply-to-be-ambassador', 'topNetworker': false, 'lastIcon': 'assets/icon/dynamic-ui/Arrow_Right.svg' }"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "(dataSource?.members && dataSource?.members.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/People_Active.svg'",
                        "mainIconId": "'town-page-members-section-block-header-primitive-main-icon-id'",
                        "title": "'From this town'",
                        "titleId": "'town-page-members-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'People from here'",
                        "subTitleId": "'town-page-members-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": true,
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'town-page-members-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "'More'",
                        "actionLabelId": "'town-page-members-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('town/members/' + $dynamicUiExtraService.getTownId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.members"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('profile/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'town-page-members-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'town-page-members-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'town-page-members-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "(dataSource?.admins && dataSource?.admins.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/administrators.svg'",
                        "mainIconId": "'town-page-admins-section-block-header-primitive-main-icon-id'",
                        "title": "'Administrators'",
                        "titleId": "'town-page-admins-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Town page administrators'",
                        "subTitleId": "'town-page-admins-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.admins && dataSource?.admins.length > 0) || (!dataSource?.canManage && dataSource?.admins && dataSource?.admins.length > 0) ? true : false ",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'town-page-admins-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'town-page-admins-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "dataSource?.canManage ? $actionHelper.navigateTo('town/manageTownAdministrator/' + $dynamicUiExtraService.getTownId(dataSource)) : $actionHelper.navigateTo('town/viewTownAdministrator/' + $dynamicUiExtraService.getTownId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.admins"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('profile/' + item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'town-page-admins-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'town-page-admins-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'town-page-admins-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "(dataSource?.canManage && (dataSource?.canAddPost || dataSource?.canAddEvent)) || (dataSource?.myHomeTown) || (!dataSource?.canManage && dataSource?.updates && dataSource?.updates.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/News_Active.svg'",
                        "mainIconId": "'town-page-updates-section-block-header-primitive-main-icon-id'",
                        "title": "'Updates'",
                        "titleId": "'town-page-updates-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Posts, events & discussions'",
                        "subTitleId": "'town-page-updates-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "(dataSource?.canManage && dataSource?.updates && dataSource?.updates.length > 0) || (!dataSource?.canManage && dataSource?.updates && dataSource?.updates.length > 0) ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'town-page-updates-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'town-page-updates-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('updates/municipality/' + $dynamicUiExtraService.getTownId(dataSource))"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "attributes": {
                        "$ngIf": "dataSource?.updates && dataSource?.updates.length > 0"
                      },
                      "properties": {
                        "listType": "'news-list'",
                        "arrayOfItems": "dataSource?.updates"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "list-with-right-image-template",
                              "events": {
                                "click": "$actionHelper.navigateTo(item.type == 'Post' ? ('postDetails/' + item.id) : ('eventDetails/' + item.id))"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'town-page-updates-item' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.canManage || dataSource?.myHomeTown) && (!dataSource?.updates || dataSource?.updates.length === 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Post_Update.svg'",
                        "imageId": "'town-page-updates-section-empty-state-primitive-image-id'",
                        "title": "'Town members look forward to updates from their hometown'",
                        "titleId": "'town-page-updates-section-empty-state-primitive-title-id'",
                        "buttonLabel": "(dataSource?.canAddPost || dataSource?.canAddEvent) ? 'Post News or Events' : null",
                        "buttonId": "'town-page-updates-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource.townNewsAndEventActions, null, dataSource, {targetId: $dynamicUiExtraService.getTownId(dataSource), targetName: $dynamicUiExtraService.getTownName(dataSource), targetImage: $dynamicUiExtraService.getTownImage(dataSource)} )"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "(dataSource?.geoLocationInfo && dataSource?.geoLocationInfo.length > 0) || dataSource?.municipality?.geoCoordinates"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/map-compass.svg'",
                        "mainIconId": "'town-page-geolocation-section-block-header-primitive-main-icon-id'",
                        "title": "'Location Information'",
                        "titleId": "'town-page-geolocation-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Geographical information'",
                        "subTitleId": "'town-page-geolocation-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": false
                      }
                    },
                    {
                      "element": "geo-location-primitive",
                      "properties": {
                        "containerId": "'town-page-geolocation'",
                        "items": "dataSource?.geoLocationInfo",
                        "geoCoordinates": "dataSource?.municipality?.geoCoordinates",
                        "buttonLabel": "'View on Map'",
                        "emptyStateLabel": "'No geographical info'"
                      },
                      "events": {
                        "mapActionEmitter": "$actionHelper.navigateTo('geolocation')"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "(dataSource?.etymology && dataSource?.etymology.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/etymology.svg'",
                        "mainIconId": "'town-page-etymology-section-block-header-primitive-main-icon-id'",
                        "title": "'Etymology'",
                        "titleId": "'town-page-etymology-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Town name origin'",
                        "subTitleId": "'town-page-etymology-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": false
                      }
                    },
                    {
                      "element": "truncate-text",
                      "attributes": {
                        "class": "etymology-container"
                      },
                      "properties": {
                        "enableHtml": true,
                        "limit": 500,
                        "truncatedTextId": "'town-page-etymology-text-' + dataSource.etymology",
                        "text": "dataSource.etymology",
                        "unTruncatedText": "'Show More'",
                        "truncatedText": "'Show Less'"
                      }
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "dataSource?.towns && dataSource?.towns?.length > 0"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/related_town.svg'",
                        "mainIconId": "'towns-page-towns-section-block-header-primitive-main-icon-id'",
                        "title": "'Towns in municipality'",
                        "titleId": "'towns-page-towns-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Towns under municipal domain'",
                        "subTitleId": "'towns-page-towns-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'"
                      }
                    },
                    {
                      "element": "chips-primitive",
                      "properties": {
                        "chipsType": "'simple-chips'",
                        "class": "'disabled-chips'",
                        "arrayOfItems": "dataSource?.towns"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#chipItemsTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "simple-chips-template",
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'towns-page-town-item'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "(dataSource?.canUploadMedia) || (!dataSource?.gallery || dataSource?.gallery.length > 0)"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/View_Gallery.svg'",
                        "mainIconId": "'town-page-gallery-section-block-header-primitive-main-icon-id'",
                        "title": "'Media Gallery'",
                        "titleId": "'town-page-gallery-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Photos & videos'",
                        "subTitleId": "'town-page-gallery-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'main-color'",
                        "hasAction": "dataSource?.gallery && dataSource?.gallery.length > 0 ? true : false",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'town-page-gallery-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "dataSource?.canManage ? 'Edit' : 'More'",
                        "actionLabelId": "'town-page-gallery-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('gallery/municipality/' + $dynamicUiExtraService.getTownId(dataSource))"
                      }
                    },
                    {
                      "element": "media-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.gallery && dataSource?.gallery?.length > 0)"
                      },
                      "events": {
                        "click": "$actionHelper.navigateTo('gallery/municipality/' + $dynamicUiExtraService.getTownId(dataSource))"
                      },
                      "properties": {
                        "mediaContainerId": "'town-page-gallery'",
                        "items": "dataSource?.gallery",
                        "youtubeIcon": "'assets/icon/dynamic-ui/YouTube_Video.svg'"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "(dataSource?.canUploadMedia) && (!dataSource?.gallery || dataSource?.gallery.length === 0)"
                      },
                      "properties": {
                        "type": "'emptySectionState'",
                        "image": "'assets/empty-state/Media_Gallery.svg'",
                        "imageId": "'town-page-gallery-section-empty-state-primitive-image-id'",
                        "title": "'Show sights, achievements or projects'",
                        "titleId": "'town-page-gallery-section-empty-state-primitive-title-id'",
                        "buttonLabel": "dataSource?.canUploadMedia ? 'Add Photos or Videos' : null",
                        "buttonId": "'town-page-gallery-section-empty-state-primitive-button-id'"
                      },
                      "events": {
                        "buttonActionEmitter": "$actionHelper.navigateTo('addMedia/' + dataSource?.galleryId, {'canUploadImage': dataSource.canUploadImage, 'canUploadVideoLink': dataSource.canUploadVideoLink, targetId: $dynamicUiExtraService.getTownId(dataSource), targetName: $dynamicUiExtraService.getTownName(dataSource), targetImage: $dynamicUiExtraService.getTownImage(dataSource)})"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "element": "button-primitive",
          "attributes": {
            "$ngIf": "(dataSource?.canManage || (dataSource?.canAddPost || dataSource?.canAddEvent || dataSource?.canUploadMedia) || dataSource?.myHomeTown) ",
            "id": "town-page-fab-button"
          },
          "properties": {
            "type": "'fab-button'",
            "fabButtonId": "'town-fab-button'",
            "icon": "'assets/icon/dynamic-ui/Add_white.svg'"
          },
          "events": {
            "actionEmitter": "$actionHelper.openActionSheetWithConditions(initialDataSource?.townRoleActions, null, dataSource, {targetId: $dynamicUiExtraService.getTownId(dataSource), targetName: $dynamicUiExtraService.getTownName(dataSource), targetImage: $dynamicUiExtraService.getTownImage(dataSource)} )"
          }
        }
      ]
    },
    {
      "name": "editTown-page-template",
      "functions": {
        "uploadPhoto": "function ($id, $event) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $photo: Upload!) {\n        municipality {\n          uploadCover(id: $id, photo: $photo)\n        }\n      }\n    `, {id: $id, photo: $event}).then(uploadResponse => {\n        $actionHelper.showToast('Image updated successfully');\n        $actionHelper.notifiySubscribers(['edit-municipality'], false); \n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'",
            "skeletonClass": "'with-full-image'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Town Information'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'edit-town-page-header-primitive-back-id'",
                "buttonLabel": "'Save'",
                "buttonLabelId": "'edit-town-page-header-primitive-save-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "action": {
                  "query": "mutation {  municipality {\n    update(id: $templateContext->activeFormArguments.municipalityId, \n      model: \n      {\n        about: $templateContext->activeFormArguments.description,\n        history: $templateContext->activeFormArguments.history,\n        etymology: $templateContext->activeFormArguments.etymology,\n        contactUs: {\n          email: $templateContext->activeFormArguments.email,\n          phoneNumber: {\n            countryCode: $templateContext->activeFormArguments.countryCode,\n            isoCode: $templateContext->activeFormArguments.isoCode,\n            number: $templateContext->activeFormArguments.phoneNumber\n          },                            \n          poBox: $templateContext->activeFormArguments.poBox,\n          website: $templateContext->activeFormArguments.website\n        },\n        socialMedia: {\n          facebook: $templateContext->activeFormArguments.facebook,\n          instagram: $templateContext->activeFormArguments.instagram,\n          twitter: $templateContext->activeFormArguments.twitter\n        }  \n      }\n    ) \n    {\n      id\n    }\n  }\n}\n",
                  "postAction": "$actionHelper.showToast('Town details updated successfully'); $actionHelper.notifiySubscribers(['edit-municipality'], true);\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event)"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'edit-town-page-form'",
                    "predefineData": "{'municipalityId': $actionHelper.getActiveDomainId()}",
                    "formWithImage": "dataSource.actions.canUploadCover",
                    "isThumbnailImage": false,
                    "imageChooserActionLabel": "'Change Cover Photo'",
                    "initialData": "dataSource.municipality",
                    "imageFormControlName": "'Image'",
                    "isRequiredImage": false,
                    "imageValue": "'photoCover.imageThumbnailUrl'",
                    "avatarName": "'title'",
                    "withBeforeInitFunction": true,
                    "imageSchemaValidationPath": "'mutation.municipality.uploadCover.photo'",
                    "dataSource": {
                      "functions": {
                        "beforeInit": "function() {  return this.$actionHelper.prepareLookups()\n}\n"
                      },
                      "controllers": [
                        {
                          "key": "description",
                          "label": "Town Description",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "textarea",
                          "placeholder": "Add a town introduction",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "about",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.municipality.update.model.fields.about",
                              "messages": {
                                "maxLength": "15000 Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "etymology",
                          "label": "Etymology",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "textarea",
                          "placeholder": "Explain the town name origin",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "etymology",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.municipality.update.model.fields.etymology",
                              "messages": {
                                "maxLength": "15000 Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "history",
                          "label": "History",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "textarea",
                          "placeholder": "Enter a historical overview of the town",
                          "class": "margin-bottom-14",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "history",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.municipality.update.model.fields.history",
                              "messages": {
                                "maxLength": "15000 Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "countryCode",
                          "label": "Phone Number",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Country Code",
                          "countryIsoCodeKey": "isoCode",
                          "countryIsoCodePath": "contactUs.phone.isoCode",
                          "value": null,
                          "valueType": "phoneCountry",
                          "valuePath": "contactUs.phone",
                          "defaultValue": "country",
                          "withNullValue": false,
                          "actionTitle": "Select Country",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openCountriesModal('Select Country', $event.element, formGroup, phoneCountries, true)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.municipality.update.model.fields.contactUs.fields.phoneNumber.fields.countryCode",
                              "messages": {
                                "isRequired": "Country code is required"
                              }
                            }
                          ],
                          "lookups": "phoneCountry",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "phoneNumber",
                          "label": null,
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "number",
                          "placeholder": "Phone number",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.phone.number",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.municipality.update.model.fields.contactUs.fields.phoneNumber.fields.number",
                              "messages": {
                                "isRequired": "Phone number is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "email",
                          "label": "Contact Email",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "email",
                          "placeholder": "Alternative email for notifications",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.email",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.municipality.update.model.fields.contactUs.fields.email",
                              "messages": {
                                "maxLength": "Character limit reached",
                                "pattern": "Please enter a valid email address"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "website",
                          "label": "Website",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Website link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.website",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.municipality.update.model.fields.contactUs.fields.website",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "poBox",
                          "label": "P.O. Box",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "number",
                          "placeholder": "Please enter the P.O. box number",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "contactUs.poBox",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.municipality.update.model.fields.contactUs.fields.poBox",
                              "messages": {
                                "isRequired": "*town-page.edit-town.form.poBox.validation.required*",
                                "maxLength": "*town-page.edit-town.form.poBox.validation.maxlength*"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "facebook",
                          "label": "Facebook",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Facebook link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.facebook",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Facebook.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.municipality.update.model.fields.socialMedia.fields.facebook",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "instagram",
                          "label": "Instagram",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Instagram link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.instagram",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Instagram.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.municipality.update.model.fields.socialMedia.fields.instagram",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "twitter",
                          "label": "Twitter",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Twitter link",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "socialMedia.twitter",
                          "withNullValue": false,
                          "actionTitle": null,
                          "inputContainerClass": "with-left-icon",
                          "required": false,
                          "icon": "assets/icon/dynamic-ui/Twitter.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.municipality.update.model.fields.socialMedia.fields.twitter",
                              "messages": {
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Basic Information"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "description"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "etymology"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "history"
                            }
                          ]
                        },
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Contact Details"
                            },
                            {
                              "type": "group-input-with-button",
                              "children": [
                                {
                                  "type": "controller",
                                  "controllerKey": "countryCode"
                                },
                                {
                                  "type": "controller",
                                  "controllerKey": "phoneNumber"
                                }
                              ]
                            },
                            {
                              "type": "controller",
                              "controllerKey": "email"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "website"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "poBox"
                            }
                          ]
                        },
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "block-title",
                              "blockTitle": "Social Media"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "facebook"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "instagram"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "twitter"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "events": {
                    "photoActionEmitter": "this.uploadPhoto($actionHelper.getActiveDomainId(), $event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageTown-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Manage Town'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-town-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "card-list-primitive",
                  "properties": {
                    "listType": "'simple-list'",
                    "classList": "'quick-link-content'",
                    "arrayOfItems": "initialDataSource?.permissions?.town"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#itemListTemplate": "",
                        "let-item": "item"
                      },
                      "children": [
                        {
                          "element": "simple-list-template",
                          "events": {
                            "click": "$actionHelper.navigateToSubPage(item.pageUrl)"
                          },
                          "properties": {
                            "dataSource": "{'item': item, 'containerId': 'manage-town-page-permission' }"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "manageTownAdministrators-page-template",
      "changeDetectionSubjects": [
        "add-municipality-administrators"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Page Administrators'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'manage-town-administrator-page-header-primitive-back-id'",
                "rightIcon": "($actionHelper?.checkSearchInputValue() || (dataSource?.admins && dataSource?.admins?.length > 0)) ? 'assets/icon/dynamic-ui/Add_Grey.svg': ''",
                "rightIconId": "'manage-town-administrator-page-header-primitive-add-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "($actionHelper?.checkSearchInputValue() || (dataSource?.admins && dataSource?.admins?.length > 0)) ? $actionHelper.navigateTo('town/addTownAdministrator/' + $actionHelper.getActiveDomainId()): ''"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.admins && dataSource?.admins?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'manage-town-administrator-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n    const result =  {\n    admins: _.get(data, \"municipality.searchAdmins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"municipality.searchAdmins.cursor\")\n  }\n  return result;\n})(data)",
                          "query": "query {  municipality(id: $templateContext->additionalData.municipalityId) {\n    searchAdmins(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.admins = $graphQlResults.admins;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'municipalityId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.admins"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'manage-town-administrator-page-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "events": {
                                "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageTownAdministratorsActions, item, dataSource, {'municipalityId': $actionHelper.getActiveDomainId()})"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', 'itemId': item.title, 'containerId': 'manage-town-administrator-page-action'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'municipality', $activatedRoute.snapshot.params.id, 'admins', dataSource?.cursor, dataSource, 'cursor', 'admins')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'municipality', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchAdmins', dataSource?.cursor, dataSource, 'cursor', 'admins')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.admins || dataSource?.admins?.length == 0)"
                  },
                  "events": {
                    "buttonActionEmitter": "$actionHelper.navigateTo('town/addTownAdministrator/' + $actionHelper.getActiveDomainId())"
                  },
                  "properties": {
                    "title": "'No Page Administrators'",
                    "titleId": "'manage-town-administrator-page-empty-state-primitive-title-id'",
                    "subtitle": "'This page doesn’t have any page administrators. Assign a page member as admin, or invite someone by email'",
                    "subTitleId": "'manage-town-administrator-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'manage-town-administrator-page-empty-state-primitive-image-id'",
                    "buttonLabel": "'Add Page Administrator'",
                    "buttonId": "'manage-town-administrator-page-empty-state-primitive-button-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.admins || dataSource?.admins?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'manage-town-administrator-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'manage-town-administrator-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "addTownAdministrator-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'skeleton-page-with-two-segment'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Add Page Administrator'",
                "headerClass": "'with-no-border'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'add-town-administrator-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "segment-primitive",
              "properties": {
                "segmentContainerId": "'add-town-administrator-page-segment-container-id'",
                "segmentOneLabel": "'Assign Member'",
                "segmentTwoLabel": "'Invite by Email'",
                "segmentClass": "'two-segment'"
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentOneContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.members && dataSource?.members?.length > 0)"
                      },
                      "children": [
                        {
                          "element": "input-primitive",
                          "properties": {
                            "inputType": "'search-input'",
                            "searchInputId": "'add-town-administrator-page-members-search-input-id'",
                            "inputPlaceholder": "'Search this list'",
                            "action": {
                              "dataExpression": "((data) => {\n  const result =  {\n    members: _.get(data, \"municipality.searchMembers.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"municipality.searchMembers.cursor\"),\n  }\n  return result;\n})(data)",
                              "query": "query {  municipality(id: $templateContext->additionalData.municipalityId) {\n    searchMembers(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                              "postAction": "dataSource.members = $graphQlResults.members;  dataSource.cursor = $graphQlResults.cursor;\n"
                            }
                          },
                          "events": {
                            "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'municipalityId': $activatedRoute.snapshot.params.id })"
                          }
                        },
                        {
                          "element": "card-list-primitive",
                          "properties": {
                            "listType": "'simple-list'",
                            "classList": "'list-with-left-image'",
                            "arrayOfItems": "dataSource?.members"
                          },
                          "children": [
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#itemListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "default-list-template",
                                  "events": {
                                    "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                                  },
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'add-town-administrator-page-members-item' }"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "ng-template",
                              "attributes": {
                                "#actionListTemplate": "",
                                "let-item": "item"
                              },
                              "children": [
                                {
                                  "element": "action-template",
                                  "events": {
                                    "click": "$actionHelper.openActionSheetWithConditions(initialDataSource?.manageTownAssignAdministratorActions, item, dataSource, {'municipalityId': $actionHelper.getActiveDomainId()})"
                                  },
                                  "properties": {
                                    "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Dots_Grey.svg', 'itemId': item.title, 'containerId': 'add-town-administrator-page-members-action'}"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'municipality', $activatedRoute.snapshot.params.id, 'members', dataSource?.cursor, dataSource, 'cursor', 'members')"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this,'municipality', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchMembers', dataSource?.cursor, dataSource, 'cursor', 'members')"
                          }
                        }
                      ]
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.members || dataSource?.members?.length == 0)"
                      },
                      "properties": {
                        "title": "'No Members'",
                        "titleId": "'add-town-administrator-page-members-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/Person.svg'",
                        "imageId": "'add-town-administrator-page-members-empty-state-primitive-image-id'"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.members || dataSource?.members?.length == 0)"
                      },
                      "properties": {
                        "title": "'No data found'",
                        "titleId": "'add-town-administrator-page-members-search-empty-state-primitive-title-id'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'add-town-administrator-page-members-search-empty-state-primitive-image-id'"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#segmentTwoContentTemplate": ""
                  },
                  "children": [
                    {
                      "element": "form-primitive",
                      "properties": {
                        "formContainerId": "'add-town-administrator-page-form'",
                        "predefineData": "{'municipalityId': $actionHelper.getActiveDomainId()}",
                        "dataSource": {
                          "controllers": [
                            {
                              "key": "firstName",
                              "label": "First Name",
                              "display": true,
                              "relatedTo": null,
                              "controlType": "input",
                              "type": "text",
                              "placeholder": "Enter first name",
                              "value": null,
                              "withNullValue": false,
                              "actionTitle": null,
                              "required": true,
                              "icon": null,
                              "leftIcon": null,
                              "validators": [
                                {
                                  "name": "fromSchema",
                                  "fieldPath": "mutation.municipality.inviteAdmin.firstName",
                                  "messages": {
                                    "isRequired": "First name is required",
                                    "maxLength": "Character limit reached"
                                  }
                                }
                              ],
                              "controlApi": null,
                              "controlAnotherApi": null
                            },
                            {
                              "key": "lastName",
                              "label": "Last Name",
                              "display": true,
                              "relatedTo": null,
                              "controlType": "input",
                              "type": "text",
                              "placeholder": "Enter last name",
                              "value": null,
                              "withNullValue": false,
                              "actionTitle": null,
                              "required": true,
                              "icon": null,
                              "leftIcon": null,
                              "validators": [
                                {
                                  "name": "fromSchema",
                                  "fieldPath": "mutation.municipality.inviteAdmin.lastName",
                                  "messages": {
                                    "isRequired": "Last name is required",
                                    "maxLength": "Character limit reached"
                                  }
                                }
                              ],
                              "controlApi": null,
                              "controlAnotherApi": null
                            },
                            {
                              "key": "email",
                              "label": "Email Address",
                              "display": true,
                              "relatedTo": null,
                              "controlType": "input",
                              "type": "email",
                              "placeholder": "Enter email address",
                              "value": null,
                              "withNullValue": false,
                              "actionTitle": null,
                              "required": true,
                              "icon": null,
                              "leftIcon": null,
                              "validators": [
                                {
                                  "name": "fromSchema",
                                  "fieldPath": "mutation.municipality.inviteAdmin.email",
                                  "messages": {
                                    "isRequired": "Email is required",
                                    "maxLength": "Character limit reached",
                                    "pattern": "Please enter a valid email address"
                                  }
                                }
                              ],
                              "controlApi": null,
                              "controlAnotherApi": null
                            }
                          ],
                          "template": [
                            {
                              "type": "block-container",
                              "children": [
                                {
                                  "type": "controller",
                                  "controllerKey": "firstName"
                                },
                                {
                                  "type": "controller",
                                  "controllerKey": "lastName"
                                },
                                {
                                  "type": "controller",
                                  "controllerKey": "email"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    },
                    {
                      "element": "button-primitive",
                      "attributes": {
                        "id": "'add-town-administrator-page-submit-action'",
                        "$ngIf": "dataSource.actions.canInviteAdmin"
                      },
                      "properties": {
                        "text": "'Invite to be a Page Administrator'",
                        "disableButton": "!$actionHelper.isValidForm()",
                        "action": {
                          "query": "mutation {  municipality {\n    inviteAdmin(\n      id: $templateContext->activeFormArguments.municipalityId, \n      lastName: $templateContext->activeFormArguments.lastName,\n      firstName: $templateContext->activeFormArguments.firstName, \n      email: $templateContext->activeFormArguments.email,\n      invitationUrl: $templateContext->additionalData.url\n    )\n  }\n}\n",
                          "postAction": "$actionHelper.showToast('Invitation sent successfully');"
                        }
                      },
                      "events": {
                        "actionEmitter": "$actionHelper.invite($event, dataSource?.municipality?.photoCover?.imageThumbnailUrl, 'Your Admin Invitation', 'You have been invited to become a page admin of ' + dataSource?.municipality?.title, dataSource?.municipality?.id, 'DiasporaAdminMunicipality')"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "followersTown-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.followers, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Followers'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'follower-town-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "elemnet": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.followers && dataSource?.followers?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'follower-town-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    followers: _.get(data, \"municipality.searchFollowers.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"municipality.searchFollowers.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  municipality(id: $templateContext->additionalData.municipalityId) {\n    searchFollowers(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.followers = $graphQlResults.followers; dataSource.cursor =  $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'municipalityId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource?.followers"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'follower-town-page-followers-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'follower-town-page-followers-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'follower-town-page-followers-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'municipality', $activatedRoute.snapshot.params.id, 'followers', dataSource?.cursor, dataSource, 'cursor', 'followers')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this,  'municipality', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchFollowers', dataSource?.cursor, dataSource, 'cursor', 'followers')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.followers || dataSource?.followers?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Followers Listed'",
                    "titleId": "'follower-town-page-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'follower-town-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.followers || dataSource?.followers?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'follower-town-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'follower-town-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "membersTown-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.members, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Members'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'member-town-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() || (dataSource?.members && dataSource?.members?.length > 0)"
                  },
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "searchInputId": "'member-town-page-search-input-id'",
                        "inputType": "'search-input'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    members: _.get(data, \"municipality.searchMembers.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"municipality.searchMembers.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  municipality(id: $templateContext->additionalData.municipalityId) {\n    searchMembers(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.members = $graphQlResults.members;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'municipalityId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource.members"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'member-town-page-members-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'member-town-page-members-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'member-town-page-members-action', 'actionClass': 'l-icon' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'municipality', $activatedRoute.snapshot.params.id, 'members', dataSource?.cursor, dataSource, 'cursor', 'members')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this,  'municipality', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchMembers', dataSource?.cursor, dataSource, 'cursor', 'members')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.members || dataSource?.members?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Members Listed'",
                    "titleId": "'member-town-page-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'member-town-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.members || dataSource?.members?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'member-town-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'member-town-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "administratorsTown-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.admins, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'item-list-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Page Administrators'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'administrators-town-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "children": [
                    {
                      "element": "input-primitive",
                      "properties": {
                        "inputType": "'search-input'",
                        "searchInputId": "'administrators-town-page-search-input-id'",
                        "inputPlaceholder": "'Search this list'",
                        "action": {
                          "dataExpression": "((data) => {\n  const result =  {\n    admins: _.get(data, \"municipality.searchAdmins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"municipality.searchAdmins.cursor\"),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
                          "query": "query {  municipality(id: $templateContext->additionalData.municipalityId) {\n    searchAdmins(after: null, first: 10, keyword: $templateContext->keyword) {\n      items {\n        user {\n          id\n          firstName\n          lastName      \n          actions {\n            canFollow\t\n            canUnfollow\n          }\n          ...userImage\n          ...userPlaceDetails\n          ...userFeaturedRole       \n        }\n      }\n      cursor\n    }\n  }\n}\n",
                          "postAction": "dataSource.admins = $graphQlResults.admins;  dataSource.cursor = $graphQlResults.cursor;\n"
                        }
                      },
                      "events": {
                        "onValueChangeEmitter": "$actionHelper.searchByKeyword($event, dataSource, {'municipalityId': $activatedRoute.snapshot.params.id })"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'simple-list'",
                        "classList": "'list-with-left-image'",
                        "arrayOfItems": "dataSource.admins"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'administrators-town-page-administrators-item' }"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'administrators-town-page-administrators-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'administrators-town-page-administrators-action', 'actionClass': 'l-icon' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && !$actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserData($event, this, 'municipality', $activatedRoute.snapshot.params.id, 'admins', dataSource?.cursor, dataSource, 'cursor', 'admins')"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor && $actionHelper.checkSearchInputValue()"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreUserSearchData($event, this, 'municipality', $activatedRoute.snapshot.params.id, $actionHelper.getSearchInputValue(), 'searchAdmins', dataSource?.cursor, dataSource, 'cursor', 'admins')"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "!$actionHelper?.checkSearchInputValue() && (!dataSource?.admins || dataSource?.admins?.length == 0)"
                  },
                  "properties": {
                    "title": "'No Page Administrators'",
                    "titleId": "'administrators-town-page-empty-state-primitive-title-id'",
                    "subtitle": "'This page doesn’t currently have any administrators.'",
                    "subTitleId": "'administrators-town-page-empty-state-primitive-subtitle-id'",
                    "image": "'assets/empty-state/Person.svg'",
                    "imageId": "'administrators-town-page-empty-state-primitive-image-id'"
                  }
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "$actionHelper?.checkSearchInputValue() && (!dataSource?.admins || dataSource?.admins?.length == 0)"
                  },
                  "properties": {
                    "title": "'No data found'",
                    "titleId": "'administrators-town-page-search-empty-state-primitive-title-id'",
                    "image": "'assets/empty-state/list.svg'",
                    "imageId": "'administrators-town-page-search-empty-state-primitive-image-id'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "applyToBeAmbassadorNotes-page-template",
      "templateDefinition": [
        {
          "element": "page-header-primitive",
          "properties": {
            "headerType": "'HeaderForSubPages'",
            "headerClass": "'with-no-border'",
            "title": "''",
            "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
            "leftIconId": "'apply-to-be-ambassador-notes-page-header-primitive-back-id'"
          },
          "events": {
            "leftActionEmitter": "$actionHelper.goBackPage()"
          }
        },
        {
          "element": "ion-content",
          "children": [
            {
              "element": "div",
              "attributes": {
                "class": "apply-page-header"
              },
              "children": [
                {
                  "element": null,
                  "attributes": {
                    "class": "apply-page-header-container"
                  },
                  "children": [
                    {
                      "element": "img",
                      "attributes": {
                        "id": "apply-to-be-ambassador-notes-page-hint-img",
                        "src": "assets/icon/dynamic-ui/Town_Ambassador.svg",
                        "class": "apply-page-image"
                      }
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "id": "apply-to-be-ambassador-notes-page-hint-title",
                        "class": "apply-page-header-title"
                      },
                      "properties": {
                        "$innerHTML": "'Become Your Town’s Ambassador'"
                      }
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "id": "apply-to-be-ambassador-notes-page-hint-subtitle",
                        "class": "apply-page-header-subtitle"
                      },
                      "properties": {
                        "$innerHTML": "'Hometown Ambassadors are representatives of communities and towns on DiasporaID'"
                      }
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "class": "apply-page-button"
                      },
                      "children": [
                        {
                          "element": "button-primitive",
                          "attributes": {
                            "id": "apply-to-be-ambassador-notes-page-apply-action"
                          },
                          "properties": {
                            "text": "'Apply Now'",
                            "classContainer": "'padding-0'"
                          },
                          "events": {
                            "actionEmitter": "$actionHelper.navigateToSubPage('town/applyToBeAmbassadorAction')"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "element": "div",
              "attributes": {
                "class": "apply-page-list",
                "$ngFor": "let note of initialDataSource.townAmbassadorNotes"
              },
              "children": [
                {
                  "element": "img",
                  "attributes": {
                    "id": "{{'apply-to-be-ambassador-notes-page-note-img-' + note}}",
                    "src": "assets/icon/dynamic-ui/Check_Gold.svg"
                  }
                },
                {
                  "element": "div",
                  "attributes": {
                    "id": "{{'apply-to-be-ambassador-notes-page-note-text-' + note}}"
                  },
                  "properties": {
                    "$innerHTML": "note"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "applyToBeAmbassadorAction-page-template",
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Become an Ambassador'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'apply-to-be-ambassador-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "page-hint"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "page-hint-container"
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "id": "apply-to-be-ambassador-page-hint-title-one-id",
                            "class": "page-hint-title"
                          },
                          "properties": {
                            "$innerHTML": "'Apply to become your hometown ambassador'"
                          }
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "id": "apply-to-be-ambassador-page-hint-title-two-id",
                            "class": "page-hint-subtitle"
                          },
                          "properties": {
                            "$innerHTML": "'Please fill in the required fields below and submit your request. We will review it and get back to you!'"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'apply-to-be-ambassador-page-form'",
                    "predefineData": "{'townId': $actionHelper.getActiveDomainId()}",
                    "dataSource": {
                      "controllers": [
                        {
                          "key": "phoneNumber",
                          "label": "Phone Number",
                          "controlType": "input",
                          "display": true,
                          "relatedTo": null,
                          "type": "number",
                          "placeholder": "Enter phone number",
                          "value": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.municipality.applyToBeAmbassador.phoneNumber",
                              "messages": {
                                "isRequired": "Phone number is required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "description",
                          "label": "Description",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "textarea",
                          "placeholder": "Briefly describe why you think you are well suited for this role",
                          "value": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.municipality.applyToBeAmbassador.brief",
                              "messages": {
                                "isRequired": "Description is required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "controller",
                          "controllerKey": "phoneNumber"
                        },
                        {
                          "type": "controller",
                          "controllerKey": "description"
                        }
                      ]
                    }
                  }
                },
                {
                  "element": "button-primitive",
                  "attributes": {
                    "id": "apply-to-be-ambassador-page-submit-action"
                  },
                  "properties": {
                    "text": "'Submit'",
                    "disableButton": "!$actionHelper.isValidForm()",
                    "action": {
                      "query": "mutation {  municipality {\n    applyToBeAmbassador(\n      id: $templateContext->activeFormArguments.townId, \n      brief: $templateContext->activeFormArguments.description, \n      phoneNumber: $templateContext->activeFormArguments.phoneNumber)\n  }\n}\n",
                      "postAction": "$actionHelper.showToast('Your submission was sent! We will be in touch with you soon.'); $actionHelper.notifiySubscribers(['apply-to-municipality-ambassador'], false, true);\n"
                    }
                  },
                  "events": {
                    "actionEmitter": "$actionHelper.submitForm($event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "search-results-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.items, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "border-separtor",
            "$ngIf": "dataSource?.items.length > 0 && dataSource?.cardType === 'domainCard'"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "class": "seperator-search",
                "$ngIf": "dataSource?.title"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "seperator-search-title"
                  },
                  "properties": {
                    "$innerHTML": "dataSource?.title"
                  }
                },
                {
                  "element": "div",
                  "events": {
                    "click": "templateContext.setScopeFromSearchResult(dataSource.section,dataSource.scopeKey)"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "seperator-search-subtitle-logo"
                      }
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "class": "seperator-search-subtitle"
                      },
                      "properties": {
                        "$innerHTML": "'More'"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "element": "card-list-primitive",
              "properties": {
                "listType": "'simple-list'",
                "classList": "'list-with-left-image'",
                "arrayOfItems": "dataSource?.items"
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#itemListTemplate": "",
                    "let-item": "item"
                  },
                  "children": [
                    {
                      "element": "default-list-template",
                      "events": {
                        "click": "$actionHelper.navigateToDomain(dataSource?.domainRoute, item.id)"
                      },
                      "properties": {
                        "dataSource": "{'item': item, 'containerId': 'search-page-item' }"
                      }
                    }
                  ]
                },
                {
                  "element": "ng-template",
                  "attributes": {
                    "#actionListTemplate": "",
                    "let-item": "item"
                  },
                  "children": [
                    {
                      "element": "action-template",
                      "attributes": {
                        "$ngIf": "item.canFollow && !item.canUnFollow"
                      },
                      "events": {
                        "click": "$actionHelper.linkDomain(dataSource?.domainRoute, item.id, item)"
                      },
                      "properties": {
                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'itemId':item.title, 'containerId': 'search-page-item', 'actionClass': 'l-icon'}"
                      }
                    },
                    {
                      "element": "action-template",
                      "attributes": {
                        "$ngIf": "!item.canFollow && item.canUnFollow"
                      },
                      "events": {
                        "click": "$actionHelper.unLinkDomain(dataSource?.domainRoute, item.id, item)"
                      },
                      "properties": {
                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'search-page-item', 'actionClass': 'l-icon'}"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "element": "div",
          "attributes": {
            "class": "border-separtor",
            "$ngIf": "dataSource?.items.length > 0 && dataSource?.cardType === 'offerCard'"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "class": "seperator-search",
                "$ngIf": "dataSource?.title"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "seperator-search-title"
                  },
                  "properties": {
                    "$innerHTML": "dataSource?.title"
                  }
                },
                {
                  "element": "div",
                  "events": {
                    "click": "templateContext.setScopeFromSearchResult(dataSource.section,dataSource.scopeKey)"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "seperator-search-subtitle-logo"
                      }
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "class": "seperator-search-subtitle"
                      },
                      "properties": {
                        "$innerHTML": "'More'"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "element": "card-list-primitive",
              "properties": {
                "listType": "'offer-list'",
                "cardProductClass": "'not-scrollable'",
                "arrayOfItems": "dataSource.items"
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#itemListTemplate": "",
                    "let-item": "item"
                  },
                  "children": [
                    {
                      "element": "offer-card-template",
                      "events": {
                        "click": "$actionHelper.navigateTo('offerDetails/' + item.id)"
                      },
                      "properties": {
                        "dataSource": "{'item': item, 'containerId': 'search-page-item'  }"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "element": "div",
          "attributes": {
            "class": "border-separtor",
            "$ngIf": "dataSource?.items.length > 0 && dataSource?.cardType === 'newsCard'"
          },
          "children": [
            {
              "element": "div",
              "attributes": {
                "class": "seperator-search",
                "$ngIf": "dataSource?.title"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "seperator-search-title"
                  },
                  "properties": {
                    "$innerHTML": "dataSource?.title"
                  }
                },
                {
                  "element": "div",
                  "events": {
                    "click": "templateContext.setScopeFromSearchResult(dataSource.section,dataSource.scopeKey)"
                  },
                  "children": [
                    {
                      "element": "div",
                      "attributes": {
                        "class": "seperator-search-subtitle-logo"
                      }
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "class": "seperator-search-subtitle"
                      },
                      "properties": {
                        "$innerHTML": "'More'"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "element": "card-list-primitive",
              "properties": {
                "listType": "'news-list'",
                "arrayOfItems": "dataSource?.items"
              },
              "children": [
                {
                  "element": "ng-template",
                  "attributes": {
                    "#itemListTemplate": "",
                    "let-item": "item"
                  },
                  "children": [
                    {
                      "element": "list-with-right-image-template",
                      "events": {
                        "click": "$actionHelper.navigateTo(item.type == 'Post' ? ('postDetails/' + item.id) : ('eventDetails/' + item.id))"
                      },
                      "properties": {
                        "dataSource": "{'item': item, 'containerId': 'search-page-item'  }"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "search-page",
      "functions": {
        "afterInit": "function() {  this.$actionHelper.prepareLookups();\n  this.$actionHelper.getKeywordsLookups();\n  this.$actionHelper.getBrandsLookups();\n}\n"
      },
      "templateDefinition": [
        {
          "element": "search-primitive",
          "properties": {
            "searchDefinition": {
              "defaultSection": "Everything",
              "dataSource": {
                "$dynamicUI:resourceType": "graphql",
                "dataExpression": "((data) => {\n    let result = {\n      dataResult: []\n    };\n\n    let people =  {\n      title: 'People',\n      items:  _.get(data, \"search.all.everything.items\", []).filter(x => x.__typename === 'User').map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n      domainRoute: 'Profile',\n      cardType: 'domainCard',\n      section:'people',\n      scopeKey: 'allPeople'\n    };\n\n    let company = {\n      title: 'Companies',\n      items:  _.get(data, \"search.all.everything.items\", []).filter(x => x.__typename === 'Company' && x.companyType.toLowerCase() === 'business').map(x => $dynamicUiExtraService.mapSearchCompanyToItem(x)),\n      domainRoute: 'Company',\n      cardType: 'domainCard',\n      section: 'businesses',\n      scopeKey: 'business'\n    };\n\n    let startup = {\n      title: 'Startups',\n      items:  _.get(data, \"search.all.everything.items\", []).filter(x => x.__typename === 'Company' && x.companyType.toLowerCase() === 'startup').map(x => $dynamicUiExtraService.mapSearchCompanyToItem(x)),\n      domainRoute: 'Company',\n      cardType: 'domainCard',\n      section: 'businesses',\n      scopeKey: 'startups'\n    };\n\n    let socialEnterprise = {\n      title: 'Social Enterprises',\n      items:  _.get(data, \"search.all.everything.items\", []).filter(x => x.__typename === 'Company' && x.companyType.toLowerCase() === 'socialenterprise').map(x => $dynamicUiExtraService.mapSearchCompanyToItem(x)),\n      domainRoute: 'Company',\n      cardType: 'domainCard',\n      section: 'businesses',\n      scopeKey: 'socialenterprise'\n    };\n\n    let hometowns = {\n      title: 'Hometowns',\n      items:  _.get(data, \"search.all.everything.items\", []).filter(x => x.__typename === 'Municipality').map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x)),\n      domainRoute: 'Municipality',\n      cardType: 'domainCard',\n      section: 'networks',\n      scopeKey: 'municipalities'\n    };\n\n    let organizations = {\n      title: 'Organizations',\n      items:  _.get(data, \"search.all.everything.items\", []).filter(x => x.__typename === 'Organization').map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x)),\n      domainRoute: 'Organization',\n      cardType: 'domainCard',\n      section: 'networks',\n      scopeKey: 'organizations'\n    };\n\n    let diplomaticMissions = {\n      title: 'Diplomatic Missions',\n      items:  _.get(data, \"search.all.everything.items\", []).filter(x => x.__typename === 'DiplomaticMission').map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x)),\n      domainRoute: 'DiplomaticMission',\n      cardType: 'domainCard',\n      section: 'networks',\n      scopeKey: 'diplomaticMissions'\n    };\n\n    let news = {\n      title: 'News',\n      items:  _.get(data, \"search.all.everything.items\", []).filter(x => x.__typename === 'Post').map(x => $dynamicUiExtraService.mapSearchNewsToItem(x)),\n      domainRoute: 'Post',\n      cardType: 'newsCard',\n      section: 'networks',\n      scopeKey: 'posts'\n    };\n\n    let events = {\n      title: 'Events',\n      items:  _.get(data, \"search.all.everything.items\", []).filter(x => x.__typename === 'Event').map(x => $dynamicUiExtraService.mapSearchEventToItem(x)),\n      domainRoute: 'Event',\n      cardType: 'newsCard',\n      section: 'networks',\n      scopeKey: 'events'\n    };\n\n\n    let products = {\n      title: 'Products',\n      items:  _.get(data, \"search.all.everything.items\", []).filter(x => x.__typename === 'Offer' && x.type.toLowerCase() === 'product').map(x => $dynamicUiExtraService.mapCompanySearchOfferToItem(x)),\n      domainRoute: 'Offer',\n      cardType: 'offerCard',\n      section: 'businesses',\n      scopeKey: 'products'\n    };\n\n    let services = {\n      title: 'Services',\n      items:  _.get(data, \"search.all.everything.items\", []).filter(x => x.__typename === 'Offer' && x.type.toLowerCase() === 'service').map(x => $dynamicUiExtraService.mapCompanySearchOfferToItem(x)),\n      domainRoute: 'Offer',\n      cardType: 'offerCard',\n      section: 'businesses',\n      scopeKey: 'services'\n    };\n    \n    let franchises = {\n      title: 'Franchises',\n      items:  _.get(data, \"search.all.everything.items\", []).filter(x => x.__typename === 'Offer' && x.type.toLowerCase() === 'franchise').map(x => $dynamicUiExtraService.mapCompanySearchOfferToItem(x)),\n      domainRoute: 'Offer',\n      cardType: 'offerCard',\n      section: 'businesses',\n      scopeKey: 'franchises'\n    };\n\n    let dataResult = [];\n    dataResult.push(people);\n    dataResult.push(company);\n    dataResult.push(startup);\n    dataResult.push(socialEnterprise);\n    dataResult.push(hometowns);\n    dataResult.push(organizations);\n    dataResult.push(diplomaticMissions);\n    dataResult.push(news);\n    dataResult.push(events);\n    dataResult.push(products);\n    dataResult.push(services);\n    dataResult.push(franchises);\n\n    let everyThingDataSection = dataResult;\n    let peopleDataSection = dataResult.filter(x => x.section === 'people');\n    let businessesDataSection = dataResult.filter(x => x.section === 'businesses');\n    let networksDataSection = dataResult.filter(x => x.section === 'networks');\n\n    const everythingTotalItems = \n          people.items.length\n\n        + company.items.length\n        + startup.items.length\n        + socialEnterprise.items.length\n        + products.items.length\n        + services.items.length\n        + franchises.items.length\n\n        + hometowns.items.length\n        + organizations.items.length     \n        + diplomaticMissions.items.length\n        + news.items.length\n        + events.items.length \n        \n    const peopleTotalItems = people.items.length;\n    const businessesTotalItems = \n        + company.items.length\n        + startup.items.length\n        + socialEnterprise.items.length\n        + products.items.length\n        + services.items.length\n        + franchises.items.length\n\n    const networksTotalItems = \n        + hometowns.items.length\n        + organizations.items.length     \n        + diplomaticMissions.items.length\n        + news.items.length\n        + events.items.length                     \n\n    let everythingDataResult = {\n      dataResult: everyThingDataSection,\n      totalItems: everythingTotalItems,\n      section: 'everything'\n    }\n\n    let peopleDataResult = {\n      dataResult: peopleDataSection,\n      totalItems: peopleTotalItems,\n      section: 'people'\n    }\n\n    let businessesgDataResult = {\n      dataResult: businessesDataSection,\n      totalItems: businessesTotalItems,\n      section: 'businesses'\n    }\n    \n    let networksDataResult = {\n      dataResult: networksDataSection,\n      totalItems: networksTotalItems,\n      section: 'networks'\n    }\n                    \n    result.dataResult.push(everythingDataResult);\n    result.dataResult.push(peopleDataResult);\n    result.dataResult.push(businessesgDataResult);\n    result.dataResult.push(networksDataResult);\n\n    $actionHelper.printData({ result, data })\n    return result;\n  }\n)(data)",
                "query": "query {\n  search {\n    all {\n      everything(first:3, keyword: $dynamicUiVariables->$searchService.searchParams.keyword){\n        items{\n          __typename ... on User{\n            ...userCommonProperties            \n          }\n          __typename ... on Organization{\n            ...organizationCommonProperties\n          }\n          __typename ... on DiplomaticMission{\n            ...diplomaticCommonProperties\n          }\n          __typename ... on Company{\n            ...companyCommonProperties\n          }\n          __typename ... on Municipality{\n            ...municipalityCommonProperties\n          }\n\n          __typename ... on Offer {    \n            ...searchOfferProperties\n          }\n          \n          __typename ... on Event {\n            ...searchEventProperties\n          }\n          \n          __typename ... on Post {\n            ...searchPostProperties\n          }\n        }\n      }\n    }\n  }\n}"
              },
              "sections": [
                {
                  "key": "everything",
                  "title": "Everything",
                  "icon": "assets/icon/dynamic-ui/Everything_Inactive.svg",
                  "scopes": [
                    {
                      "key": "allPeople",
                      "title": "All People",
                      "titleId": "'search-page-everything-all-people'",
                      "icon": "assets/icon/dynamic-ui/All People.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountryOfOrigin: $dynamicUiVariables->$searchService.searchParams.filters.countryOfOrigin,\nhometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\ncountryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\ncityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nprofession: $dynamicUiVariables->$searchService.searchParams.filters.profession",
                      "properties": "...userCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.people.allPeople.items\", []).map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n    cursor: _.get(data, \"search.people.allPeople.cursor\"),\n    domainRoute: 'Profile',\n    cardType: 'domainCard',\n    section: 'people',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      people{\n        allPeople(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                  keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                  countryOfOrigin: $dynamicUiVariables->$searchService.searchParams.filters.countryOfOrigin,\n                  hometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\n                  countryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\n                  cityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence,\n                  sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n                  profession: $dynamicUiVariables->$searchService.searchParams.filters.profession){\n          items{\n            ...userCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Country of Origin",
                          "name": "countryOfOrigin",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "withLoader": true,
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfOriginCities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "Hometown",
                          "name": "hometown",
                          "dependsOn": "countryOfOrigin",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfOriginCities)"
                        },
                        {
                          "title": "Country of Residence",
                          "name": "countryOfResidence",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "dataSource": "initialDataSource.countries",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfResidenceCities = data.cities;\n}\n);"
                        },
                        {
                          "title": "City of Residence",
                          "name": "cityOfResidence",
                          "dependsOn": "countryOfResidence",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfResidenceCities)"
                        },
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Profession",
                          "name": "profession",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select Profession', scope, filter, initialDataSource.professions)",
                          "dataSource": "initialDataSource.professions"
                        }
                      ]
                    },
                    {
                      "key": "business",
                      "title": "Companies",
                      "icon": "assets/icon/dynamic-ui/Companies.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\ncity: $dynamicUiVariables->$searchService.searchParams.filters.city,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nkeywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords,\nbrands: $dynamicUiVariables->$searchService.searchParams.filters.brands",
                      "properties": "...companyCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.businesses.business.items\", []).map(x => $dynamicUiExtraService.mapSearchCompanyToItem(x)),\n    cursor: _.get(data, \"search.businesses.business.cursor\"),\n    domainRoute: 'Company',\n    cardType: 'domainCard',\n    section: 'businesses',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      businesses{\n        business(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                  keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                  country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n                  city: $dynamicUiVariables->$searchService.searchParams.filters.city,\n                  sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n                  keywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords,\n                  brands: $dynamicUiVariables->$searchService.searchParams.filters.brands){\n          items{\n            ...companyCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Country",
                          "name": "country",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.cities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "City",
                          "name": "city",
                          "dependsOn": "country",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.cities)"
                        },
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Keywords",
                          "name": "keywords",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Keywords', scope, filter, initialDataSource.keywords, filter.value, false)",
                          "dataSource": "initialDataSource.keywords"
                        },
                        {
                          "title": "Brands",
                          "name": "brands",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Brands', scope, filter, initialDataSource.brands, filter.value, false)",
                          "dataSource": "initialDataSource.brands"
                        }
                      ]
                    },
                    {
                      "key": "startups",
                      "title": "Startups",
                      "icon": "assets/icon/dynamic-ui/Startups.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\ncity: $dynamicUiVariables->$searchService.searchParams.filters.city,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nkeywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords,\nbrands: $dynamicUiVariables->$searchService.searchParams.filters.brands",
                      "properties": "...companyCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.businesses.startups.items\", []).map(x => $dynamicUiExtraService.mapSearchCompanyToItem(x)),\n    cursor: _.get(data, \"search.businesses.startups.cursor\"),\n    domainRoute: 'Company',\n    cardType: 'domainCard',\n    section: 'businesses',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      businesses{\n        startups(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                  keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                  country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n                  city: $dynamicUiVariables->$searchService.searchParams.filters.city,\n                  sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n                  keywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords,\n                  brands: $dynamicUiVariables->$searchService.searchParams.filters.brands){\n          items{\n            ...companyCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Country",
                          "name": "country",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.cities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "City",
                          "name": "city",
                          "dependsOn": "country",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.cities)"
                        },
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Keywords",
                          "name": "keywords",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Keywords', scope, filter, initialDataSource.keywords, filter.value, false)",
                          "dataSource": "initialDataSource.keywords"
                        },
                        {
                          "title": "Brands",
                          "name": "brands",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Brands', scope, filter, initialDataSource.brands, filter.value, false)",
                          "dataSource": "initialDataSource.brands"
                        }
                      ]
                    },
                    {
                      "key": "socialenterprise",
                      "title": "Social Enterprises",
                      "icon": "assets/icon/dynamic-ui/SocialEnterprises.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\ncity: $dynamicUiVariables->$searchService.searchParams.filters.city,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nkeywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords,\nbrands: $dynamicUiVariables->$searchService.searchParams.filters.brands",
                      "properties": "...companyCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.businesses.socialenterprise.items\", []).map(x => $dynamicUiExtraService.mapSearchCompanyToItem(x)),\n    cursor: _.get(data, \"search.businesses.socialenterprise.cursor\"),\n    domainRoute: 'Company',\n    cardType: 'domainCard',\n    section: 'businesses',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      businesses{\n        socialenterprise(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                  keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                  country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n                  city: $dynamicUiVariables->$searchService.searchParams.filters.city,\n                  sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n                  keywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords,\n                  brands: $dynamicUiVariables->$searchService.searchParams.filters.brands){\n          items{\n            ...companyCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Country",
                          "name": "country",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.cities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "City",
                          "name": "city",
                          "dependsOn": "country",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.cities)"
                        },
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Keywords",
                          "name": "keywords",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Keywords', scope, filter, initialDataSource.keywords, filter.value, false)",
                          "dataSource": "initialDataSource.keywords"
                        },
                        {
                          "title": "Brands",
                          "name": "brands",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Brands', scope, filter, initialDataSource.brands, filter.value, false)",
                          "dataSource": "initialDataSource.brands"
                        }
                      ]
                    },
                    {
                      "key": "municipalities",
                      "title": "Hometowns",
                      "icon": "assets/icon/dynamic-ui/Hometowns.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ngovernate: $dynamicUiVariables->$searchService.searchParams.filters.governate,\ndistrict: $dynamicUiVariables->$searchService.searchParams.filters.district",
                      "properties": "...municipalityCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.networks.municipalities.items\", []).map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x)),\n    cursor: _.get(data, \"search.networks.municipalities.cursor\"),\n    domainRoute: 'Municipality',\n    cardType: 'domainCard',\n    section: 'networks',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      networks{\n        municipalities(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                      keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                      governate: $dynamicUiVariables->$searchService.searchParams.filters.governate, \n                      district: $dynamicUiVariables->$searchService.searchParams.filters.district){\n          items{\n            ...municipalityCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Governorate",
                          "name": "governate",
                          "type": "tags",
                          "onChange": "templateContext.distrcits = $dynamicUiExtraService.filterDistrict(filter.value, initialDataSource)",
                          "dataSource": "initialDataSource.governorates"
                        },
                        {
                          "title": "District",
                          "name": "district",
                          "type": "tags",
                          "dependsOn": "governate",
                          "dataSource": "templateContext.distrcits"
                        }
                      ]
                    },
                    {
                      "key": "organizations",
                      "title": "Organizations",
                      "icon": "assets/icon/dynamic-ui/Organizations.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\ncity: $dynamicUiVariables->$searchService.searchParams.filters.city,\norganizationType: $dynamicUiVariables->$searchService.searchParams.filters.organizationType,\norganizationCategory: $dynamicUiVariables->$searchService.searchParams.filters.organizationCategory",
                      "properties": "...organizationCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.networks.organizations.items\", []).map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x)),\n    cursor: _.get(data, \"search.networks.organizations.cursor\"),\n    domainRoute: 'Organization',\n    cardType: 'domainCard',\n    section: 'networks',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      networks{\n        organizations(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                      keyword: $dynamicUiVariables->$searchService.searchParams.keyword,\n                      country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n                      city: $dynamicUiVariables->$searchService.searchParams.filters.city,                                      \n                      organizationType: $dynamicUiVariables->$searchService.searchParams.filters.organizationType,\n                      organizationCategory: $dynamicUiVariables->$searchService.searchParams.filters.organizationCategory){\n          items{\n            ...organizationCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Type",
                          "name": "organizationType",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select Organization Type', scope, filter, initialDataSource.organizationTypes)",
                          "dataSource": "initialDataSource.organizationTypes"
                        },
                        {
                          "title": "Category",
                          "name": "organizationCategory",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select Organization Category', scope, filter, initialDataSource.organizationCategories)",
                          "dataSource": "initialDataSource.organizationCategories"
                        },
                        {
                          "title": "Country",
                          "name": "country",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.cities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "City",
                          "name": "city",
                          "dependsOn": "country",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a city', scope, filter, templateContext.cities)"
                        }
                      ]
                    },
                    {
                      "key": "diplomaticMissions",
                      "title": "Diplomatic Missions",
                      "icon": "assets/icon/dynamic-ui/DiplomaticMissions.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\ncity: $dynamicUiVariables->$searchService.searchParams.filters.city",
                      "properties": "...diplomaticCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.networks.diplomaticMissions.items\", []).map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x)),\n    cursor: _.get(data, \"search.networks.diplomaticMissions.cursor\"),\n    domainRoute: 'DiplomaticMission',\n    cardType: 'domainCard',\n    section: 'networks',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      networks{\n        diplomaticMissions(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                           keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                           country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n                           city: $dynamicUiVariables->$searchService.searchParams.filters.city){\n          items{\n            ...diplomaticCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Country",
                          "name": "country",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.cities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "City",
                          "name": "city",
                          "dependsOn": "country",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a city', scope, filter, templateContext.cities)"
                        }
                      ]
                    },
                    {
                      "key": "posts",
                      "title": "News",
                      "icon": "assets/icon/dynamic-ui/News.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\ncity: $dynamicUiVariables->$searchService.searchParams.filters.city",
                      "properties": "...searchPostProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.networks.posts.items\", []).map(x => $dynamicUiExtraService.mapSearchNewsToItem(x)),\n    cursor: _.get(data, \"search.networks.posts.cursor\"),\n    domainRoute: 'Post',\n    cardType: 'newsCard',\n    section: 'networks',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      networks{\n        posts(\n          first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n          keyword: $dynamicUiVariables->$searchService.searchParams.keyword,\n          country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n          city: $dynamicUiVariables->$searchService.searchParams.filters.city){\n          items{\n            ...searchPostProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Country",
                          "name": "country",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.cities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "City",
                          "name": "city",
                          "dependsOn": "country",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a city', scope, filter, templateContext.cities)"
                        }
                      ]
                    },
                    {
                      "key": "events",
                      "title": "Events",
                      "icon": "assets/icon/dynamic-ui/Events.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\npastEndDate: $dynamicUiVariables->$searchService.searchParams.pastEndDate,\nupcomingStartDate: $dynamicUiVariables->$searchService.searchParams.upcomingStartDate,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\ncity: $dynamicUiVariables->$searchService.searchParams.filters.city",
                      "properties": "...searchEventProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.networks.events.items\", []).map(x => $dynamicUiExtraService.mapSearchEventToItem(x)),\n    cursor: _.get(data, \"search.networks.events.cursor\"),\n    domainRoute: 'Event',\n    cardType: 'newsCard',\n    section: 'networks',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      networks{\n        events(\n          first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n          keyword: $dynamicUiVariables->$searchService.searchParams.keyword,\n          pastEndDate: $dynamicUiVariables->$searchService.searchParams.pastEndDate, \n          upcomingStartDate: $dynamicUiVariables->$searchService.searchParams.upcomingStartDate,                                                   \n          country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n          city: $dynamicUiVariables->$searchService.searchParams.filters.city){\n          items{\n            ...searchEventProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Date",
                          "name": "date",
                          "type": "tags",
                          "onChange": "$dynamicUiExtraService.getEventDate(filter, $searchService)",
                          "dataSource": "initialDataSource.filterDate"
                        },
                        {
                          "title": "Country",
                          "name": "country",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.cities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "City",
                          "name": "city",
                          "dependsOn": "country",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a city', scope, filter, templateContext.cities)"
                        }
                      ]
                    },
                    {
                      "key": "products",
                      "title": "Products",
                      "icon": "assets/icon/dynamic-ui/Products.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nkeywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords",
                      "properties": "...searchOfferProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.businesses.products.items\", []).map(x => $dynamicUiExtraService.mapCompanySearchOfferToItem(x)),\n    cursor: _.get(data, \"search.businesses.products.cursor\"),\n    domainRoute: 'Offer',\n    cardType: 'offerCard',\n    section: 'businesses',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      businesses{\n        products(\n          first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n          keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n          country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n          sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n          keywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords){\n          items{\n            ...searchOfferProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Market Availability",
                          "name": "country",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Market Availability', scope, filter, initialDataSource.countries, filter.value, true)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "Keywords",
                          "name": "keywords",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Keywords', scope, filter, initialDataSource.keywords, filter.value, false)",
                          "dataSource": "initialDataSource.keywords"
                        }
                      ]
                    },
                    {
                      "key": "services",
                      "title": "Services",
                      "icon": "assets/icon/dynamic-ui/Services.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nkeywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords",
                      "properties": "...searchOfferProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.businesses.services.items\", []).map(x => $dynamicUiExtraService.mapCompanySearchOfferToItem(x)),\n    cursor: _.get(data, \"search.businesses.services.cursor\"),\n    domainRoute: 'Offer',\n    cardType: 'offerCard',\n    section: 'businesses',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      businesses{\n        services(\n          first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n          keyword: $dynamicUiVariables->$searchService.searchParams.keyword,\n          country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n          sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n          keywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords){\n          items{\n            ...searchOfferProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Market Availability",
                          "name": "country",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Market Availability', scope, filter, initialDataSource.countries, filter.value, true)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "Keywords",
                          "name": "keywords",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Keywords', scope, filter, initialDataSource.keywords, filter.value, false)",
                          "dataSource": "initialDataSource.keywords"
                        }
                      ]
                    },
                    {
                      "key": "franchises",
                      "title": "Franchises",
                      "icon": "assets/icon/dynamic-ui/Franchises.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nkeywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords",
                      "properties": "...searchOfferProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.businesses.franchises.items\", []).map(x => $dynamicUiExtraService.mapCompanySearchOfferToItem(x)),\n    cursor: _.get(data, \"search.businesses.franchises.cursor\"),\n    domainRoute: 'Offer',\n    cardType: 'offerCard',\n    section: 'businesses',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      businesses{\n        franchises(\n          first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n          keyword: $dynamicUiVariables->$searchService.searchParams.keyword,\n          country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n          sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n          keywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords){\n          items{\n            ...searchOfferProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Market Availability",
                          "name": "country",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Market Availability', scope, filter, initialDataSource.countries, filter.value, true)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "Keywords",
                          "name": "keywords",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Keywords', scope, filter, initialDataSource.keywords, filter.value, false)",
                          "dataSource": "initialDataSource.keywords"
                        }
                      ]
                    }
                  ]
                },
                {
                  "key": "people",
                  "title": "People",
                  "icon": "assets/icon/dynamic-ui/People_inactive.svg",
                  "scopes": [
                    {
                      "key": "allPeople",
                      "title": "All People",
                      "icon": "assets/icon/dynamic-ui/All People.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountryOfOrigin: $dynamicUiVariables->$searchService.searchParams.filters.countryOfOrigin,\nhometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\ncountryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\ncityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nprofession: $dynamicUiVariables->$searchService.searchParams.filters.profession",
                      "properties": "...userCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.people.allPeople.items\", []).map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n    cursor: _.get(data, \"search.people.allPeople.cursor\"),\n    domainRoute: 'Profile',\n    cardType: 'domainCard',\n    section: 'people',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      people{\n        allPeople(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                  keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                  countryOfOrigin: $dynamicUiVariables->$searchService.searchParams.filters.countryOfOrigin,\n                  hometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\n                  countryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\n                  cityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence,\n                  sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n                  profession: $dynamicUiVariables->$searchService.searchParams.filters.profession){\n          items{\n            ...userCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Country of Origin",
                          "name": "countryOfOrigin",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfOriginCities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "Hometown",
                          "name": "hometown",
                          "dependsOn": "countryOfOrigin",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfOriginCities)"
                        },
                        {
                          "title": "Country of Residence",
                          "name": "countryOfResidence",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "dataSource": "initialDataSource.countries",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfResidenceCities = data.cities;\n}\n);"
                        },
                        {
                          "title": "City of Residence",
                          "name": "cityOfResidence",
                          "dependsOn": "countryOfResidence",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfResidenceCities)"
                        },
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Profession",
                          "name": "profession",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select Profession', scope, filter, initialDataSource.professions)",
                          "dataSource": "initialDataSource.professions"
                        }
                      ]
                    },
                    {
                      "key": "townOfficials",
                      "title": "Town Officials",
                      "icon": "assets/icon/dynamic-ui/Town Officials.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\nhometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\nrole: $dynamicUiVariables->$searchService.searchParams.filters.role",
                      "properties": "...userCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.people.townOfficials.items\", []).map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n    cursor: _.get(data, \"search.people.townOfficials.cursor\"),\n    domainRoute: 'Profile',\n    cardType: 'domainCard',\n    section: 'people',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      people{\n        townOfficials(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                  keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                  hometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\n                  role: $dynamicUiVariables->$searchService.searchParams.filters.role){\n          items{\n            ...userCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Hometown",
                          "name": "hometown",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, initialDataSource.hometowns)",
                          "dataSource": "initialDataSource.hometowns"
                        },
                        {
                          "title": "Role",
                          "name": "role",
                          "type": "tags",
                          "dataSource": "initialDataSource.townOfficialRoles"
                        }
                      ]
                    },
                    {
                      "key": "keyStaff",
                      "title": "Diplomats & Diplomatic Staff",
                      "icon": "assets/icon/dynamic-ui/Diplomatic and Diplomatic Staff.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountryOfOrigin: $dynamicUiVariables->$searchService.searchParams.filters.countryOfOrigin,\nhometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\ncountryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\ncityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence",
                      "properties": "...userCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.people.keyStaff.items\", []).map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n    cursor: _.get(data, \"search.people.keyStaff.cursor\"),\n    domainRoute: 'Profile',\n    cardType: 'domainCard',\n    section: 'people',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      people{\n        keyStaff(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                  keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                  countryOfOrigin: $dynamicUiVariables->$searchService.searchParams.filters.countryOfOrigin,\n                  hometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\n                  countryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\n                  cityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence){\n          items{\n            ...userCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Country of Origin",
                          "name": "countryOfOrigin",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfOriginCities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "Hometown",
                          "name": "hometown",
                          "dependsOn": "countryOfOrigin",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfOriginCities)"
                        },
                        {
                          "title": "Country of Residence",
                          "name": "countryOfResidence",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "dataSource": "initialDataSource.countries",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfResidenceCities = data.cities;\n}\n);"
                        },
                        {
                          "title": "City of Residence",
                          "name": "cityOfResidence",
                          "dependsOn": "countryOfResidence",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfResidenceCities)"
                        }
                      ]
                    },
                    {
                      "key": "companyLeadership",
                      "title": "Company Leadership",
                      "icon": "assets/icon/dynamic-ui/Company Leadership.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountryOfOrigin: $dynamicUiVariables->$searchService.searchParams.filters.countryOfOrigin,\nhometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\ncountryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\ncityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nprofession: $dynamicUiVariables->$searchService.searchParams.filters.profession,\ncompanyType: $dynamicUiVariables->$searchService.searchParams.filters.companyType",
                      "properties": "...userCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.people.companyLeadership.items\", []).map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n    cursor: _.get(data, \"search.people.companyLeadership.cursor\"),\n    domainRoute: 'Profile',\n    cardType: 'domainCard',\n    section: 'people',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      people{\n        companyLeadership(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                  keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                  countryOfOrigin: $dynamicUiVariables->$searchService.searchParams.filters.countryOfOrigin,\n                  hometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\n                  countryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\n                  cityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence,\n                  sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n                  profession: $dynamicUiVariables->$searchService.searchParams.filters.profession,\n                  companyType: $dynamicUiVariables->$searchService.searchParams.filters.companyType){\n          items{\n            ...userCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Company Type",
                          "name": "companyType",
                          "type": "tags",
                          "dataSource": "initialDataSource.companyTypes"
                        },
                        {
                          "title": "Country of Origin",
                          "name": "countryOfOrigin",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfOriginCities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "Hometown",
                          "name": "hometown",
                          "dependsOn": "countryOfOrigin",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfOriginCities)"
                        },
                        {
                          "title": "Country of Residence",
                          "name": "countryOfResidence",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "dataSource": "initialDataSource.countries",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfResidenceCities = data.cities;\n}\n);"
                        },
                        {
                          "title": "City of Residence",
                          "name": "cityOfResidence",
                          "dependsOn": "countryOfResidence",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfResidenceCities)"
                        },
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Profession",
                          "name": "profession",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select Profession', scope, filter, initialDataSource.professions)",
                          "dataSource": "initialDataSource.professions"
                        }
                      ]
                    },
                    {
                      "key": "employees",
                      "title": "Employees",
                      "icon": "assets/icon/dynamic-ui/Employees.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountryOfOrigin: $dynamicUiVariables->$searchService.searchParams.filters.countryOfOrigin,\nhometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\ncountryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\ncityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nprofession: $dynamicUiVariables->$searchService.searchParams.filters.profession,\ncompanyType: $dynamicUiVariables->$searchService.searchParams.filters.companyType",
                      "properties": "...userCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.people.employees.items\", []).map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n    cursor: _.get(data, \"search.people.employees.cursor\"),\n    domainRoute: 'Profile',\n    cardType: 'domainCard',\n    section: 'people',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      people{\n        employees(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                  keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                  countryOfOrigin: $dynamicUiVariables->$searchService.searchParams.filters.countryOfOrigin,\n                  hometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\n                  countryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\n                  cityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence,\n                  sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n                  profession: $dynamicUiVariables->$searchService.searchParams.filters.profession,\n                  companyType: $dynamicUiVariables->$searchService.searchParams.filters.companyType){\n          items{\n            ...userCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Company Type",
                          "name": "companyType",
                          "type": "tags",
                          "dataSource": "initialDataSource.companyTypes"
                        },
                        {
                          "title": "Country of Origin",
                          "name": "countryOfOrigin",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfOriginCities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "Hometown",
                          "name": "hometown",
                          "dependsOn": "countryOfOrigin",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfOriginCities)"
                        },
                        {
                          "title": "Country of Residence",
                          "name": "countryOfResidence",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "dataSource": "initialDataSource.countries",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfResidenceCities = data.cities;\n}\n);"
                        },
                        {
                          "title": "City of Residence",
                          "name": "cityOfResidence",
                          "dependsOn": "countryOfResidence",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfResidenceCities)"
                        },
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Profession",
                          "name": "profession",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select Profession', scope, filter, initialDataSource.professions)",
                          "dataSource": "initialDataSource.professions"
                        }
                      ]
                    },
                    {
                      "key": "professions",
                      "title": "Professionals",
                      "icon": "assets/icon/dynamic-ui/Professionals.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountryOfOrigin: $dynamicUiVariables->$searchService.searchParams.filters.countryOfOrigin,\nhometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\ncountryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\ncityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nprofession: $dynamicUiVariables->$searchService.searchParams.filters.profession",
                      "properties": "...userCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.people.professions.items\", []).map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n    cursor: _.get(data, \"search.people.professions.cursor\"),\n    domainRoute: 'Profile',\n    cardType: 'domainCard',\n    section: 'people',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      people{\n        professions(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                  keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                  countryOfOrigin: $dynamicUiVariables->$searchService.searchParams.filters.countryOfOrigin,\n                  hometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\n                  countryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\n                  cityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence,\n                  sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n                  profession: $dynamicUiVariables->$searchService.searchParams.filters.profession){\n          items{\n            ...userCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Country of Origin",
                          "name": "countryOfOrigin",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfOriginCities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "Hometown",
                          "name": "hometown",
                          "dependsOn": "countryOfOrigin",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfOriginCities)"
                        },
                        {
                          "title": "Country of Residence",
                          "name": "countryOfResidence",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "dataSource": "initialDataSource.countries",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfResidenceCities = data.cities;\n}\n);"
                        },
                        {
                          "title": "City of Residence",
                          "name": "cityOfResidence",
                          "dependsOn": "countryOfResidence",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfResidenceCities)"
                        },
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Profession",
                          "name": "profession",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select Profession', scope, filter, initialDataSource.professions)",
                          "dataSource": "initialDataSource.professions"
                        }
                      ]
                    },
                    {
                      "key": "organiztionLeadership",
                      "title": "Organization Leadership",
                      "icon": "assets/icon/dynamic-ui/Organization Leadership.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountryOfOrigin: $dynamicUiVariables->$searchService.searchParams.filters.countryOfOrigin,\nhometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\ncountryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\ncityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nprofession: $dynamicUiVariables->$searchService.searchParams.filters.profession,\norganizationType: $dynamicUiVariables->$searchService.searchParams.filters.organizationType,\norganizationCategory: $dynamicUiVariables->$searchService.searchParams.filters.organizationCategory",
                      "properties": "...userCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.people.organiztionLeadership.items\", []).map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n    cursor: _.get(data, \"search.people.organiztionLeadership.cursor\"),\n    domainRoute: 'Profile',\n    cardType: 'domainCard',\n    section: 'people',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      people{\n        organiztionLeadership(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                  keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                  countryOfOrigin: $dynamicUiVariables->$searchService.searchParams.filters.countryOfOrigin,\n                  hometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\n                  countryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\n                  cityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence,\n                  sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n                  profession: $dynamicUiVariables->$searchService.searchParams.filters.profession,\n                  organizationType: $dynamicUiVariables->$searchService.searchParams.filters.organizationType,\n                  organizationCategory: $dynamicUiVariables->$searchService.searchParams.filters.organizationCategory){\n          items{\n            ...userCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Organization Type",
                          "name": "organizationType",
                          "type": "tags",
                          "dataSource": "initialDataSource.organizationTypes"
                        },
                        {
                          "title": "Organization Category",
                          "name": "organizationCategory",
                          "type": "tags",
                          "dataSource": "initialDataSource.organizationCategories"
                        },
                        {
                          "title": "Country of Origin",
                          "name": "countryOfOrigin",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfOriginCities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "Hometown",
                          "name": "hometown",
                          "dependsOn": "countryOfOrigin",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfOriginCities)"
                        },
                        {
                          "title": "Country of Residence",
                          "name": "countryOfResidence",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "dataSource": "initialDataSource.countries",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfResidenceCities = data.cities;\n}\n);"
                        },
                        {
                          "title": "City of Residence",
                          "name": "cityOfResidence",
                          "dependsOn": "countryOfResidence",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfResidenceCities)"
                        },
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Profession",
                          "name": "profession",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select Profession', scope, filter, initialDataSource.professions)",
                          "dataSource": "initialDataSource.professions"
                        }
                      ]
                    },
                    {
                      "key": "townAmbassadors",
                      "title": "Town Ambassadors",
                      "icon": "assets/icon/dynamic-ui/Town_Ambassadors.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\nhometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\ncountryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\ncityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nprofession: $dynamicUiVariables->$searchService.searchParams.filters.profession",
                      "properties": "...userCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.people.townAmbassadors.items\", []).map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n    cursor: _.get(data, \"search.people.townAmbassadors.cursor\"),\n    domainRoute: 'Profile',\n    cardType: 'domainCard',\n    section: 'people',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      people{\n        townAmbassadors(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                  keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                  hometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\n                  countryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\n                  cityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence,\n                  sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n                  profession: $dynamicUiVariables->$searchService.searchParams.filters.profession){\n          items{\n            ...userCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Hometown",
                          "name": "hometown",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, initialDataSource.hometowns)",
                          "dataSource": "initialDataSource.hometowns"
                        },
                        {
                          "title": "Country of Residence",
                          "name": "countryOfResidence",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "dataSource": "initialDataSource.countries",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfResidenceCities = data.cities;\n}\n);"
                        },
                        {
                          "title": "City of Residence",
                          "name": "cityOfResidence",
                          "dependsOn": "countryOfResidence",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfResidenceCities)"
                        },
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Profession",
                          "name": "profession",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select Profession', scope, filter, initialDataSource.professions)",
                          "dataSource": "initialDataSource.professions"
                        }
                      ]
                    },
                    {
                      "key": "mentors",
                      "title": "Mentors",
                      "icon": "assets/icon/dynamic-ui/Mentors.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountryOfOrigin: $dynamicUiVariables->$searchService.searchParams.filters.countryOfOrigin,\nhometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\ncountryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\ncityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nprofession: $dynamicUiVariables->$searchService.searchParams.filters.profession",
                      "properties": "...userCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.people.mentors.items\", []).map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n    cursor: _.get(data, \"search.people.mentors.cursor\"),\n    domainRoute: 'Profile',\n    cardType: 'domainCard',\n    section: 'people',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      people{\n        mentors(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                countryOfOrigin: $dynamicUiVariables->$searchService.searchParams.filters.countryOfOrigin,\n                hometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\n                countryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\n                cityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence,\n                sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n                profession: $dynamicUiVariables->$searchService.searchParams.filters.profession){\n          items{\n            ...userCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Country of Origin",
                          "name": "countryOfOrigin",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfOriginCities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "Hometown",
                          "name": "hometown",
                          "dependsOn": "countryOfOrigin",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfOriginCities)"
                        },
                        {
                          "title": "Country of Residence",
                          "name": "countryOfResidence",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "dataSource": "initialDataSource.countries",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfResidenceCities = data.cities;\n}\n);"
                        },
                        {
                          "title": "City of Residence",
                          "name": "cityOfResidence",
                          "dependsOn": "countryOfResidence",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfResidenceCities)"
                        },
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Profession",
                          "name": "profession",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select Profession', scope, filter, initialDataSource.professions)",
                          "dataSource": "initialDataSource.professions"
                        }
                      ]
                    },
                    {
                      "key": "advisors",
                      "title": "Advisors",
                      "icon": "assets/icon/dynamic-ui/Advisors.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountryOfOrigin: $dynamicUiVariables->$searchService.searchParams.filters.countryOfOrigin,\nhometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\ncountryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\ncityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nprofession: $dynamicUiVariables->$searchService.searchParams.filters.profession",
                      "properties": "...userCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.people.advisors.items\", []).map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n    cursor: _.get(data, \"search.people.advisors.cursor\"),\n    domainRoute: 'Profile',\n    cardType: 'domainCard',\n    section: 'people',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      people{\n        advisors(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                  keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                  countryOfOrigin: $dynamicUiVariables->$searchService.searchParams.filters.countryOfOrigin,\n                  hometown: $dynamicUiVariables->$searchService.searchParams.filters.hometown,\n                  countryOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.countryOfResidence,\n                  cityOfResidence: $dynamicUiVariables->$searchService.searchParams.filters.cityOfResidence,\n                  sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n                  profession: $dynamicUiVariables->$searchService.searchParams.filters.profession){\n          items{\n            ...userCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Country of Origin",
                          "name": "countryOfOrigin",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfOriginCities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "Hometown",
                          "name": "hometown",
                          "dependsOn": "countryOfOrigin",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfOriginCities)"
                        },
                        {
                          "title": "Country of Residence",
                          "name": "countryOfResidence",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "dataSource": "initialDataSource.countries",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.countryOfResidenceCities = data.cities;\n}\n);"
                        },
                        {
                          "title": "City of Residence",
                          "name": "cityOfResidence",
                          "dependsOn": "countryOfResidence",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.countryOfResidenceCities)"
                        },
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Profession",
                          "name": "profession",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select Profession', scope, filter, initialDataSource.professions)",
                          "dataSource": "initialDataSource.professions"
                        }
                      ]
                    }
                  ]
                },
                {
                  "key": "networks",
                  "title": "Networks",
                  "icon": "assets/icon/dynamic-ui/Networks_inactive.svg",
                  "scopes": [
                    {
                      "key": "organizations",
                      "title": "Organizations",
                      "icon": "assets/icon/dynamic-ui/Organizations.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\ncity: $dynamicUiVariables->$searchService.searchParams.filters.city,\norganizationType: $dynamicUiVariables->$searchService.searchParams.filters.organizationType,\norganizationCategory: $dynamicUiVariables->$searchService.searchParams.filters.organizationCategory",
                      "properties": "...organizationCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.networks.organizations.items\", []).map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x)),\n    cursor: _.get(data, \"search.networks.organizations.cursor\"),\n    domainRoute: 'Organization',\n    cardType: 'domainCard',\n    section: 'networks',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      networks{\n        organizations(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                      keyword: $dynamicUiVariables->$searchService.searchParams.keyword,\n                      country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n                      city: $dynamicUiVariables->$searchService.searchParams.filters.city,                                      \n                      organizationType: $dynamicUiVariables->$searchService.searchParams.filters.organizationType,\n                      organizationCategory: $dynamicUiVariables->$searchService.searchParams.filters.organizationCategory){\n          items{\n            ...organizationCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Type",
                          "name": "organizationType",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select Organization Type', scope, filter, initialDataSource.organizationTypes)",
                          "dataSource": "initialDataSource.organizationTypes"
                        },
                        {
                          "title": "Category",
                          "name": "organizationCategory",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select Organization Category', scope, filter, initialDataSource.organizationCategories)",
                          "dataSource": "initialDataSource.organizationCategories"
                        },
                        {
                          "title": "Country",
                          "name": "country",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.cities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "City",
                          "name": "city",
                          "dependsOn": "country",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a city', scope, filter, templateContext.cities)"
                        }
                      ]
                    },
                    {
                      "key": "municipalities",
                      "title": "Hometowns",
                      "icon": "assets/icon/dynamic-ui/Hometowns.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ngovernate: $dynamicUiVariables->$searchService.searchParams.filters.governate,\ndistrict: $dynamicUiVariables->$searchService.searchParams.filters.district",
                      "properties": "...municipalityCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.networks.municipalities.items\", []).map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x)),\n    cursor: _.get(data, \"search.networks.municipalities.cursor\"),\n    domainRoute: 'Municipality',\n    cardType: 'domainCard',\n    section: 'networks',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      networks{\n        municipalities(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                       keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                       governate: $dynamicUiVariables->$searchService.searchParams.filters.governate, \n                      district: $dynamicUiVariables->$searchService.searchParams.filters.district){\n          items{\n            ...municipalityCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Governorate",
                          "name": "governate",
                          "type": "tags",
                          "onChange": "templateContext.distrcits = $dynamicUiExtraService.filterDistrict(filter.value, initialDataSource)",
                          "dataSource": "initialDataSource.governorates"
                        },
                        {
                          "title": "District",
                          "name": "district",
                          "type": "tags",
                          "dependsOn": "governate",
                          "dataSource": "templateContext.distrcits"
                        }
                      ]
                    },
                    {
                      "key": "diplomaticMissions",
                      "title": "Diplomatic Missions",
                      "icon": "assets/icon/dynamic-ui/DiplomaticMissions.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\ncity: $dynamicUiVariables->$searchService.searchParams.filters.city",
                      "properties": "...diplomaticCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.networks.diplomaticMissions.items\", []).map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x)),\n    cursor: _.get(data, \"search.networks.diplomaticMissions.cursor\"),\n    domainRoute: 'DiplomaticMission',\n    cardType: 'domainCard',\n    section: 'networks',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      networks{\n        diplomaticMissions(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                           keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                           country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n                           city: $dynamicUiVariables->$searchService.searchParams.filters.city){\n          items{\n            ...diplomaticCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Country",
                          "name": "country",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.cities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "City",
                          "name": "city",
                          "dependsOn": "country",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a city', scope, filter, templateContext.cities)"
                        }
                      ]
                    },
                    {
                      "key": "posts",
                      "title": "News",
                      "icon": "assets/icon/dynamic-ui/News.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\ncity: $dynamicUiVariables->$searchService.searchParams.filters.city",
                      "properties": "...searchPostProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.networks.posts.items\", []).map(x => $dynamicUiExtraService.mapSearchNewsToItem(x)),\n    cursor: _.get(data, \"search.networks.posts.cursor\"),\n    domainRoute: 'Post',\n    cardType: 'newsCard',\n    section: 'networks',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      networks{\n        posts(\n          first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n          keyword: $dynamicUiVariables->$searchService.searchParams.keyword,\n          country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n          city: $dynamicUiVariables->$searchService.searchParams.filters.city){\n          items{\n            ...searchPostProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Country",
                          "name": "country",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.cities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "City",
                          "name": "city",
                          "dependsOn": "country",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a city', scope, filter, templateContext.cities)"
                        }
                      ]
                    },
                    {
                      "key": "events",
                      "title": "Events",
                      "icon": "assets/icon/dynamic-ui/Events.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\npastEndDate: $dynamicUiVariables->$searchService.searchParams.pastEndDate,\nupcomingStartDate: $dynamicUiVariables->$searchService.searchParams.upcomingStartDate,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\ncity: $dynamicUiVariables->$searchService.searchParams.filters.city",
                      "properties": "...searchEventProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.networks.events.items\", []).map(x => $dynamicUiExtraService.mapSearchEventToItem(x)),\n    cursor: _.get(data, \"search.networks.events.cursor\"),\n    domainRoute: 'Event',\n    cardType: 'newsCard',\n    section: 'networks',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      networks{\n        events(\n          first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n          keyword: $dynamicUiVariables->$searchService.searchParams.keyword,\n          pastEndDate: $dynamicUiVariables->$searchService.searchParams.pastEndDate, \n          upcomingStartDate: $dynamicUiVariables->$searchService.searchParams.upcomingStartDate,                                                   \n          country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n          city: $dynamicUiVariables->$searchService.searchParams.filters.city){\n          items{\n            ...searchEventProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Date",
                          "name": "date",
                          "type": "tags",
                          "onChange": "$dynamicUiExtraService.getEventDate(filter, $searchService)",
                          "dataSource": "initialDataSource.filterDate"
                        },
                        {
                          "title": "Country",
                          "name": "country",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.cities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "City",
                          "name": "city",
                          "dependsOn": "country",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a city', scope, filter, templateContext.cities)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "key": "businesses",
                  "title": "Business",
                  "icon": "assets/icon/dynamic-ui/Business_Inactive.svg",
                  "scopes": [
                    {
                      "key": "business",
                      "title": "Companies",
                      "icon": "assets/icon/dynamic-ui/Companies.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\ncity: $dynamicUiVariables->$searchService.searchParams.filters.city,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nkeywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords,\nbrands: $dynamicUiVariables->$searchService.searchParams.filters.brands",
                      "properties": "...companyCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.businesses.business.items\", []).map(x => $dynamicUiExtraService.mapSearchCompanyToItem(x)),\n    cursor: _.get(data, \"search.businesses.business.cursor\"),\n    domainRoute: 'Company',\n    cardType: 'domainCard',\n    section: 'businesses',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      businesses{\n        business(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                  keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                  country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n                  city: $dynamicUiVariables->$searchService.searchParams.filters.city,\n                  sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n                  keywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords,\n                  brands: $dynamicUiVariables->$searchService.searchParams.filters.brands){\n          items{\n            ...companyCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Country",
                          "name": "country",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.cities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "City",
                          "name": "city",
                          "dependsOn": "country",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.cities)"
                        },
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Keywords",
                          "name": "keywords",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Keywords', scope, filter, initialDataSource.keywords, filter.value, false)",
                          "dataSource": "initialDataSource.keywords"
                        },
                        {
                          "title": "Brands",
                          "name": "brands",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Brands', scope, filter, initialDataSource.brands, filter.value, false)",
                          "dataSource": "initialDataSource.brands"
                        }
                      ]
                    },
                    {
                      "key": "startups",
                      "title": "Startups",
                      "icon": "assets/icon/dynamic-ui/Startups.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\ncity: $dynamicUiVariables->$searchService.searchParams.filters.city,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nkeywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords,\nbrands: $dynamicUiVariables->$searchService.searchParams.filters.brands",
                      "properties": "...companyCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.businesses.startups.items\", []).map(x => $dynamicUiExtraService.mapSearchCompanyToItem(x)),\n    cursor: _.get(data, \"search.businesses.startups.cursor\"),\n    domainRoute: 'Company',\n    cardType: 'domainCard',\n    section: 'businesses',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      businesses{\n        startups(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                  keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                  country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n                  city: $dynamicUiVariables->$searchService.searchParams.filters.city,\n                  sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n                  keywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords,\n                  brands: $dynamicUiVariables->$searchService.searchParams.filters.brands){\n          items{\n            ...companyCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Country",
                          "name": "country",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.cities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "City",
                          "name": "city",
                          "dependsOn": "country",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.cities)"
                        },
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Keywords",
                          "name": "keywords",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Keywords', scope, filter, initialDataSource.keywords, filter.value, false)",
                          "dataSource": "initialDataSource.keywords"
                        },
                        {
                          "title": "Brands",
                          "name": "brands",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Brands', scope, filter, initialDataSource.brands, filter.value, false)",
                          "dataSource": "initialDataSource.brands"
                        }
                      ]
                    },
                    {
                      "key": "socialenterprise",
                      "title": "Social Enterprises",
                      "icon": "assets/icon/dynamic-ui/SocialEnterprises.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\ncity: $dynamicUiVariables->$searchService.searchParams.filters.city,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nkeywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords,\nbrands: $dynamicUiVariables->$searchService.searchParams.filters.brands",
                      "properties": "...companyCommonProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.businesses.socialenterprise.items\", []).map(x => $dynamicUiExtraService.mapSearchCompanyToItem(x)),\n    cursor: _.get(data, \"search.businesses.socialenterprise.cursor\"),\n    domainRoute: 'Company',\n    cardType: 'domainCard',\n    section: 'businesses',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      businesses{\n        socialenterprise(first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n                  keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n                  country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n                  city: $dynamicUiVariables->$searchService.searchParams.filters.city,\n                  sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n                  keywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords,\n                  brands: $dynamicUiVariables->$searchService.searchParams.filters.brands){\n          items{\n            ...companyCommonProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Country",
                          "name": "country",
                          "type": "single",
                          "countryFlag": true,
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchCountriesModal('Select Country', scope, filter, initialDataSource.countries, callBackFunction)",
                          "onChange": "$dynamicUiExtraService.getCitiesForCountry(getGraphQL, $event.newValue).then(\n(data) => {\ntemplateContext.cities = data.cities;\n$actionHelper.$loaderService.dismiss();\n}\n)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "City",
                          "name": "city",
                          "dependsOn": "country",
                          "type": "single",
                          "buttonActionEmitter": "$actionHelper.openSearchModal('Select a City', scope, filter, templateContext.cities)"
                        },
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Keywords",
                          "name": "keywords",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Keywords', scope, filter, initialDataSource.keywords, filter.value, false)",
                          "dataSource": "initialDataSource.keywords"
                        },
                        {
                          "title": "Brands",
                          "name": "brands",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Brands', scope, filter, initialDataSource.brands, filter.value, false)",
                          "dataSource": "initialDataSource.brands"
                        }
                      ]
                    },
                    {
                      "key": "products",
                      "title": "Products",
                      "icon": "assets/icon/dynamic-ui/Products.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nkeywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords",
                      "properties": "...searchOfferProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.businesses.products.items\", []).map(x => $dynamicUiExtraService.mapCompanySearchOfferToItem(x)),\n    cursor: _.get(data, \"search.businesses.products.cursor\"),\n    domainRoute: 'Offer',\n    cardType: 'offerCard',\n    section: 'businesses',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      businesses{\n        products(\n          first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n          keyword: $dynamicUiVariables->$searchService.searchParams.keyword, \n          country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n          sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n          keywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords){\n          items{\n            ...searchOfferProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Market Availability",
                          "name": "country",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Market Availability', scope, filter, initialDataSource.countries, filter.value, true)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "Keywords",
                          "name": "keywords",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Keywords', scope, filter, initialDataSource.keywords, filter.value, false)",
                          "dataSource": "initialDataSource.keywords"
                        }
                      ]
                    },
                    {
                      "key": "services",
                      "title": "Services",
                      "icon": "assets/icon/dynamic-ui/Services.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nkeywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords",
                      "properties": "...searchOfferProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.businesses.services.items\", []).map(x => $dynamicUiExtraService.mapCompanySearchOfferToItem(x)),\n    cursor: _.get(data, \"search.businesses.services.cursor\"),\n    domainRoute: 'Offer',\n    cardType: 'offerCard',\n    section: 'businesses',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      businesses{\n        services(\n          first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n          keyword: $dynamicUiVariables->$searchService.searchParams.keyword,\n          country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n          sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n          keywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords){\n          items{\n            ...searchOfferProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Market Availability",
                          "name": "country",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Market Availability', scope, filter, initialDataSource.countries, filter.value, true)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "Keywords",
                          "name": "keywords",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Keywords', scope, filter, initialDataSource.keywords, filter.value, false)",
                          "dataSource": "initialDataSource.keywords"
                        }
                      ]
                    },
                    {
                      "key": "franchises",
                      "title": "Franchises",
                      "icon": "assets/icon/dynamic-ui/Franchises.svg",
                      "arguments": "first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize,\nkeyword: $dynamicUiVariables->$searchService.searchParams.keyword,\ncountry: $dynamicUiVariables->$searchService.searchParams.filters.country,\nsector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\nkeywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords",
                      "properties": "...searchOfferProperties",
                      "dataSource": {
                        "$dynamicUI:resourceType": "graphql",
                        "dataExpression": "((data) => {\n  const result =  {\n    items:  _.get(data, \"search.businesses.franchises.items\", []).map(x => $dynamicUiExtraService.mapCompanySearchOfferToItem(x)),\n    cursor: _.get(data, \"search.businesses.franchises.cursor\"),\n    domainRoute: 'Offer',\n    cardType: 'offerCard',\n    section: 'businesses',\n    totalItems: 0\n  }\n  $actionHelper.printData({ result, data })\n  result.totalItems = result.items.length;\n  return result;\n}\n)(data)",
                        "query": "query \n  { \n    search{\n      businesses{\n        franchises(\n          first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, \n          keyword: $dynamicUiVariables->$searchService.searchParams.keyword,\n          country: $dynamicUiVariables->$searchService.searchParams.filters.country,\n          sector: $dynamicUiVariables->$searchService.searchParams.filters.sector,\n          keywords: $dynamicUiVariables->$searchService.searchParams.filters.keywords){\n          items{\n            ...searchOfferProperties\n          }\n          cursor\n        }\n      }\n    } \n  }"
                      },
                      "filters": [
                        {
                          "title": "Sector",
                          "name": "sector",
                          "type": "single",
                          "isLookupTree": true,
                          "childrenName": "Sectors",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSearchSectorsModal('Select a Sector', scope, filter, initialDataSource.sectors)",
                          "dataSource": "initialDataSource.sectors"
                        },
                        {
                          "title": "Market Availability",
                          "name": "country",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Market Availability', scope, filter, initialDataSource.countries, filter.value, true)",
                          "dataSource": "initialDataSource.countries"
                        },
                        {
                          "title": "Keywords",
                          "name": "keywords",
                          "type": "multiple",
                          "buttonActionEmitter": "$actionHelper.openSearchMultiSelectModal('Keywords', scope, filter, initialDataSource.keywords, filter.value, false)",
                          "dataSource": "initialDataSource.keywords"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "createPost-page-template",
      "functions": {
        "createPost": "function ($entityId, $title, $description, $photo) {  \n  this.$actionHelper.$loaderService.present().then(() => \n\n  this.getGraphQL(`\n      mutation($entityId: String!, $title: String!, $description: String!, $photo: Upload) {\n\n        $dynamicUiExpression((|$activatedRoute.snapshot.params.type|)) {\n          addPost(\n            id: $entityId, \n            model: {\n              title: $title,\n              description: $description,\n              \n            },\n            photo: $photo\n          ) {\n            id\n          }\n        }\n\n      }\n    `, {entityId: $entityId, title: $title, description: $description,  photo: $photo}).then(uploadResponse => {\n        $actionHelper.showToast('Post added successfully');\n        $actionHelper.notifiySubscribers(['add-post'], true);\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
        "createUserPost": "function ( $title, $description, $photo) {  \n  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($title: String!, $description: String!, $photo: Upload) {\n\n        user {\n          addPost(\n            model: {\n              title: $title,\n              description: $description,\n              \n            },\n            photo: $photo\n          ) {\n            id\n          }\n        }\n\n      }\n    `, {title: $title, description: $description,  photo: $photo}).then(uploadResponse => {\n        $actionHelper.showToast('Post added successfully');\n        $actionHelper.notifiySubscribers(['add-post'], true);\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
        "uploadPhoto": "function ($id, $event) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $photo: Upload!) {\n        post {\n          uploadPhoto(id: $id, photo: $photo)\n        }\n      }\n    `, {id: $id, photo: $event}).then(uploadResponse => {\n        $actionHelper.showToast('Post added successfully');\n        $actionHelper.notifiySubscribers(['add-post'], true);\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'",
            "skeletonClass": "'with-full-image'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "attributes": {
                "$ngIf": "$activatedRoute.snapshot.params.type !== 'user'"
              },
              "properties": {
                "headerType": "'HeaderForUserAction'",
                "canGoToHomePage": false,
                "actionLabel": "'Posting Under '",
                "modalIcon": "'assets/icon/dynamic-ui/Arrow_Down_Green.svg'",
                "buttonLabel": "'Publish'",
                "buttonLabelId": "'create-post-page-publish-action-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'create-post-page-header-primitive-back-id'",
                "targetName": "$actionHelper?.parameters?.targetName",
                "targetImage": "$actionHelper?.parameters?.targetImage",
                "action": {
                  "query": "mutation{  $dynamicUiExpression((|$activatedRoute.snapshot.params.type|)) {\n    addPost(\n      id: $templateContext->activeFormArguments.entityId, \n      model: {\n        title: $templateContext->activeFormArguments.title,\n        description: $templateContext->activeFormArguments.description,\n        \n      },\n      photo: $templateContext->activeFormArguments.Image\n    ) {\n      id\n    }\n  }\n}\n",
                  "postAction": "if($actionHelper.getFormGroupData('Image'))    templateContext.additionalData.parentPage.uploadPhoto($graphQlResults[$activatedRoute.snapshot.params.type].addPost.id, $actionHelper.getFormGroupData('Image'))\n else {\n   $actionHelper.showToast('Post added successfully');\n   $actionHelper.notifiySubscribers(['add-post'], true);\n }\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "createPost($actionHelper.getFormGroupData('entityId'),$actionHelper.getFormGroupData('title'),$actionHelper.getFormGroupData('description'),$actionHelper.getFormGroupData('Image'))"
              }
            },
            {
              "element": "page-header-primitive",
              "attributes": {
                "$ngIf": "$activatedRoute.snapshot.params.type === 'user'"
              },
              "properties": {
                "headerType": "'HeaderForUserAction'",
                "canGoToHomePage": false,
                "buttonLabelId": "'create-post-page-publish-action-id'",
                "actionLabel": "'Posting Under '",
                "modalIcon": "'assets/icon/dynamic-ui/Arrow_Down_Green.svg'",
                "buttonLabel": "'Publish'",
                "disableButton": "!$actionHelper.isValidForm()",
                "leftIconId": "'create-post-page-header-primitive-back-id'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "targetName": "$actionHelper?.parameters?.targetName",
                "targetImage": "$actionHelper?.parameters?.targetImage",
                "action": {
                  "query": "mutation{  user {\n    addPost(\n      model: {\n        title: $templateContext->activeFormArguments.title,\n        description: $templateContext->activeFormArguments.description\n      }\n    ) {\n      id\n    }\n  }\n}\n",
                  "postAction": "if($actionHelper.getFormGroupData('Image'))    templateContext.additionalData.parentPage.uploadPhoto($graphQlResults.user.addPost.id, $actionHelper.getFormGroupData('Image'))\nelse {  $actionHelper.showToast('Post added successfully');\n  $actionHelper.notifiySubscribers(['add-post'], true);\n}\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "createUserPost($actionHelper.getFormGroupData('title'),$actionHelper.getFormGroupData('description'),$actionHelper.getFormGroupData('Image'))"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'create-post-page-form'",
                    "predefineData": "{'entityId': $actionHelper.getActiveDomainId()}",
                    "initialData": "dataSource",
                    "formWithImage": true,
                    "isThumbnailImage": false,
                    "cropperForCard": true,
                    "imageFormControlName": "'Image'",
                    "isRequiredImage": false,
                    "defaultImage": "'assets/icon/dynamic-ui/UploadPhoto.svg'",
                    "imageChooserActionLabel": "'Upload a photo (optional)'",
                    "imageSchemaValidationPath": "'mutation.post.uploadPhoto.photo'",
                    "dataSource": {
                      "controllers": [
                        {
                          "key": "title",
                          "label": "Post Title",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter post title",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "title",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPathExpression": "'mutation.'+ $activatedRoute.snapshot.params.type + '.addPost.model.fields.title'",
                              "messages": {
                                "isRequired": "Post Title is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "description",
                          "label": "Description",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "editor",
                          "placeholder": "Add a description",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "description",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPathExpression": "'mutation.'+ $activatedRoute.snapshot.params.type + '.addPost.model.fields.description'",
                              "messages": {
                                "isRequired": "Description is required",
                                "maxLength": "5000 Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "title"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "description"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "events": {
                    "photoActionEmitter": "$actionHelper.setFormGroupData('Image',$event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "editPost-page-template",
      "functions": {
        "uploadPhoto": "function ($id, $event) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $photo: Upload!) {\n        post {\n          uploadPhoto(id: $id, photo: $photo)\n        }\n      }\n    `, {id: $id, photo: $event}).then(uploadResponse => {\n        $actionHelper.showToast('Post updated successfully');\n        $actionHelper.notifiySubscribers(['edit-post'], true);\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'",
            "skeletonClass": "'with-full-image'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForUserAction'",
                "canGoToHomePage": false,
                "actionLabel": "'Posting Under'",
                "modalIcon": "'assets/icon/dynamic-ui/Arrow_Down_Green.svg'",
                "buttonLabel": "'Publish'",
                "buttonLabelId": "'edit-post-page-publish-action-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'edit-post-page-header-primitive-back-id'",
                "targetName": "dataSource?.actorName",
                "targetImage": "dataSource?.actorImage",
                "action": {
                  "query": "mutation{  post {\n    update(\n      id: $templateContext->activeFormArguments.id, \n      model: {\n        title: $templateContext->activeFormArguments.title,\n        description: $templateContext->activeFormArguments.description\n      }\n    ) {\n      id\n    }\n  }\n}\n",
                  "postAction": "const image = $actionHelper.getFormGroupData('Image'); const originalImage = $actionHelper.getFormGroupData('originalImage'); if(image !== originalImage)    templateContext.additionalData.parentPage.uploadPhoto($graphQlResults.post.update.id, $actionHelper.getFormGroupData('Image'))\nelse {  $actionHelper.showToast('Post updated successfully');\n  $actionHelper.notifiySubscribers(['edit-post'], true);\n}\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event, {'parentPage': this})"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'edit-post-page-form'",
                    "predefineData": "{'id': dataSource.id, 'originalImage': dataSource.image, 'targetId': dataSource.actorId}",
                    "initialData": "dataSource",
                    "formWithImage": true,
                    "isThumbnailImage": false,
                    "cropperForCard": true,
                    "imageFormControlName": "'Image'",
                    "isRequiredImage": false,
                    "imageValue": "'image'",
                    "defaultImage": "'assets/icon/dynamic-ui/UploadPhoto.svg'",
                    "imageChooserActionLabel": "'Upload a photo (optional)'",
                    "imageSchemaValidationPath": "'mutation.post.uploadPhoto.photo'",
                    "dataSource": {
                      "controllers": [
                        {
                          "key": "title",
                          "label": "Post Title",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter post title",
                          "value": "",
                          "valueType": "input",
                          "valuePath": "title",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.post.update.model.fields.title",
                              "messages": {
                                "isRequired": "Post title is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "description",
                          "label": "Description",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "editor",
                          "placeholder": "Add a description",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "description",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.post.update.model.fields.description",
                              "messages": {
                                "isRequired": "Description is required",
                                "maxLength": "5000 Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "title"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "description"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "events": {
                    "photoActionEmitter": "$actionHelper.setFormGroupData('Image',$event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "createEvent-page-template",
      "functions": {
        "createEvent": "function ($entityId, $title, $description, $location, $startDate, $endDate, $photo) {    if(new Date($startDate).getTime() >= new Date($endDate).getTime()) {\n        this.$actionHelper.translateService.get('EVENT.START_EVENT_DATE_VALIDATION').subscribe((message) => {\n          this.$actionHelper.showToast(message)\n        });\n        return;\n    }\n\n  this.$actionHelper.$loaderService.present().then(() => \n\n    this.getGraphQL(`\n      mutation($entityId: String!, $title: String!, $description: String!, $location: String!, $startDate: DateTime!, $endDate: DateTime!, $photo: Upload!) {\n         \n        $dynamicUiExpression((|$activatedRoute.snapshot.params.type|)) {\n          addEvent(\n            id: $entityId, \n            model: {\n              title: $title,\n              description: $description,\n              location: $location,\n              startDate: $startDate,\n              endDate: $endDate\n            },\n            photo: $photo\n          ) {\n            id\n          }\n        }\n\n      }\n    `, {entityId: $entityId, title: $title, description: $description, location: $location, startDate: $startDate, endDate: $endDate,  photo: $photo}).then(uploadResponse => {\n        $actionHelper.showToast('Post added successfully');\n        $actionHelper.notifiySubscribers(['add-post'], true);\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
        "uploadPhoto": "function ($id, $event) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $photo: Upload!) {\n        event {\n          uploadPhoto(id: $id, photo: $photo)\n        }\n      }\n    `, {id: $id, photo: $event}).then(uploadResponse => {\n        $actionHelper.showToast('Event added successfully');\n        $actionHelper.notifiySubscribers(['add-event'], true);\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'",
            "skeletonClass": "'with-full-image'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForUserAction'",
                "canGoToHomePage": false,
                "actionLabel": "'Posting Under'",
                "modalIcon": "'assets/icon/dynamic-ui/Arrow_Down_Green.svg'",
                "buttonLabel": "'Publish'",
                "buttonLabelId": "'create-event-page-publish-action-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'create-event-page-header-primitive-back-id'",
                "targetName": "$actionHelper?.parameters?.targetName",
                "targetImage": "$actionHelper?.parameters?.targetImage",
                "action": {
                  "condition": "new Date($actionHelper.getFormGroupData('startDate')).getTime() >= new Date($actionHelper.getFormGroupData('endDate')).getTime()",
                  "conditionErrorMessage": "EVENT.START_EVENT_DATE_VALIDATION",
                  "query": "mutation{  $dynamicUiExpression((|$activatedRoute.snapshot.params.type|)) {\n    addEvent(\n      id: $templateContext->activeFormArguments.entityId, \n      model: {\n        title: $templateContext->activeFormArguments.title,\n        description: $templateContext->activeFormArguments.description,\n        location: $templateContext->activeFormArguments.location,\n        startDate: $templateContext->activeFormArguments.startDate,\n        endDate: $templateContext->activeFormArguments.endDate\n      }\n    ) {\n      id\n    }\n  }\n}\n",
                  "postAction": "if($actionHelper.getFormGroupData('Image'))    templateContext.additionalData.parentPage.uploadPhoto($graphQlResults[$activatedRoute.snapshot.params.type].addEvent.id, $actionHelper.getFormGroupData('Image'))\nelse {  $actionHelper.showToast('Event added successfully');\n  $actionHelper.notifiySubscribers(['add-event'], true);\n}\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "createEvent($actionHelper.getFormGroupData('entityId'),$actionHelper.getFormGroupData('title'),$actionHelper.getFormGroupData('description'),$actionHelper.getFormGroupData('location'),$actionHelper.getFormGroupData('startDate'),$actionHelper.getFormGroupData('endDate'),$actionHelper.getFormGroupData('Image'))"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'create-event-page-form'",
                    "predefineData": "{'entityId': $actionHelper.getActiveDomainId()}",
                    "initialData": "dataSource",
                    "formWithImage": true,
                    "isThumbnailImage": false,
                    "cropperForCard": true,
                    "imageFormControlName": "'Image'",
                    "isRequiredImage": true,
                    "defaultImage": "'assets/icon/dynamic-ui/UploadPhoto.svg'",
                    "imageChooserActionLabel": "'Upload a photo (required)'",
                    "imageSchemaValidationPath": "'mutation.event.uploadPhoto.photo'",
                    "dataSource": {
                      "controllers": [
                        {
                          "key": "title",
                          "label": "Event Title",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter an Event title",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "title",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPathExpression": "'mutation.'+ $activatedRoute.snapshot.params.type + '.addEvent.model.fields.title'",
                              "messages": {
                                "isRequired": "Event title is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "startDate",
                          "label": "Start Date",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "date",
                          "type": "text",
                          "placeholder": "Specify a start date",
                          "value": null,
                          "valueType": "date",
                          "valuePath": "startDate",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPathExpression": "'mutation.'+ $activatedRoute.snapshot.params.type + '.addEvent.model.fields.startDate'",
                              "messages": {
                                "isRequired": "Start date is required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "endDate",
                          "label": "End Date",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "date",
                          "type": "text",
                          "placeholder": "Specify an end date",
                          "value": null,
                          "valueType": "date",
                          "valuePath": "endDate",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPathExpression": "'mutation.'+ $activatedRoute.snapshot.params.type + '.addEvent.model.fields.endDate'",
                              "messages": {
                                "isRequired": "End date is required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "location",
                          "label": "Event Location",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter a location for your event",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "location",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPathExpression": "'mutation.'+ $activatedRoute.snapshot.params.type + '.addEvent.model.fields.location'",
                              "messages": {
                                "isRequired": "Location is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "description",
                          "label": "Event Description",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "editor",
                          "placeholder": "Event Description",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "description",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPathExpression": "'mutation.'+ $activatedRoute.snapshot.params.type + '.addEvent.model.fields.description'",
                              "messages": {
                                "isRequired": "Description is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "title"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "startDate"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "endDate"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "location"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "description"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "events": {
                    "photoActionEmitter": "$actionHelper.setFormGroupData('Image',$event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "editEvent-page-template",
      "functions": {
        "uploadPhoto": "function ($id, $event) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $photo: Upload!) {\n        event {\n          uploadPhoto(id: $id, photo: $photo)\n        }\n      }\n    `, {id: $id, photo: $event}).then(uploadResponse => {\n        $actionHelper.showToast('Event updated successfully');\n        $actionHelper.notifiySubscribers(['edit-post'], true);\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'",
            "skeletonClass": "'with-full-image'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForUserAction'",
                "canGoToHomePage": false,
                "actionLabel": "'Posting Under'",
                "modalIcon": "'assets/icon/dynamic-ui/Arrow_Down_Green.svg'",
                "buttonLabel": "'Publish'",
                "buttonLabelId": "'edit-event-page-publish-action-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'edit-event-page-header-primitive-back-id'",
                "targetName": "dataSource?.actorName",
                "targetImage": "dataSource?.actorImage",
                "action": {
                  "condition": "new Date($actionHelper.getFormGroupData('startDate')).getTime() >= new Date($actionHelper.getFormGroupData('endDate')).getTime()",
                  "conditionErrorMessage": "EVENT.START_EVENT_DATE_VALIDATION",
                  "query": "mutation{  event {\n    update(\n      id: $templateContext->activeFormArguments.id, \n      model: {\n        title: $templateContext->activeFormArguments.title,\n        description: $templateContext->activeFormArguments.description,\n        location: $templateContext->activeFormArguments.location,\n        startDate: $templateContext->activeFormArguments.startDate,\n        endDate: $templateContext->activeFormArguments.endDate\n      }\n    ) {\n      id\n    }\n  }\n}\n",
                  "postAction": "const image = $actionHelper.getFormGroupData('Image'); const originalImage = $actionHelper.getFormGroupData('originalImage');\nif(image !== originalImage)    templateContext.additionalData.parentPage.uploadPhoto($graphQlResults.event.update.id, $actionHelper.getFormGroupData('Image'))\nelse {  $actionHelper.showToast('Event updated successfully');\n  $actionHelper.notifiySubscribers(['edit-post'], true);\n}\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event, {'parentPage': this})"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'edit-event-page-form'",
                    "predefineData": "{'id': $actionHelper.getActiveDomainId(), 'originalImage': dataSource.image, 'targetId': dataSource.actorId}",
                    "initialData": "dataSource",
                    "formWithImage": true,
                    "isThumbnailImage": false,
                    "cropperForCard": true,
                    "imageValue": "'image'",
                    "imageFormControlName": "'Image'",
                    "isRequiredImage": true,
                    "defaultImage": "'assets/icon/dynamic-ui/UploadPhoto.svg'",
                    "imageChooserActionLabel": "'Upload a photo (required)'",
                    "imageSchemaValidationPath": "'mutation.event.uploadPhoto.photo'",
                    "dataSource": {
                      "controllers": [
                        {
                          "key": "title",
                          "label": "Event Title",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter a title for your event",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "title",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.event.update.model.fields.title",
                              "messages": {
                                "isRequired": "event title is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "startDate",
                          "label": "Start Date",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "date",
                          "type": "text",
                          "placeholder": "Specify a start date",
                          "value": null,
                          "valueType": "date",
                          "valuePath": "startDate",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.event.update.model.fields.startDate",
                              "messages": {
                                "isRequired": "Start date is required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "endDate",
                          "label": "End Date",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "date",
                          "type": "text",
                          "placeholder": "Specify an end date",
                          "value": null,
                          "valueType": "date",
                          "valuePath": "endDate",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.event.update.model.fields.endDate",
                              "messages": {
                                "isRequired": "End date is required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "location",
                          "label": "Event Location",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter event location",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "location",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.event.update.model.fields.location",
                              "messages": {
                                "isRequired": "Location is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "description",
                          "label": "Event Description",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "editor",
                          "placeholder": "Enter event description here",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "description",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": false,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.event.update.model.fields.description",
                              "messages": {
                                "isRequired": "Description is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "title"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "startDate"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "endDate"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "location"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "description"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "events": {
                    "photoActionEmitter": "$actionHelper.setFormGroupData('Image',$event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "addMedia-page-template",
      "functions": {
        "uploadPhoto": "function ($id, $caption, $event) {  const $newCaption = $caption.replace(/\\n/g, '<br>');\n  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $caption: String, $photo: Upload!) {\n        mediaGallery {\n          uploadImage(id: $id, caption: $caption, photo: $photo) {\n            id\n          }\n        }\n      }\n    `, {id: $id, caption: $newCaption, photo: $event}).then(uploadResponse => {\n        $actionHelper.showToast('Photo added successfully');\n        $actionHelper.notifiySubscribers(['add-media'], true);\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
        "uploadVideoLink": "function ($id, $caption, $image, $link) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $caption: String, $image: String!, $link: String!) {\n        mediaGallery {\n          uploadVideoLink(id: $id, caption: $caption, link: $image, videoLink: $link) {\n            id\n          }\n        }\n      }\n    `, {id: $id, caption: $caption, image: $image, link: $link}).then(uploadResponse => {\n        $actionHelper.showToast('Video added successfully');\n        $actionHelper.notifiySubscribers(['add-media'], true);\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
        "checkYoutubeLink": "function(youTubeUrl, imageId) {  if (youTubeUrl !== undefined || youTubeUrl !== '') {\n    const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    const match = youTubeUrl.match(regExp);\n    if (match && match[7].length == 11) {\n      const youtubeId = match[7];\n      if(youtubeId) {\n        const url = `https://www.googleapis.com/youtube/v3/videos?part=id%2C+snippet&id=${youtubeId}&key=AIzaSyAWLAzXtjHPDdyVmZqxFKqqw2LjmDapr68`\n        const params = {'url': url}\n        this.$actionHelper.$loaderService.present().then(() => {\n          this.$actionHelper.advancedHttp.get(url, {}, {}).then(response => {\n            if (response.status === 200) {\n                const data = response.data ? JSON.parse(response.data): null;\n                const items = _.get(data, \"items\");\n                if(items && items.length > 0) {\n                  const videoItem = items[0];\n                  const videoDescription = _.get(videoItem, \"snippet.description\");\n                  const videoImage = _.get(videoItem, \"snippet.thumbnails.high.url\");\n\n                  $actionHelper.setFormGroupData('Image', videoImage);\n                  $actionHelper.setFormGroupData('caption', videoDescription);\n                  $actionHelper.setYoutubeVideoLink(youTubeUrl);\n                  document.getElementById(imageId).src = videoImage;\n                } else {\n                  this.$actionHelper.showToast('Invalid YouTube URL');\n                }\n            } else throw response;\n          })\n          .catch(error => {\n            $actionHelper.printData(JSON.stringify(error))\n          })\n          .finally(() => {\n            this.$actionHelper.$loaderService.dismiss();\n          });  \n        })  \n      } else {\n        this.$actionHelper.showToast('Invalid YouTube URL');\n      }\n    } else {\n      this.$actionHelper.showToast('Invalid YouTube URL');\n    }\n  }      \n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'",
            "skeletonClass": "'with-full-image'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForUserAction'",
                "canGoToHomePage": false,
                "actionLabel": "'Posting Under'",
                "modalIcon": "'assets/icon/dynamic-ui/Arrow_Down_Green.svg'",
                "buttonLabel": "'Publish'",
                "buttonLabelId": "'upload-media-page-publish-action-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'upload-media-page-header-primitive-back-id'",
                "targetName": "$actionHelper?.parameters?.targetName",
                "targetImage": "$actionHelper?.parameters?.targetImage"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.getFormGroupData('fromYoutube') ?   uploadVideoLink ($activatedRoute.snapshot.params.id, $actionHelper.getFormGroupData('caption'), $actionHelper.getFormGroupData('Image'), $actionHelper.getYoutubeVideoLink()) \n      : uploadPhoto($activatedRoute.snapshot.params.id, $actionHelper.getFormGroupData('caption'), $actionHelper.getFormGroupData('Image'))\n"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'upload-media-page-form'",
                    "predefineData": "{'fromYoutube': false}",
                    "formWithImage": true,
                    "isThumbnailImage": false,
                    "cropperForCard": true,
                    "imageFormControlName": "'Image'",
                    "isRequiredImage": true,
                    "withYoutube": true,
                    "defaultImage": "'assets/icon/dynamic-ui/UploadPhoto.svg'",
                    "imageChooserActionLabel": "'Add Photo or Video (required)'",
                    "canUploadImage": "dataSource.canUploadImage",
                    "canUploadVideoLink": "dataSource.canUploadVideoLink",
                    "imageSchemaValidationPath": "'mutation.mediaGallery.uploadImage.photo'",
                    "dataSource": {
                      "controllers": [
                        {
                          "key": "caption",
                          "label": "Caption",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "textarea",
                          "placeholder": "Enter caption",
                          "value": null,
                          "valueType": "input",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.mediaGallery.uploadImage.caption",
                              "messages": {
                                "isRequired": "Caption is required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "caption"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "events": {
                    "photoActionEmitter": "$actionHelper.setFormGroupData('Image',$event)",
                    "youtubeActionEmitter": "checkYoutubeLink($event, 'photo_chooser_image')"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "addProduct-page-template",
      "functions": {
        "afterInit": "function() {  this.$actionHelper.prepareLookups();\n  this.$actionHelper.getKeywordsLookups();\n}\n",
        "createOffer": "function ($entityId, $offerName, $description, $sector,$countries,$keywords, $photo) {  \n  this.$actionHelper.$loaderService.present().then(() => \n\n  this.getGraphQL(`\n      mutation($entityId: String!, $offerName: String!, $description: String!, $sector: String!, $photo: Upload!) {\n          company {\n            addOffer(\n              id: $entityId, \n              model: {\n                type:PRODUCT,\n                name: $offerName,\n                description: $description,\n                sector: $sector,\n                countries: $dynamicUiExpression((|$actionHelper.prepareArrayValues('marketAvailability')|)),\n                keywords: $dynamicUiExpression((|$actionHelper.prepareArrayValues('keyword')|))\n              },\n               photo: $photo\n            ) {\n              id\n            }\n          }\n\n      }\n    `, {entityId: $entityId, offerName: $offerName, description:$description ,sector: $sector, photo: $photo}).then(uploadResponse => {\n        $actionHelper.showToast('Post added successfully');\n        $actionHelper.notifiySubscribers(['add-post'], true);\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
        "uploadPhoto": "function ($id, $event) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $photo: Upload!) {\n        offer {\n          uploadPhoto(id: $id, photo: $photo)\n        }\n      }\n    `, {id: $id, photo: $event}).then(uploadResponse => {\n        $actionHelper.showToast('Product listed successfully');\n        $actionHelper.notifiySubscribers(['add-offer'], true);\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'",
            "skeletonClass": "'with-full-image'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForUserAction'",
                "canGoToHomePage": false,
                "actionLabel": "'Posting Under'",
                "modalIcon": "'assets/icon/dynamic-ui/Arrow_Down_Green.svg'",
                "buttonLabel": "'Publish'",
                "buttonLabelId": "'create-product-page-publish-action-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'create-product-page-header-primitive-back-id'",
                "targetName": "$actionHelper?.parameters?.targetName",
                "targetImage": "$actionHelper?.parameters?.targetImage",
                "action": {
                  "query": "mutation{  company {\n    addOffer(\n      id: $templateContext->activeFormArguments.entityId, \n      model: {\n        type:PRODUCT,\n        name: $templateContext->activeFormArguments.offerName,\n        description: $templateContext->activeFormArguments.description,\n        sector: $templateContext->activeFormArguments.sector,\n        countries: $dynamicUiExpression((|prepareLookup(templateContext.activeFormArguments, 'marketAvailability')|)),\n        keywords: $dynamicUiExpression((|prepareLookup(templateContext.activeFormArguments, 'keyword')|))\n      }\n    ) {\n      id\n    }\n  }\n}\n",
                  "postAction": "if($actionHelper.getFormGroupData('Image'))    templateContext.additionalData.parentPage.uploadPhoto($graphQlResults.company.addOffer.id, $actionHelper.getFormGroupData('Image'))\nelse {  $actionHelper.showToast('Product listed successfully');\n  $actionHelper.notifiySubscribers(['add-offer'], true);\n}\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "createOffer($actionHelper.getFormGroupData('entityId'),$actionHelper.getFormGroupData('offerName'),$actionHelper.getFormGroupData('description'),$actionHelper.getFormGroupData('sector'),$actionHelper.getFormGroupData('countries'),$actionHelper.getFormGroupData('keywords'),$actionHelper.getFormGroupData('Image'))"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'create-product-page-form'",
                    "predefineData": "{'entityId': $actionHelper.getActiveDomainId()}",
                    "formWithImage": true,
                    "initialData": "dataSource",
                    "isThumbnailImage": false,
                    "cropperForCard": true,
                    "imageFormControlName": "'Image'",
                    "isRequiredImage": true,
                    "defaultImage": "'assets/icon/dynamic-ui/UploadPhoto.svg'",
                    "imageChooserActionLabel": "'Upload a product photo (required)'",
                    "imageSchemaValidationPath": "'mutation.offer.uploadPhoto.photo'",
                    "dataSource": {
                      "functions": {
                        "afterInit": "function() {  this.formPrimitive.initialDataSource.keywords.forEach(x => {x.selected = false; x.isSelected = false});  \n  this.formPrimitive.initialDataSource.countries.forEach(x => {x.selected = false; x.isSelected = false});\n}\n",
                        "addNewKeyword": "function ($keyword, parentComponent) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($keyword: String!) {\n        company {\n          addKeyword(title: $keyword) {\n            lookupId\n            name\n          }\n        }\n      }\n    `, {keyword: $keyword}).then(data => {    \n        this.$actionHelper.getKeywordsLookups();\n        const newOption = _.get(data, 'company.addKeyword', null);\n        if(newOption) {\n          newOption.isSelected = true;\n          parentComponent.options.unshift(newOption);\n          parentComponent.initialOptions.unshift(newOption);\n          parentComponent.getInitialList();  \n        }\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
                        "openKeywords": "function($event,form, formGroup, initialDataSource, formsData) {  this.$actionHelper.openMultiSelectModal('Keywords ', 'Tap to add a new keyword', 'Keyword already exists', $event.element, formGroup, initialDataSource.keywords, \n  $event.element.value, false, formsData, true, true, initialDataSource, (newKeyword, parentComponent) => { this.addNewKeyword(newKeyword, parentComponent) })   \n}\n"
                      },
                      "controllers": [
                        {
                          "key": "offerName",
                          "label": "Product Name",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter the product name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.addOffer.model.fields.name",
                              "messages": {
                                "isRequired": "Product name is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "sector",
                          "label": "Sector",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a sector",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": "Select a Sector",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSectorsModal('Select a Sector', $event.element, formGroup, initialDataSource.sectors)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.addOffer.model.fields.sector",
                              "messages": {
                                "isRequired": "Sector is required"
                              }
                            }
                          ],
                          "lookups": "sectors",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "marketAvailability",
                          "label": "Market Availability",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "chips-button",
                          "placeholder": "Markets for your product",
                          "value": null,
                          "valueType": "country",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": "Market Availability",
                          "itemAddedHint": null,
                          "itemExistErrorMessage": null,
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "this.$actionHelper.openMultiSelectModal('Market Availability', null, null, $event.element, formGroup, initialDataSource?.countries, $event.element.value, true, formsData, false, true, initialDataSource)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.addOffer.model.fields.countries",
                              "messages": {
                                "isRequired": "Market availability is required"
                              }
                            }
                          ],
                          "lookups": "marketPlaceAvailability",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "keyword",
                          "label": "Keywords",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "chips-button",
                          "placeholder": "Select one or more keywords",
                          "value": null,
                          "valueType": "multiSelect",
                          "valuePath": null,
                          "withNullValue": true,
                          "actionTitle": "Keywords",
                          "itemAddedHint": null,
                          "itemExistErrorMessage": null,
                          "required": false,
                          "buttonActionEmitter": "this.openKeywords($event, form, formGroup, initialDataSource, formsData)",
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.addOffer.model.fields.keywords",
                              "messages": {
                                "isRequired": "Keywords is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "lookups": "keywords",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "description",
                          "label": "Description",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "editor",
                          "placeholder": "Add description here",
                          "value": null,
                          "valueType": "input",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.addOffer.model.fields.description",
                              "messages": {
                                "isRequired": "Description is required",
                                "maxLength": "5000 Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "offerName"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "sector"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "marketAvailability"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "keyword"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "description"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "events": {
                    "photoActionEmitter": "$actionHelper.setFormGroupData('Image',$event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "editProduct-page-template",
      "functions": {
        "afterInit": "function() {  this.$actionHelper.prepareLookups();\n  this.$actionHelper.getKeywordsLookups();\n}\n",
        "uploadPhoto": "function ($id, $event) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $photo: Upload!) {\n        offer {\n          uploadPhoto(id: $id, photo: $photo)\n        }\n      }\n    `, {id: $id, photo: $event}).then(uploadResponse => {\n        $actionHelper.showToast('Product edited successfully');\n        $actionHelper.notifiySubscribers(['edit-post'], true);\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'",
            "skeletonClass": "'with-full-image'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForUserAction'",
                "canGoToHomePage": false,
                "actionLabel": "'Posting Under'",
                "modalIcon": "'assets/icon/dynamic-ui/Arrow_Down_Green.svg'",
                "buttonLabel": "'Publish'",
                "buttonLabelId": "'edit-product-page-publish-action-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'edit-product-page-header-primitive-back-id'",
                "targetName": "dataSource?.actorName",
                "targetImage": "dataSource?.actorImage",
                "action": {
                  "query": "mutation{  offer {\n    update(\n      id: $templateContext->activeFormArguments.id,\n      model: {\n        type:PRODUCT,\n        name: $templateContext->activeFormArguments.offerName,\n        description: $templateContext->activeFormArguments.description,\n        sector: $templateContext->activeFormArguments.sector,\n        countries: $dynamicUiExpression((|prepareLookup(templateContext.activeFormArguments, 'marketAvailability')|)),\n        keywords: $dynamicUiExpression((|prepareLookup(templateContext.activeFormArguments, 'keyword')|))\n      }\n    ) {\n      id\n    }\n  }\n}\n",
                  "postAction": "const image = $actionHelper.getFormGroupData('Image'); const originalImage = $actionHelper.getFormGroupData('originalImage');\nif(image !== originalImage)    templateContext.additionalData.parentPage.uploadPhoto($graphQlResults.offer.update.id, $actionHelper.getFormGroupData('Image'))\nelse {  $actionHelper.showToast('Product edited successfully');\n  $actionHelper.notifiySubscribers(['edit-post'], true);\n}\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event, {'parentPage': this})"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'edit-product-page-form'",
                    "predefineData": "{'id': $actionHelper.getActiveDomainId(), 'originalImage': dataSource.image, 'targetId': dataSource.actorId}",
                    "formWithImage": true,
                    "isThumbnailImage": false,
                    "cropperForCard": true,
                    "initialData": "dataSource",
                    "imageFormControlName": "'Image'",
                    "isRequiredImage": true,
                    "imageValue": "'image'",
                    "defaultImage": "'assets/icon/dynamic-ui/UploadPhoto.svg'",
                    "imageChooserActionLabel": "'Upload a product photo (required)'",
                    "imageSchemaValidationPath": "'mutation.offer.uploadPhoto.photo'",
                    "dataSource": {
                      "functions": {
                        "afterInit": "function() {  this.formPrimitive.initialDataSource.keywords.forEach(x => {x.selected = false; x.isSelected = false});  \n  this.formPrimitive.initialDataSource.countries.forEach(x => {x.selected = false; x.isSelected = false});\n}\n",
                        "addNewKeyword": "function ($keyword, parentComponent) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($keyword: String!) {\n        company {\n          addKeyword(title: $keyword) {\n            lookupId\n            name\n          }\n        }\n      }\n    `, {keyword: $keyword}).then(data => {    \n        this.$actionHelper.getKeywordsLookups();\n        const newOption = _.get(data, 'company.addKeyword', null);\n        if(newOption) {\n          newOption.isSelected = true;\n          parentComponent.options.unshift(newOption);\n          parentComponent.initialOptions.unshift(newOption);\n          parentComponent.getInitialList();  \n        }\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
                        "openKeywords": "function($event,form, formGroup, initialDataSource, formsData) {  this.$actionHelper.openMultiSelectModal('Keywords ', 'Tap to add a new keyword', 'Keyword already exists', $event.element, formGroup, initialDataSource.keywords, \n  $event.element.value, false, formsData, true, true, initialDataSource, (newKeyword, parentComponent) => { this.addNewKeyword(newKeyword, parentComponent) })   \n}\n"
                      },
                      "controllers": [
                        {
                          "key": "offerName",
                          "label": "Product Name",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter the product name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "offerName",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.offer.update.model.fields.name",
                              "messages": {
                                "isRequired": "Product name is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "sector",
                          "label": "Sector",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a sector",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": "sector",
                          "withNullValue": false,
                          "actionTitle": "Select a Sector",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSectorsModal('Select a Sector', $event.element, formGroup, initialDataSource.sectors)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.offer.update.model.fields.sector",
                              "messages": {
                                "isRequired": "Sector is required"
                              }
                            }
                          ],
                          "lookups": "sectors",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "marketAvailability",
                          "label": "Market Availability",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "chips-button",
                          "placeholder": "Markets for your product",
                          "value": null,
                          "valueType": "multiSelect",
                          "valuePath": "countries",
                          "withNullValue": false,
                          "actionTitle": "Market Availability",
                          "itemAddedHint": null,
                          "itemExistErrorMessage": null,
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "this.$actionHelper.openMultiSelectModal('Market Availability', null, null, $event.element, formGroup, initialDataSource?.countries, $event.element.value, true, formsData, false, true, initialDataSource)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.offer.update.model.fields.countries",
                              "messages": {
                                "isRequired": "Market availability is required"
                              }
                            }
                          ],
                          "lookups": "marketPlaceAvailability",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "keyword",
                          "label": "Keywords",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "chips-button",
                          "placeholder": "Select one or more keywords",
                          "value": null,
                          "valueType": "multiSelect",
                          "valuePath": "keywords",
                          "withNullValue": true,
                          "actionTitle": "Keywords",
                          "itemAddedHint": null,
                          "itemExistErrorMessage": null,
                          "required": false,
                          "buttonActionEmitter": "this.openKeywords($event, form, formGroup, initialDataSource, formsData)",
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.addOffer.model.fields.keywords",
                              "messages": {
                                "isRequired": "Keywords is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "lookups": "keywords",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "description",
                          "label": "Description",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "editor",
                          "placeholder": "Add description here",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "description",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.offer.update.model.fields.description",
                              "messages": {
                                "isRequired": "Description is required",
                                "maxLength": "5000 Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "offerName"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "sector"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "marketAvailability"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "keyword"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "description"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "events": {
                    "photoActionEmitter": "$actionHelper.setFormGroupData('Image',$event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "addService-page-template",
      "functions": {
        "afterInit": "function() {  this.$actionHelper.prepareLookups();\n  this.$actionHelper.getKeywordsLookups();\n}\n",
        "createServiceOffer": "function ($entityId, $offerName, $description, $sector,$countries,$keywords, $photo) {  \n  this.$actionHelper.$loaderService.present().then(() => \n\n  this.getGraphQL(`\n      mutation($entityId: String!, $offerName: String!, $description: String!, $sector: String!, $photo: Upload!) {\n          company {\n            addOffer(\n              id: $entityId, \n              model: {\n                type:SERVICE,\n                name: $offerName,\n                description: $description,\n                sector: $sector,\n                countries: $dynamicUiExpression((|$actionHelper.prepareArrayValues('marketAvailability')|)),\n                keywords: $dynamicUiExpression((|$actionHelper.prepareArrayValues('keyword')|))\n              },\n               photo: $photo\n            ) {\n              id\n            }\n          }\n\n      }\n    `, {entityId: $entityId, offerName: $offerName, description:$description ,sector: $sector, photo: $photo}).then(uploadResponse => {\n        $actionHelper.showToast('Post added successfully');\n        $actionHelper.notifiySubscribers(['add-post'], true);\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
        "uploadPhoto": "function ($id, $event) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $photo: Upload!) {\n        offer {\n          uploadPhoto(id: $id, photo: $photo)\n        }\n      }\n    `, {id: $id, photo: $event}).then(uploadResponse => {\n        $actionHelper.showToast('Service listed successfully');\n        $actionHelper.notifiySubscribers(['add-offer'], true);\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'",
            "skeletonClass": "'with-full-image'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForUserAction'",
                "canGoToHomePage": false,
                "actionLabel": "'Posting Under'",
                "modalIcon": "'assets/icon/dynamic-ui/Arrow_Down_Green.svg'",
                "buttonLabel": "'Publish'",
                "buttonLabelId": "'create-service-page-publish-action-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'create-service-page-header-primitive-back-id'",
                "targetName": "$actionHelper?.parameters?.targetName",
                "targetImage": "$actionHelper?.parameters?.targetImage",
                "action": {
                  "query": "mutation{  company {\n    addOffer(\n      id: $templateContext->activeFormArguments.entityId, \n      model: {\n        type:SERVICE,\n        name: $templateContext->activeFormArguments.offerName,\n        description: $templateContext->activeFormArguments.description,\n        sector: $templateContext->activeFormArguments.sector,\n        countries: $dynamicUiExpression((|prepareLookup(templateContext.activeFormArguments, 'marketAvailability')|)),\n        keywords: $dynamicUiExpression((|prepareLookup(templateContext.activeFormArguments, 'keyword')|))\n      }\n    ) {\n      id\n    }\n  }\n}\n",
                  "postAction": "if($actionHelper.getFormGroupData('Image'))    templateContext.additionalData.parentPage.uploadPhoto($graphQlResults.company.addOffer.id, $actionHelper.getFormGroupData('Image'))\nelse {  $actionHelper.showToast('Service listed successfully');\n  $actionHelper.notifiySubscribers(['add-offer'], true);\n}\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "createServiceOffer($actionHelper.getFormGroupData('entityId'),$actionHelper.getFormGroupData('offerName'),$actionHelper.getFormGroupData('description'),$actionHelper.getFormGroupData('sector'),$actionHelper.getFormGroupData('countries'),$actionHelper.getFormGroupData('keywords'),$actionHelper.getFormGroupData('Image'))"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'create-service-page-form'",
                    "predefineData": "{'entityId': $actionHelper.getActiveDomainId()}",
                    "formWithImage": true,
                    "isThumbnailImage": false,
                    "cropperForCard": true,
                    "initialData": "dataSource",
                    "imageFormControlName": "'Image'",
                    "isRequiredImage": true,
                    "defaultImage": "'assets/icon/dynamic-ui/UploadPhoto.svg'",
                    "imageChooserActionLabel": "'Upload a photo (required)'",
                    "imageSchemaValidationPath": "'mutation.offer.uploadPhoto.photo'",
                    "dataSource": {
                      "functions": {
                        "afterInit": "function() {  this.formPrimitive.initialDataSource.keywords.forEach(x => {x.selected = false; x.isSelected = false});  \n  this.formPrimitive.initialDataSource.countries.forEach(x => {x.selected = false; x.isSelected = false});\n}\n",
                        "addNewKeyword": "function ($keyword, parentComponent) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($keyword: String!) {\n        company {\n          addKeyword(title: $keyword) {\n            lookupId\n            name\n          }\n        }\n      }\n    `, {keyword: $keyword}).then(data => {   \n        this.$actionHelper.getKeywordsLookups();\n        const newOption = _.get(data, 'company.addKeyword', null);\n        if(newOption) {\n          newOption.isSelected = true;\n          parentComponent.options.unshift(newOption);\n          parentComponent.initialOptions.unshift(newOption);\n          parentComponent.getInitialList();  \n        }\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
                        "openKeywords": "function($event,form, formGroup, initialDataSource, formsData) {  this.$actionHelper.openMultiSelectModal('Keywords ', 'Tap to add a new keyword', 'Keyword already exists', $event.element, formGroup, initialDataSource.keywords, \n  $event.element.value, false, formsData, true, true, initialDataSource, (newKeyword, parentComponent) => { this.addNewKeyword(newKeyword, parentComponent) })   \n}\n"
                      },
                      "controllers": [
                        {
                          "key": "offerName",
                          "label": "Service Name",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter a service name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.addOffer.model.fields.name",
                              "messages": {
                                "isRequired": "Service name is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "sector",
                          "label": "Sector",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a sector",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": "Select a Sector",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSectorsModal('Select a Sector', $event.element, formGroup, initialDataSource.sectors)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.addOffer.model.fields.sector",
                              "messages": {
                                "isRequired": "Sector is required"
                              }
                            }
                          ],
                          "lookups": "sectors",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "marketAvailability",
                          "label": "Market Availability",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "chips-button",
                          "placeholder": "Countries where you offer this service",
                          "value": null,
                          "valueType": "country",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": "Market Availability",
                          "itemAddedHint": null,
                          "itemExistErrorMessage": null,
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "this.$actionHelper.openMultiSelectModal('Market Availability', null, null, $event.element, formGroup, initialDataSource?.countries, $event.element.value, true, formsData, false, true, initialDataSource)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.addOffer.model.fields.countries",
                              "messages": {
                                "isRequired": "Market availability is required"
                              }
                            }
                          ],
                          "lookups": "marketPlaceAvailability",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "keyword",
                          "label": "Keywords",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "chips-button",
                          "placeholder": "Select one or more keywords",
                          "value": null,
                          "valueType": "multiSelect",
                          "valuePath": null,
                          "withNullValue": true,
                          "actionTitle": "Keywords",
                          "itemAddedHint": null,
                          "itemExistErrorMessage": null,
                          "required": false,
                          "buttonActionEmitter": "this.openKeywords($event, form, formGroup, initialDataSource, formsData)",
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.addOffer.model.fields.keywords",
                              "messages": {
                                "isRequired": "Keywords is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "lookups": "keywords",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "description",
                          "label": "Description",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "editor",
                          "placeholder": "Describe your service in detail",
                          "value": null,
                          "valueType": "input",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.addOffer.model.fields.description",
                              "messages": {
                                "isRequired": "Description is required",
                                "maxLength": "15000 Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "offerName"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "sector"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "marketAvailability"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "keyword"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "description"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "events": {
                    "photoActionEmitter": "$actionHelper.setFormGroupData('Image',$event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "editService-page-template",
      "functions": {
        "afterInit": "function() {  this.$actionHelper.prepareLookups();\n  this.$actionHelper.getKeywordsLookups();\n}\n",
        "uploadPhoto": "function ($id, $event) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $photo: Upload!) {\n        offer {\n          uploadPhoto(id: $id, photo: $photo)\n        }\n      }\n    `, {id: $id, photo: $event}).then(uploadResponse => {\n        $actionHelper.showToast('Service edited successfully');\n        $actionHelper.notifiySubscribers(['edit-post'], true);\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'",
            "skeletonClass": "'with-full-image'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForUserAction'",
                "canGoToHomePage": false,
                "actionLabel": "'Posting Under'",
                "modalIcon": "'assets/icon/dynamic-ui/Arrow_Down_Green.svg'",
                "buttonLabel": "'Publish'",
                "buttonLabelId": "'edit-service-page-publish-action-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'edit-service-page-header-primitive-back-id'",
                "targetName": "dataSource?.actorName",
                "targetImage": "dataSource?.actorImage",
                "action": {
                  "query": "mutation{  offer {\n    update(\n      id: $templateContext->activeFormArguments.id,\n      model: {\n        type:SERVICE,\n        name: $templateContext->activeFormArguments.offerName,\n        description: $templateContext->activeFormArguments.description,\n        sector: $templateContext->activeFormArguments.sector,\n        countries: $dynamicUiExpression((|prepareLookup(templateContext.activeFormArguments, 'marketAvailability')|)),\n        keywords: $dynamicUiExpression((|prepareLookup(templateContext.activeFormArguments, 'keyword')|))\n      }\n    ) {\n      id\n    }\n  }\n}\n",
                  "postAction": "const image = $actionHelper.getFormGroupData('Image'); const originalImage = $actionHelper.getFormGroupData('originalImage');\nif(image !== originalImage)    templateContext.additionalData.parentPage.uploadPhoto($graphQlResults.offer.update.id, $actionHelper.getFormGroupData('Image'))\nelse {  $actionHelper.showToast('Service edited successfully');\n  $actionHelper.notifiySubscribers(['edit-post'], true);\n}\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event, {'parentPage': this})"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'edit-service-page-form'",
                    "predefineData": "{'id': $actionHelper.getActiveDomainId(), 'originalImage': dataSource.image, 'targetId': dataSource.actorId}",
                    "formWithImage": true,
                    "isThumbnailImage": false,
                    "cropperForCard": true,
                    "imageFormControlName": "'Image'",
                    "isRequiredImage": true,
                    "initialData": "dataSource",
                    "defaultImage": "'assets/icon/dynamic-ui/UploadPhoto.svg'",
                    "imageValue": "'image'",
                    "imageChooserActionLabel": "'Upload a photo (required)'",
                    "imageSchemaValidationPath": "'mutation.offer.uploadPhoto.photo'",
                    "dataSource": {
                      "functions": {
                        "afterInit": "function() {  this.formPrimitive.initialDataSource.keywords.forEach(x => {x.selected = false; x.isSelected = false});  \n  this.formPrimitive.initialDataSource.countries.forEach(x => {x.selected = false; x.isSelected = false});\n}\n",
                        "addNewKeyword": "function ($keyword, parentComponent) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($keyword: String!) {\n        company {\n          addKeyword(title: $keyword) {\n            lookupId\n            name\n          }\n        }\n      }\n    `, {keyword: $keyword}).then(data => {  \n        this.$actionHelper.getKeywordsLookups();\n        const newOption = _.get(data, 'company.addKeyword', null);\n        if(newOption) {\n          newOption.isSelected = true;\n          parentComponent.options.unshift(newOption);\n          parentComponent.initialOptions.unshift(newOption);\n          parentComponent.getInitialList();  \n        }\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
                        "openKeywords": "function($event,form, formGroup, initialDataSource, formsData) {  this.$actionHelper.openMultiSelectModal('Keywords ', 'Tap to add a new keyword', 'Keyword already exists', $event.element, formGroup, initialDataSource.keywords, \n  $event.element.value, false, formsData, true, true, initialDataSource, (newKeyword, parentComponent) => { this.addNewKeyword(newKeyword, parentComponent) })   \n}\n"
                      },
                      "controllers": [
                        {
                          "key": "offerName",
                          "label": "Service Name",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter a service name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "offerName",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.offer.update.model.fields.name",
                              "messages": {
                                "isRequired": "Service name is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "sector",
                          "label": "Sector",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a sector",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": "sector",
                          "withNullValue": false,
                          "actionTitle": "Select a Sector",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSectorsModal('Select a Sector', $event.element, formGroup, initialDataSource.sectors)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.offer.update.model.fields.sector",
                              "messages": {
                                "isRequired": "Sector is required"
                              }
                            }
                          ],
                          "lookups": "sectors",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "marketAvailability",
                          "label": "Market Availability",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "chips-button",
                          "placeholder": "Countries where you offer this service",
                          "value": null,
                          "valueType": "multiSelect",
                          "valuePath": "countries",
                          "withNullValue": false,
                          "actionTitle": "Market Availability",
                          "itemAddedHint": null,
                          "itemExistErrorMessage": null,
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "this.$actionHelper.openMultiSelectModal('Market Availability', null, null, $event.element, formGroup, initialDataSource?.countries, $event.element.value, true, formsData, false, true, initialDataSource)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.offer.update.model.fields.countries",
                              "messages": {
                                "isRequired": "Market availability is required"
                              }
                            }
                          ],
                          "lookups": "marketPlaceAvailability",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "keyword",
                          "label": "Keywords",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "chips-button",
                          "placeholder": "Select one or more keywords",
                          "value": null,
                          "valueType": "multiSelect",
                          "valuePath": "keywords",
                          "withNullValue": true,
                          "actionTitle": "Keywords",
                          "itemAddedHint": null,
                          "itemExistErrorMessage": null,
                          "required": false,
                          "buttonActionEmitter": "this.openKeywords($event, form, formGroup, initialDataSource, formsData)",
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.addOffer.model.fields.keywords",
                              "messages": {
                                "isRequired": "Keywords is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "lookups": "keywords",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "description",
                          "label": "Description",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "editor",
                          "placeholder": "Describe your service in detail",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "description",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.offer.update.model.fields.description",
                              "messages": {
                                "isRequired": "Description is required",
                                "maxLength": "15000 Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "offerName"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "sector"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "marketAvailability"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "keyword"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "description"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "events": {
                    "photoActionEmitter": "$actionHelper.setFormGroupData('Image',$event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "addFranchise-page-template",
      "functions": {
        "afterInit": "function() {  this.$actionHelper.prepareLookups();\n  this.$actionHelper.getKeywordsLookups();\n}\n",
        "createFranchiseOffer": "function ($entityId, $offerName, $description, $sector,$countries,$keywords, $photo) {  \n  this.$actionHelper.$loaderService.present().then(() => \n\n  this.getGraphQL(`\n      mutation($entityId: String!, $offerName: String!, $description: String!, $sector: String!, $photo: Upload!) {\n          company {\n            addOffer(\n              id: $entityId, \n              model: {\n                type:FRANCHISE,\n                name: $offerName,\n                description: $description,\n                sector: $sector,\n                countries: $dynamicUiExpression((|$actionHelper.prepareArrayValues('marketAvailability')|)),\n                keywords: $dynamicUiExpression((|$actionHelper.prepareArrayValues('keyword')|))\n              },\n               photo: $photo\n            ) {\n              id\n            }\n          }\n\n      }\n    `, {entityId: $entityId, offerName: $offerName, description:$description ,sector: $sector, photo: $photo}).then(uploadResponse => {\n        $actionHelper.showToast('Post added successfully');\n        $actionHelper.notifiySubscribers(['add-post'], true);\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
        "uploadPhoto": "function ($id, $event) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $photo: Upload!) {\n        offer {\n          uploadPhoto(id: $id, photo: $photo)\n        }\n      }\n    `, {id: $id, photo: $event}).then(uploadResponse => {\n        $actionHelper.showToast('Franchise listed successfully');\n        $actionHelper.notifiySubscribers(['add-offer'], true);\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": null,
          "skeletonType": "'edit-domain-page-skeleton'",
          "skeletonClass": "'with-full-image'",
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForUserAction'",
                "canGoToHomePage": false,
                "actionLabel": "'Posting Under'",
                "modalIcon": "'assets/icon/dynamic-ui/Arrow_Down_Green.svg'",
                "buttonLabel": "'Publish'",
                "buttonLabelId": "'create-franchise-page-publish-action-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'create-franchise-page-header-primitive-back-id'",
                "targetName": "$actionHelper?.parameters?.targetName",
                "targetImage": "$actionHelper?.parameters?.targetImage",
                "action": {
                  "query": "mutation{  company {\n    addOffer(\n      id: $templateContext->activeFormArguments.entityId, \n      model: {\n        type:FRANCHISE,\n        name: $templateContext->activeFormArguments.offerName,\n        description: $templateContext->activeFormArguments.description,\n        sector: $templateContext->activeFormArguments.sector,\n        countries: $dynamicUiExpression((|prepareLookup(templateContext.activeFormArguments, 'marketAvailability')|)),\n        keywords: $dynamicUiExpression((|prepareLookup(templateContext.activeFormArguments, 'keyword')|))\n      }\n    ) {\n      id\n    }\n  }\n}\n",
                  "postAction": "if($actionHelper.getFormGroupData('Image'))    templateContext.additionalData.parentPage.uploadPhoto($graphQlResults.company.addOffer.id, $actionHelper.getFormGroupData('Image'))\nelse {  $actionHelper.showToast('Franchise listed successfully');\n  $actionHelper.notifiySubscribers(['add-offer'], true);\n}\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "createFranchiseOffer($actionHelper.getFormGroupData('entityId'),$actionHelper.getFormGroupData('offerName'),$actionHelper.getFormGroupData('description'),$actionHelper.getFormGroupData('sector'),$actionHelper.getFormGroupData('countries'),$actionHelper.getFormGroupData('keywords'),$actionHelper.getFormGroupData('Image'))"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'create-franchise-page-form'",
                    "predefineData": "{'entityId': $actionHelper.getActiveDomainId()}",
                    "formWithImage": true,
                    "isThumbnailImage": false,
                    "cropperForCard": true,
                    "imageFormControlName": "'Image'",
                    "initialData": "dataSource",
                    "isRequiredImage": true,
                    "defaultImage": "'assets/icon/dynamic-ui/UploadPhoto.svg'",
                    "imageChooserActionLabel": "'Upload a photo (required)'",
                    "imageSchemaValidationPath": "'mutation.offer.uploadPhoto.photo'",
                    "dataSource": {
                      "functions": {
                        "afterInit": "function() {  this.formPrimitive.initialDataSource.keywords.forEach(x => {x.selected = false; x.isSelected = false});  \n  this.formPrimitive.initialDataSource.countries.forEach(x => {x.selected = false; x.isSelected = false});\n}\n",
                        "addNewKeyword": "function ($keyword, parentComponent) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($keyword: String!) {\n        company {\n          addKeyword(title: $keyword) {\n            lookupId\n            name\n          }\n        }\n      }\n    `, {keyword: $keyword}).then(data => { \n        this.$actionHelper.getKeywordsLookups();                         \n        const newOption = _.get(data, 'company.addKeyword', null);\n        if(newOption) {\n          newOption.isSelected = true;\n          parentComponent.options.unshift(newOption);\n          parentComponent.initialOptions.unshift(newOption);\n          parentComponent.getInitialList();  \n        }\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
                        "openKeywords": "function($event,form, formGroup, initialDataSource, formsData) {  this.$actionHelper.openMultiSelectModal('Keywords ', 'Tap to add a new keyword', 'Keyword already exists', $event.element, formGroup, initialDataSource.keywords, \n  $event.element.value, false, formsData, true, true, initialDataSource, (newKeyword, parentComponent) => { this.addNewKeyword(newKeyword, parentComponent) })   \n}\n"
                      },
                      "controllers": [
                        {
                          "key": "offerName",
                          "label": "Franchise Name",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter the franchise name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.addOffer.model.fields.name",
                              "messages": {
                                "isRequired": "Franchise name is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "sector",
                          "label": "Sector",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a sector",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": "Select a Sector",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSectorsModal('Select a Sector', $event.element, formGroup, initialDataSource.sectors)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.addOffer.model.fields.sector",
                              "messages": {
                                "isRequired": "Sector is required"
                              }
                            }
                          ],
                          "lookups": "sectors",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "marketAvailability",
                          "label": "Market Availability",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "chips-button",
                          "placeholder": "Countries where franchise is offered",
                          "value": null,
                          "valueType": "country",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": "Market Availability",
                          "itemAddedHint": null,
                          "itemExistErrorMessage": null,
                          "required": true,
                          "buttonActionEmitter": "this.$actionHelper.openMultiSelectModal('Market Availability', null, null, $event.element, formGroup, initialDataSource?.countries, $event.element.value, true, formsData, false, true, initialDataSource)",
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.addOffer.model.fields.countries",
                              "messages": {
                                "isRequired": "Market availability is required"
                              }
                            }
                          ],
                          "lookups": "marketPlaceAvailability",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "keyword",
                          "label": "Keywords",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "chips-button",
                          "placeholder": "Select one or more keywords",
                          "value": null,
                          "valueType": "multiSelect",
                          "valuePath": null,
                          "withNullValue": true,
                          "actionTitle": "Keywords",
                          "itemAddedHint": null,
                          "itemExistErrorMessage": null,
                          "required": false,
                          "buttonActionEmitter": "this.openKeywords($event, form, formGroup, initialDataSource, formsData)",
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.addOffer.model.fields.keywords",
                              "messages": {
                                "isRequired": "Keywords is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "lookups": "keywords",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "description",
                          "label": "Description",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "editor",
                          "placeholder": "Add description here",
                          "value": null,
                          "valueType": "input",
                          "valuePath": null,
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.addOffer.model.fields.description",
                              "messages": {
                                "isRequired": "Description is required",
                                "maxLength": "15000 Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "offerName"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "sector"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "marketAvailability"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "keyword"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "description"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "events": {
                    "photoActionEmitter": "$actionHelper.setFormGroupData('Image',$event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "editFranchise-page-template",
      "functions": {
        "afterInit": "function() {  this.$actionHelper.prepareLookups();\n  this.$actionHelper.getKeywordsLookups();\n}\n",
        "uploadPhoto": "function ($id, $event) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!, $photo: Upload!) {\n        offer {\n          uploadPhoto(id: $id, photo: $photo)\n        }\n      }\n    `, {id: $id, photo: $event}).then(uploadResponse => {\n        $actionHelper.showToast('Franchise edited successfully');\n        $actionHelper.notifiySubscribers(['edit-post'], true);\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'edit-domain-page-skeleton'",
            "skeletonClass": "'with-full-image'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForUserAction'",
                "canGoToHomePage": false,
                "actionLabel": "'Posting Under'",
                "modalIcon": "'assets/icon/dynamic-ui/Arrow_Down_Green.svg'",
                "buttonLabel": "'Publish'",
                "buttonLabelId": "'edit-franchise-page-publish-action-id'",
                "disableButton": "!$actionHelper.isValidForm()",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'edit-franchise-page-header-primitive-back-id'",
                "targetName": "dataSource?.actorName",
                "targetImage": "dataSource?.actorImage",
                "action": {
                  "query": "mutation{  offer {\n    update(\n      id: $templateContext->activeFormArguments.id,\n      model: {\n        type:FRANCHISE,\n        name: $templateContext->activeFormArguments.offerName,\n        description: $templateContext->activeFormArguments.description,\n        sector: $templateContext->activeFormArguments.sector,\n        countries: $dynamicUiExpression((|prepareLookup(templateContext.activeFormArguments, 'marketAvailability')|)),\n        keywords: $dynamicUiExpression((|prepareLookup(templateContext.activeFormArguments, 'keyword')|))\n      }\n    ) {\n      id\n    }\n  }\n}\n",
                  "postAction": "const image = $actionHelper.getFormGroupData('Image'); const originalImage = $actionHelper.getFormGroupData('originalImage');\nif(image !== originalImage)    templateContext.additionalData.parentPage.uploadPhoto($graphQlResults.offer.update.id, $actionHelper.getFormGroupData('Image'))\nelse {  $actionHelper.showToast('Franchise edited successfully');\n  $actionHelper.notifiySubscribers(['edit-post'], true);\n}\n"
                }
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "$actionHelper.submitForm($event, {'parentPage': this})"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'edit-franchise-page-form'",
                    "predefineData": "{'id': $actionHelper.getActiveDomainId(), 'originalImage': dataSource.image, 'targetId': dataSource.actorId}",
                    "formWithImage": true,
                    "isThumbnailImage": false,
                    "cropperForCard": true,
                    "initialData": "dataSource",
                    "imageFormControlName": "'Image'",
                    "isRequiredImage": true,
                    "imageValue": "'image'",
                    "defaultImage": "'assets/icon/dynamic-ui/UploadPhoto.svg'",
                    "imageChooserActionLabel": "'Upload a photo (required)'",
                    "imageSchemaValidationPath": "'mutation.offer.uploadPhoto.photo'",
                    "dataSource": {
                      "functions": {
                        "afterInit": "function() {  this.formPrimitive.initialDataSource.keywords.forEach(x => {x.selected = false; x.isSelected = false});  \n  this.formPrimitive.initialDataSource.countries.forEach(x => {x.selected = false; x.isSelected = false});\n}\n",
                        "addNewKeyword": "function ($keyword, parentComponent) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($keyword: String!) {\n        company {\n          addKeyword(title: $keyword) {\n            lookupId\n            name\n          }\n        }\n      }\n    `, {keyword: $keyword}).then(data => {    \n        this.$actionHelper.getKeywordsLookups();\n        const newOption = _.get(data, 'company.addKeyword', null);\n        if(newOption) {\n          newOption.isSelected = true;\n          parentComponent.options.unshift(newOption);\n          parentComponent.initialOptions.unshift(newOption);\n          parentComponent.getInitialList();  \n        }\n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n",
                        "openKeywords": "function($event,form, formGroup, initialDataSource, formsData) {  this.$actionHelper.openMultiSelectModal('Keywords ', 'Tap to add a new keyword', 'Keyword already exists', $event.element, formGroup, initialDataSource.keywords, \n  $event.element.value, false, formsData, true, true, initialDataSource, (newKeyword, parentComponent) => { this.addNewKeyword(newKeyword, parentComponent) })   \n}\n"
                      },
                      "controllers": [
                        {
                          "key": "offerName",
                          "label": "Franchise Name",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "input",
                          "type": "text",
                          "placeholder": "Enter the franchise name",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "offerName",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.offer.update.model.fields.name",
                              "messages": {
                                "isRequired": "Franchise name is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "sector",
                          "label": "Sector",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "button-input",
                          "placeholder": "Select a sector",
                          "value": null,
                          "valueType": "lookup",
                          "valuePath": "sector",
                          "withNullValue": false,
                          "actionTitle": "Select a Sector",
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "$dynamicUiExtraService.openSectorsModal('Select a Sector', $event.element, formGroup, initialDataSource.sectors)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.offer.update.model.fields.sector",
                              "messages": {
                                "isRequired": "Sector is required"
                              }
                            }
                          ],
                          "lookups": "sectors",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "marketAvailability",
                          "label": "Market Availability",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "chips-button",
                          "placeholder": "Countries where franchise is offered",
                          "value": null,
                          "valueType": "multiSelect",
                          "valuePath": "countries",
                          "withNullValue": false,
                          "actionTitle": "Market Availability",
                          "itemAddedHint": null,
                          "itemExistErrorMessage": null,
                          "required": true,
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "buttonActionEmitter": "this.$actionHelper.openMultiSelectModal('Market Availability', null, null, $event.element, formGroup, initialDataSource?.countries, $event.element.value, true, formsData, false, true, initialDataSource)",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.offer.update.model.fields.countries",
                              "messages": {
                                "isRequired": "Market availability is required"
                              }
                            }
                          ],
                          "lookups": "marketPlaceAvailability",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "keyword",
                          "label": "Keywords",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "chips-button",
                          "placeholder": "Select one or more keywords",
                          "value": null,
                          "valueType": "multiSelect",
                          "valuePath": "keywords",
                          "withNullValue": true,
                          "actionTitle": "Keywords",
                          "itemAddedHint": null,
                          "itemExistErrorMessage": null,
                          "required": false,
                          "buttonActionEmitter": "this.openKeywords($event, form, formGroup, initialDataSource, formsData)",
                          "icon": "assets/icon/dynamic-ui/Arrow_Down_Grey.svg",
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.company.addOffer.model.fields.keywords",
                              "messages": {
                                "isRequired": "Keywords is required",
                                "maxLength": "Character limit reached"
                              }
                            }
                          ],
                          "lookups": "keywords",
                          "controlApi": null,
                          "controlAnotherApi": null
                        },
                        {
                          "key": "description",
                          "label": "Description",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "editor",
                          "placeholder": "Add description here",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "description",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.offer.update.model.fields.description",
                              "messages": {
                                "isRequired": "Description is required",
                                "maxLength": "15000 Character limit reached"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "block-container",
                          "children": [
                            {
                              "type": "controller",
                              "controllerKey": "offerName"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "sector"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "marketAvailability"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "keyword"
                            },
                            {
                              "type": "controller",
                              "controllerKey": "description"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "events": {
                    "photoActionEmitter": "$actionHelper.setFormGroupData('Image',$event)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "gallery-page-template",
      "changeDetectionSubjects": [
        "delete-image"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'gallery-page-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Gallery'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'media-page-header-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "div",
              "attributes": {
                "class": "resize-page-templates-container",
                "$ngIf": "(dataSource?.gallery && dataSource?.gallery.length > 0)"
              },
              "children": [
                {
                  "element": "ion-content",
                  "children": [
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'gallery-list-two'",
                        "arrayOfItems": "dataSource?.gallery"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item",
                            "let-items": "items",
                            "let-index": "index"
                          },
                          "children": [
                            {
                              "element": "div",
                              "attributes": {
                                "class": "gallery-container-item"
                              },
                              "children": [
                                {
                                  "element": "gallery-template",
                                  "properties": {
                                    "dataSource": "{'item': item, 'containerId': 'media-page-image-item' }"
                                  },
                                  "events": {
                                    "click": "$actionHelper.navigateTo('imageViewer', {'data': items, 'activeImageIndex': index, 'loggedInUserId': initialDataSource?.profileId })"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreGalleyData($event, this, $activatedRoute.snapshot.params.type, $activatedRoute.snapshot.params.id, dataSource?.cursor, dataSource, 'cursor', 'gallery')"
                      }
                    },
                    {
                      "element": "empty-state-primitive",
                      "attributes": {
                        "$ngIf": "(!dataSource?.gallery || dataSource?.gallery.length == 0)"
                      },
                      "properties": {
                        "type": "'emptyStateList'",
                        "image": "'assets/empty-state/list.svg'",
                        "imageId": "'media-page-empty-state-primitive-image-id'",
                        "title": "'No Photos or Videos Added'",
                        "titleId": "'media-page-empty-state-primitive-title-id'"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "element": "empty-state-primitive",
              "attributes": {
                "$ngIf": "(!dataSource?.gallery || dataSource?.gallery.length == 0)"
              },
              "properties": {
                "title": "'No Photos or Videos Added'",
                "image": "'assets/empty-state/list.svg'"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "imageViewer-page-template",
      "functions": {
        "deletePhoto": "function ($id, $image, $images, slider, activeImageIndex) {  this.$actionHelper.$loaderService.present().then(() => \n    this.getGraphQL(`\n      mutation($id: String!) {\n        mediaItem {\n          delete(id: $id) \n        }\n      }\n    `,  {id: $id}).then(uploadResponse => {\n\n        const imageIndex = $images.indexOf($image); \n        $images.splice(imageIndex, 1);\n        activeImageIndex = imageIndex;\n        slider.slidePrev();\n        slider.update();\n     \n        if($images.length === 0) {\n          $actionHelper.notifiySubscribers(['delete-image'], true);\n        } else {\n          $actionHelper.notifiySubscribers(['delete-image']);\n        }\n        \n    }).finally(() => {\n      this.$actionHelper.$loaderService.dismiss();\n    })   \n  )\n}\n"
      },
      "templateDefinition": [
        {
          "element": "image-viewer-primitive",
          "properties": {
            "dataSource": {
              "$dynamicUI:resourceType": "localData"
            }
          },
          "events": {
            "deleteImageEmitter": "deletePhoto($event.image.id, $event.image, $event.images, $event.slider, $event.activeImageIndex)"
          }
        }
      ]
    },
    {
      "name": "updates-page-template",
      "changeDetectionSubjects": [
        "edit-post",
        "delete-post"
      ],
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'card-listing'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Updates'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'update-page-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "$ngIf": "dataSource?.updates && dataSource?.updates?.length > 0"
                  },
                  "children": [
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'news-list'",
                        "arrayOfItems": "dataSource?.updates"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item",
                            "let-index": "index"
                          },
                          "children": [
                            {
                              "element": "list-with-right-image-template",
                              "attributes": {
                                "$ngIf": "index != 0"
                              },
                              "events": {
                                "click": "$actionHelper.navigateTo(item.type == 'Post' ? ('postDetails/' + item.id) : ('eventDetails/' + item.id))"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'updates-page-item' }"
                              }
                            },
                            {
                              "element": "main-card-template",
                              "attributes": {
                                "$ngIf": "index == 0"
                              },
                              "events": {
                                "click": "$actionHelper.navigateTo(item.type == 'Post' ? ('postDetails/' + item.id) : ('eventDetails/' + item.id))"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'updates-page-item' }"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource.cursor"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "dataSource.userUpdates ?   $dynamicUiExtraService.getMoreUserUpdates($event, this, $activatedRoute.snapshot.params.id, dataSource?.cursor, dataSource, 'cursor', 'updates')\n   : $dynamicUiExtraService.getMoreUpdates($event, this, $activatedRoute.snapshot.params.type, $activatedRoute.snapshot.params.id, dataSource?.cursor, dataSource, 'cursor', 'updates')\n"
                      }
                    }
                  ]
                },
                {
                  "element": "empty-state-primitive",
                  "attributes": {
                    "$ngIf": "(!dataSource?.updates || dataSource?.updates?.length == 0)"
                  },
                  "properties": {
                    "title": "'Nothing to Show Here'",
                    "subtitle": "'There are no entries to display on this page'",
                    "image": "'assets/empty-state/list.svg'"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "card-details-page-template",
      "changeDetectionSubjects": [
        "edit-post"
      ],
      "functions": {
        "addCommentToActivity": "function(activity, commentText, comments) {  let action =  {};\n  const newCommentText = commentText.replace(/\\n/g, '<br>');\n  if(activity.cardType === 'news') {\n    action.query = \"mutation { post { addComment(id: $templateContext->additionalParameters.entityId, text: $templateContext->additionalParameters.text) { ...commentProperties } }}\"\n    action.postAction = \"const comment = $dynamicUiExtraService.mapNewCommentToItem(templateContext.additionalParameters.activity, $graphQlResults.post.addComment); templateContext.additionalParameters.comments.push(comment); templateContext.additionalParameters.$actionHelper.scrollToBotton('cardDetailsDiv')\"\n\n  } else if(activity.cardType === 'event') {\n    action.query = \"mutation { event { addComment(id: $templateContext->additionalParameters.entityId, text: $templateContext->additionalParameters.text) { ...commentProperties } }}\"\n    action.postAction = \"const comment = $dynamicUiExtraService.mapNewCommentToItem(templateContext.additionalParameters.activity, $graphQlResults.event.addComment); templateContext.additionalParameters.comments.push(comment); templateContext.additionalParameters.$actionHelper.scrollToBotton('cardDetailsDiv')\"\n  }\n\n  action.additionalParameters = {'activity': activity, 'entityId':activity.id, 'text': newCommentText, 'comments': comments, '$actionHelper': this.$actionHelper  };\n  this.$actionHelper.callApi(action);\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'card-action'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Card Details'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'card-details-page-primitive-back-id'",
                "rightIcon": "dataSource?.card?.canManagePost ? 'assets/icon/dynamic-ui/Dots_Grey.svg' : ''",
                "rightIconId": "'card-details-page-primitive-dots-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "dataSource?.card?.canManagePost ? $actionHelper.openActionSheetWithConditions(initialDataSource?.activityActions, dataSource?.card) : ''"
              }
            },
            {
              "element": "ion-content",
              "attributes": {
                "class": "with-input grayBg",
                "id": "with-input"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "main-card-seperator whiteBg"
                  },
                  "children": [
                    {
                      "element": "card-details-template",
                      "properties": {
                        "dataSource": "dataSource?.card"
                      }
                    },
                    {
                      "element": "div",
                      "children": [
                        {
                          "element": "card-comment",
                          "attributes": {
                            "$ngFor": "let comment of dataSource?.comments"
                          },
                          "properties": {
                            "dataSource": "{ 'item': comment, 'parentDataSource': dataSource,  'actionIcon': (comment.myComment ? 'assets/icon/dynamic-ui/Dots_Grey.svg' : (comment.checkIfCanLike ? 'assets/icon/dynamic-ui/Like_Inactive.svg' : 'assets/icon/dynamic-ui/Like_Active.svg')),\n  'containerId': 'comment-card-item'\n}\n"
                          }
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "id": "cardDetailsDiv"
                          }
                        },
                        {
                          "element": "infinite-scroll",
                          "attributes": {
                            "$ngIf": "dataSource?.cursor"
                          },
                          "events": {
                            "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreActivityComments($event, this, dataSource?.card, (dataSource?.card.cardType === 'news' ? 'post' : 'event'), $activatedRoute.snapshot.params.id, 'comments', dataSource?.cursor, dataSource, 'cursor', 'comments')"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "element": "ion-footer",
              "attributes": {
                "class": "ion-no-border"
              },
              "children": [
                {
                  "element": "input-primitive",
                  "properties": {
                    "inputType": "'comment-input'",
                    "inputPlaceholder": "'Add a comment'",
                    "actorImage": "initialDataSource.profileImage",
                    "actorName": "initialDataSource.firstName + ' ' + initialDataSource.lastName",
                    "inputActionText": "'Post'"
                  },
                  "events": {
                    "commentActionEmitter": "this.addCommentToActivity(dataSource.card, $event, dataSource?.comments)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "offer-details-page-template",
      "changeDetectionSubjects": [
        "edit-post"
      ],
      "functions": {
        "addCommentToActivity": "function(activity, commentText, comments) {  let action =  {};\n  const newCommentText = commentText.replace(/\\n/g, '<br>');\n  action.query = \"mutation { offer { addComment(id: $templateContext->additionalParameters.entityId, text: $templateContext->additionalParameters.text) { ...commentProperties } }}\"\n  action.postAction = \"const comment = $dynamicUiExtraService.mapNewCommentToItem(templateContext.additionalParameters.activity, $graphQlResults.offer.addComment); templateContext.additionalParameters.comments.push(comment); templateContext.additionalParameters.$actionHelper.scrollToBotton('offerDetailsContent')\"\n\n  action.additionalParameters = {'activity': activity, 'entityId':activity.id, 'text': newCommentText, 'comments': comments, '$actionHelper': this.$actionHelper  };\n  this.$actionHelper.callApi(action);\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'card-action'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "canGoToHomePage": false,
                "title": "'Offer Details'",
                "leftIcon": "'assets/icon/dynamic-ui/Back_Grey.svg'",
                "leftIconId": "'offer-details-page-primitive-back-id'",
                "rightIcon": "dataSource?.card?.canManagePost ? ('assets/icon/dynamic-ui/Dots_Grey.svg') : ''",
                "rightIconId": "'offer-details-page-primitive-dots-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()",
                "rightActionEmitter": "dataSource?.card?.canManagePost ? $actionHelper.openActionSheetWithConditions(initialDataSource?.offerActions, dataSource?.card) : ''"
              }
            },
            {
              "element": "ion-content",
              "attributes": {
                "class": "with-input grayBg",
                "id": "with-input"
              },
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "main-card-seperator whiteBg"
                  },
                  "children": [
                    {
                      "element": "offer-details-template",
                      "properties": {
                        "dataSource": "dataSource?.card"
                      }
                    },
                    {
                      "element": "div",
                      "children": [
                        {
                          "element": "card-comment",
                          "attributes": {
                            "$ngFor": "let comment of dataSource?.comments"
                          },
                          "properties": {
                            "dataSource": "{ 'item': comment, 'parentDataSource': dataSource,  'actionIcon': (comment.myComment ? 'assets/icon/dynamic-ui/Dots_Grey.svg' : (comment.checkIfCanLike ? 'assets/icon/dynamic-ui/Like_Inactive.svg' : 'assets/icon/dynamic-ui/Like_Active.svg')),\n  'containerId': 'comment-card-item'\n}\n"
                          }
                        }
                      ]
                    },
                    {
                      "element": "div",
                      "attributes": {
                        "id": "offerDetailsContent"
                      }
                    },
                    {
                      "element": "infinite-scroll",
                      "attributes": {
                        "$ngIf": "dataSource?.cursor"
                      },
                      "events": {
                        "infiniteScrollEventEmitter": "$dynamicUiExtraService.getMoreActivityComments($event, this, dataSource?.card, 'offer', $activatedRoute.snapshot.params.id, 'comments', dataSource?.cursor, dataSource, 'cursor', 'comments')"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "element": "ion-footer",
              "attributes": {
                "class": "ion-no-border"
              },
              "children": [
                {
                  "element": "input-primitive",
                  "properties": {
                    "inputType": "'comment-input'",
                    "inputPlaceholder": "'Add a comment'",
                    "actorImage": "initialDataSource.profileImage",
                    "actorName": "initialDataSource.firstName + ' ' + initialDataSource.lastName",
                    "inputActionText": "'Post'"
                  },
                  "events": {
                    "commentActionEmitter": "this.addCommentToActivity(dataSource.card, $event, dataSource?.comments)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "editComment-page-template",
      "functions": {
        "afterInit": "function() {  this.dataSource.previousPageDataSource.text = this.dataSource.previousPageDataSource.text.replace(/<br>/g, '\\n');\n}\n",
        "editCommentToActivity": "function($event, $actionHelper) {  $actionHelper.activeForm.controls['text'].value = $actionHelper.activeForm.controls['text'].value.replace(/\\n/g, '<br>');\n  $actionHelper.submitForm($event);\n}\n"
      },
      "templateDefinition": [
        {
          "element": "skeleton-primitive",
          "properties": {
            "skeletonType": "'form-skeleton'"
          },
          "attributes": {
            "$ngIf": "isLoading"
          }
        },
        {
          "element": "div",
          "attributes": {
            "class": "resize-page-templates-container",
            "$ngIf": "!isLoading"
          },
          "children": [
            {
              "element": "page-header-primitive",
              "properties": {
                "headerType": "'HeaderForSubPages'",
                "title": "'Edit Comment'",
                "leftIcon": "'assets/icon/dynamic-ui/Close_Grey.svg'",
                "leftIconId": "'edit-comment-page-primitive-back-id'"
              },
              "events": {
                "leftActionEmitter": "$actionHelper.goBackPage()"
              }
            },
            {
              "element": "ion-content",
              "children": [
                {
                  "element": "form-primitive",
                  "properties": {
                    "formContainerId": "'edit-comment-page-form'",
                    "predefineData": "{'commentId': $actionHelper.getActiveDomainId()}",
                    "initialData": "dataSource.previousPageDataSource",
                    "dataSource": {
                      "controllers": [
                        {
                          "key": "text",
                          "label": "Comment",
                          "display": true,
                          "relatedTo": null,
                          "controlType": "textarea",
                          "placeholder": "Type your comment...",
                          "value": null,
                          "valueType": "input",
                          "valuePath": "text",
                          "withNullValue": false,
                          "actionTitle": null,
                          "required": true,
                          "icon": null,
                          "leftIcon": null,
                          "validators": [
                            {
                              "name": "fromSchema",
                              "fieldPath": "mutation.comment.update.text",
                              "messages": {
                                "isRequired": "Comment is required"
                              }
                            }
                          ],
                          "controlApi": null,
                          "controlAnotherApi": null
                        }
                      ],
                      "template": [
                        {
                          "type": "controller",
                          "controllerKey": "text"
                        }
                      ]
                    }
                  }
                },
                {
                  "element": "button-primitive",
                  "attributes": {
                    "id": "edit-comment-page-action-id"
                  },
                  "properties": {
                    "text": "'Edit Comment'",
                    "disableButton": "!$actionHelper.isValidForm()",
                    "action": {
                      "query": "mutation {  comment {\n    update(id: $templateContext->activeFormArguments.commentId, text: $templateContext->activeFormArguments.text) {\n      id \n      text\n    }\n  }\n}\n",
                      "postAction": "$actionHelper.showToast('Comment edited successfully'); $actionHelper.parameters.previousPageDataSource.text = templateContext.activeFormArguments.text; $actionHelper.goBackPage();\n"
                    }
                  },
                  "events": {
                    "actionEmitter": "this.editCommentToActivity($event, $actionHelper)"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "home-page-template",
      "functions": {
        "afterInit": "function () {  $actionHelper.$notificationService.registerTokenDevice();\n  $actionHelper.$messagingService.getUnreadMessageCount();\n  $actionHelper.prepareLookups();\n  if($actionHelper.$parametersStorageService.checkIfDeeplinkOrNotificationResponse()) {\n    const parameters = $actionHelper.$parametersStorageService.getDeeplinkOrNotificationResponse();\n    $actionHelper.goToTargetFromNotificationOrDeeplink(parameters, this.initialDataSource.profileId);\n  }\n\n  $actionHelper.initilizeNotificationAndDeeplinkSubscribers();\n  $actionHelper.deeplinkAndNotificationSubject.subscribe((data) => {\n    if($actionHelper.$authenticationService.isLoggedIn) {\n      if($actionHelper.$parametersStorageService.checkIfDeeplinkOrNotificationResponse()) {\n        const parameters = $actionHelper.$parametersStorageService.getDeeplinkOrNotificationResponse();\n        $actionHelper.goToTargetFromNotificationOrDeeplink(parameters, this.initialDataSource.profileId);\n      }\n    }\n  });\n\n  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.peoples, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.organizations, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.businesses, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.blockHP1Items, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.blockHP2Items, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.blockHB1Items, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.blockHB2Items, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.blockHN1Items, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.blockHN2Items, followInfo);              \n      }\n    });\n  }\n}\n"
      },
      "changeDetectionSubjects": [
        "add-post",
        "edit-post",
        "delete-post",
        "feature-post"
      ],
      "templateDefinition": [
        {
          "element": "ion-content",
          "attributes": {
            "class": "animated-skeleton-loading grayBg full-screen"
          },
          "children": [
            {
              "element": "skeleton-primitive",
              "properties": {
                "skeletonType": "'domain-page-skeleton'",
                "withMainCardSkeleton": true,
                "coverSearchBar": true
              },
              "attributes": {
                "class": "{{isLoading ? '' : 'hidden'}}"
              }
            },
            {
              "element": "div",
              "children": [
                {
                  "element": "div",
                  "attributes": {
                    "class": "main-card-seperator"
                  },
                  "children": [
                    {
                      "element": "main-card-primitive",
                      "children": [
                        {
                          "element": "cover-image-primitive",
                          "properties": {
                            "coverImageUrl": "initialDataSource?.profileCoverImage",
                            "hasTopBar": true,
                            "overlayType": "(initialDataSource?.hasAmbassadorDiplomaticRole || initialDataSource?.hasTownRole) ? 'accent-two': 'accent-one'",
                            "topBarType": "'search_top_bar'",
                            "leftIconId": "'home-page-cover-image-primitive-notification-id'",
                            "leftIcon": "'assets/icon/dynamic-ui/Notifications_White.svg'",
                            "badgeContainerId": "'home-page-badge-id'",
                            "rightIconId": "'home-page-cover-image-primitive-manage-id'",
                            "rightIcon": "'assets/icon/dynamic-ui/Burger_Menu_White.svg'",
                            "searchInputId": "'home-page-cover-image-primitive-search-input-id'",
                            "searchInputPlaceholder": "'Search DiasporaID'"
                          },
                          "events": {
                            "leftActionEmitter": "$actionHelper.navigateTo('notifications')",
                            "rightActionEmitter": "$actionHelper.navigateTo('manageAccounts')",
                            "searchInputActionEmitter": "$actionHelper.navigateTo('searchPage')"
                          }
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "profile-details"
                          },
                          "children": [
                            {
                              "element": "div",
                              "attributes": {
                                "class": "profile-details-container"
                              },
                              "children": [
                                {
                                  "element": "logo-primitive",
                                  "properties": {
                                    "logoUrl": "initialDataSource?.profileImage",
                                    "logoId": "'home-page-logo-primitive-logo-id'",
                                    "name": "initialDataSource?.fullName"
                                  },
                                  "events": {
                                    "logoEvent": "$actionHelper.navigateTo('tabs/my-profile')",
                                    "avatarEvent": "$actionHelper.navigateTo('profile/edit/' + initialDataSource.profileId)"
                                  }
                                },
                                {
                                  "element": "title-primitive",
                                  "properties": {
                                    "title": "'Welcome, ' + initialDataSource?.firstName",
                                    "titleId": "'home-page-title-primitive-title-id'",
                                    "titleColor": "'accent-one'"
                                  }
                                },
                                {
                                  "element": "badges-primitive",
                                  "properties": {
                                    "badgeContainerId": "'home-page-badges-primitive'",
                                    "badges": "initialDataSource?.userBadges"
                                  }
                                }
                              ]
                            },
                            {
                              "element": "my-pages-carousel-primitive",
                              "attributes": {
                                "$ngIf": "initialDataSource?.entityRoles && initialDataSource?.entityRoles.length > 0"
                              },
                              "properties": {
                                "initialDataSource": "initialDataSource",
                                "items": "initialDataSource?.entityRoles"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "dataSource?.featuredActivities && dataSource?.featuredActivities.length > 0"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/News_Active.svg'",
                        "mainIconId": "'home-page-updates-section-block-header-primitive-main-icon-id'",
                        "title": "'Headlines'",
                        "titleId": "'home-page-updates-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Top Lebanese News Worldwide'",
                        "subTitleId": "'home-page-updates-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'accent-one'"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'news-list'",
                        "arrayOfItems": "dataSource?.featuredActivities"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item",
                            "let-index": "index"
                          },
                          "children": [
                            {
                              "element": "list-with-right-image-template",
                              "attributes": {
                                "$ngIf": "index != 0"
                              },
                              "events": {
                                "click": "item.type === 'Post' ? $actionHelper.navigateToDomain('Post', item.id) : $actionHelper.navigateToDomain('Event', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'home-page-updates-item' }"
                              }
                            },
                            {
                              "element": "main-card-template",
                              "attributes": {
                                "$ngIf": "index == 0"
                              },
                              "events": {
                                "click": "item.type === 'Post' ? $actionHelper.navigateToDomain('Post', item.id) : $actionHelper.navigateToDomain('Event', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item,  'containerId': 'home-page-updates-item'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "dataSource?.activities && dataSource?.activities.length > 0"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/News_Active.svg'",
                        "mainIconId": "'home-page-updates-section-block-header-primitive-main-icon-id'",
                        "title": "'Posts'",
                        "titleId": "'home-page-updates-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'From pages you follow'",
                        "subTitleId": "'home-page-updates-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'accent-one'",
                        "hasAction": true,
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'home-page-updates-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "'More'",
                        "actionLabelId": "'home-page-updates-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('activities/' + initialDataSource.profileId)"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'news-list'",
                        "arrayOfItems": "dataSource?.activities"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item",
                            "let-index": "index"
                          },
                          "children": [
                            {
                              "element": "list-with-right-image-template",
                              "attributes": {
                                "$ngIf": "index != 0"
                              },
                              "events": {
                                "click": "item.type === 'Post' ? $actionHelper.navigateToDomain('Post', item.id) : $actionHelper.navigateToDomain('Event', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'home-page-updates-item' }"
                              }
                            },
                            {
                              "element": "main-card-template",
                              "attributes": {
                                "$ngIf": "index == 0"
                              },
                              "events": {
                                "click": "item.type === 'Post' ? $actionHelper.navigateToDomain('Post', item.id) : $actionHelper.navigateToDomain('Event', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item,  'containerId': 'home-page-updates-item'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "dataSource?.hasPeoplesItems"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/People_Active.svg'",
                        "mainIconId": "'home-page-people-section-block-header-primitive-main-icon-id'",
                        "title": "'People'",
                        "titleId": "'home-page-people-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Profiles of Interest'",
                        "subTitleId": "'home-page-people-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'accent-one'",
                        "hasAction": true,
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionIconId": "'home-page-people-section-block-header-primitive-action-icon-id'",
                        "actionLabel": "'More'",
                        "actionLabelId": "'home-page-people-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('/tabs/directory/peoples')"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.peoples"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'home-page-people-item'}"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'actionClass': 'l-icon', 'containerId': 'home-page-people-action'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg' , 'actionClass': 'l-icon', 'containerId': 'home-page-people-action'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "dataSource?.hasBlockHP1"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/fav-list.svg'",
                        "mainIconId": "'home-page-blockHp1-section-block-header-primitive-main-icon-id'",
                        "title": "dataSource?.blockHP1?.title",
                        "titleId": "'home-page-blockHp1-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "dataSource?.blockHP1?.subTitle",
                        "subTitleId": "'home-page-blockHp1-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'accent-one'"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.blockHP1Items"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain(item.type, item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'home-page-blockHp1-item'}"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain(item.type, item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'actionClass': 'l-icon', 'containerId': 'home-page-blockHp1-action'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain(item.type, item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg' , 'actionClass': 'l-icon', 'containerId': 'home-page-blockHp1-action'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": false,
                        "title": "'Explore by Role'",
                        "titleId": "'home-page-explore-by-role-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Looking for a mayor, mukhtar, or town ambassador to contact? Start here.'",
                        "subTitleId": "'home-page-explore-by-role-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'accent-one'"
                      }
                    },
                    {
                      "element": "chips-primitive",
                      "properties": {
                        "chipsType": "'simple-chips'",
                        "arrayOfItems": "initialDataSource?.explore?.byRole"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#chipItemsTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "search-chips-template",
                              "events": {
                                "click": "$searchService.clearSearchFilters(); $actionHelper.goToSearch('people', 'townOfficials', {'role': item.lookupId})"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'home-page-explore-by-role-item'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "dataSource?.hasBlockHP2"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/fav-list.svg'",
                        "mainIconId": "'home-page-blockHp2-section-block-header-primitive-main-icon-id'",
                        "title": "dataSource?.blockHP2?.title",
                        "titleId": "'home-page-blockHp2-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "dataSource?.blockHP2?.subTitle",
                        "subTitleId": "'home-page-blockHp2-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'accent-one'"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.blockHP2Items"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain(item.type, item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'home-page-blockHp2-item'}"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain(item.type, item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'actionClass': 'l-icon', 'containerId': 'home-page-blockHp2-action'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain(item.type, item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg' , 'actionClass': 'l-icon', 'containerId': 'home-page-blockHp2-action'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "dataSource?.hasOrganizationsItems"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/Networks_Active.svg'",
                        "mainIconId": "'home-page-networks-section-block-header-primitive-main-icon-id'",
                        "title": "'Networks'",
                        "titleId": "'home-page-networks-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Communities & Organizations'",
                        "subTitleId": "'home-page-networks-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'accent-one'",
                        "hasAction": true,
                        "actionIconId": "'home-page-networks-section-block-header-primitive-action-icon-id'",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionLabel": "'More'",
                        "actionLabelId": "'home-page-networks-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('/tabs/directory/networks')"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.organizations"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Organization', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'home-page-networks-item'}"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Organization', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'home-page-networks-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Organization', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'home-page-networks-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "dataSource?.hasBlockHN1"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/fav-list.svg'",
                        "mainIconId": "'home-page-blockHN1-section-block-header-primitive-main-icon-id'",
                        "title": "dataSource?.blockHN1?.title",
                        "titleId": "'home-page-blockHN1-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "dataSource?.blockHN1?.subTitle",
                        "subTitleId": "'home-page-blockHN1-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'accent-one'"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.blockHN1Items"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain(item.type, item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'home-page-blockHN1-item'}"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain(item.type, item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'home-page-blockHN1-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain(item.type, item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'home-page-blockHN1-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": false,
                        "title": "'Explore Networks'",
                        "titleId": "'home-page-explore-by-network-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Organizations, towns, diplomatic missions'",
                        "subTitleId": "'home-page-explore-by-network-block-header-primitive-title-id'",
                        "subTitleFontColor": "'accent-one'"
                      }
                    },
                    {
                      "element": "chips-primitive",
                      "properties": {
                        "chipsType": "'simple-chips'",
                        "arrayOfItems": "initialDataSource?.explore?.byNetworks"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#chipItemsTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "search-chips-template",
                              "events": {
                                "click": "$searchService.clearSearchFilters(); $actionHelper.goToSearch('networks', item.lookupId)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'home-page-explore-by-network-item'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "dataSource?.hasBlockHN2"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/fav-list.svg'",
                        "mainIconId": "'home-page-blockHN2-section-block-header-primitive-main-icon-id'",
                        "title": "dataSource?.blockHN2?.title",
                        "titleId": "'home-page-blockHN2-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "dataSource?.blockHN2?.subTitle",
                        "subTitleId": "'home-page-blockHN2-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'accent-one'"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.blockHN2Items"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain(item.type, item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'home-page-blockHN2-item'}"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain(item.type, item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'home-page-blockHN2-action', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain(item.type, item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'home-page-blockHN2-action', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor",
                    "$ngIf": "dataSource?.hasUpcomingEvents"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIconId": "'directory-page-network-event-section-block-header-primitive-main-icon-id'",
                        "mainIcon": "'assets/icon/dynamic-ui/Calendar_event.svg'",
                        "title": "'Upcoming Events'",
                        "titleId": "'directory-page-network-event-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Events in Lebanese communities worldwide'",
                        "subTitleId": "'directory-page-network-event-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'accent-one'",
                        "hasAction": false
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'event-list'",
                        "arrayOfItems": "dataSource?.upcomingEvents"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "event-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Event', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'directory-network-event-item'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor box-type",
                    "$ngIf": "!initialDataSource.hasOrganizationRole"
                  },
                  "children": [
                    {
                      "element": "box-card-primitive",
                      "properties": {
                        "title": "'Part of an Organization?'",
                        "titleId": "'home-page-part-of-organization-block-header-primitive-title-id'",
                        "subTitle": "'List your position if you are an organization leader or member'",
                        "subTitleId": "'home-page-part-of-organization-block-header-primitive-subtitle-id'",
                        "arrayOfItems": "initialDataSource.networkActionList"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#boxItemsTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "box-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('/searchForOrganization', {'organizations': []})"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'topNetworker': false, 'containerId': 'home-page-part-of-an-organization', 'lastIcon': 'assets/icon/dynamic-ui/Arrow_Right.svg'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "dataSource?.hasBusinessesItems"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/Business_Inactive.svg'",
                        "mainIconId": "'home-page-business-section-block-header-primitive-main-icon-id'",
                        "title": "'Business'",
                        "titleId": "'home-page-business-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Companies, Startups, Freelancers'",
                        "subTitleId": "'home-page-business-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'accent-one'",
                        "hasAction": true,
                        "actionIconId": "'home-page-business-section-block-header-primitive-action-icon-id'",
                        "actionIcon": "'assets/icon/dynamic-ui/Arrow_Profile.svg'",
                        "actionLabel": "'More'",
                        "actionLabelId": "'home-page-updates-section-block-header-primitive-action-label-id'"
                      },
                      "events": {
                        "rightButtonActionEmitter": "$actionHelper.navigateTo('/tabs/directory/businesses')"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.businesses"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain('Company', item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'home-page-business-item'}"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain('Company', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg','containerId': 'home-page-business-item', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain('Company', item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg','containerId': 'home-page-business-item', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "dataSource?.hasBlockHB1"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/fav-list.svg'",
                        "mainIconId": "'home-page-blockHB1-section-block-header-primitive-main-icon-id'",
                        "title": "dataSource?.blockHB1?.title",
                        "titleId": "'home-page-blockHB1-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "dataSource?.blockHB1?.subTitle",
                        "subTitleId": "'home-page-blockHB1-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'accent-one'"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.blockHB1Items"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain(item.type, item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'home-page-blockHB1-item'}"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain(item.type, item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg','containerId': 'home-page-blockHB1-item', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain(item.type, item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg','containerId': 'home-page-blockHB1-item', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": false,
                        "title": "'Explore by Sector'",
                        "titleId": "'home-page-explore-by-sector-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "'Companies & startups by industry'",
                        "subTitleId": "'home-page-explore-by-sector-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'accent-one'"
                      }
                    },
                    {
                      "element": "chips-primitive",
                      "properties": {
                        "chipsType": "'multi-line-chips'",
                        "arrayOfItems": "$actionHelper.isProductionEnvironment() ? initialDataSource?.explore?.bySector : initialDataSource?.explore?.bySectorStaging"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#chipItemsTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "search-chips-template",
                              "events": {
                                "click": "$searchService.clearSearchFilters(); $actionHelper.goToSearch('businesses', 'business', {'sector': item.lookupId})"
                              },
                              "properties": {
                                "dataSource": "{'item': item,'containerId': 'home-page-explore-by-sector-item'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor box-type",
                    "$ngIf": "!initialDataSource?.hasCompanyRole"
                  },
                  "children": [
                    {
                      "element": "box-card-primitive",
                      "properties": {
                        "title": "'Join A Global Business Hub'",
                        "subTitle": "'List your position in a company that you manage or work in'",
                        "arrayOfItems": "initialDataSource.businesseActionList"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#boxItemsTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "box-template",
                              "events": {
                                "click": "$actionHelper.navigateTo('/searchForCompany', {'companies': []})"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'home-page-part-of-an-company', 'topNetworker': false, 'lastIcon': 'assets/icon/dynamic-ui/Arrow_Right.svg'\n}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "element": "div",
                  "attributes": {
                    "class": "border-separtor pdb-0",
                    "$ngIf": "dataSource?.hasBlockHB2"
                  },
                  "children": [
                    {
                      "element": "block-header-primitive",
                      "properties": {
                        "hasDivider": true,
                        "mainIcon": "'assets/icon/dynamic-ui/fav-list.svg'",
                        "mainIconId": "'home-page-blockHB2-section-block-header-primitive-main-icon-id'",
                        "title": "dataSource?.blockHB2?.title",
                        "titleId": "'home-page-blockHB2-section-block-header-primitive-title-id'",
                        "titleFontColor": "'accent-one'",
                        "subTitle": "dataSource?.blockHB2?.subTitle",
                        "subTitleId": "'home-page-blockHB2-section-block-header-primitive-subtitle-id'",
                        "subTitleFontColor": "'accent-one'"
                      }
                    },
                    {
                      "element": "card-list-primitive",
                      "properties": {
                        "listType": "'scrollable-list'",
                        "arrayOfItems": "dataSource?.blockHB2Items"
                      },
                      "children": [
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#itemListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "default-list-template",
                              "events": {
                                "click": "$actionHelper.navigateToDomain(item.type, item.id)"
                              },
                              "properties": {
                                "dataSource": "{'item': item, 'containerId': 'home-page-blockHB2-item'}"
                              }
                            }
                          ]
                        },
                        {
                          "element": "ng-template",
                          "attributes": {
                            "#actionListTemplate": "",
                            "let-item": "item"
                          },
                          "children": [
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "item.canFollow && !item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.linkDomain(item.type, item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg','containerId': 'home-page-blockHB2-item', 'actionClass': 'l-icon'}"
                              }
                            },
                            {
                              "element": "action-template",
                              "attributes": {
                                "$ngIf": "!item.canFollow && item.canUnFollow"
                              },
                              "events": {
                                "click": "$actionHelper.unLinkDomain(item.type, item.id, item)"
                              },
                              "properties": {
                                "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg','containerId': 'home-page-blockHB2-item', 'actionClass': 'l-icon'}"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "directory-page-template",
      "functions": {
        "afterInit": "function () {  if($actionHelper.followSubject) {\n    this.followSubscription = $actionHelper.followSubject.subscribe((followInfo) => {\n      if(followInfo) {\n        $actionHelper.checkFollowList(this.dataSource.peopleDirectory.peopleToFollow, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.peopleDirectory.ambassadorsAndConsuls, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.peopleDirectory.withYourLastName, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.peopleDirectory.blockDP1Items, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.peopleDirectory.blockDP2Items, followInfo);\n\n        $actionHelper.checkFollowList(this.dataSource.networkDirectory.organizationsToFollow, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.networkDirectory.diplomaticMissionsToFollow, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.networkDirectory.townsToFollow, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.networkDirectory.blockDN1Items, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.networkDirectory.blockDN2Items, followInfo);\n       \n        $actionHelper.checkFollowList(this.dataSource.businessDirectory.companiesToFollow, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.businessDirectory.supportOrganizations, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.businessDirectory.blockDB1Items, followInfo);\n        $actionHelper.checkFollowList(this.dataSource.businessDirectory.blockDB2Items, followInfo);\n      }\n    });\n  }\n}\n"
      },
      "changeDetectionSubjects": [
        "edit-profile"
      ],
      "templateDefinition": [
        {
          "element": "div",
          "attributes": {
            "class": "animated-skeleton-loading full-screen"
          },
          "children": [
            {
              "element": "skeleton-primitive",
              "properties": {
                "skeletonType": "'domain-page-skeleton-segment'",
                "withMainCardSkeleton": true
              },
              "attributes": {
                "class": "{{isLoading ? '' : 'hidden'}}"
              }
            },
            {
              "element": "div",
              "attributes": {
                "class": "resize-page-templates-container"
              },
              "children": [
                {
                  "element": "page-header-primitive",
                  "properties": {
                    "headerType": "'HeaderWithSearch'",
                    "leftIconId": "'directory-page-cover-image-primitive-notification-id'",
                    "leftIcon": "'assets/icon/dynamic-ui/Notifications.svg'",
                    "rightIcon": "'assets/icon/dynamic-ui/burger_menu_gray.svg'",
                    "rightIconId": "'directory-page-cover-image-primitive-manage-id'",
                    "searchInputPlaceholder": "'Search DiasporaID'",
                    "searchInputId": "'directory-page-cover-image-primitive-search-input-id'",
                    "badgeContainerId": "'directory-page-badge-id'"
                  },
                  "events": {
                    "leftActionEmitter": "$actionHelper.navigateTo('notifications')",
                    "rightActionEmitter": "$actionHelper.navigateTo('manageAccounts')",
                    "searchInputActionEmitter": "$actionHelper.navigateTo('searchPage')"
                  }
                },
                {
                  "element": "segment-primitive",
                  "properties": {
                    "segmentContainerId": "'directory-page-segment-container-id'",
                    "activeSegment": "$activatedRoute.snapshot.params.type === 'networks' ? 'segment_two' : $activatedRoute.snapshot.params.type === 'businesses' ? 'segment_three' : 'segment_one' ",
                    "segmentOneLabel": "'People'",
                    "segmentTwoLabel": "'Networks'",
                    "segmentThreeLabel": "'Business'",
                    "segmentOneIcon": "'assets/icon/dynamic-ui/People_Active.svg'",
                    "segmentTwoIcon": "'assets/icon/dynamic-ui/Networks_Active.svg'",
                    "segmentThreeIcon": "'assets/icon/dynamic-ui/Business_Inactive.svg'",
                    "segmentOneClass": "'people'",
                    "segmentTwoClass": "'network'",
                    "segmentThreeClass": "'business'",
                    "segmentClass": "'three-segment'",
                    "contentSegmentClass": "'grayBg with-big-segment'"
                  },
                  "children": [
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#segmentOneContentTemplate": ""
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor pdb-0",
                            "$ngIf": "dataSource?.peopleDirectory?.hasPeopleToFollow"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": true,
                                "mainIconId": "'directory-page-people-section-block-header-primitive-main-icon-id'",
                                "mainIcon": "'assets/icon/dynamic-ui/People_Active.svg'",
                                "title": "'People to Follow'",
                                "titleId": "'directory-page-people-section-block-header-primitive-title-id'",
                                "titleFontColor": "'accent-one'",
                                "subTitleId": "'directory-page-people-section-block-header-primitive-subtitle-id'",
                                "subTitle": "'Profiles you might be interested in'",
                                "subTitleFontColor": "'accent-one'",
                                "hasAction": false
                              }
                            },
                            {
                              "element": "card-list-primitive",
                              "properties": {
                                "listType": "'scrollable-list'",
                                "arrayOfItems": "dataSource?.peopleDirectory?.peopleToFollow"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#itemListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "default-list-template",
                                      "events": {
                                        "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                                      },
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-page-people-item'}"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#actionListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "item.canFollow && !item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'directory-page-people-item', 'actionClass': 'l-icon'}"
                                      }
                                    },
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "!item.canFollow && item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'directory-page-people-item', 'actionClass': 'l-icon'\n}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": false,
                                "title": "'Explore by Role'",
                                "titleId": "'directory-page-explore-by-role-block-header-primitive-title-id'",
                                "titleFontColor": "'accent-one'",
                                "subTitleId": "'directory-page-explore-by-role-block-header-primitive-subtitle-id'",
                                "subTitle": "'Looking for a mayor, mukhtar, or town ambassador to contact? Start here'",
                                "subTitleFontColor": "'accent-one'"
                              }
                            },
                            {
                              "element": "chips-primitive",
                              "properties": {
                                "chipsType": "'simple-chips'",
                                "arrayOfItems": "initialDataSource?.explore?.byRole"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#chipItemsTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "search-chips-template",
                                      "events": {
                                        "click": "$searchService.clearSearchFilters(); $actionHelper.goToSearch('people', 'townOfficials', {'role': item.lookupId})"
                                      },
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-page-explore-by-role-item'}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor pdb-0",
                            "$ngIf": "dataSource?.peopleDirectory?.hasBlockDP1"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": true,
                                "mainIcon": "'assets/icon/dynamic-ui/fav-list.svg'",
                                "mainIconId": "'directory-page-blockDP1-section-block-header-primitive-main-icon-id'",
                                "title": "dataSource?.peopleDirectory?.blockDP1?.title",
                                "titleId": "'directory-page-blockDP1-section-block-header-primitive-title-id'",
                                "titleFontColor": "'accent-one'",
                                "subTitle": "dataSource?.peopleDirectory?.blockDP1?.subTitle",
                                "subTitleId": "'directory-page-blockDP1-section-block-header-primitive-subtitle-id'",
                                "subTitleFontColor": "'accent-one'"
                              }
                            },
                            {
                              "element": "card-list-primitive",
                              "properties": {
                                "listType": "'scrollable-list'",
                                "arrayOfItems": "dataSource?.peopleDirectory?.blockDP1Items"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#itemListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "default-list-template",
                                      "events": {
                                        "click": "$actionHelper.navigateToDomain(item.type, item.id)"
                                      },
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-page-blockDP1-item'}"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#actionListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "item.canFollow && !item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.linkDomain(item.type, item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'actionClass': 'l-icon', 'containerId': 'directory-page-blockDP1-action'}"
                                      }
                                    },
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "!item.canFollow && item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.unLinkDomain(item.type, item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg' , 'actionClass': 'l-icon', 'containerId': 'directory-page-blockDP1-action'}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor pdb-0",
                            "$ngIf": "dataSource?.peopleDirectory?.hasAmbassadorsAndConsuls"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": true,
                                "mainIconId": "'directory-page-ambassadors-consuls-section-block-header-primitive-main-icon-id'",
                                "mainIcon": "'assets/icon/dynamic-ui/Badge_VIP.svg'",
                                "titleId": "'directory-page-ambassadors-consuls-section-block-header-primitive-title-id'",
                                "title": "'Ambassadors & Consuls'",
                                "titleFontColor": "'accent-one'",
                                "subTitleId": "'directory-page-ambassadors-consuls-section-block-header-primitive-subtitle-id'",
                                "subTitle": "'Diplomats in your communities'",
                                "subTitleFontColor": "'accent-one'"
                              }
                            },
                            {
                              "element": "card-list-primitive",
                              "properties": {
                                "listType": "'scrollable-list'",
                                "arrayOfItems": "dataSource?.peopleDirectory?.ambassadorsAndConsuls"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#itemListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "default-list-template",
                                      "events": {
                                        "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                                      },
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-page-ambassadors-consuls-item'}"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#actionListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "item.canFollow && !item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'directory-page-ambassadors-consuls-item', 'actionClass': 'l-icon' }"
                                      }
                                    },
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "!item.canFollow && item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'directory-page-ambassadors-consuls-item', 'actionClass': 'l-icon'\n}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": false,
                                "title": "'Leadership Profiles'",
                                "titleId": "'directory-page-leadership--profile-section-block-header-primitive-title-id'",
                                "titleFontColor": "'accent-one'",
                                "subTitle": "'Browse leadership profiles'",
                                "subTitleId": "'directory-page-leadership--profile-section-block-header-primitive-subtitle-id'",
                                "subTitleFontColor": "'accent-one'"
                              }
                            },
                            {
                              "element": "chips-primitive",
                              "properties": {
                                "chipsType": "'simple-chips'",
                                "arrayOfItems": "initialDataSource?.explore?.byLeaderShip"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#chipItemsTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "search-chips-template",
                                      "events": {
                                        "click": "$searchService.clearSearchFilters(); $actionHelper.goToSearch('people', item.lookupId)"
                                      },
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-page-leadership-profile-item'}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor pdb-0",
                            "$ngIf": "dataSource?.peopleDirectory?.hasBlockDP2"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": true,
                                "mainIcon": "'assets/icon/dynamic-ui/fav-list.svg'",
                                "mainIconId": "'directory-page-blockDP2-section-block-header-primitive-main-icon-id'",
                                "title": "dataSource?.peopleDirectory?.blockDP2?.title",
                                "titleId": "'directory-page-blockDP2-section-block-header-primitive-title-id'",
                                "titleFontColor": "'accent-one'",
                                "subTitle": "dataSource?.peopleDirectory?.blockDP2?.subTitle",
                                "subTitleId": "'directory-page-blockDP2-section-block-header-primitive-subtitle-id'",
                                "subTitleFontColor": "'accent-one'"
                              }
                            },
                            {
                              "element": "card-list-primitive",
                              "properties": {
                                "listType": "'scrollable-list'",
                                "arrayOfItems": "dataSource?.peopleDirectory?.blockDP2Items"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#itemListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "default-list-template",
                                      "events": {
                                        "click": "$actionHelper.navigateToDomain(item.type, item.id)"
                                      },
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-page-blockDP2-item'}"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#actionListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "item.canFollow && !item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.linkDomain(item.type, item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'actionClass': 'l-icon', 'containerId': 'directory-page-blockDP2-action'}"
                                      }
                                    },
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "!item.canFollow && item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.unLinkDomain(item.type, item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg' , 'actionClass': 'l-icon', 'containerId': 'directory-page-blockDP2-action'}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": false,
                                "title": "'Explore by Sector'",
                                "titleId": "'directory-page-profession-by-sector-section-block-header-primitive-title-id'",
                                "titleFontColor": "'accent-one'",
                                "subTitle": "'Find Lebanese professionals by industry'",
                                "subTitleId": "'directory-page-profession-by-sector-section-block-header-primitive-subtitle-id'",
                                "subTitleFontColor": "'accent-one'"
                              }
                            },
                            {
                              "element": "chips-primitive",
                              "properties": {
                                "chipsType": "'multi-line-chips'",
                                "arrayOfItems": "$actionHelper.isProductionEnvironment() ? initialDataSource?.explore?.byProfileBySector : initialDataSource?.explore?.byProfileBySectorStaging"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#chipItemsTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "search-chips-template",
                                      "events": {
                                        "click": "$searchService.clearSearchFilters(); $actionHelper.goToSearch('people', 'allPeople', {'sector': item.lookupId})"
                                      },
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-page-profession-by-sector-item'}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor pdb-0",
                            "$ngIf": "dataSource?.peopleDirectory?.hasPeopleWithYourLastName"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": true,
                                "mainIconId": "'directory-page-people-with-your-last-name-block-header-primitive-main-icon-id'",
                                "mainIcon": "'assets/icon/dynamic-ui/family.svg'",
                                "titleId": "'directory-page-people-with-your-last-name-section-block-header-primitive-title-id'",
                                "title": "'With Your Last Name'",
                                "titleFontColor": "'accent-one'",
                                "subTitleId": "'directory-page-people-with-your-last-name-section-block-header-primitive-subtitle-id'",
                                "subTitle": "'Lebanese worldwide having your family name'",
                                "subTitleFontColor": "'accent-one'",
                                "hasAction": false
                              }
                            },
                            {
                              "element": "card-list-primitive",
                              "properties": {
                                "listType": "'scrollable-list'",
                                "arrayOfItems": "dataSource?.peopleDirectory?.withYourLastName"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#itemListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "default-list-template",
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-people-with-your-last-name-item'}"
                                      },
                                      "events": {
                                        "click": "$actionHelper.navigateToDomain('Profile', item.id)"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#actionListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "item.canFollow && !item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.linkDomain('Profile', item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg','containerId': 'directory-people-with-your-last-name-item', 'actionClass': 'l-icon'}"
                                      }
                                    },
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "!item.canFollow && item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.unLinkDomain('Profile', item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'directory-people-with-your-last-name-item', 'actionClass': 'l-icon'\n}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#segmentTwoContentTemplate": ""
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor pdb-0",
                            "$ngIf": "dataSource?.networkDirectory?.hasOrganizationsToFollow"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": true,
                                "mainIconId": "'directory-page-network-organization-to-follow-section-block-header-primitive-main-icon-id'",
                                "mainIcon": "'assets/icon/dynamic-ui/People_Active.svg'",
                                "title": "'Organizations to Follow'",
                                "titleId": "'directory-page-network-organization-to-follow-section-block-header-primitive-title-id'",
                                "titleFontColor": "'accent-one'",
                                "subTitleId": "'directory-page-network-organization-to-follow-section-block-header-primitive-subtitle-id'",
                                "subTitle": "'Lebanese organizations in your community'",
                                "subTitleFontColor": "'accent-one'",
                                "hasAction": false
                              }
                            },
                            {
                              "element": "card-list-primitive",
                              "properties": {
                                "listType": "'scrollable-list'",
                                "arrayOfItems": "dataSource?.networkDirectory?.organizationsToFollow"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#itemListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "default-list-template",
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-network-organization-to-follow-item'}"
                                      },
                                      "events": {
                                        "click": "$actionHelper.navigateToDomain('Organization', item.id)"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#actionListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "item.canFollow && !item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.linkDomain(item.type, item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'directory-network-organization-to-follow-item', 'actionClass': 'l-icon'}"
                                      }
                                    },
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "!item.canFollow && item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.unLinkDomain(item.type, item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'directory-network-organization-to-follow-item', 'actionClass': 'l-icon'}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor pdb-0",
                            "$ngIf": "dataSource?.networkDirectory?.hasDiplomaticMissionsToFollow"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": true,
                                "mainIconId": "'directory-page-network-diplomatic-mission-section-block-header-primitive-main-icon-id'",
                                "mainIcon": "'assets/icon/dynamic-ui/diplomatic_with_flag.svg'",
                                "title": "'Diplomatic Missions'",
                                "titleId": "'directory-page-network-diplomatic-mission-section-block-header-primitive-title-id'",
                                "titleFontColor": "'accent-one'",
                                "subTitle": "'Lebanese embassies and consulates'",
                                "subTitleId": "'directory-page-network-diplomatic-mission-section-block-header-primitive-subtitle-id'",
                                "subTitleFontColor": "'accent-one'",
                                "hasAction": false
                              }
                            },
                            {
                              "element": "card-list-primitive",
                              "properties": {
                                "listType": "'scrollable-list'",
                                "arrayOfItems": "dataSource?.networkDirectory?.diplomaticMissionsToFollow"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#itemListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "default-list-template",
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-network-diplomatic-mission-item' }"
                                      },
                                      "events": {
                                        "click": "$actionHelper.navigateToDomain('DiplomaticMission', item.id)"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#actionListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "item.canFollow && !item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.linkDomain(item.type, item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'directory-network-diplomatic-mission-item', 'actionClass': 'l-icon'}"
                                      }
                                    },
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "!item.canFollow && item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.unLinkDomain(item.type, item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'directory-network-diplomatic-mission-item', 'actionClass': 'l-icon'}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": false,
                                "title": "'Explore by Category'",
                                "titleId": "'diplomatic-page-network-explore-by-category-block-header-primitive-title-id'",
                                "titleFontColor": "'accent-one'",
                                "subTitle": "'Find Lebanese organizations by interest'",
                                "subTitleId": "'diplomatic-page-network-explore-by-category-block-header-primitive-subtitle-id'",
                                "subTitleFontColor": "'accent-one'"
                              }
                            },
                            {
                              "element": "chips-primitive",
                              "properties": {
                                "chipsType": "'simple-chips'",
                                "arrayOfItems": "initialDataSource?.explore?.byOrganizationCategory"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#chipItemsTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "search-chips-template",
                                      "events": {
                                        "click": "$searchService.clearSearchFilters(); $actionHelper.goToSearch('networks', 'organizations', {'organizationType': item.lookupId})"
                                      },
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-page-network-explore-by-category-item'}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor pdb-0",
                            "$ngIf": "dataSource?.networkDirectory?.hasBlockDN1"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": true,
                                "mainIcon": "'assets/icon/dynamic-ui/fav-list.svg'",
                                "mainIconId": "'directory-page-blockDN1-section-block-header-primitive-main-icon-id'",
                                "title": "dataSource?.networkDirectory?.blockDN1?.title",
                                "titleId": "'directory-page-blockDN1-section-block-header-primitive-title-id'",
                                "titleFontColor": "'accent-one'",
                                "subTitle": "dataSource?.networkDirectory?.blockDN1?.subTitle",
                                "subTitleId": "'directory-page-blockDN1-section-block-header-primitive-subtitle-id'",
                                "subTitleFontColor": "'accent-one'"
                              }
                            },
                            {
                              "element": "card-list-primitive",
                              "properties": {
                                "listType": "'scrollable-list'",
                                "arrayOfItems": "dataSource?.networkDirectory?.blockDN1Items"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#itemListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "default-list-template",
                                      "events": {
                                        "click": "$actionHelper.navigateToDomain(item.type, item.id)"
                                      },
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-page-blockDN1-item'}"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#actionListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "item.canFollow && !item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.linkDomain(item.type, item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'actionClass': 'l-icon', 'containerId': 'directory-page-blockDN1-action'}"
                                      }
                                    },
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "!item.canFollow && item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.unLinkDomain(item.type, item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg' , 'actionClass': 'l-icon', 'containerId': 'directory-page-blockDN1-action'}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor box-type",
                            "$ngIf": "!initialDataSource?.hasOrganizationRole"
                          },
                          "children": [
                            {
                              "element": "box-card-primitive",
                              "properties": {
                                "title": "'Part of an Organization'",
                                "titleId": "'directory-page-network-part-of-organization-block-header-primitive-title-id'",
                                "subTitle": "'List your position if you are a leader or member in an organization'",
                                "subTitleId": "'directory-page-network-part-of-organization-block-header-primitive-subtitle-id'",
                                "arrayOfItems": "initialDataSource?.networkActionList"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#boxItemsTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "box-template",
                                      "events": {
                                        "click": "$actionHelper.navigateTo('/searchForOrganization', {'organizations': []})"
                                      },
                                      "properties": {
                                        "dataSource": "{'item': item, 'topNetworker': false, 'containerId': 'directory-page-network-part-of-an-organization', 'lastIcon': 'assets/icon/dynamic-ui/Arrow_Right.svg'}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor pdb-0",
                            "$ngIf": "dataSource?.networkDirectory?.hasTownsToFollow"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": true,
                                "mainIconId": "'directory-page-network-towns-to-follow-section-block-header-primitive-main-icon-id'",
                                "mainIcon": "'assets/icon/dynamic-ui/town_find.svg'",
                                "title": "'Towns to Follow'",
                                "titleId": "'directory-page-network-town-to-follow-section-block-header-primitive-title-id'",
                                "titleFontColor": "'accent-one'",
                                "subTitle": "'Get updates happening near your hometown'",
                                "subTitleId": "'directory-page-network-town-to-follow-section-block-header-primitive-subtitle-id'",
                                "subTitleFontColor": "'accent-one'",
                                "hasAction": false
                              }
                            },
                            {
                              "element": "card-list-primitive",
                              "properties": {
                                "listType": "'scrollable-list'",
                                "arrayOfItems": "dataSource?.networkDirectory?.townsToFollow"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#itemListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "default-list-template",
                                      "events": {
                                        "click": "$actionHelper.navigateToDomain('Municipality', item.id)"
                                      },
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-network-town-to-follow-item' }"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#actionListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "item.canFollow && !item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.linkDomain('Municipality', item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'actionClass': 'l-icon'}"
                                      }
                                    },
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "!item.canFollow && item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.unLinkDomain('Municipality', item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'actionClass': 'l-icon'}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor pdb-0",
                            "$ngIf": "dataSource?.networkDirectory?.hasBlockDN2"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": true,
                                "mainIcon": "'assets/icon/dynamic-ui/fav-list.svg'",
                                "mainIconId": "'directory-page-blockDN2-section-block-header-primitive-main-icon-id'",
                                "title": "dataSource?.networkDirectory?.blockDN2?.title",
                                "titleId": "'directory-page-blockDN2-section-block-header-primitive-title-id'",
                                "titleFontColor": "'accent-one'",
                                "subTitle": "dataSource?.networkDirectory?.blockDN2?.subTitle",
                                "subTitleId": "'directory-page-blockDN2-section-block-header-primitive-subtitle-id'",
                                "subTitleFontColor": "'accent-one'"
                              }
                            },
                            {
                              "element": "card-list-primitive",
                              "properties": {
                                "listType": "'scrollable-list'",
                                "arrayOfItems": "dataSource?.networkDirectory?.blockDN2Items"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#itemListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "default-list-template",
                                      "events": {
                                        "click": "$actionHelper.navigateToDomain(item.type, item.id)"
                                      },
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-page-blockDN2-item'}"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#actionListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "item.canFollow && !item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.linkDomain(item.type, item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'actionClass': 'l-icon', 'containerId': 'directory-page-blockDN2-action'}"
                                      }
                                    },
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "!item.canFollow && item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.unLinkDomain(item.type, item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg' , 'actionClass': 'l-icon', 'containerId': 'directory-page-blockDN2-action'}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "element": "ng-template",
                      "attributes": {
                        "#segmentThreeContentTemplate": ""
                      },
                      "children": [
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor pdb-0",
                            "$ngIf": "dataSource?.businessDirectory?.hasBlockDB1"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": true,
                                "mainIcon": "'assets/icon/dynamic-ui/fav-list.svg'",
                                "mainIconId": "'directory-page-blockDB1-section-block-header-primitive-main-icon-id'",
                                "title": "dataSource?.businessDirectory?.blockDB1?.title",
                                "titleId": "'directory-page-blockDB1-section-block-header-primitive-title-id'",
                                "titleFontColor": "'accent-one'",
                                "subTitle": "dataSource?.businessDirectory?.blockDB1?.subTitle",
                                "subTitleId": "'directory-page-blockDB1-section-block-header-primitive-subtitle-id'",
                                "subTitleFontColor": "'accent-one'"
                              }
                            },
                            {
                              "element": "card-list-primitive",
                              "properties": {
                                "listType": "'scrollable-list'",
                                "arrayOfItems": "dataSource?.businessDirectory?.blockDB1Items"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#itemListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "default-list-template",
                                      "events": {
                                        "click": "$actionHelper.navigateToDomain(item.type, item.id)"
                                      },
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-page-blockDB1-item'}"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#actionListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "item.canFollow && !item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.linkDomain(item.type, item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'actionClass': 'l-icon', 'containerId': 'directory-page-blockDB1-action'}"
                                      }
                                    },
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "!item.canFollow && item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.unLinkDomain(item.type, item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg' , 'actionClass': 'l-icon', 'containerId': 'directory-page-blockDB1-action'}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor pdb-0",
                            "$ngIf": "dataSource?.businessDirectory?.hasCompaniesToFollow"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": true,
                                "mainIconId": "'directory-page-business-company-to-follow-section-block-header-primitive-main-icon-id'",
                                "mainIcon": "'assets/icon/dynamic-ui/company_32.svg'",
                                "titleId": "'directory-page-business-company-to-follow-section-block-header-primitive-title-id'",
                                "title": "'Companies to Follow'",
                                "titleFontColor": "'accent-one'",
                                "subTitle": "'Businesses & startups that might interest you'",
                                "subTitleId": "'directory-page-business-company-to-follow-section-block-header-primitive-subtitle-id'",
                                "subTitleFontColor": "'accent-one'",
                                "hasAction": false
                              }
                            },
                            {
                              "element": "card-list-primitive",
                              "properties": {
                                "listType": "'scrollable-list'",
                                "arrayOfItems": "dataSource?.businessDirectory?.companiesToFollow"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#itemListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "default-list-template",
                                      "events": {
                                        "click": "$actionHelper.navigateToDomain('Company', item.id)"
                                      },
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-page-business-comapny-to-follow-item'}"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#actionListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "item.canFollow && !item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.linkDomain('Company', item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'directory-page-business-comapny-to-follow-item', 'actionClass': 'l-icon'}"
                                      }
                                    },
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "!item.canFollow && item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.unLinkDomain('Company', item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'directory-page-business-comapny-to-follow-item', 'actionClass': 'l-icon'}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": false,
                                "title": "'Explore by Sector'",
                                "titleId": "'directory-page-business-explore-by-sector-block-header-primitive-title-id'",
                                "titleFontColor": "'accent-one'",
                                "subTitle": "'Lebanese companies & startups by industry'",
                                "subTitleId": "'directory-page-business-explore-by-sector-block-header-primitive-subtitle-id'",
                                "subTitleFontColor": "'accent-one'"
                              }
                            },
                            {
                              "element": "chips-primitive",
                              "properties": {
                                "chipsType": "'multi-line-chips'",
                                "arrayOfItems": "$actionHelper.isProductionEnvironment() ? initialDataSource?.explore?.bySector : initialDataSource?.explore?.bySectorStaging"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#chipItemsTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "search-chips-template",
                                      "events": {
                                        "click": "$searchService.clearSearchFilters(); $actionHelper.goToSearch('businesses', 'business', {'sector': item.lookupId})"
                                      },
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-page-business-explore-by-sector-item'}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor box-type",
                            "$ngIf": "!initialDataSource?.hasCompanyRole"
                          },
                          "children": [
                            {
                              "element": "box-card-primitive",
                              "properties": {
                                "title": "'Join a Global Business Hub'",
                                "titleId": "'directory-page-business-part-of-business-block-header-primitive-title-id'",
                                "subTitle": "'List your position if you are an owner or team member in a company'",
                                "subTitleId": "'directory-page-business-part-of-business-block-header-primitive-subtitle-id'",
                                "arrayOfItems": "initialDataSource?.businesseActionList"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#boxItemsTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "box-template",
                                      "events": {
                                        "click": "$actionHelper.navigateTo('/searchForCompany', {'companies': []})"
                                      },
                                      "properties": {
                                        "dataSource": "{'item': item, 'topNetworker': false, 'containerId': 'directory-page-business-part-of-an-business', 'lastIcon': 'assets/icon/dynamic-ui/Arrow_Right.svg'\n}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor pdb-0",
                            "$ngIf": "dataSource?.businessDirectory?.hasSupportOrganizations"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": true,
                                "mainIconId": "'directory-page-business-business-support-section-block-header-primitive-main-icon-id'",
                                "mainIcon": "'assets/icon/dynamic-ui/plant-vase.svg'",
                                "title": "'Support Organizations'",
                                "titleId": "'directory-page-business-business-support-section-block-header-primitive-title-id'",
                                "titleFontColor": "'accent-one'",
                                "subTitle": "'Lebanese business support organizations'",
                                "subTitleId": "'directory-page-business-business-support-section-block-header-primitive-title-id'",
                                "subTitleFontColor": "'accent-one'",
                                "hasAction": false
                              }
                            },
                            {
                              "element": "card-list-primitive",
                              "properties": {
                                "listType": "'scrollable-list'",
                                "arrayOfItems": "dataSource?.businessDirectory?.supportOrganizations"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#itemListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "default-list-template",
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-page-business-business-support-item' }"
                                      },
                                      "events": {
                                        "click": "$actionHelper.navigateToDomain('Organization', item.id)"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#actionListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "item.canFollow && !item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.linkDomain(item.type, item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'containerId': 'directory-page-business-business-support-item', 'actionClass': 'l-icon'}"
                                      }
                                    },
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "!item.canFollow && item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.unLinkDomain(item.type, item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg', 'containerId': 'directory-page-business-business-support-item', 'actionClass': 'l-icon'}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "element": "div",
                          "attributes": {
                            "class": "border-separtor pdb-0",
                            "$ngIf": "dataSource?.businessDirectory?.hasBlockDB2"
                          },
                          "children": [
                            {
                              "element": "block-header-primitive",
                              "properties": {
                                "hasDivider": true,
                                "mainIcon": "'assets/icon/dynamic-ui/fav-list.svg'",
                                "mainIconId": "'directory-page-blockDB2-section-block-header-primitive-main-icon-id'",
                                "title": "dataSource?.businessDirectory?.blockDB2?.title",
                                "titleId": "'directory-page-blockDB2-section-block-header-primitive-title-id'",
                                "titleFontColor": "'accent-one'",
                                "subTitle": "dataSource?.businessDirectory?.blockDB2?.subTitle",
                                "subTitleId": "'directory-page-blockDB2-section-block-header-primitive-subtitle-id'",
                                "subTitleFontColor": "'accent-one'"
                              }
                            },
                            {
                              "element": "card-list-primitive",
                              "properties": {
                                "listType": "'scrollable-list'",
                                "arrayOfItems": "dataSource?.businessDirectory?.blockDB2Items"
                              },
                              "children": [
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#itemListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "default-list-template",
                                      "events": {
                                        "click": "$actionHelper.navigateToDomain(item.type, item.id)"
                                      },
                                      "properties": {
                                        "dataSource": "{'item': item, 'containerId': 'directory-page-blockDB2-item'}"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "element": "ng-template",
                                  "attributes": {
                                    "#actionListTemplate": "",
                                    "let-item": "item"
                                  },
                                  "children": [
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "item.canFollow && !item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.linkDomain(item.type, item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/follow.svg', 'actionClass': 'l-icon', 'containerId': 'directory-page-blockDB2-action'}"
                                      }
                                    },
                                    {
                                      "element": "action-template",
                                      "attributes": {
                                        "$ngIf": "!item.canFollow && item.canUnFollow"
                                      },
                                      "events": {
                                        "click": "$actionHelper.unLinkDomain(item.type, item.id, item)"
                                      },
                                      "properties": {
                                        "dataSource": "{'actionIcon': 'assets/icon/dynamic-ui/Following.svg' , 'actionClass': 'l-icon', 'containerId': 'directory-page-blockDB2-action'}"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "initialDataSource": {
    "companyNewsAndEventsActions": [
      {
        "id": "company-news-and-event-action-add-post-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_createPost_green.svg",
        "title": "Create Post",
        "display": "(dataSource.canManage && dataSource.canAddPost) || (!dataSource.canManage && !dataSource.canCreateRoleAction && dataSource.canAddPost)",
        "actionType": "navigation",
        "parameters": "{targetId: _.get(dataSource,'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName',''), targetImage: _.get(dataSource, 'additionalParams.targetImage', null)}",
        "class": "main-sheet",
        "navigationUrl": "'createPost/company/'+ _.get(dataSource, 'additionalParams.targetId', null)"
      },
      {
        "id": "company-news-and-event-action-add-event-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_Events_green.svg",
        "title": "Create Event",
        "display": "(dataSource.canManage && dataSource.canAddEvent) || (!dataSource.canManage && !dataSource.canCreateRoleAction && dataSource.canAddEvent)",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', ''), targetImage: _.get(dataSource, 'additionalParams.targetImage', null)}",
        "actionType": "navigation",
        "class": "main-sheet",
        "navigationUrl": "'createEvent/company/'+ _.get(dataSource,'additionalParams.targetId', null)"
      }
    ],
    "mainCompanyActions": [
      {
        "id": "main-company-action-share-id",
        "icon": "assets/icon/dynamic-ui/Share_Grey.svg",
        "title": "Share",
        "display": "dataSource.canShare",
        "actionType": "share",
        "parameters": "{'sharingMessage': _.get(dataSource, 'additionalParams.loggedinFirstName', '') + ' ' + _.get(dataSource, 'additionalParams.loggedinLastName', '') + ' is inviting you to check ' + _.get(dataSource, 'company.name', '') + '’s products, services & franchises on the platform. Meet the team, get updates and explore business opportunities!',\n'sharingPhotoUrl': _.get(dataSource, 'company.photoCover.imageThumbnailUrl', null),\n'sharingTitle': 'Visit ' + _.get(dataSource, 'company.name', '') + ' on DiasporaID',\n'sharingDescription': 'The Global Lebanese Business Network',\n'targetId': _.get(dataSource, 'company.id', null),\n'targetMethod': 'DiasporaCompany'\n}"
      },
      {
        "id": "main-company-action-claim-company-id",
        "icon": "assets/icon/dynamic-ui/Claim.svg",
        "title": "Claim Company",
        "display": "!dataSource.canManage",
        "actionType": "subPageNavigation",
        "parameters": "{'name': _.get(dataSource, 'company.name', '') }",
        "navigationUrl": "company/claimCompany"
      },
      {
        "id": "main-company-action-report-problem-id",
        "icon": "assets/icon/dynamic-ui/Report_Problem.svg",
        "title": "Report a Problem",
        "display": "!dataSource.canManage",
        "parameters": "{'problemPage': 'Company: ' + _.get(dataSource, 'company.name','') }",
        "actionType": "navigation",
        "navigationUrl": "reportPage"
      }
    ],
    "companyMissionRoleActions": [
      {
        "id": "company-role-action-add-post-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_createPost_green.svg",
        "title": "Create Post",
        "display": "(dataSource.canManage && dataSource.canAddPost) || (!dataSource.canManage && !dataSource.canCreateRoleAction && dataSource.canAddPost)",
        "actionType": "navigation",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', ''), targetImage: _.get(dataSource, 'additionalParams.targetImage', null)}",
        "class": "main-sheet",
        "navigationUrl": "'createPost/company/'+ _.get(dataSource, 'additionalParams.targetId', null)"
      },
      {
        "id": "company-role-action-add-event-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_Events_green.svg",
        "title": "Create Event",
        "display": "(dataSource.canManage && dataSource.canAddEvent) || (!dataSource.canManage && !dataSource.canCreateRoleAction && dataSource.canAddEvent)",
        "parameters": "{targetId: _.get(dataSource,'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', ''), targetImage: _.get(dataSource, 'additionalParams.targetImage', null) }",
        "actionType": "navigation",
        "class": "main-sheet",
        "navigationUrl": "'createEvent/company/'+ _.get(dataSource, 'additionalParams.targetId', null)"
      },
      {
        "id": "company-role-action-add-media-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_addPhoto_green.svg",
        "title": "Add a Photo or Video",
        "display": "dataSource.canManage && dataSource.canUploadMedia",
        "actionType": "navigation",
        "parameters": "{'canUploadImage': dataSource.canUploadImage, 'canUploadVideoLink': dataSource.canUploadVideoLink, targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', ''), targetImage: _.get(dataSource, 'additionalParams.targetImage', null)}",
        "class": "main-sheet",
        "navigationUrl": "'addMedia/'+ _.get(dataSource, 'galleryId', null)"
      },
      {
        "id": "company-role-action-add-product-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_Product_Green.svg",
        "title": "List a Product",
        "display": "dataSource.canManage",
        "class": "main-sheet",
        "actionType": "navigation",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', '') , targetImage: _.get(dataSource, 'additionalParams.targetImage', null) }",
        "navigationUrl": "'addProduct/' + _.get(dataSource, 'additionalParams.targetId', null)"
      },
      {
        "id": "company-role-action-add-service-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_addService_green.svg",
        "title": "List a Service",
        "display": "dataSource.canManage",
        "class": "main-sheet",
        "actionType": "navigation",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', ''), targetImage: _.get(dataSource, 'additionalParams.targetImage', null)}",
        "navigationUrl": "'addService/' + _.get(dataSource, 'additionalParams.targetId', null) "
      },
      {
        "id": "company-role-action-add-franchise-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_Franchise_green.svg",
        "title": "List a Franchise",
        "display": "dataSource.canManage",
        "class": "main-sheet",
        "actionType": "navigation",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', '') , targetImage: _.get(dataSource, 'additionalParams.targetImage', null)}",
        "navigationUrl": "'addFranchise/' + _.get(dataSource, 'additionalParams.targetId', null)"
      }
    ],
    "companyOffersActions": [
      {
        "id": "company-role-action-add-product-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_Product_Green.svg",
        "title": "List a Product",
        "display": "dataSource.canManage",
        "class": "main-sheet",
        "actionType": "navigation",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', '') , targetImage: _.get(dataSource, 'additionalParams.targetImage', null) }",
        "navigationUrl": "'addProduct/' + _.get(dataSource, 'additionalParams.targetId', null)"
      },
      {
        "id": "company-role-action-add-service-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_addService_green.svg",
        "title": "List a Service",
        "display": "dataSource.canManage",
        "class": "main-sheet",
        "actionType": "navigation",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', ''), targetImage: _.get(dataSource, 'additionalParams.targetImage', null)}",
        "navigationUrl": "'addService/' + _.get(dataSource, 'additionalParams.targetId', null) "
      },
      {
        "id": "company-role-action-add-franchise-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_Franchise_green.svg",
        "title": "List a Franchise",
        "display": "dataSource.canManage",
        "class": "main-sheet",
        "actionType": "navigation",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', '') , targetImage: _.get(dataSource, 'additionalParams.targetImage', null)}",
        "navigationUrl": "'addFranchise/' + _.get(dataSource, 'additionalParams.targetId', null)"
      }
    ],
    "manageCompanyPendingMembersActions": [
      {
        "id": "manage-company-pending-members-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Profile",
        "domainId": "item.id"
      },
      {
        "id": "manage-company-pending-members-action-approve-request-id",
        "icon": "assets/icon/dynamic-ui/Approve_Request_gray.svg",
        "title": "Approve Request",
        "display": "dataSource.actions.canApproveEmployee",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  company {\n    approveEmployee(id: $templateContext->additionalParameters.companyId, userId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.unVerifiedEmployees.find(selectedItem => selectedItem.id === item.id); dataSource.verifiedEmployees.push(selectedItem); let selectedItemIndex = dataSource.unVerifiedEmployees.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.unVerifiedEmployees.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Member join request accepted'); $actionHelper.notifiySubscribers(['manage-company-team-members']);\n"
      },
      {
        "id": "manage-company-pending-members-action-reject-request-id",
        "icon": "assets/icon/dynamic-ui/Reject_Request.svg",
        "title": "Reject Request",
        "display": "dataSource.actions.canRemoveMember",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  company {\n    removeMember(id: $templateContext->additionalParameters.companyId, userId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.unVerifiedEmployees.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.unVerifiedEmployees.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.unVerifiedEmployees.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Member join request denied successfully'); $actionHelper.notifiySubscribers(['manage-company-team-members']);\n"
      }
    ],
    "manageCompanyApprovedMembersActions": [
      {
        "id": "manage-company-approved-members-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Profile",
        "domainId": "item.id"
      },
      {
        "id": "manage-company-approved-members-action-remove-member-id",
        "icon": "assets/icon/dynamic-ui/Revoke_Member.svg",
        "title": "Remove Member",
        "display": "dataSource.actions.canRemoveMember",
        "actionType": "deleteItem",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Remove member?",
          "confirmationMessage": "Team member will no longer be shown on this page.",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Remove"
        },
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  company {\n    removeMember(id: $templateContext->additionalParameters.companyId, userId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.verifiedEmployees.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.verifiedEmployees.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.verifiedEmployees.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Team member successfully removed from company'); $actionHelper.notifiySubscribers(['manage-company-team-members']);\n"
      }
    ],
    "manageCompanyReceivedAffiliationActions": [
      {
        "id": "manage-company-received-affiliation-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile ",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Organization",
        "domainId": "item.id"
      },
      {
        "id": "manage-company-received-affiliation-action-approve-request-id",
        "icon": "assets/icon/dynamic-ui/Approve_Request_gray.svg",
        "title": "Approve Request ",
        "display": "dataSource.actions.canApproveParentOrganization",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  company {\n    approveParentOrganization(id: $templateContext->additionalParameters.companyId, parentId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.requestedAffiliations.find(selectedItem => selectedItem.id === item.id); dataSource.currentAffiliations.push(selectedItem); let selectedItemIndex = dataSource.requestedAffiliations.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.requestedAffiliations.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Affiliation request accepted successfully '); $actionHelper.notifiySubscribers(['manage-company-affiliations']);\n"
      },
      {
        "id": "manage-company-received-affiliation-action-reject-request-id",
        "icon": "assets/icon/dynamic-ui/Reject_Request.svg",
        "title": "Reject Request ",
        "display": "dataSource.actions.canRemoveParentOrganization",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  company {\n    removeParentOrganization(id: $templateContext->additionalParameters.companyId, parentId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.requestedAffiliations.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.requestedAffiliations.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.requestedAffiliations.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Affiliation request rejected successfully'); $actionHelper.notifiySubscribers(['manage-company-affiliations']);\n"
      }
    ],
    "manageCompanyCurrentAffiliationsActions": [
      {
        "id": "manage-company-current-affiliation-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile ",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Organization",
        "domainId": "item.id"
      },
      {
        "id": "manage-company-current-affiliation-action-remove-organization-id",
        "icon": "assets/icon/dynamic-ui/Revoke_Member.svg",
        "title": "Remove Organization ",
        "display": "dataSource.actions.canRemoveParentOrganization",
        "actionType": "deleteItem",
        "confirmationInfo": {
          "confirmationTitle": "Remove affiliation with this organization? ",
          "confirmationMessage": "Your company will no longer be shown as affiliated with this organization",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Delete"
        },
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  company {\n    removeParentOrganization(id: $templateContext->additionalParameters.companyId, parentId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.currentAffiliations.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.currentAffiliations.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.currentAffiliations.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Affiliation deleted successfully'); $actionHelper.notifiySubscribers(['manage-company-affiliations']);\n"
      }
    ],
    "manageCompanyReceivedBranchesActions": [
      {
        "id": "manage-company-received-branches-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Company",
        "domainId": "item.id"
      },
      {
        "id": "manage-company-received-branches-action-approve-request-id",
        "icon": "assets/icon/dynamic-ui/Approve_Request_gray.svg",
        "title": "Approve Request",
        "display": "dataSource.actions.canApproveBranch",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  company {\n    approveBranch(branchId: $templateContext->item.id, id: $templateContext->additionalParameters.companyId )\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.incomingBranchesrequests.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.incomingBranchesrequests.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.incomingBranchesrequests.splice(selectedItemIndex, 1);\n} dataSource.additionalParams.parentPage.getFullTree(dataSource);         $actionHelper.showToast('This branch will now appear in your company hierarchy'); $actionHelper.notifiySubscribers(['manage-company-branches']);\n"
      },
      {
        "id": "manage-company-received-branches-action-reject-request-id",
        "icon": "assets/icon/dynamic-ui/Reject_Request.svg",
        "title": "Reject Request",
        "display": "dataSource.actions.canRemoveBranchEntity",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  company {\n    removeBranchEntity(branchId: $templateContext->item.id, id: $templateContext->additionalParameters.companyId )\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.incomingBranchesrequests.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.incomingBranchesrequests.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.incomingBranchesrequests.splice(selectedItemIndex, 1);\n} dataSource.additionalParams.parentPage.getFullTree(dataSource);         $actionHelper.showToast('Branch listing request rejected successfully'); $actionHelper.notifiySubscribers(['manage-company-branches']);\n"
      }
    ],
    "manageCompanySentBranchesActions": [
      {
        "id": "manage-company-sent-branches-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Company",
        "domainId": "item.id"
      },
      {
        "id": "manage-company-sent-branches-action-withdraw-request-id",
        "icon": "assets/icon/dynamic-ui/Revoke_Member.svg",
        "title": "Withdraw Request",
        "display": "dataSource.actions.canRemoveBranchEntity",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  company {\n    removeParentEntity(parentId: $templateContext->item.id, id: $templateContext->additionalParameters.companyId )\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.outgoingBranchesRequests.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.outgoingBranchesRequests.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.outgoingBranchesRequests.splice(selectedItemIndex, 1);\n} dataSource.additionalParams.parentPage.getFullTree(dataSource);     $actionHelper.showToast('Request has been deleted successfully');     $actionHelper.notifiySubscribers(['manage-company-branches']);\n"
      }
    ],
    "manageCompanyCurrentAdministratorsActions": [
      {
        "id": "manage-company-administrator-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Profile",
        "domainId": "item.id"
      },
      {
        "id": "manage-company-administrator-action-remove-admin-id",
        "icon": "assets/icon/dynamic-ui/Revoke_Member.svg",
        "title": "Remove Administrator",
        "display": "dataSource.actions.canRemoveAdmin",
        "actionType": "deleteItem",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Remove Admin?",
          "confirmationMessage": "This member will no longer be an admin of this page.",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Delete"
        },
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  company {\n    removeAdmin(id: $templateContext->additionalParameters.companyId, userId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.admins.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.admins.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.admins.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Page admin removed successfully'); $actionHelper.notifiySubscribers(['manage-company-administrators']);\n"
      }
    ],
    "manageCompanyAssignAdministratorsActions": [
      {
        "id": "manage-company-assign-administrator-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile ",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Profile",
        "domainId": "item.id"
      },
      {
        "id": "manage-company-assign-administrator-action-assign-admin-id",
        "icon": "assets/icon/dynamic-ui/Set_As_Administrator.svg",
        "title": "Assign as Administrator ",
        "display": "dataSource.actions.canAddAdmin",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  company {\n    addAdmin(id: $templateContext->additionalParameters.companyId, userId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "$actionHelper.showToast('User successfully added as administrator'); $actionHelper.notifiySubscribers(['add-company-administrators']);\n"
      }
    ],
    "companyMemberBoxActions": [
      {
        "firstIcon": "assets/icon/dynamic-ui/OwnerOrEmployee.svg",
        "title": "Join Company",
        "subTitle": "Tap here to get started"
      }
    ],
    "diplomaticMissionNewsAndEventsActions": [
      {
        "id": "diplomatic-mission-news-and-event-action-add-post-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_createPost_green.svg",
        "title": "Create Post",
        "display": "dataSource.canAddPost",
        "actionType": "navigation",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', ''), targetImage: _.get(dataSource, 'additionalParams.targetImage', null)}",
        "class": "main-sheet",
        "navigationUrl": "'createPost/diplomaticMission/'+ _.get(dataSource, 'additionalParams.targetId', null)"
      },
      {
        "id": "diplomatic-mission-news-and-event-action-add-event-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_Events_green.svg",
        "title": "Create Event",
        "display": "dataSource.canAddEvent",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', ''), targetImage: _.get(dataSource, 'additionalParams.targetImage', null)}",
        "actionType": "navigation",
        "class": "main-sheet",
        "navigationUrl": "'createEvent/diplomaticMission/'+ _.get(dataSource, 'additionalParams.targetId', null)"
      }
    ],
    "diplomaticMissionRoleActions": [
      {
        "id": "diplomatic-mission-role-action-add-post-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_createPost_green.svg",
        "title": "Create Post",
        "display": "dataSource.canAddPost",
        "actionType": "navigation",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', ''), targetImage: _.get(dataSource, 'additionalParams.targetImage', null) }",
        "class": "main-sheet",
        "navigationUrl": "'createPost/diplomaticMission/'+ _.get(dataSource, 'additionalParams.targetId', null)"
      },
      {
        "id": "diplomatic-mission-role-action-add-event-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_Events_green.svg",
        "title": "Create Event",
        "display": "dataSource.canAddEvent",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', '') , targetImage: _.get(dataSource, 'additionalParams.targetImage', null)}",
        "actionType": "navigation",
        "class": "main-sheet",
        "navigationUrl": "'createEvent/diplomaticMission/'+ _.get(dataSource, 'additionalParams.targetId', null)"
      },
      {
        "id": "diplomatic-mission-role-action-add-media-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_addPhoto_green.svg",
        "title": "Add a Photo or Video",
        "display": "dataSource.canManage && dataSource.canUploadMedia",
        "actionType": "navigation",
        "parameters": "{'canUploadImage': dataSource.canUploadImage, 'canUploadVideoLink': dataSource.canUploadVideoLink, targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', ''), targetImage: _.get(dataSource, 'additionalParams.targetImage', null)}",
        "class": "main-sheet",
        "navigationUrl": "'addMedia/'+ _.get(dataSource, 'galleryId', null)"
      }
    ],
    "mainDiplomaticActions": [
      {
        "id": "main-diplomatic-mission-action-share-id",
        "icon": "assets/icon/dynamic-ui/Share_Grey.svg",
        "title": "Share",
        "display": "dataSource.canShare",
        "actionType": "share",
        "parameters": "{'sharingMessage': _.get(dataSource, 'additionalParams.loggedinFirstName', '') + ' ' + _.get(dataSource, 'additionalParams.loggedinLastName', '') + ' and thousands of influential Lebanese diaspora have already registered on the page. Contact the diplomatic mission, get updates and be part of the community. Don’t miss out!',\n'sharingPhotoUrl': _.get(dataSource, 'diplomaticMission.photoCover.imageThumbnailUrl', null),\n'sharingTitle':'Join ' + _.get(dataSource, 'diplomaticMission.name', '') + ' on DiasporaID',\n'sharingDescription': 'The Global Lebanese Network',\n'targetId': _.get(dataSource, 'diplomaticMission.id', null),\n'targetMethod': 'DiasporaDiplomatic'\n}"
      },
      {
        "id": "main-diplomatic-mission-action-report-problem-id",
        "icon": "assets/icon/dynamic-ui/Report_Problem.svg",
        "title": "Report a Problem",
        "display": "!dataSource.canManage",
        "parameters": "{'problemPage': 'Diplomatic: ' + _.get(dataSource, 'diplomaticMission.name', '') }",
        "actionType": "navigation",
        "navigationUrl": "reportPage"
      }
    ],
    "manageDiplomaticMissionPendingMembersActions": [
      {
        "id": "manage-diplomatic-mission-pending-members-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile ",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Profile",
        "domainId": "item.id"
      },
      {
        "id": "manage-diplomatic-mission-pending-members-action-approve-request-id",
        "icon": "assets/icon/dynamic-ui/Approve_Request_gray.svg",
        "title": "Approve Request",
        "display": "dataSource.actions.canApproveMember",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  diplomaticMission {\n    approveMember(id: $templateContext->additionalParameters.diplomaticMissionId, userId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.unverifiedKeyStaff.find(selectedItem => selectedItem.id === item.id); dataSource.verifiedKeyStaff.push(selectedItem); let selectedItemIndex = dataSource.unverifiedKeyStaff.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.unverifiedKeyStaff.splice(selectedItemIndex, 1);\n}    $actionHelper.showToast('Member join request accepted');  $actionHelper.notifiySubscribers(['manage-diplomaticMission-key-staff']);\n"
      },
      {
        "id": "manage-diplomatic-mission-pending-members-action-reject-request-id",
        "icon": "assets/icon/dynamic-ui/Reject_Request.svg",
        "title": "Reject Request",
        "display": "dataSource.actions.canRemoveMember",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  diplomaticMission {\n    removeMember(id: $templateContext->additionalParameters.diplomaticMissionId, userId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.unverifiedKeyStaff.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.unverifiedKeyStaff.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.unverifiedKeyStaff.splice(selectedItemIndex, 1);\n}  $actionHelper.showToast('Member join request denied successfully');  $actionHelper.notifiySubscribers(['manage-diplomaticMission-key-staff']);\n"
      }
    ],
    "manageDiplomaticMissionApprovedMembersActions": [
      {
        "id": "manage-diplomatic-mission-approved-members-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile ",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Profile",
        "domainId": "item.id"
      },
      {
        "id": "manage-diplomatic-mission-approved-members-action-remove-member-id",
        "icon": "assets/icon/dynamic-ui/Revoke_Member.svg",
        "title": "Remove Member",
        "display": "dataSource.actions.canRemoveMember",
        "actionType": "deleteItem",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Remove member?",
          "confirmationMessage": "This member will no longer be shown under this diplomatic mission’s page.",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Remove"
        },
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  diplomaticMission {\n    removeMember(id: $templateContext->additionalParameters.diplomaticMissionId, userId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.verifiedKeyStaff.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.verifiedKeyStaff.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.verifiedKeyStaff.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Member successfully removed from this diplomatic mission'); $actionHelper.notifiySubscribers(['manage-diplomaticMission-key-staff']);\n"
      }
    ],
    "manageDiplomaticMissionCurrentAdministratorsActions": [
      {
        "id": "manage-diplomatic-mission-administrator-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Profile",
        "domainId": "item.id"
      },
      {
        "id": "manage-diplomatic-mission-administrator-action-remove-admin-id",
        "icon": "assets/icon/dynamic-ui/Revoke_Member.svg",
        "title": "Remove Administrator",
        "display": "dataSource.actions.canRemoveAdmin",
        "actionType": "deleteItem",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Remove Admin?",
          "confirmationMessage": "This member will no longer be an admin on this page.",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Delete"
        },
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  diplomaticMission {\n    removeAdmin(id: $templateContext->additionalParameters.diplomaticMissionId, userId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.admins.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.admins.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.admins.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Page admin removed successfully'); $actionHelper.notifiySubscribers(['manage-diplomaticMission-administrators']);\n"
      }
    ],
    "manageDiplomaticMissionAssignAdministratorsActions": [
      {
        "id": "manage-diplomatic-mission-assign-administrator-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Profile",
        "domainId": "item.id"
      },
      {
        "id": "manage-diplomatic-mission-assign-administrator-action-assign-admin-id",
        "icon": "assets/icon/dynamic-ui/Set_As_Administrator.svg",
        "title": "Assign as Administrator",
        "display": "dataSource.actions.canAddAdmin",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  diplomaticMission {\n    addAdmin(id: $templateContext->additionalParameters.diplomaticMissionId, userId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "$actionHelper.showToast('User successfully added as an administrator'); $actionHelper.notifiySubscribers(['add-diplomaticMission-administrators']);\n"
      }
    ],
    "manageDiplomaticMissionAmbassadorialNetworkActions": [
      {
        "id": "manage-diplomatic-mission-ambassadorial-network-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Organization",
        "domainId": "item.id"
      },
      {
        "id": "manage-diplomatic-mission-ambassadorial-network-action-remove-organization-id",
        "icon": "assets/icon/dynamic-ui/Revoke_Member.svg",
        "title": "Remove Organization",
        "display": "dataSource.actions.canRemoveAmbassadorialEntity",
        "actionType": "deleteItem",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Remove Organization?",
          "confirmationMessage": "Are you sure you want to remove the affiliation with this organization? This action cannot be undone",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Delete"
        },
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  diplomaticMission {\n    removeAmbassadorialEntity(id: $templateContext->additionalParameters.diplomaticMissionId, organizationId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.ambassadorialNetworks.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.ambassadorialNetworks.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.ambassadorialNetworks.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Affiliation deleted successfully'); $actionHelper.notifiySubscribers(['manage-diplomaticMission-ambassadorialNetworks']);\n"
      }
    ],
    "manageDiplomaticMissionTradeOfficeActions": [
      {
        "id": "manage-diplomatic-mission-trade-office-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Company",
        "domainId": "item.id"
      },
      {
        "id": "manage-diplomatic-mission-trade-office-action-remove-company-id",
        "icon": "assets/icon/dynamic-ui/Revoke_Member.svg",
        "title": "Remove Company",
        "display": "dataSource.actions.canRemoveTradeOfficeEntity",
        "actionType": "deleteItem",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Remove Company? ",
          "confirmationMessage": "It will no longer be featured in the trade office listings. ",
          "confrimationCancelAction": "cancel",
          "confrimationAgreeAction": "Delete"
        },
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  diplomaticMission {\n    removeTradeOfficeEntity(id: $templateContext->additionalParameters.diplomaticMissionId, companyId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.tradeOffices.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.tradeOffices.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.tradeOffices.splice(selectedItemIndex, 1);\n}  $actionHelper.showToast('Company no longer listed under the trade office'); $actionHelper.notifiySubscribers(['manage-diplomaticMission-tradeOffice']);\n"
      }
    ],
    "viewDiplomaticMissionOfficeActions": [
      {
        "id": "manage-diplomatic-mission-office-action-join-office-id",
        "icon": "assets/icon/dynamic-ui/Join_Office.svg",
        "title": "Join Office",
        "display": "dataSource.canJoinMember",
        "actionType": "navigation",
        "parameters": "{'diplomaticMissionId': dataSource.additionalParams.diplomaticMissionId, 'office': {'id': dataSource.id, 'name': _.get(dataSource, 'name', null)}, 'positionType': {lookupId: 'CommitteeMember', name: 'Committee or Board Member'}, userId: dataSource.additionalParams.userId, disableForm: true}",
        "navigationUrl": "'profile/addDiplomaticRole/' + dataSource.additionalParams.diplomaticMissionId"
      }
    ],
    "manageDiplomaticMissionOfficeActions": [
      {
        "id": "manage-diplomatic-mission-office-action-add-member-id",
        "icon": "assets/icon/dynamic-ui/Add_Members.svg",
        "title": "Add Members",
        "display": "true",
        "actionType": "subPageNavigation",
        "navigationUrl": "diplomaticMission/addDiplomaticOfficeMember",
        "parameters": "{'diplomaticMissionId': _.get(dataSource, 'additionalParams.diplomaticMissionId', null), 'officeName': _.get(dataSource, 'name', null)}"
      },
      {
        "id": "manage-diplomatic-mission-office-action-join-office-id",
        "icon": "assets/icon/dynamic-ui/Join_Office.svg",
        "title": "Join Office",
        "display": "dataSource.canJoinMember",
        "actionType": "navigation",
        "parameters": "{'diplomaticMissionId': dataSource.additionalParams.diplomaticMissionId, 'office': {'id': dataSource.id, 'name': _.get(dataSource, 'name', null)}, 'positionType': {lookupId: 'CommitteeMember', name: 'Committee or Board Member'}, userId: _.get(dataSource, 'additionalParams.userId', null), disableForm: true}",
        "navigationUrl": "'profile/addDiplomaticRole/' + dataSource.additionalParams.diplomaticMissionId"
      },
      {
        "id": "manage-diplomatic-mission-office-action-rename-office-id",
        "icon": "assets/icon/dynamic-ui/Edit_Caption.svg",
        "title": "Rename Office",
        "display": "dataSource.canEditOffice",
        "actionType": "subPageNavigation",
        "navigationUrl": "diplomaticMission/editDiplomaticOffice",
        "parameters": "{ 'previousPageDataSource': dataSource, 'diplomaticMissionId': dataSource.additionalParams.diplomaticMissionId, 'office': {'id': dataSource.id, 'name': _.get(dataSource, 'name', null)}, userId: dataSource.additionalParams.userId}"
      },
      {
        "id": "manage-diplomatic-mission-office-action-delete-office-id",
        "icon": "assets/icon/dynamic-ui/Delete.svg",
        "title": "Delete Office",
        "display": "dataSource.canDeleteOffice",
        "actionType": "deleteItem",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Delete diplomatic office?",
          "confirmationMessage": "The chosen diplomatic office will be permanently removed.",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Delete"
        },
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  diplomaticMissionCommittee {\n    delete(id: $templateContext->additionalParameters.officeId, diplomaticMissionId: $templateContext->additionalParameters.diplomaticMissionId)\n  }\n}\n",
        "postAction": "$actionHelper.showToast('Diplomatic office deleted successfully');   $actionHelper.notifiySubscribers(['delete-office'], true);\n"
      }
    ],
    "manageDiplomaticMissionOfficeMembersActions": [
      {
        "id": "manage-diplomatic-mission-office-member-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Profile",
        "domainId": "item.id"
      },
      {
        "id": "manage-diplomatic-mission-office-member-action-remove-member-id",
        "icon": "assets/icon/dynamic-ui/Revoke_Member.svg",
        "title": "Remove Member",
        "display": "dataSource.canRemoveMember",
        "actionType": "deleteItem",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Remove role",
          "confirmationMessage": "Member’s role will be permanently removed from this diplomatic office.",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Remove"
        },
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  diplomaticMissionCommittee {\n    removeMember(id: $templateContext->additionalParameters.officeId, userId: $templateContext->item.id, diplomaticMissionId: $templateContext->additionalParameters.diplomaticMissionId)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.members.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.members.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.members.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Member successfully removed from diplomatic office'); $actionHelper.notifiySubscribers(['remove-office-member']);\n"
      }
    ],
    "addDiplomaticMissionOfficeMembersActions": [
      {
        "id": "add-diplomatic-mission-office-member-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Profile",
        "domainId": "item.id"
      },
      {
        "id": "add-diplomatic-mission-office-member-action-add-member-id",
        "icon": "assets/icon/dynamic-ui/Add_Members.svg",
        "title": "Add Members",
        "display": "dataSource.canAddMember",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  diplomaticMissionCommittee {\n    addMember(diplomaticMissionId: $templateContext->additionalParameters.diplomaticMissionId, id: $templateContext->additionalParameters.officeId, userId: $templateContext->item.id, role:{positionName:\"Committee Member\", roleName:\"CommitteeMember\"})\n  }\n}\n",
        "postAction": "$actionHelper.showToast('Member successfully added to diplomatic office');  $actionHelper.notifiySubscribers(['add-office-member']);\n"
      }
    ],
    "embassyMemberBoxActions": [
      {
        "firstIcon": "assets/icon/dynamic-ui/Join_Diplomatic.svg",
        "title": "Join Diplomatic Mission",
        "subTitle": "Tap here to get started"
      }
    ],
    "quickLinks": [
      {
        "icon": "assets/icon/dynamic-ui/Profession.svg",
        "title": "List Your Profession",
        "display": true,
        "actionType": "navigationWithQueryParams",
        "navigationUrl": "profile/edit",
        "parameter": "dataSource.profileId"
      },
      {
        "icon": "assets/icon/dynamic-ui/Add_Company.svg",
        "title": "Create Company or Startup",
        "display": true,
        "actionType": "navigation",
        "parameters": {
          "companies": []
        },
        "navigationUrl": "searchForCompany"
      },
      {
        "icon": "assets/icon/dynamic-ui/Add_Role.svg",
        "title": "Add Role in a Company",
        "display": true,
        "actionType": "navigation",
        "parameters": {
          "companies": []
        },
        "navigationUrl": "searchForCompany"
      },
      {
        "icon": "assets/icon/dynamic-ui/Add_Organization.svg",
        "title": "Create Organization",
        "display": true,
        "actionType": "navigation",
        "parameters": {
          "organizations": []
        },
        "navigationUrl": "searchForOrganization"
      },
      {
        "icon": "assets/icon/dynamic-ui/Add_Role.svg",
        "title": "Add Role in an Organization",
        "display": true,
        "actionType": "navigation",
        "parameters": {
          "organizations": []
        },
        "navigationUrl": "searchForOrganization"
      },
      {
        "icon": "assets/icon/dynamic-ui/Save_Grey.svg",
        "title": "Saved Posts",
        "display": true,
        "actionType": "navigation",
        "navigationUrl": "savedPosts"
      },
      {
        "icon": "assets/icon/dynamic-ui/Notifications.svg",
        "title": "Notification Settings",
        "display": true,
        "actionType": "navigation",
        "navigationUrl": "manage/notifications"
      },
      {
        "icon": "assets/icon/dynamic-ui/Leave_Office.svg",
        "title": "Log Out",
        "display": true,
        "actionType": "logout"
      }
    ],
    "supports": [
      {
        "icon": "assets/icon/dynamic-ui/Help.svg",
        "title": "Help",
        "display": true,
        "actionType": "openBrowser",
        "navigationUrl": "mailto:support@diasporaid.com"
      },
      {
        "icon": "assets/icon/dynamic-ui/About_Us.svg",
        "title": "About Us",
        "display": true,
        "actionType": "navigation",
        "navigationUrl": "aboutUs"
      },
      {
        "icon": "assets/icon/dynamic-ui/Privacy_Policy.svg",
        "title": "Privacy Policy",
        "display": true,
        "actionType": "openBrowser",
        "navigationUrl": "https://www.diasporaid.com/privacy-policy.html"
      },
      {
        "icon": "assets/icon/dynamic-ui/Terms_Of_Service.svg",
        "title": "Terms of Service",
        "display": true,
        "actionType": "openBrowser",
        "navigationUrl": "https://www.diasporaid.com/terms-of-service.html"
      },
      {
        "icon": "assets/icon/dynamic-ui/Report_Problem.svg",
        "title": "Report a Problem",
        "display": true,
        "parameters": {
          "problemPage": "General Problem"
        },
        "actionType": "navigation",
        "navigationUrl": "reportPage"
      },
      {
        "icon": "assets/icon/dynamic-ui/RequestToBeFeatured.svg",
        "title": "Request to be Featured",
        "display": true,
        "parameters": {
          "problemPage": "Request To Be Featured"
        },
        "actionType": "navigation",
        "navigationUrl": "requestToBeFeature"
      },
      {
        "icon": "assets/icon/dynamic-ui/Advertise.svg",
        "title": "Advertise with Us",
        "display": true,
        "parameters": {
          "problemPage": "Advertisement Request"
        },
        "actionType": "navigation",
        "navigationUrl": "advertiseWithUs"
      }
    ],
    "conversationAction": [
      {
        "icon": "assets/icon/dynamic-ui/Delete.svg",
        "title": "Delete Conversation",
        "display": "true",
        "actionType": "deleteItem",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "confirmationInfo": {
          "confirmationTitle": "Delete Conversation?",
          "confirmationMessage": "Are you sure you want to delete this conversation? This action cannot be undone",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Delete"
        },
        "query": "mutation {  conversation {\n    delete(id: $templateContext->additionalParameters.conversationId)\n  }\n}\n",
        "postAction": "$actionHelper.showToast('Conversation deleted successfully'); $actionHelper.notifiySubscribers(['delete-conversation'], true)\n"
      }
    ],
    "organizationNewsAndEventActions": [
      {
        "id": "organization-news-and-event-action-add-post-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_createPost_green.svg",
        "title": "Create Post",
        "display": "(dataSource.canManage && dataSource.canAddPost) || (!dataSource.canManage && !dataSource.canJoin && dataSource.canAddPost)",
        "actionType": "navigation",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', ''), targetImage: _.get(dataSource, 'additionalParams.targetImage', null)}",
        "class": "main-sheet",
        "navigationUrl": "'createPost/organization/'+ _.get(dataSource, 'additionalParams.targetId', null)"
      },
      {
        "id": "organization-news-and-event-action-add-event-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_Events_green.svg",
        "title": "Create Event",
        "display": "(dataSource.canManage && dataSource.canAddEvent) || (!dataSource.canManage && !dataSource.canJoin && dataSource.canAddEvent)",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', ''), targetImage: _.get(dataSource, 'additionalParams.targetImage', null)}",
        "actionType": "navigation",
        "class": "main-sheet",
        "navigationUrl": "'createEvent/organization/'+ _.get(dataSource, 'additionalParams.targetId', null)"
      }
    ],
    "mainOrganizationActions": [
      {
        "id": "main-organization-action-share-id",
        "icon": "assets/icon/dynamic-ui/Share_Grey.svg",
        "title": "Share",
        "display": "dataSource.canShare",
        "actionType": "share",
        "parameters": "{'sharingMessage': 'Visit the organization page on DiasporaID and join inspiring Lebanese people from the diaspora. Network with Entrepreneurs, business people, diplomats and influential profiles!',\n'sharingPhotoUrl': _.get(dataSource, 'organization.photoCover.imageThumbnailUrl', null),\n'sharingTitle': 'Visit ' + _.get(dataSource, 'organization.name', '') + ' on DiasporaID',\n'sharingDescription': 'The Global Lebanese Network',\n'targetId': _.get(dataSource, 'organization.id', null),\n'targetMethod': 'DiasporaOrganization'\n}"
      },
      {
        "id": "main-organization-action-claim-id",
        "icon": "assets/icon/dynamic-ui/Claim.svg",
        "title": "Claim Organization",
        "display": "!dataSource.canManage",
        "actionType": "subPageNavigation",
        "parameters": "{'name': _.get(dataSource, 'organization.name', '') }",
        "navigationUrl": "organization/claimOrganization"
      },
      {
        "id": "main-organization-action-report-problem-id",
        "icon": "assets/icon/dynamic-ui/Report_Problem.svg",
        "title": "Report a Problem",
        "display": "!dataSource.canManage",
        "parameters": "{'problemPage': 'Organization: ' + _.get(dataSource, 'organization.name', '') }",
        "actionType": "navigation",
        "navigationUrl": "reportPage"
      }
    ],
    "organizationRoleActions": [
      {
        "id": "organization-role-action-add-post-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_createPost_green.svg",
        "title": "Create Post",
        "display": "(dataSource.canManage && dataSource.canAddPost) || (!dataSource.canManage && !dataSource.canJoin && dataSource.canAddPost)",
        "actionType": "navigation",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', ''), targetImage: _.get(dataSource, 'additionalParams.targetImage', null) }",
        "class": "main-sheet",
        "navigationUrl": "'createPost/organization/'+ _.get(dataSource, 'additionalParams.targetId', null)"
      },
      {
        "id": "organization-role-action-add-event-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_Events_green.svg",
        "title": "Create Event",
        "display": "(dataSource.canManage && dataSource.canAddEvent) || (!dataSource.canManage && !dataSource.canJoin && dataSource.canAddEvent)",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', ''), targetImage: _.get(dataSource, 'additionalParams.targetImage', null)}",
        "actionType": "navigation",
        "class": "main-sheet",
        "navigationUrl": "'createEvent/organization/'+ _.get(dataSource,'additionalParams.targetId', null)"
      },
      {
        "id": "organization-role-action-add-media-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_addPhoto_green.svg",
        "title": "Add a Photo or Video",
        "display": "dataSource.canManage && dataSource.canUploadMedia",
        "actionType": "navigation",
        "parameters": "{'canUploadImage': dataSource.canUploadImage, 'canUploadVideoLink': dataSource.canUploadVideoLink, targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', ''), targetImage: _.get(dataSource, 'additionalParams.targetImage', null) }",
        "class": "main-sheet",
        "navigationUrl": "'addMedia/'+ _.get(dataSource, 'galleryId', null)"
      }
    ],
    "manageOrganizationPendingMembersActions": [
      {
        "id": "manage-organization-pending-members-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Profile",
        "domainId": "item.id"
      },
      {
        "id": "manage-organization-pending-members-action-approve-request-id",
        "icon": "assets/icon/dynamic-ui/Approve_Request_gray.svg",
        "title": "Approve Request",
        "display": true,
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organization {\n    approveMember(id: $templateContext->additionalParameters.organizationId, userId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.unverifiedMembers.find(selectedItem => selectedItem.id === item.id); dataSource.verifiedMembers.push(selectedItem); let selectedItemIndex = dataSource.unverifiedMembers.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.unverifiedMembers.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Member join request accepted'); $actionHelper.notifiySubscribers(['manage-organization-team-members']);\n"
      },
      {
        "id": "manage-organization-pending-members-action-reject-request-id",
        "icon": "assets/icon/dynamic-ui/Reject_Request.svg",
        "title": "Reject Request",
        "display": "dataSource.actions.canRemoveMember",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organization {\n    removeMember(id: $templateContext->additionalParameters.organizationId, userId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.unverifiedMembers.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.unverifiedMembers.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.unverifiedMembers.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Member join request denied successfully'); $actionHelper.notifiySubscribers(['manage-organization-team-members']);\n"
      }
    ],
    "manageOrganizationApprovedMembersActions": [
      {
        "id": "manage-organization-approved-members-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Profile",
        "domainId": "item.id"
      },
      {
        "id": "manage-organization-approved-members-action-remove-member-id",
        "icon": "assets/icon/dynamic-ui/Revoke_Member.svg",
        "title": "Remove Member",
        "display": "dataSource.actions.canRemoveMember",
        "actionType": "deleteItem",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Remove member?",
          "confirmationMessage": "This member will no longer be shown under this organization.",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Remove"
        },
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organization {\n    removeMember(id: $templateContext->additionalParameters.organizationId, userId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.verifiedMembers.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.verifiedMembers.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.verifiedMembers.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Member successfully removed from this organization'); $actionHelper.notifiySubscribers(['manage-organization-team-members']);\n"
      }
    ],
    "manageOrganizationAdministratorsActions": [
      {
        "id": "manage-organization-administrator-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Profile",
        "domainId": "item.id"
      },
      {
        "id": "manage-organization-administrator-action-remove-admin-id",
        "icon": "assets/icon/dynamic-ui/Revoke_Member.svg",
        "title": "Remove Administrator",
        "display": "dataSource.actions.canRemoveAdmin",
        "actionType": "deleteItem",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Remove Administrator?",
          "confirmationMessage": "This member will no longer be an administrator of this page.",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Remove"
        },
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organization {\n    removeAdmin(id: $templateContext->additionalParameters.organizationId, userId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.admins.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.admins.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.admins.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Page admin removed successfully'); $actionHelper.notifiySubscribers(['manage-organization-administrators']);\n"
      }
    ],
    "manageOrganizationAssignAdministratorActions": [
      {
        "id": "manage-organization-assign-administrator-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Profile",
        "domainId": "item.id"
      },
      {
        "id": "manage-organization-assign-administrator-action-assign-admin-id",
        "icon": "assets/icon/dynamic-ui/Set_As_Administrator.svg",
        "title": "Assign as Administrator",
        "display": "dataSource.actions.canAddAdmin",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organization {\n    addAdmin(id: $templateContext->additionalParameters.organizationId, userId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "$actionHelper.showToast('User successfully added as page administrator'); $actionHelper.notifiySubscribers(['add-organization-administrators']);\n"
      }
    ],
    "manageOrganizationReceivedAffiliationActions": [
      {
        "id": "manage-organization-received-affiliation-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Company",
        "domainId": "item.id"
      },
      {
        "id": "manage-organization-received-affiliation-action-approve-request-id",
        "icon": "assets/icon/dynamic-ui/Approve_Request_gray.svg",
        "title": "Approve Request",
        "display": "dataSource.actions.canApproveAffiliatedCompany",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organization {\n    approveAffiliatedCompany(companyId: $templateContext->item.id, id: $templateContext->additionalParameters.organizationId )\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.requestedAffiliations.find(selectedItem => selectedItem.id === item.id); dataSource.currentAffiliations.push(selectedItem); let selectedItemIndex = dataSource.requestedAffiliations.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.requestedAffiliations.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Affiliation request was accepted successfully'); $actionHelper.notifiySubscribers(['manage-organization-affiliations']);\n"
      },
      {
        "id": "manage-organization-received-affiliation-action-reject-request-id",
        "icon": "assets/icon/dynamic-ui/Reject_Request.svg",
        "title": "Reject Request",
        "display": "dataSource.actions.canRemoveAffiliatedCompany",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organization {\n    removeAffiliatedCompany(companyId: $templateContext->item.id, id: $templateContext->additionalParameters.organizationId )\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.requestedAffiliations.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.requestedAffiliations.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.requestedAffiliations.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Affiliation request was denied successfully'); $actionHelper.notifiySubscribers(['manage-organization-affiliations']);\n"
      }
    ],
    "manageOrganizationCurrentAffiliationsActions": [
      {
        "id": "manage-organization-current-affiliation-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Company",
        "domainId": "item.id"
      },
      {
        "id": "manage-organization-current-affiliation-action-remove-request-id",
        "icon": "assets/icon/dynamic-ui/Revoke_Member.svg",
        "title": "Remove Company",
        "display": "dataSource.actions.canRemoveAffiliatedCompany",
        "actionType": "deleteItem",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Remove company affiliation?",
          "confirmationMessage": "This company will no longer be shown under your affiliations.",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Remove"
        },
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organization {\n    removeAffiliatedCompany(companyId: $templateContext->item.id, id: $templateContext->additionalParameters.organizationId )\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.currentAffiliations.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.currentAffiliations.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.currentAffiliations.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Affiliation was deleted successfully'); $actionHelper.notifiySubscribers(['manage-organization-affiliations']);\n"
      }
    ],
    "manageOrganizationReceivedChaptersActions": [
      {
        "id": "manage-organization-received-chapters-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Organization",
        "domainId": "item.id"
      },
      {
        "id": "manage-organization-received-chapters-action-approve-request-id",
        "icon": "assets/icon/dynamic-ui/Approve_Request_gray.svg",
        "title": "Approve Request",
        "display": "dataSource.actions.canApproveChapter",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organization {\n    approveChapter(chapterId: $templateContext->item.id, id: $templateContext->additionalParameters.organizationId )\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.incomingChaptersRequests.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.incomingChaptersRequests.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.incomingChaptersRequests.splice(selectedItemIndex, 1);\n} dataSource.additionalParams.parentPage.getFullTree(dataSource);         $actionHelper.showToast('Request approved'); $actionHelper.notifiySubscribers(['manage-organization-chapters']);\n"
      },
      {
        "id": "manage-organization-received-chapters-action-reject-request-id",
        "icon": "assets/icon/dynamic-ui/Reject_Request.svg",
        "title": "Reject Request",
        "display": "dataSource.actions.canRemoveChapterEntity",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organization {\n    removeChapterEntity(chapterId: $templateContext->item.id, id: $templateContext->additionalParameters.organizationId )\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.incomingChaptersRequests.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.incomingChaptersRequests.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.incomingChaptersRequests.splice(selectedItemIndex, 1);\n} dataSource.additionalParams.parentPage.getFullTree(dataSource);         $actionHelper.showToast('Chapter listing request rejected successfully'); $actionHelper.notifiySubscribers(['manage-organization-chapters']);\n"
      }
    ],
    "manageOrganizationSentChaptersActions": [
      {
        "id": "manage-organization-sent-chapters-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Organization",
        "domainId": "item.id"
      },
      {
        "id": "manage-organization-sent-chapters-action-withdraw-request-id",
        "icon": "assets/icon/dynamic-ui/Revoke_Member.svg",
        "title": "Withdraw Request",
        "display": "dataSource.actions.canRemoveChapterEntity",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organization {\n    removeParentEntity(parentId: $templateContext->item.id, id: $templateContext->additionalParameters.organizationId )\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.outgoingChaptersRequests.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.outgoingChaptersRequests.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.outgoingChaptersRequests.splice(selectedItemIndex, 1);\n} dataSource.additionalParams.parentPage.getFullTree(dataSource);         $actionHelper.showToast('Request removed successfully'); $actionHelper.notifiySubscribers(['manage-organization-chapters']);\n"
      }
    ],
    "viewOrganizationCommitteeActions": [
      {
        "id": "manage-organization-committee-details-action-join-committee-id",
        "icon": "assets/icon/dynamic-ui/Join_Office.svg",
        "title": "Join Committee",
        "display": "dataSource.canJoinMember",
        "actionType": "navigation",
        "parameters": "{'organizationId': _.get(dataSource, 'additionalParams.organizationId', null), 'committee': {'id': dataSource.id, 'name': _.get(dataSource, 'name', '')}, 'positionType': {lookupId: 'CommitteeMember', name: 'Committee or Board Member'}, userId: _.get(dataSource, 'additionalParams.userId', null) , disableForm: true}",
        "navigationUrl": "'profile/addOrganizationRole/' + dataSource.additionalParams.organizationId"
      }
    ],
    "manageOrganizationCommitteeActions": [
      {
        "id": "manage-organization-committee-details-action-add-member-id",
        "icon": "assets/icon/dynamic-ui/Add_Members.svg",
        "title": "Add Members",
        "display": "true",
        "actionType": "subPageNavigation",
        "navigationUrl": "organization/addOrganizationCommitteeMember",
        "parameters": "{'organizationId': dataSource.additionalParams.organizationId, 'committeeName': _.get(dataSource, 'name', '') }"
      },
      {
        "id": "manage-organization-committee-details-action-join-committee-id",
        "icon": "assets/icon/dynamic-ui/Join_Office.svg",
        "title": "Join Committee",
        "display": "dataSource.canJoinMember",
        "actionType": "navigation",
        "parameters": "{'organizationId': dataSource.additionalParams.organizationId, 'committee': {'id': dataSource.id, 'name': _.get(dataSource, 'name', null) }, 'positionType': {lookupId: 'CommitteeMember', name: 'Committee or Board Member'}, userId: dataSource.additionalParams.userId, disableForm: true}",
        "navigationUrl": "'profile/addOrganizationRole/' + dataSource.additionalParams.organizationId"
      },
      {
        "id": "manage-organization-committee-details-action-edit-committee-id",
        "icon": "assets/icon/dynamic-ui/Edit_Caption.svg",
        "title": "Rename Committee",
        "display": "dataSource.canEditCommittee",
        "actionType": "subPageNavigation",
        "navigationUrl": "organization/editOrganizationCommittee",
        "parameters": "{ 'previousPageDataSource': dataSource, 'organizationId': _.get(dataSource, 'additionalParams.organizationId', null), 'committee': {'id': dataSource.id, 'name': _.get(dataSource, 'name', null) }, userId: _.get(dataSource, 'additionalParams.userId', null) }"
      },
      {
        "id": "manage-organization-committee-details-action-delete-committee-id",
        "icon": "assets/icon/dynamic-ui/Delete.svg",
        "title": "Delete Committee",
        "display": "dataSource.canDeleteCommittee",
        "actionType": "deleteItem",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Delete Committee?",
          "confirmationMessage": "This committee and the roles within will be permanently removed.",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Remove"
        },
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organizationCommittee {\n    delete(id: $templateContext->additionalParameters.committeeId, organizationId: $templateContext->additionalParameters.organizationId )\n  }\n}\n",
        "postAction": "$actionHelper.showToast('Committee deleted successfully'); $actionHelper.notifiySubscribers(['delete-commiteee'], true);\n"
      }
    ],
    "manageOrganizationCommitteeMembersActions": [
      {
        "id": "manage-organization-committee-member-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Profile",
        "domainId": "item.id"
      },
      {
        "id": "manage-organization-committee-member-action-remove-member-id",
        "icon": "assets/icon/dynamic-ui/Revoke_Member.svg",
        "title": "Remove Member",
        "display": "dataSource.canRemoveMember",
        "actionType": "deleteItem",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Remove role",
          "confirmationMessage": "Member will be permanently removed from this committee.",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Remove"
        },
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organizationCommittee {\n    removeMember(id: $templateContext->additionalParameters.committeeId, organizationId: $templateContext->additionalParameters.organizationId, userId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.members.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.members.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.members.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Member successfully removed from this committee'); $actionHelper.notifiySubscribers(['remove-committee-member']);\n"
      }
    ],
    "addOrganizationCommitteeMembersActions": [
      {
        "id": "add-organization-committee-member-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Profile",
        "domainId": "item.id"
      },
      {
        "id": "add-organization-committee-member-action-add-member-id",
        "icon": "assets/icon/dynamic-ui/Add_Members.svg",
        "title": "Add Member",
        "display": "dataSource.canAddMember",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organizationCommittee {\n    addMember(organizationId: $templateContext->additionalParameters.organizationId, id: $templateContext->additionalParameters.committeeId, userId: $templateContext->item.id, role:{positionName:\"Committee Member\", roleName:\"CommitteeMember\"})\n  }\n}\n",
        "postAction": "$actionHelper.showToast('Member successfully added to committee'); $actionHelper.notifiySubscribers(['add-committee-member']);\n"
      }
    ],
    "organizationMemberBoxActions": [
      {
        "firstIcon": "assets/icon/dynamic-ui/OrganizationMember.svg",
        "title": "Join Organization",
        "subTitle": "Tap here to get started"
      }
    ],
    "profileActions": [
      {
        "id": "profile-action-add-post-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_createPost_green.svg",
        "title": "Create Post",
        "display": "dataSource.canAddPost",
        "actionType": "navigation",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', '') , targetImage: _.get(dataSource, 'additionalParams.targetImage', null)}",
        "class": "main-sheet",
        "navigationUrl": "'createPost/user/'+ _.get(dataSource, 'additionalParams.targetId', null)"
      },
      {
        "id": "profile-action-add-media-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_addPhoto_green.svg",
        "title": "Add a Photo or Video",
        "display": "dataSource.canUploadMedia",
        "actionType": "navigation",
        "parameters": "{'canUploadImage': dataSource.canUploadImage, 'canUploadVideoLink': dataSource.canUploadVideoLink, targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', '') , targetImage: _.get(dataSource, 'additionalParams.targetImage', null)}",
        "class": "main-sheet",
        "navigationUrl": "'addMedia/'+ dataSource.galleryId"
      }
    ],
    "mainProfileActions": [
      {
        "id": "main-profile-action-share-id",
        "icon": "assets/icon/dynamic-ui/Share_Grey.svg",
        "title": "Share",
        "display": "dataSource.canShare",
        "actionType": "share",
        "parameters": "{'sharingMessage': 'Lebanese people from your hometown and the diaspora - Entrepreneurs, business people, diplomats and influential profiles - are joining DiasporaID, the fastest growing international Lebanese network. Don’t miss out, register now!',\n'sharingPhotoUrl': _.get(dataSource, 'user.photoCover.imageThumbnailUrl', null),\n'sharingTitle': 'Join ' + _.get(dataSource, 'user.firstName', '') + ' ' + _.get(dataSource, 'user.lastName', '') + ' and Influential Lebanese on DiasporaID',\n'sharingDescription': 'The Global Lebanese Network',\n'targetId': _.get(dataSource, 'user.id', null),\n'targetMethod': 'DiasporaProfile'\n}"
      },
      {
        "id": "main-profile-action-report-problem-id",
        "icon": "assets/icon/dynamic-ui/Report_Problem.svg",
        "title": "Report a Problem",
        "display": true,
        "parameters": "{'problemPage': 'Profile: ' + _.get(dataSource, 'user.firstName', '') + ' ' + _.get(dataSource, 'user.lastName', '') }",
        "actionType": "navigation",
        "navigationUrl": "reportPage"
      }
    ],
    "manageOrganizationRoleActions": [
      {
        "id": "manage-organization-role-action-feature-role-id",
        "icon": "assets/icon/dynamic-ui/Primary_Role_Grey.svg",
        "title": "Set Role as Featured",
        "display": "item.canFeatureRole && !item.featured && item.type === 'Organization'",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organization {\n    featureRole(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.networkRoles.find(selectedItem => selectedItem.id === item.id); dataSource.networkRoles.forEach(item => item.featured = false); selectedItem.featured = true; $actionHelper.showToast('This role will now appear as your default role'); $actionHelper.notifiySubscribers(['edit-profile'])\n"
      },
      {
        "id": "manage-organization-role-action-unfeature-role-id",
        "icon": "assets/icon/dynamic-ui/Primary_Role_Grey.svg",
        "title": "Unfeature Role",
        "display": "item.canUnFeatureRole && item.featured && item.type === 'Organization'",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organization {\n    unfeatureRole(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.networkRoles.find(selectedItem => selectedItem.id === item.id); selectedItem.featured = false; $actionHelper.showToast('Role is no longer your default role'); $actionHelper.notifiySubscribers(['edit-profile'])\n"
      },
      {
        "id": "manage-organization-committee-role-action-feature-role-id",
        "icon": "assets/icon/dynamic-ui/Primary_Role_Grey.svg",
        "title": "Set Role as Featured",
        "display": "item.canFeatureRole && !item.featured && item.type === 'OrganizationCommittee'",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organizationCommittee {\n    featureRole(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.networkRoles.find(selectedItem => selectedItem.id === item.id); dataSource.networkRoles.forEach(item => item.featured = false); selectedItem.featured = true; $actionHelper.showToast('This role will now appear as your default role'); $actionHelper.notifiySubscribers(['edit-profile'])\n"
      },
      {
        "id": "manage-organization-committee-role-action-unfeature-role-id",
        "icon": "assets/icon/dynamic-ui/Primary_Role_Grey.svg",
        "title": "Unfeature Role",
        "display": "item.canUnFeatureRole && item.featured && item.type === 'OrganizationCommittee'",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organizationCommittee {\n    unfeatureRole(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.networkRoles.find(selectedItem => selectedItem.id === item.id); selectedItem.featured = false; $actionHelper.showToast('Role is no longer your default role'); $actionHelper.notifiySubscribers(['edit-profile'])\n"
      },
      {
        "id": "manage-organization-committee-role-action-edit-id",
        "icon": "assets/icon/dynamic-ui/Edit.svg",
        "title": "Edit Role",
        "display": "item.canUpdateRole && item.type === 'OrganizationCommittee'",
        "parameters": "{ 'item': item,\n'organizationId': item.parentDomainId,\n'userId': dataSource.additionalParams.userId,\n'committee': {'id': item.id,'name': item.title },\n'positionType': item.role.role,\n'positionName': item.role.positionName }",
        "actionType": "navigation",
        "navigationUrl": "'profile/editOrganizationRole/' + item.parentDomainId"
      },
      {
        "id": "manage-organization-role-action-edit-id",
        "icon": "assets/icon/dynamic-ui/Edit.svg",
        "title": "Edit Role",
        "display": "item.canUpdateRole && item.type === 'Organization'",
        "parameters": "{ 'item': item,\n'organizationId': item.parentDomainId,\n'userId': dataSource.additionalParams.userId,\n'committee': {},\n'positionType': item.role.role,\n'positionName': item.role.positionName }",
        "actionType": "navigation",
        "navigationUrl": "'profile/editOrganizationRole/' + item.parentDomainId"
      },
      {
        "id": "manage-organization-role-action-delete-id",
        "icon": "assets/icon/dynamic-ui/Delete.svg",
        "title": "Remove Role",
        "display": "item.type === 'Organization' && item.canRemoveRole",
        "actionType": "deleteItem",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Remove role",
          "confirmationMessage": "Do you want to permanently remove your role in this organization?",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Remove"
        },
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  organization {\n    removeRole(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.networkRoles.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.networkRoles.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.networkRoles.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Organization role removed successfully'); $actionHelper.notifiySubscribers(['edit-profile', 'edit-profile-details'])\n"
      },
      {
        "id": "manage-organization-committee-role-action-delete-id",
        "icon": "assets/icon/dynamic-ui/Delete.svg",
        "title": "Remove Role",
        "display": "item.type === 'OrganizationCommittee' && item.canRemoveRole",
        "actionType": "deleteItem",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "confirmationInfo": {
          "confirmationTitle": "Remove role",
          "confirmationMessage": "Do you want to permanently remove your role in this committee?",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Remove"
        },
        "query": "mutation {  organizationCommittee {\n    removeRole(id: $templateContext->item.id, organizationId: $templateContext->item.parentDomainId )\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.networkRoles.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.networkRoles.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.networkRoles.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Committee role removed successfully'); $actionHelper.notifiySubscribers(['edit-profile', 'edit-profile-details'])\n"
      }
    ],
    "manageDiplomaticRoleActions": [
      {
        "id": "manage-diplomatic-mission-role-action-feature-role-id",
        "icon": "assets/icon/dynamic-ui/Primary_Role_Grey.svg",
        "title": "Set Role as Featured",
        "display": "item.canFeatureRole && !item.featured && item.type === 'DiplomaticMission'",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  diplomaticMission {\n    featureRole(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.networkRoles.find(selectedItem => selectedItem.id === item.id); dataSource.networkRoles.forEach(item => item.featured = false); selectedItem.featured = true; $actionHelper.showToast('This role will now appear as your default role'); $actionHelper.notifiySubscribers(['edit-profile'])\n"
      },
      {
        "id": "manage-diplomatic-mission-role-action-unfeature-role-id",
        "icon": "assets/icon/dynamic-ui/Primary_Role_Grey.svg",
        "title": "Unfeature Role",
        "display": "item.canUnFeatureRole && item.featured && item.type === 'DiplomaticMission'",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  diplomaticMission {\n    unfeatureRole(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.networkRoles.find(selectedItem => selectedItem.id === item.id); selectedItem.featured = false; $actionHelper.showToast('Role no longer displayed as featured'); $actionHelper.notifiySubscribers(['edit-profile'])\n"
      },
      {
        "id": "manage-diplomatic-mission-office-role-action-feature-role-id",
        "icon": "assets/icon/dynamic-ui/Primary_Role_Grey.svg",
        "title": "Set Role as Featured",
        "display": "item.canFeatureRole && !item.featured && item.type === 'DiplomaticMissionCommittee'",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  diplomaticMissionCommittee {\n    featureRole(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.networkRoles.find(selectedItem => selectedItem.id === item.id); dataSource.networkRoles.forEach(item => item.featured = false); selectedItem.featured = true; $actionHelper.showToast('This role will now appear as your default role'); $actionHelper.notifiySubscribers(['edit-profile'])\n"
      },
      {
        "id": "manage-diplomatic-mission-office-role-action-unfeature-role-id",
        "icon": "assets/icon/dynamic-ui/Primary_Role_Grey.svg",
        "title": "Unfeature Role",
        "display": "item.canUnFeatureRole && item.featured && item.type === 'DiplomaticMissionCommittee'",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  diplomaticMissionCommittee {\n    unfeatureRole(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.networkRoles.find(selectedItem => selectedItem.id === item.id); selectedItem.featured = false; $actionHelper.showToast('Role no longer displayed as featured'); $actionHelper.notifiySubscribers(['edit-profile'])\n"
      },
      {
        "id": "manage-diplomatic-mission-office-role-action-edit-id",
        "icon": "assets/icon/dynamic-ui/Edit.svg",
        "title": "Edit Role",
        "display": "item.canUpdateRole && item.type === 'DiplomaticMissionCommittee'",
        "parameters": "{ 'item': item,\n'diplomaticMissionId': item.parentDomainId,\n'userId': dataSource.additionalParams.userId,\n'office': {'id': item.id,'name': item.title },\n'positionType': item.role.role,\n'positionName': item.role.positionName }",
        "actionType": "navigation",
        "navigationUrl": "'profile/editDiplomaticRole/' + item.parentDomainId"
      },
      {
        "id": "manage-diplomatic-mission-role-action-edit-id",
        "icon": "assets/icon/dynamic-ui/Edit.svg",
        "title": "Edit Role",
        "display": "item.canUpdateRole && item.type === 'DiplomaticMission'",
        "parameters": "{ 'item': item,\n'diplomaticMissionId': item.parentDomainId,\n'userId': dataSource.additionalParams.userId,\n'office': {},\n'positionType': item.role.role,\n'positionName': item.role.positionName }",
        "actionType": "navigation",
        "navigationUrl": "'profile/editDiplomaticRole/' + item.parentDomainId"
      },
      {
        "id": "manage-diplomatic-mission-role-action-delete-id",
        "icon": "assets/icon/dynamic-ui/Delete.svg",
        "title": "Remove Role",
        "display": "item.type === 'DiplomaticMission' && item.canRemoveRole",
        "actionType": "deleteItem",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Remove Role",
          "confirmationMessage": "Do you want to permanently remove your role in this diplomatic mission?",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Remove"
        },
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  diplomaticMission {\n    removeRole(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.networkRoles.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.networkRoles.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.networkRoles.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Role in diplomatic mission removed successfully'); $actionHelper.notifiySubscribers(['edit-profile', 'edit-profile-details'])\n"
      },
      {
        "id": "manage-diplomatic-mission-office-role-action-delete-id",
        "icon": "assets/icon/dynamic-ui/Delete.svg",
        "title": "Remove Role",
        "display": "item.type === 'DiplomaticMissionCommittee' && item.canRemoveRole",
        "actionType": "deleteItem",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "confirmationInfo": {
          "confirmationTitle": "Remove role",
          "confirmationMessage": "Do you want to permanently remove your role in this diplomatic office?",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Remove"
        },
        "query": "mutation {  diplomaticMissionCommittee {\n    removeRole(id: $templateContext->item.id, diplomaticMissionId: $templateContext->item.parentDomainId )\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.networkRoles.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.networkRoles.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.networkRoles.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Diplomatic office role removed successfully'); $actionHelper.notifiySubscribers(['edit-profile', 'edit-profile-details'])\n"
      }
    ],
    "manageBusinessesRoleActions": [
      {
        "id": "manage-business-role-action-feature-role-id",
        "icon": "assets/icon/dynamic-ui/Primary_Role_Grey.svg",
        "title": "Set Role as Featured",
        "display": "item.canFeatureRole && !item.featured",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  company {\n    featureRole(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.businessRoles.find(selectedItem => selectedItem.id === item.id); dataSource.businessRoles.forEach(item => item.featured = false); selectedItem.featured = true; $actionHelper.showToast('This role will now appear as your default role'); $actionHelper.notifiySubscribers(['edit-profile'])\n"
      },
      {
        "id": "manage-business-role-action-unfeature-role-id",
        "icon": "assets/icon/dynamic-ui/Primary_Role_Grey.svg",
        "title": "Unfeature Role",
        "display": "item.canUnFeatureRole && item.featured",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  company {\n    unfeatureRole(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.businessRoles.find(selectedItem => selectedItem.id === item.id); selectedItem.featured = false; $actionHelper.showToast('Role no longer displayed as featured'); $actionHelper.notifiySubscribers(['edit-profile'])\n"
      },
      {
        "id": "manage-business-role-action-edit-id",
        "icon": "assets/icon/dynamic-ui/Edit.svg",
        "title": "Edit Role",
        "display": "item.canUpdateRole",
        "parameters": "{ 'item': item,\n'companyId': item.id,\n'userId': dataSource.additionalParams.userId,\n'positionType': item.role.role,\n'positionName': item.role.positionName\n}",
        "actionType": "navigation",
        "navigationUrl": "'profile/editCompanyRole/' + item.id"
      },
      {
        "id": "manage-business-role-action-delete-id",
        "icon": "assets/icon/dynamic-ui/Delete.svg",
        "title": "Remove Role",
        "display": "item.canRemoveRole",
        "actionType": "deleteItem",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Remove Role",
          "confirmationMessage": "Do you want to permanently remove your role in this company?",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Remove"
        },
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  company {\n    removeRole(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.businessRoles.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.businessRoles.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.businessRoles.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Company role removed successfully'); $actionHelper.notifiySubscribers(['edit-profile', 'edit-profile-details'])\n"
      }
    ],
    "entityAdminActions": [
      {
        "icon": "assets/icon/dynamic-ui/Create_Post.svg",
        "title": "Post",
        "actionType": "navigation"
      },
      {
        "icon": "assets/icon/dynamic-ui/Invite.svg",
        "title": "Invite",
        "actionType": "shareFromCarousel"
      },
      {
        "icon": "assets/icon/dynamic-ui/Manage.svg",
        "title": "Manage",
        "actionType": "navigationToManageDomain"
      }
    ],
    "entityUserActions": [
      {
        "icon": "assets/icon/dynamic-ui/Create_Post.svg",
        "title": "Post",
        "actionType": "navigation"
      },
      {
        "icon": "assets/icon/dynamic-ui/Invite.svg",
        "title": "Invite",
        "actionType": "shareFromCarousel"
      },
      {
        "icon": "assets/icon/dynamic-ui/messages-white.svg",
        "title": "Message",
        "actionType": "navigationToConversation"
      }
    ],
    "townNewsAndEventActions": [
      {
        "id": "town-news-and-event-action-add-post-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_createPost_green.svg",
        "title": "Create Post",
        "display": "(dataSource.canManage || dataSource.myHomeTown) && dataSource.canAddPost",
        "actionType": "navigation",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', '') , targetImage: _.get(dataSource, 'additionalParams.targetImage', null) }",
        "class": "main-sheet",
        "navigationUrl": "'createPost/municipality/'+ _.get(dataSource, 'additionalParams.targetId', null) "
      },
      {
        "id": "town-news-and-event-action-add-event-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_Events_green.svg",
        "title": "Create Event",
        "display": "(dataSource.canManage || dataSource.myHomeTown) && dataSource.canAddEvent",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', '') , targetImage: _.get(dataSource, 'additionalParams.targetImage', null) }",
        "actionType": "navigation",
        "class": "main-sheet",
        "navigationUrl": "'createEvent/municipality/'+ _.get(dataSource, 'additionalParams.targetId', null) "
      }
    ],
    "townRoleActions": [
      {
        "id": "town-role-action-add-post-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_createPost_green.svg",
        "title": "Create Post",
        "display": "(dataSource.canManage || dataSource.myHomeTown) && dataSource.canAddPost",
        "actionType": "navigation",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null) , targetName: _.get(dataSource, 'additionalParams.targetName', '') , targetImage: _.get(dataSource, 'additionalParams.targetImage', null) }",
        "class": "main-sheet",
        "navigationUrl": "'createPost/municipality/'+ _.get(dataSource, 'additionalParams.targetId', null)"
      },
      {
        "id": "town-role-action-add-event-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_Events_green.svg",
        "title": "Create Event",
        "display": "(dataSource.canManage || dataSource.myHomeTown) && dataSource.canAddEvent",
        "parameters": "{targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', '') , targetImage: _.get(dataSource, 'additionalParams.targetImage', null) }",
        "actionType": "navigation",
        "class": "main-sheet",
        "navigationUrl": "'createEvent/municipality/'+ _.get(dataSource, 'additionalParams.targetId', null)"
      },
      {
        "id": "town-role-action-add-media-id",
        "icon": "assets/icon/dynamic-ui/mainSheet_addPhoto_green.svg",
        "title": "Add Photo or Video",
        "display": "(dataSource.canManage || dataSource.myHomeTown) || dataSource.canUploadMedia",
        "actionType": "navigation",
        "parameters": "{'canUploadImage': dataSource.canUploadImage, 'canUploadVideoLink': dataSource.canUploadVideoLink, targetId: _.get(dataSource, 'additionalParams.targetId', null), targetName: _.get(dataSource, 'additionalParams.targetName', '') , targetImage: _.get(dataSource, 'additionalParams.targetImage', null) }",
        "class": "main-sheet",
        "navigationUrl": "'addMedia/'+ _.get(dataSource, 'galleryId', null)"
      }
    ],
    "mainTownActions": [
      {
        "id": "main-town-action-share-id",
        "icon": "assets/icon/dynamic-ui/Share_Grey.svg",
        "title": "Share",
        "display": "dataSource.canShare",
        "actionType": "share",
        "parameters": "{'sharingMessage': _.get(dataSource, 'additionalParams.loggedinFirstName', '') + ' ' + _.get(dataSource, 'additionalParams.loggedinLastName', '') + ' is inviting you to visit the global community of ' + _.get(dataSource, 'municipality.title', '')  + ' on DiasporaID. Contact the municipality or mukhtars. Meet influential diaspora members, Don’t miss out!',\n'sharingPhotoUrl': _.get(dataSource, 'municipality.photoCover.imageThumbnailUrl', null),\n'sharingTitle':  _.get(dataSource, 'additionalParams.loggedinFirstName', '') + ' ' + _.get(dataSource, 'additionalParams.loggedinLastName', '') + ' Is Inviting You to ' + _.get(dataSource, 'municipality.title', '')  + ' on DiasporaID',\n'sharingDescription': 'The Global Lebanese Network',\n'targetId': _.get(dataSource, 'municipality.id', null),\n'targetMethod': 'DiasporaMunicipality'\n}"
      },
      {
        "id": "main-town-action-report-problem-id",
        "icon": "assets/icon/dynamic-ui/Report_Problem.svg",
        "title": "Report a Problem",
        "display": "!dataSource.canManage",
        "parameters": "{'problemPage': 'Town: ' + _.get(dataSource, 'municipality.title', '')  }",
        "actionType": "navigation",
        "navigationUrl": "reportPage"
      }
    ],
    "manageTownAdministratorsActions": [
      {
        "id": "manage-town-administrator-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Profile",
        "domainId": "item.id"
      },
      {
        "id": "manage-town-administrator-action-remove-admin-id",
        "icon": "assets/icon/dynamic-ui/Revoke_Member.svg",
        "title": "Remove Administrator",
        "display": "dataSource.actions.canRemoveAdmin",
        "actionType": "deleteItem",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Remove Administrator?",
          "confirmationMessage": "This member will no longer be an admin on this page.",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Remove"
        },
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  municipality {\n    removeAdmin(id: $templateContext->additionalParameters.municipalityId, userId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.admins.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.admins.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.admins.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Page admin removed successfully'); $actionHelper.notifiySubscribers(['manage-municipality-administrators']);\n"
      }
    ],
    "manageTownAssignAdministratorActions": [
      {
        "id": "manage-town-assign-administrator-action-view-profile-id",
        "icon": "assets/icon/dynamic-ui/View_Profile.svg",
        "title": "View Profile",
        "display": true,
        "actionType": "domainNavigation",
        "domainType": "Profile",
        "domainId": "item.id"
      },
      {
        "id": "manage-town-assign-administrator-action-assign-admin-id",
        "icon": "assets/icon/dynamic-ui/Set_As_Administrator.svg",
        "title": "Assign as Administrator",
        "display": "dataSource.actions.canAddAdmin",
        "actionType": "callApi",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "query": "mutation {  municipality {\n    addAdmin(id: $templateContext->additionalParameters.municipalityId, userId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "$actionHelper.showToast('User successfully assigned as admin'); $actionHelper.notifiySubscribers(['add-municipality-administrators']);\n"
      }
    ],
    "townAmbassadorNotes": [
      "Attend exclusive official events",
      "Develop an extensive community network",
      "Connect with Lebanese expats and get them to reconnect  with their hometown",
      "Engage and guide new DiasporaID members",
      "Coordinate with the town and the civic community",
      "Propose and supervise development projects (upcoming)"
    ],
    "ambassadorBoxActions": [
      {
        "firstIcon": "assets/icon/dynamic-ui/Town_Ambassador_EmptyState.svg",
        "title": "Apply Now",
        "subTitle": "Tap here to get started"
      }
    ],
    "searchList": {
      "everything": [
        {
          "title": "All People",
          "icon": "assets/icon/dynamic-ui/All People.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForPeople",
          "parameters": "{key: 'allPeople', title: 'all people'}"
        },
        {
          "title": "Companies",
          "icon": "assets/icon/dynamic-ui/Companies.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForBusinesses",
          "parameters": "{key: 'business', title: 'companies'}"
        },
        {
          "title": "Startups",
          "icon": "assets/icon/dynamic-ui/Startups.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForBusinesses",
          "parameters": "{key: 'startups', title: 'startups'}"
        },
        {
          "title": "Social Enterprises",
          "icon": "assets/icon/dynamic-ui/SocialEnterprises.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForBusinesses",
          "parameters": "{key: 'socialenterprise', title: 'social enterprises'}"
        },
        {
          "title": "Hometowns",
          "icon": "assets/icon/dynamic-ui/Product.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForNetworks",
          "parameters": "{key: 'municipalities', title: 'hometowns'}"
        },
        {
          "title": "Organizations",
          "icon": "assets/icon/dynamic-ui/Organizations.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForNetworks",
          "parameters": "{key: 'organizations', title: 'organizations'}"
        },
        {
          "title": "Diplomatic Missions",
          "icon": "assets/icon/dynamic-ui/DiplomaticMissions.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForNetworks",
          "parameters": "{key: 'diplomaticMissions', title: 'diplomatic missions'}"
        },
        {
          "title": "News",
          "icon": "assets/icon/dynamic-ui/News.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForNetworks",
          "parameters": "{key: 'posts', title: 'news'}"
        },
        {
          "title": "Events",
          "icon": "assets/icon/dynamic-ui/Events.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForNetworks",
          "parameters": "{key: 'events', title: 'events'}"
        },
        {
          "title": "Products",
          "icon": "assets/icon/dynamic-ui/Products.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForBusinesses",
          "parameters": "{key: 'products', title: 'products'}"
        },
        {
          "title": "Services",
          "icon": "assets/icon/dynamic-ui/Products.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForBusinesses",
          "parameters": "{key: 'services', title: 'services'}"
        },
        {
          "title": "Franchises",
          "icon": "assets/icon/dynamic-ui/Franchises.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForBusinesses",
          "parameters": "{key: 'franchises', title: 'franchises'}"
        }
      ],
      "peoples": [
        {
          "title": "All People",
          "icon": "assets/icon/dynamic-ui/All People.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForPeople",
          "parameters": "{key: 'allPeople', title: 'all people'}"
        },
        {
          "title": "Town Officials",
          "icon": "assets/icon/dynamic-ui/Town Officials.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForPeople",
          "parameters": "{key: 'townOfficials', title: 'town officials'}"
        },
        {
          "title": "Diplomats & Diplomatic Staff",
          "icon": "assets/icon/dynamic-ui/Diplomatic and Diplomatic Staff.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForPeople",
          "parameters": "{key: 'keyStaff', title: 'diplomats & diplomatic staff'}"
        },
        {
          "title": "Company Leadership",
          "icon": "assets/icon/dynamic-ui/Company Leadership.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForPeople",
          "parameters": "{key: 'companyLeadership', title: 'company leadership'}"
        },
        {
          "title": "Employees",
          "icon": "assets/icon/dynamic-ui/Employees.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForPeople",
          "parameters": "{key: 'employees', title: 'employees'}"
        },
        {
          "title": "Professionals",
          "icon": "assets/icon/dynamic-ui/Professionals.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForPeople",
          "parameters": "{key: 'professions', title: 'professionals'}"
        },
        {
          "title": "Organization Leadership",
          "icon": "assets/icon/dynamic-ui/Organization Leadership.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForPeople",
          "parameters": "{key: 'organiztionLeadership', title: 'organization leadership'}"
        },
        {
          "title": "Town Ambassadors",
          "icon": "assets/icon/dynamic-ui/Mentors.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForPeople",
          "parameters": "{key: 'townAmbassadors', title: 'town ambassadors'}"
        },
        {
          "title": "Mentors",
          "icon": "assets/icon/dynamic-ui/Advisors.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForPeople",
          "parameters": "{key: 'mentors', title: 'mentors'}"
        },
        {
          "title": "Advisors",
          "icon": "assets/icon/dynamic-ui/Advisors.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForPeople",
          "parameters": "{key: 'advisors', title: 'advisors'}"
        }
      ],
      "networks": [
        {
          "title": "Organizations",
          "icon": "assets/icon/dynamic-ui/Organizations.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForNetworks",
          "parameters": "{key: 'organizations', title: 'organizations'}"
        },
        {
          "title": "Hometowns",
          "icon": "assets/icon/dynamic-ui/Hometowns.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForNetworks",
          "parameters": "{key: 'municipalities', title: 'hometowns'}"
        },
        {
          "title": "Diplomatic Missions",
          "icon": "assets/icon/dynamic-ui/DiplomaticMissions.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForNetworks",
          "parameters": "{key: 'diplomaticMissions', title: 'diplomatic missions'}"
        },
        {
          "title": "News",
          "icon": "assets/icon/dynamic-ui/News.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForNetworks",
          "parameters": "{key: 'posts', title: 'news'}"
        },
        {
          "title": "Events",
          "icon": "assets/icon/dynamic-ui/Events.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForNetworks",
          "parameters": "{key: 'events', title: 'events'}"
        }
      ],
      "businesses": [
        {
          "title": "Companies",
          "icon": "assets/icon/dynamic-ui/Companies.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForBusinesses",
          "parameters": "{key: 'business', title: 'companies'}"
        },
        {
          "title": "Startups",
          "icon": "assets/icon/dynamic-ui/Startups.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForBusinesses",
          "parameters": "{key: 'startups', title: 'startups'}"
        },
        {
          "title": "Social Enterprises",
          "icon": "assets/icon/dynamic-ui/SocialEnterprises.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForBusinesses",
          "parameters": "{key: 'socialenterprise', title: 'social enterprises'}"
        },
        {
          "title": "Products",
          "icon": "assets/icon/dynamic-ui/Products.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForBusinesses",
          "parameters": "{key: 'products', title: 'products'}"
        },
        {
          "title": "Services",
          "icon": "assets/icon/dynamic-ui/Products.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForBusinesses",
          "parameters": "{key: 'services', title: 'services'}"
        },
        {
          "title": "Franchises",
          "icon": "assets/icon/dynamic-ui/Franchises.svg",
          "actionType": "navigation",
          "navigationUrl": "searchForBusinesses",
          "parameters": "{key: 'franchises', title: 'franchises'}"
        }
      ]
    },
    "activityActions": [
      {
        "icon": "assets/icon/dynamic-ui/Edit.svg",
        "title": "Edit Post",
        "id": "card-page-edit-action",
        "display": "item.canEditPost",
        "actionType": "navigation",
        "parameters": "",
        "navigationUrl": "item.cardType === 'news' ? ('editPost/'+ _.camelCase(item.actorType) + '/' + item.id) : ('editEvent/'+ _.camelCase(item.actorType) + '/' + item.id)"
      },
      {
        "icon": "assets/icon/dynamic-ui/Delete.svg",
        "title": "Delete Post",
        "id": "card-page-delete-action",
        "display": "item.canDeletePost && item.cardType === 'news'",
        "actionType": "deleteItem",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Delete Post?",
          "confirmationMessage": "Are you sure you want to delete this post? This action cannot be undone",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Delete"
        },
        "query": "mutation {  post {\n    delete(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "$actionHelper.showToast('Post deleted successfully'); $actionHelper.notifiySubscribers(['delete-post'], true)\n"
      },
      {
        "icon": "assets/icon/dynamic-ui/Delete.svg",
        "title": "Delete Post",
        "display": "item.canDeletePost && item.cardType === 'event'",
        "actionType": "deleteItem",
        "id": "card-page-delete-action",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Delete Post?",
          "confirmationMessage": "Are you sure you want to delete this post? This action cannot be undone",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Delete"
        },
        "query": "mutation {  event {\n    delete(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "$actionHelper.showToast('Post deleted successfully'); $actionHelper.notifiySubscribers(['delete-post'], true)\n"
      },
      {
        "icon": "assets/icon/dynamic-ui/Feature_Post.svg",
        "title": "Feature Post",
        "id": "card-page-featured-action",
        "display": "item.canFeaturePost && item.cardType === 'news'",
        "actionType": "callApi",
        "item": "item",
        "query": "mutation {  post {\n    makeAsFeatured(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "$actionHelper.showToast('Post featured successfully');; $actionHelper.notifiySubscribers(['feature-post']); templateContext.item.canFeaturePost = false;\n"
      },
      {
        "icon": "assets/icon/dynamic-ui/Feature_Post.svg",
        "title": "Feature Post",
        "display": "item.canFeaturePost && item.cardType === 'event'",
        "actionType": "callApi",
        "item": "item",
        "query": "mutation {  event {\n    makeAsFeatured(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "$actionHelper.showToast('Post featured successfully');; $actionHelper.notifiySubscribers(['feature-post']); templateContext.item.canFeaturePost = false;\n"
      },
      {
        "icon": "assets/icon/dynamic-ui/Feature_Post.svg",
        "title": "Unfeature Post",
        "display": "!item.canFeaturePost && item.cardType === 'news'",
        "actionType": "callApi",
        "item": "item",
        "query": "mutation {  post {\n    makeAsUnFeatured(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "$actionHelper.showToast('Post unfeatured successfully'); $actionHelper.notifiySubscribers(['feature-post']); templateContext.item.canFeaturePost = true;\n"
      },
      {
        "icon": "assets/icon/dynamic-ui/Feature_Post.svg",
        "title": "Unfeature Post",
        "display": "!item.canFeaturePost && item.cardType === 'event'",
        "actionType": "callApi",
        "item": "item",
        "query": "mutation {  event {\n    makeAsUnFeatured(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "$actionHelper.showToast('Post unfeatured successfully'); $actionHelper.notifiySubscribers(['feature-post']); templateContext.item.canFeaturePost = true;\n"
      }
    ],
    "offerActions": [
      {
        "icon": "assets/icon/dynamic-ui/Edit.svg",
        "title": "Edit Offer",
        "display": "item.canEditPost",
        "id": "card-page-edit-action",
        "actionType": "navigation",
        "parameters": "",
        "navigationUrl": "item.offerType === 'PRODUCT' ? ('editProduct/'+ item.id) : (item.offerType === 'SERVICE' ? ('editService/' + item.id) :  ('editFranchise/' + item.id))"
      },
      {
        "icon": "assets/icon/dynamic-ui/Delete.svg",
        "title": "Delete Offer",
        "display": "item.canDeletePost",
        "actionType": "deleteItem",
        "id": "card-page-delete-action",
        "item": "item",
        "confirmationInfo": {
          "confirmationTitle": "Delete Offer?",
          "confirmationMessage": "Are you sure you want to delete this offer? This action cannot be undone",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Delete"
        },
        "query": "mutation {  offer {\n    delete(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "$actionHelper.showToast('Offer deleted successfully'); $actionHelper.notifiySubscribers(['delete-post'], true)\n"
      },
      {
        "icon": "assets/icon/dynamic-ui/Feature_Post.svg",
        "title": "Feature Offer",
        "display": "item.canFeaturePost",
        "actionType": "callApi",
        "item": "item",
        "query": "mutation {  offer {\n    makeAsFeatured(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "$actionHelper.showToast('Offer featured successfully'); $actionHelper.notifiySubscribers(['feature-post']); templateContext.item.canFeaturePost = false;\n"
      },
      {
        "icon": "assets/icon/dynamic-ui/Feature_Post.svg",
        "title": "Unfeature Offer",
        "display": "!item.canFeaturePost",
        "actionType": "callApi",
        "item": "item",
        "query": "mutation {  offer {\n    makeAsUnFeatured(id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "$actionHelper.showToast('Offer featured successfully'); $actionHelper.notifiySubscribers(['feature-post']); templateContext.item.canFeaturePost = true;\n"
      }
    ],
    "commentActions": [
      {
        "icon": "assets/icon/dynamic-ui/Edit.svg",
        "title": "Edit Comment",
        "id": "card-page-edit-comment-action",
        "display": "item.checkIfCanUpdate",
        "actionType": "navigation",
        "parameters": "{ 'previousPageDataSource': item}",
        "navigationUrl": "'editComment/'+ item.id"
      },
      {
        "icon": "assets/icon/dynamic-ui/Delete.svg",
        "title": "Delete Comment",
        "display": "item.checkIfHadAdminActivityRole",
        "actionType": "deleteItem",
        "id": "card-page-delete-comment-action",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "confirmationInfo": {
          "confirmationTitle": "Delete Comment?",
          "confirmationMessage": "Are you sure you want to delete this comment? This action cannot be undone",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Delete"
        },
        "query": "mutation {  $dynamicUiExpression((|dataSource.card.actionType|)) {\n    removeComment(id:$templateContext->additionalParameters.activityId , commentId: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.comments.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.comments.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.comments.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Comment removed successfully');\n"
      },
      {
        "icon": "assets/icon/dynamic-ui/Delete.svg",
        "title": "Delete Comment",
        "display": "item.checkIfCanDelete && !item.checkIfHadAdminActivityRole",
        "actionType": "deleteItem",
        "id": "card-page-delete-comment-action",
        "item": "item",
        "additionalParameters": "dataSource.additionalParams",
        "confirmationInfo": {
          "confirmationTitle": "Delete Comment?",
          "confirmationMessage": "Are you sure you want to delete this comment? This action cannot be undone",
          "confrimationCancelAction": "Cancel",
          "confrimationAgreeAction": "Delete"
        },
        "query": "mutation {  comment {\n    deleteMyComment(commentedOnId:$templateContext->additionalParameters.activityId , id: $templateContext->item.id)\n  }\n}\n",
        "postAction": "let selectedItem = dataSource.comments.find(selectedItem => selectedItem.id === item.id); let selectedItemIndex = dataSource.comments.indexOf(selectedItem);  if(selectedItemIndex > -1) {  dataSource.comments.splice(selectedItemIndex, 1);\n} $actionHelper.showToast('Comment removed successfully');\n"
      }
    ],
    "providerApple": "apple.com",
    "organizationDiasporaIdHeadline": "a6845d20-854e-41c6-84a6-bfc7730b7c29",
    "checkUnreadNotificationCounts": true,
    "checkUnreadMessageCounts": false,
    "froalaEditorAndroidLicenseKey": "pe1G2wG2G1B3C1A6E6nB-9H-9wJ-7B-22B-16A2ytrsH-8G-7tC5aliyD2I2D1A2C7D2D1C5D1G2==",
    "froalaEditorIosLicenseKey": "pe1G2wG2G1B3C1A6E6nB-9H-9wJ-7B-22B-16A2ytrsH-8G-7tC5aliyD2I2D1A2C7D2D1C5D1G2==",
    "validationsErrorMessages": {
      "required_errorMessage": "This field is required",
      "minLength_errorMessage": "Please provide at least {​​​​​​​minLength}​​​​​​​ characters",
      "maxLength_errorMessage": "You have entered more than the maximum allowed​ characters of {maxLength}",
      "pattern_errorMessage": "This does not look like a valid value for this field",
      "imageSize_errorMessage": "Your upload exceeds the maximum allowed file size"
    },
    "permissions": {
      "profile": [
        {
          "icon": "assets/icon/dynamic-ui/Basic_Information.svg",
          "title": "Basic Information",
          "subTitle": "Photo, sector, country and more",
          "pageUrl": "profile/edit"
        },
        {
          "icon": "assets/icon/dynamic-ui/following-Pages.svg",
          "title": "Pages I Follow",
          "subTitle": "Manage pages you follow",
          "pageUrl": "profile/manageFollowingPage"
        },
        {
          "icon": "assets/icon/dynamic-ui/Accounts_I_Follow.svg",
          "title": "Following and Followers",
          "subTitle": "Your followers and users you follow",
          "pageUrl": "profile/viewFollowers"
        },
        {
          "icon": "assets/icon/dynamic-ui/Network_Roles.svg",
          "title": "Network Roles",
          "subTitle": "Manage your organization & community roles",
          "pageUrl": "profile/manageNetworkRole"
        },
        {
          "icon": "assets/icon/dynamic-ui/Business_Roles.svg",
          "title": "Business Roles",
          "subTitle": "Manage your business roles",
          "pageUrl": "profile/manageBusinessRole"
        }
      ],
      "company": [
        {
          "icon": "assets/icon/dynamic-ui/Basic_Information.svg",
          "title": "Company Information",
          "subTitle": "Logo, info, sector, keywords, brands…",
          "pageUrl": "company/edit"
        },
        {
          "icon": "assets/icon/dynamic-ui/Team_Members.svg",
          "title": "Team Members",
          "subTitle": "Manage roles, admins & join requests",
          "pageUrl": "company/manageCompanyTeamMembers"
        },
        {
          "icon": "assets/icon/dynamic-ui/Page_Administrator.svg",
          "title": "Page Administrators",
          "subTitle": "Assign or remove page administrators",
          "pageUrl": "company/manageCompanyAdministrator"
        },
        {
          "icon": "assets/icon/dynamic-ui/Marketplace_Listings.svg",
          "title": "Marketplace Listings",
          "subTitle": "Your products, services & franchises",
          "pageUrl": "company/manageCompanyMarketPlace"
        },
        {
          "icon": "assets/icon/dynamic-ui/Member_Companies.svg",
          "title": "Member Of",
          "subTitle": "Organizations you’re a member of",
          "pageUrl": "company/manageCompanyAffiliations"
        },
        {
          "icon": "assets/icon/dynamic-ui/Chapters.svg",
          "title": "Company structure & branches",
          "subTitle": "Company structure & branches",
          "pageUrl": "company/manageCompanyBranches"
        }
      ],
      "organization": [
        {
          "icon": "assets/icon/dynamic-ui/Basic_Information.svg",
          "title": "Org Information",
          "subTitle": "Logo, description, organization type…",
          "pageUrl": "organization/edit"
        },
        {
          "icon": "assets/icon/dynamic-ui/People.svg",
          "title": "Organization Members",
          "subTitle": "Manage members & join requests",
          "pageUrl": "organization/manageOrganizationMembers"
        },
        {
          "icon": "assets/icon/dynamic-ui/Page_Administrator.svg",
          "title": "Page Administrators",
          "subTitle": "Assign or remove page administrators",
          "pageUrl": "organization/manageOrganizationAdministrator"
        },
        {
          "icon": "assets/icon/dynamic-ui/Committees.svg",
          "title": "Committees",
          "subTitle": "Create and manage committees",
          "pageUrl": "organization/manageOrganizationCommittees"
        },
        {
          "icon": "assets/icon/dynamic-ui/Member_Companies.svg",
          "title": "Member Companies",
          "subTitle": "Requests to be listed under your organization",
          "pageUrl": "organization/manageOrganizationAffiliations"
        },
        {
          "icon": "assets/icon/dynamic-ui/Chapters.svg",
          "title": "Chapters",
          "subTitle": "Organizational structure & chapters",
          "pageUrl": "organization/manageOrganizationChapters"
        }
      ],
      "diplomaticMission": [
        {
          "icon": "assets/icon/dynamic-ui/Basic_Information.svg",
          "title": "Embassy Information",
          "subTitle": "Logo, description…",
          "pageUrl": "diplomaticMission/edit"
        },
        {
          "icon": "assets/icon/dynamic-ui/Diplomats.svg",
          "title": "Members & Requests",
          "subTitle": "Manage roles & join requests",
          "pageUrl": "diplomaticMission/manageDiplomaticKeyStaff"
        },
        {
          "icon": "assets/icon/dynamic-ui/Committees.svg",
          "title": "Support Staff",
          "subTitle": "Manage staff and offices",
          "pageUrl": "diplomaticMission/manageDiplomaticOffices"
        },
        {
          "icon": "assets/icon/dynamic-ui/Ambassadorial_Network.svg",
          "title": "Ambassadorial Network",
          "subTitle": "Your embassy’s support network",
          "pageUrl": "diplomaticMission/manageDiplomaticAmbassadorialNetwork"
        },
        {
          "icon": "assets/icon/dynamic-ui/Chapters.svg",
          "title": "Trade Office",
          "subTitle": "Vetted Lebanese businesses",
          "pageUrl": "diplomaticMission/manageDiplomaticTradeOffice"
        },
        {
          "icon": "assets/icon/dynamic-ui/Page_Administrator.svg",
          "title": "Page Administrators",
          "subTitle": "Assign or remove page administrators",
          "pageUrl": "diplomaticMission/manageDiplomaticAdministrator"
        }
      ],
      "town": [
        {
          "icon": "assets/icon/dynamic-ui/Basic_Information.svg",
          "title": "Town Information",
          "subTitle": "Intro, history, name origin",
          "pageUrl": "town/edit"
        },
        {
          "icon": "assets/icon/dynamic-ui/Page_Administrator.svg",
          "title": "Page Administrators",
          "subTitle": "Assign or remove page administrators",
          "pageUrl": "town/manageTownAdministrator"
        }
      ]
    },
    "privacyTypes": [
      {
        "lookupId": "EVERYONE",
        "name": "Everyone"
      },
      {
        "lookupId": "MEMBERS",
        "name": "People I Follow"
      },
      {
        "lookupId": "HIDDEN",
        "name": "Private"
      }
    ],
    "filterDate": [
      {
        "lookupId": "upcomingStartDate",
        "name": "Upcoming Events"
      },
      {
        "lookupId": "pastEndDate",
        "name": "Past Events"
      }
    ],
    "companyTypes": [
      {
        "lookupId": "BUSINESS",
        "name": "Business"
      },
      {
        "lookupId": "SOCIALENTERPRISE",
        "name": "Social Enterprise"
      },
      {
        "lookupId": "STARTUP",
        "name": "Startup"
      }
    ],
    "organizationTypes": [
      {
        "lookupId": "ACADEMY",
        "name": "Academy"
      },
      {
        "lookupId": "ASSOCIATION",
        "name": "Association"
      },
      {
        "lookupId": "CENTRE",
        "name": "Centre"
      },
      {
        "lookupId": "CLUB",
        "name": "Club"
      },
      {
        "lookupId": "COMMUNITY",
        "name": "Community"
      },
      {
        "lookupId": "FORUM",
        "name": "Forum"
      },
      {
        "lookupId": "FOUNDATION",
        "name": "Foundation"
      },
      {
        "lookupId": "INSTITUTION",
        "name": "Institution"
      },
      {
        "lookupId": "MENTORHUB",
        "name": "Mentor Hub"
      },
      {
        "lookupId": "ORGANIZATION",
        "name": "Organization"
      },
      {
        "lookupId": "SOCIETY",
        "name": "Society"
      }
    ],
    "organizationCategories": [
      {
        "lookupId": "ACADEMIC",
        "name": "Academic"
      },
      {
        "lookupId": "ARTISTIC",
        "name": "Artistic"
      },
      {
        "lookupId": "BEAUTY",
        "name": "Beauty"
      },
      {
        "lookupId": "BUSINESS",
        "name": "Business"
      },
      {
        "lookupId": "CHARITY",
        "name": "Charity"
      },
      {
        "lookupId": "COMMUNITY",
        "name": "Community"
      },
      {
        "lookupId": "CULTURAL",
        "name": "Cultural"
      },
      {
        "lookupId": "DIPLOMATIC",
        "name": "Diplomatic"
      },
      {
        "lookupId": "ECONOMIC",
        "name": "Economic"
      },
      {
        "lookupId": "EDUCATIONAL",
        "name": "Educational"
      },
      {
        "lookupId": "ENVIRONMENTAL",
        "name": "Environmental"
      },
      {
        "lookupId": "INTERESTBASED",
        "name": "Interest Based"
      },
      {
        "lookupId": "MEDICAL",
        "name": "Medical"
      },
      {
        "lookupId": "MUSICAL",
        "name": "Musical"
      },
      {
        "lookupId": "RELIGIOUS",
        "name": "Religious"
      },
      {
        "lookupId": "RESEARCHDEVELOPMENT",
        "name": "Research Development"
      },
      {
        "lookupId": "SCIENTIFIC",
        "name": "Scientific"
      },
      {
        "lookupId": "SPORTS",
        "name": "Sports"
      }
    ],
    "diplomaticMissionType": [
      {
        "lookupId": "EMBASSY",
        "name": "Embassy"
      },
      {
        "lookupId": "CONSULATE",
        "name": "Consulate"
      },
      {
        "lookupId": "HONORARYCONSULATE",
        "name": "Honorary Consulate"
      }
    ],
    "companyPositionTypes": [
      {
        "lookupId": "Founder",
        "name": "Company Leadership"
      },
      {
        "lookupId": "Employee",
        "name": "Employee"
      },
      {
        "lookupId": "Mentor",
        "name": "Mentor"
      },
      {
        "lookupId": "Advisor",
        "name": "Advisor"
      }
    ],
    "organizationPositionTypes": [
      {
        "lookupId": "President",
        "name": "Organization Leadership"
      },
      {
        "lookupId": "BoardMember",
        "name": "Board of Directors"
      },
      {
        "lookupId": "CommitteeMember",
        "name": "Committee or Board Member"
      },
      {
        "lookupId": "Member",
        "name": "Member"
      }
    ],
    "diplomaticPositionMissionTypes": [
      {
        "lookupId": "BoardMember",
        "name": "Diplomats & Key Staff"
      },
      {
        "lookupId": "CommitteeMember",
        "name": "Support Staff (by Office)"
      },
      {
        "lookupId": "Member",
        "name": "Diaspora Member"
      }
    ],
    "townOfficialRoles": [
      {
        "lookupId": "Mayor",
        "name": "Mayors"
      },
      {
        "lookupId": "townAmbassadors",
        "name": "Community Ambassador"
      },
      {
        "lookupId": "Mukhtar",
        "name": "Mukhtars"
      },
      {
        "lookupId": "ElectedMember",
        "name": "Elected Members"
      }
    ],
    "explore": {
      "byRole": [
        {
          "lookupId": "Mayor",
          "name": "Mayors"
        },
        {
          "lookupId": "townAmbassadors",
          "name": "Community Ambassadors"
        },
        {
          "lookupId": "Mukhtar",
          "name": "Mukhtars"
        },
        {
          "lookupId": "ElectedMember",
          "name": "Elected Members"
        }
      ],
      "byNetworks": [
        {
          "lookupId": "organizations",
          "name": "Organization"
        },
        {
          "lookupId": "municipalities",
          "name": "Hometowns"
        },
        {
          "lookupId": "diplomaticMissions",
          "name": "Diplomatic Missions"
        },
        {
          "lookupId": "posts",
          "name": "News"
        },
        {
          "lookupId": "events",
          "name": "Event"
        }
      ],
      "bySector": [
        {
          "lookupId": "feb279ab-544e-4930-bba8-d59d2bf53707",
          "name": "Apparel & Fashion"
        },
        {
          "lookupId": "e36743bf-69f6-4d23-8a3d-62f0f8148002",
          "name": "Construction"
        },
        {
          "lookupId": "792cba6b-0b5f-425e-940c-3f0c4facc71f",
          "name": "Consumer Goods"
        },
        {
          "lookupId": "cfc4b778-7e1b-4349-b80c-280fcc6b4f00",
          "name": "Health, Wellness and Fitness"
        },
        {
          "lookupId": "07f0be11-22d9-4622-b511-83acad4b5d84",
          "name": "Hospitality"
        },
        {
          "lookupId": "c2c5f9b5-c075-4fb9-a123-f5e4b09afd71",
          "name": "Information Technology and Services"
        },
        {
          "lookupId": "55c1a9cf-058c-43ac-9833-e272ab947589",
          "name": "Logistics and Supply Chain"
        },
        {
          "lookupId": "0387d34b-bb1b-4068-84ff-a4392dd011ff",
          "name": "Marketing and Advertising"
        },
        {
          "lookupId": "4b3f0316-00ec-46bb-845e-42f6f4108e04",
          "name": "Media Production"
        },
        {
          "lookupId": "1b7caf29-1124-46f7-8c7e-90bc3652add3",
          "name": "Real Estate"
        }
      ],
      "byProfileBySector": [
        {
          "lookupId": "feb279ab-544e-4930-bba8-d59d2bf53707",
          "name": "Apparel & Fashion"
        },
        {
          "lookupId": "e36743bf-69f6-4d23-8a3d-62f0f8148002",
          "name": "Construction"
        },
        {
          "lookupId": "792cba6b-0b5f-425e-940c-3f0c4facc71f",
          "name": "Consumer Goods"
        },
        {
          "lookupId": "cfc4b778-7e1b-4349-b80c-280fcc6b4f00",
          "name": "Health, Wellness and Fitness"
        },
        {
          "lookupId": "07f0be11-22d9-4622-b511-83acad4b5d84",
          "name": "Hospitality"
        },
        {
          "lookupId": "c2c5f9b5-c075-4fb9-a123-f5e4b09afd71",
          "name": "Information Technology and Services"
        },
        {
          "lookupId": "55c1a9cf-058c-43ac-9833-e272ab947589",
          "name": "Logistics and Supply Chain"
        },
        {
          "lookupId": "0387d34b-bb1b-4068-84ff-a4392dd011ff",
          "name": "Marketing and Advertising"
        },
        {
          "lookupId": "4b3f0316-00ec-46bb-845e-42f6f4108e04",
          "name": "Media Production"
        },
        {
          "lookupId": "1b7caf29-1124-46f7-8c7e-90bc3652add3",
          "name": "Real Estate"
        }
      ],
      "bySectorStaging": [
        {
          "lookupId": "906f92c6-b74c-46b9-9c85-0af118bae01b",
          "name": "Apparel & Fashion"
        },
        {
          "lookupId": "322114d3-9a95-4322-85a4-4fc60a6470fb",
          "name": "Construction"
        },
        {
          "lookupId": "2df45527-8542-4b15-ae43-7f02e524f471",
          "name": "Consumer Goods"
        },
        {
          "lookupId": "2807535a-97ac-4a46-a8a6-9a3b63a40eb2",
          "name": "Health, Wellness and Fitness"
        },
        {
          "lookupId": "88996ad4-89d2-4e0d-afc0-9ee1fdefa1ca",
          "name": "Hospitality"
        },
        {
          "lookupId": "8acb39ac-c684-468d-923e-660c1a2f1548",
          "name": "Information Technology and Services"
        },
        {
          "lookupId": "151ce957-8129-420f-b1bd-1c6d08268daa",
          "name": "Logistics and Supply Chain"
        },
        {
          "lookupId": "56271fb5-36fc-4475-90a1-a845e6dfd936",
          "name": "Marketing and Advertising"
        },
        {
          "lookupId": "51d4a4df-9e16-4a80-bc8f-21ce78d9b53a",
          "name": "Media Production"
        },
        {
          "lookupId": "20985920-391f-4c10-9bfc-6517ac5f342b",
          "name": "Real Estate"
        }
      ],
      "byProfileBySectorStaging": [
        {
          "lookupId": "906f92c6-b74c-46b9-9c85-0af118bae01b",
          "name": "Apparel & Fashion"
        },
        {
          "lookupId": "322114d3-9a95-4322-85a4-4fc60a6470fb",
          "name": "Construction"
        },
        {
          "lookupId": "2df45527-8542-4b15-ae43-7f02e524f471",
          "name": "Consumer Goods"
        },
        {
          "lookupId": "2807535a-97ac-4a46-a8a6-9a3b63a40eb2",
          "name": "Health, Wellness and Fitness"
        },
        {
          "lookupId": "88996ad4-89d2-4e0d-afc0-9ee1fdefa1ca",
          "name": "Hospitality"
        },
        {
          "lookupId": "8acb39ac-c684-468d-923e-660c1a2f1548",
          "name": "Information Technology and Services"
        },
        {
          "lookupId": "151ce957-8129-420f-b1bd-1c6d08268daa",
          "name": "Logistics and Supply Chain"
        },
        {
          "lookupId": "56271fb5-36fc-4475-90a1-a845e6dfd936",
          "name": "Marketing and Advertising"
        },
        {
          "lookupId": "51d4a4df-9e16-4a80-bc8f-21ce78d9b53a",
          "name": "Media Production"
        },
        {
          "lookupId": "20985920-391f-4c10-9bfc-6517ac5f342b",
          "name": "Real Estate"
        }
      ],
      "byLeaderShip": [
        {
          "lookupId": "keyStaff",
          "name": "Diplomats & Diplomatic Staff"
        },
        {
          "lookupId": "organiztionLeadership",
          "name": "Organization Leadership"
        },
        {
          "lookupId": "companyLeadership",
          "name": "Company Leadership"
        },
        {
          "lookupId": "mentors",
          "name": "Mentors"
        },
        {
          "lookupId": "advisors",
          "name": "Advisors"
        }
      ],
      "byOrganizationCategory": [
        {
          "lookupId": "Academy",
          "name": "Academy"
        },
        {
          "lookupId": "Association",
          "name": "Association"
        },
        {
          "lookupId": "Centre",
          "name": "Centre"
        },
        {
          "lookupId": "Club",
          "name": "Club"
        },
        {
          "lookupId": "Community",
          "name": "Community"
        },
        {
          "lookupId": "Forum",
          "name": "Forum"
        },
        {
          "lookupId": "Foundation",
          "name": "Foundation"
        },
        {
          "lookupId": "Institution",
          "name": "Institution"
        },
        {
          "lookupId": "Organization",
          "name": "Organization"
        },
        {
          "lookupId": "Society",
          "name": "Society"
        },
        {
          "lookupId": "MentorHub",
          "name": "Mentor Hub"
        }
      ]
    },
    "generalInfo": {
      "domainPageSize": 9,
      "listPageSize": 10,
      "galleryPageSize": 20,
      "maxPageSize": 99
    },
    "businesseActionList": [
      {
        "firstIcon": "assets/icon/dynamic-ui/OwnerOrEmployee.svg",
        "title": "Owner or Employee",
        "subTitle": "Add or Join Company"
      },
      {
        "firstIcon": "assets/icon/dynamic-ui/Self_Employed.svg",
        "title": "Self Employed",
        "subTitle": "List Your Profession"
      }
    ],
    "networkActionList": [
      {
        "firstIcon": "assets/icon/dynamic-ui/Organizatiaon_Leadership.svg",
        "title": "President or Owner",
        "subTitle": "List Your Organization"
      },
      {
        "firstIcon": "assets/icon/dynamic-ui/OrganizationMember.svg",
        "title": "Org Member",
        "subTitle": "Add Your Role"
      }
    ],
    "headerPageHomeIcon": "assets/icon/dynamic-ui/BacktoHome.svg",
    "basicLookupsData": "query {\n  governorates {\n    lookupId\n    name\n  }\n\n  districts {\n    lookupId\n    governateId\n    name\n  }\n\n  sectors(expand: true) {\n    lookupId\n    name\n    Sectors {\n        lookupId\n      name\n    }\n  }\n\n  countries {\n    lookupId\n    isoCode\n    name\n  }\n\n  hometowns: cities(country: $dynamicUiVariables->initialDataSource.lebanonLookupId) {# Lebanon id\n    lookupId\n    name\n  }\n\n  professions{\n    lookupId\n    name\n  }\n}",
    "queries": {
      "citiesByCountryId": "query   {  cities(country: $dynamicUiVariables->parameters.countryId) {\n    lookupId\n    name\n  }\n}\n",
      "invite": "mutation {  invitation {\n    create(invitationType:JOIN) {\n      id\n      inviterId\n    }\n  }      \n}\n",
      "checkAccount": "query{  userMetadata{\n    actions{\n      canCreate\n    }\n  }\n}\n",
      "whoAmI": "mutation{  user{\n    me{\n      id\n      firstName\n      lastName\n\n      photoCover {\n        imageThumbnailUrl\n      }\n\n      placeOfOrigin {\n        country {\n          lookupId\n          name\n          isoCode\n        }\n        city {\n          lookupId\n          name\n        }\n      }\n\n      placeOfResidence {\n        country {\n          lookupId\n          name\n          isoCode\n        }\n        city { \n          lookupId\n          name\n        }\n      }\n\n      statistics {\n        followers\n        following\n      }            \n\n      municipality {\n        municipality {\n          id\n          title\n          photoCover {\n            imageThumbnailUrl\n          }\n        }\n      }    \n\n      sector {\n        lookupId\n        name\n      }\n\n      roles {                 \n        role {\n          role\n          positionName\n          featured\n        }\n\n        entity {\n          __typename ... on Organization{\n            id\n            name\n            actions {\n              canUpdate\n            }\n            photoCover {\n              imageThumbnailUrl\n            } \n            mailBox {\n              mailBox {\n                id\n              }\n            }                                \n          }\n          __typename ... on DiplomaticMission{\n            id\n            name\n            actions {\n              canUpdate\n            }\n            photoCover {\n              imageThumbnailUrl\n            }        \n            mailBox {\n              mailBox {\n                id\n              }\n            }                         \n          }\n          __typename ... on Company{\n            id\n            name\n            actions {\n              canUpdate\n            }                                 \n            photoCover {\n              imageThumbnailUrl\n            }\n            mailBox {\n              mailBox {\n                id\n              }\n            }                     \n          }\n          __typename ... on Municipality{\n            id\n            name: title\n            actions {\n              canUpdate\n            }                                 \n            photoCover {\n              imageThumbnailUrl\n            }    \n            mailBox {\n              mailBox {\n                id\n              }\n            }                             \n          }\n          __typename ... on OrganizationCommittee {\n            id\n            name\n            organization {\n              organization {\n                id\n                name\n                actions {\n                  canUpdate\n                }\n                photoCover {\n                  imageThumbnailUrl\n                }      \n                place {\n                  country {\n                    lookupId\n                    name\n                    isoCode\n                  }\n                  city {\n                    lookupId\n                    name\n                  }\n                } \n\n                mailBox {\n                  mailBox {\n                    id\n                  }\n                }                                                  \n              }\n            }              \n          }\n          __typename ... on DiplomaticMissionCommittee {\n            id\n            name\n            diplomaticMission {\n              diplomaticMission {\n                id \n                name\n                actions {\n                  canUpdate\n                }\n                photoCover {\n                  imageThumbnailUrl\n                }\n                place {\n                  country {\n                    lookupId\n                    name\n                    isoCode\n                  }\n                  city {\n                    lookupId\n                    name\n                  }\n                }  \n\n                mailBox {\n                  mailBox {\n                    id\n                  }\n                }                                       \n              }\n            }              \n          }                      \n        }\n      }                          \n\n      mailBoxes {\n        mailBox {\n          id\n          owner {\n            entity {\n              __typename ... on User {\n                id\n              }\n\n              __typename ... on Municipality {\n                id\n              }\n              \n              __typename ... on Company {\n                id\n              }\n              \n              __typename ... on Organization {\n                id\n              }\n              \n              __typename ... on DiplomaticMission {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "createUserProfile": "mutation($invitationId: String!, $firstName: String!, $lastName: String!, $countryOfOrigin: String!, $cityOfOrigin: String!, $countryOfResidence: String!, $cityOfResidence: String!, $contactEmail: String) {  user {\n    create(invitationId:$invitationId, model:{\n      firstName: $firstName,\n      lastName: $lastName,\n      contactEmail: $contactEmail,\n      placeOfOrigin: {\n        country: $countryOfOrigin,\n        city: $cityOfOrigin\n      },\n      placeOfResidence: {\n        country: $countryOfResidence,\n        city: $cityOfResidence\n      }\n    }) {\n      id\n      firstName\n      lastName\n\n      photoCover {\n        imageThumbnailUrl\n      }\n\n      placeOfOrigin {\n        country {\n          lookupId\n          name\n          isoCode\n        }\n        city {\n          lookupId\n          name\n        }\n      }\n\n      placeOfResidence {\n        country {\n          lookupId\n          name\n          isoCode\n        }\n        city { \n          lookupId\n          name\n        }\n      }\n\n      statistics {\n        followers\n        following\n      }            \n\n      municipality {\n        municipality {\n          id\n          title\n          photoCover {\n            imageThumbnailUrl\n          }\n        }\n      }    \n\n      roles {                 \n        role {\n          role\n          positionName\n          featured\n        }\n\n        entity {\n          __typename ... on Organization{\n            id\n            name\n            actions {\n              canUpdate\n            }\n            photoCover {\n              imageThumbnailUrl\n            }            \n            mailBox {\n              mailBox {\n                id\n              }\n            }                     \n          }\n          __typename ... on DiplomaticMission{\n            id\n            name\n            actions {\n              canUpdate\n            }\n            photoCover {\n              imageThumbnailUrl\n            }    \n            mailBox {\n              mailBox {\n                id\n              }\n            }                             \n          }\n          __typename ... on Company{\n            id\n            name\n            actions {\n              canUpdate\n            }                                 \n            photoCover {\n              imageThumbnailUrl\n            }\n            mailBox {\n              mailBox {\n                id\n              }\n            }                     \n          }\n          __typename ... on Municipality{\n            id\n            name: title\n            actions {\n              canUpdate\n            }                                 \n            photoCover {\n              imageThumbnailUrl\n            }     \n            mailBox {\n              mailBox {\n                id\n              }\n            }                            \n          }\n          __typename ... on OrganizationCommittee {\n            id\n            name\n            organization {\n              organization {\n                id\n                name\n                actions {\n                  canUpdate\n                }\n                photoCover {\n                  imageThumbnailUrl\n                }      \n                place {\n                  country {\n                    lookupId\n                    name\n                    isoCode\n                  }\n                  city {\n                    lookupId\n                    name\n                  }\n                }   \n\n                mailBox {\n                  mailBox {\n                    id\n                  }\n                }                                               \n              }\n            }              \n          }\n          __typename ... on DiplomaticMissionCommittee {\n            id\n            name\n            diplomaticMission {\n              diplomaticMission {\n                id \n                name\n                actions {\n                  canUpdate\n                }\n                photoCover {\n                  imageThumbnailUrl\n                }\n                place {\n                  country {\n                    lookupId\n                    name\n                    isoCode\n                  }\n                  city {\n                    lookupId\n                    name\n                  }\n                } \n                mailBox {\n                  mailBox {\n                    id\n                  }\n                }                                        \n              }\n            }              \n          }                      \n        }\n      }                          \n\n      mailBoxes {\n        mailBox {\n          id\n          owner {\n            entity {\n              __typename ... on User {\n                id\n              }\n\n              __typename ... on Municipality {\n                id\n              }\n              \n              __typename ... on Company {\n                id\n              }\n              \n              __typename ... on Organization {\n                id\n              }\n              \n              __typename ... on DiplomaticMission {\n                id\n              }\n            }\n          }\n        }\n      }\n\n    }\n  }\n}\n",
      "createOrUpdateDevice": "mutation($destinationPlatform: String!, $version: String!, $deviceRegistrationToken: String!, $installationId: String!){  notification{\n    createOrUpdateDeviceRegistration(installation:{\n      destinationPlatform: $destinationPlatform,\n      version: $version,\n      deviceRegistrationToken: $deviceRegistrationToken,\n      messageBrokerPlatform: \"fcm\",\n      installationId: $installationId\n    })\n  }\n}\n",
      "unRegisterDevice": "mutation($installationId: String!){  notification{\n    deleteRegistration(installationId: $installationId)\n  }\n}\n",
      "unreadNotificationCountMapping": "notification.userNotifications.unreadMessagesCount",
      "unreadConversationCountMapping": "conversation.statistics.totalUnreadMessages",
      "getUnreadNotifications": "query   {  notification {\n    userNotifications{\n      unreadMessagesCount\n    }\n  }\n}\n",
      "getUnreadConversations": "query   {  conversation {\n    statistics{\n      totalUnreadMessages\n    }\n  }\n}\n"
    }
  },
  "routing": {
    "company/createNewCompany": {
      "component": "createCompany-page-template",
      "withGuard": true
    },
    "company/edit/:id": {
      "component": "editCompany-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {     \n  const result =  {\n    ...data,\n    actions: _.get(data, \"company.actions\", {})\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    company(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n      introduction\n      companyType\n\n      actions {\n        canUploadLogo\n      }                  \n  \n      sector {\n        lookupId\n        name\n      }\n\n      keywords {\n        lookupId\n        name\n      }\n      \n      brands {\n        lookupId\n        name\n      }\n\n      ...companyPlaces       \n      ...companyImage\n      ...companyContactDetails\n      ...companySocialMedia\n    }\n  }"
      }
    },
    "company/manageCompany/:id": {
      "component": "managecompany-page-template",
      "withGuard": true
    },
    "company/manageCompanyTeamMembers/:id": {
      "component": "manageCompanyTeamMembers-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    verifiedEmployees: _.get(data, \"company.verifiedEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    unVerifiedEmployees: _.get(data, \"company.pendingEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    verifiedEmployeesCursor: _.get(data, \"company.verifiedEmployees.cursor\"),\n    unVerifiedEmployeesCursor: _.get(data, \"company.pendingEmployees.cursor\"),\n    actions: _.get(data, \"company.actions\", {})\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    company(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n\n      actions {\n        canApproveEmployee\n        canRemoveMember\n      }\n\n      verifiedEmployees(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          role {\n            positionName\n            role\n          }\n          user {\n            ...userBasicDetailsProperties\n          }   \n        }\n        cursor\n      }   \n      pendingEmployees(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          role {\n            positionName\n            role\n          }\n          user {\n            ...userBasicDetailsProperties\n          }   \n        }\n        cursor\n      }    \n    }\n  }"
      }
    },
    "company/viewCompanyTeamMembers/:id": {
      "component": "viewCompanyTeamMembers-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    verifiedEmployees: _.get(data, \"company.employees.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    cursor: _.get(data, \"company.employees.cursor\")          \n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    company(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      employees(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          role {\n            positionName\n            role\n          }\n          user {\n            ...userBasicDetailsProperties\n          }   \n        }\n        cursor\n      }            \n    }\n  }"
      }
    },
    "company/viewCompanyAdministrator/:id": {
      "component": "viewCompanyAdministrators-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    admins: _.get(data, \"company.admins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    actions: _.get(data, \"company.actions\", {}),\n    cursor: _.get(data, \"company.admins.cursor\")          \n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    company(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      actions {\n        canRemoveAdmin\n      }\n\n      admins (after:null , first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }                           \n        }\n        cursor  \n      }\n    }\n  }"
      }
    },
    "company/manageCompanyAdministrator/:id": {
      "component": "manageCompanyAdministrators-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    admins: _.get(data, \"company.admins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    actions: _.get(data, \"company.actions\", {}),\n    cursor: _.get(data, \"company.admins.cursor\")          \n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    company(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      actions {\n        canRemoveAdmin\n      }\n\n      admins (after:null , first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }                           \n        }\n        cursor  \n      }\n    }\n  }"
      }
    },
    "company/addCompanyAdministrator/:id": {
      "component": "addCompanyAdministrator-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    verifiedEmployees: _.get(data, \"company.verifiedEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    actions: _.get(data, \"company.actions\", {}),\n    cursor: _.get(data, \"company.verifiedEmployees.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    company(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n      ...companyImage\n\n      actions {\n        canAddAdmin\n        canInviteAdmin\n      }\n\n      verifiedEmployees(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          role {\n            positionName\n            role\n          }\n          user {\n            ...userBasicDetailsProperties\n          }   \n        }\n        cursor\n      }            \n    } \n  }"
      }
    },
    "company/manageCompanyMarketPlace/:id": {
      "component": "manageCompanyMarketPlace-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    products: _.get(data, \"company.products.items\", []).map(x => $dynamicUiExtraService.mapCompanyOfferToItem(x)),\n    services: _.get(data, \"company.services.items\", []).map(x => $dynamicUiExtraService.mapCompanyOfferToItem(x)),\n    franchises: _.get(data, \"company.franchises.items\", []).map(x => $dynamicUiExtraService.mapCompanyOfferToItem(x)),\n    productsCursor: _.get(data, \"company.products.cursor\"),\n    serviceCursor: _.get(data, \"company.services.cursor\"),\n    franchisesCursor: _.get(data, \"company.franchises.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    company(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n      ...companyImage\n      products(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          offer {\n            ...offerProperties\n          }\n        }\n        cursor\n      }\n\n      services(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          offer {\n            ...offerProperties\n          }\n        }\n        cursor\n      }  \n\n      franchises(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n          items {\n            offer {\n              ...offerProperties\n            }\n          }\n          cursor\n        }                                       \n    } \n  }"
      }
    },
    "company/viewCompanyProducts/:id": {
      "component": "viewCompanyProducts-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    products: _.get(data, \"company.products.items\", []).map(x => $dynamicUiExtraService.mapCompanyOfferToItem(x)),\n    productsCursor: _.get(data, \"company.products.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    company(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n      products(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          offer {\n            ...offerProperties\n          }\n        }\n        cursor\n      }\n    } \n  }"
      }
    },
    "company/viewCompanyServices/:id": {
      "component": "viewCompanyServices-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const result =  {\n    ...data,\n    services: _.get(data, \"company.services.items\", []).map(x => $dynamicUiExtraService.mapCompanyOfferToItem(x)),\n    serviceCursor: _.get(data, \"company.services.cursor\"),\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    company(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n      services(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          offer {\n            ...offerProperties\n          }\n        }\n        cursor\n      }  \n    } \n  }"
      }
    },
    "company/viewCompanyFranchises/:id": {
      "component": "viewCompanyFranchises-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const result =  {\n    ...data,\n    franchises: _.get(data, \"company.franchises.items\", []).map(x => $dynamicUiExtraService.mapCompanyOfferToItem(x)),\n    franchisesCursor: _.get(data, \"company.franchises.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    company(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n      franchises(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n          items {\n            offer {\n              ...offerProperties\n            }\n          }\n          cursor\n        }                                       \n    } \n  }"
      }
    },
    "company/manageCompanyAffiliations/:id": {
      "component": "manageCompanyAffiliations-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    currentAffiliations: _.get(data, \"company.currentAffiliations.items\", []).map(x => $dynamicUiExtraService.mapOrganizationToItem(x)),\n    requestedAffiliations: _.get(data, \"company.requestedAffiliations.items\", []).map(x => $dynamicUiExtraService.mapOrganizationToItem(x)),\n    currentAffiliationsCursor: _.get(data, \"company.currentAffiliations.cursor\"),\n    requestedAffiliationsCursor: _.get(data, \"company.requestedAffiliations.cursor\"),\n    actions: _.get(data, \"company.actions\", {})\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    company(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      actions {\n        canAddParentOrganization\n        canApproveParentOrganization\n        canRemoveParentOrganization\n      }\n\n      currentAffiliations(after: null, first:$dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          organization {\n            ...organizationCommonProperties  \n          }\n        }\n        cursor\n      }\n\n      requestedAffiliations(after: null, first:$dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          organization {\n            ...organizationCommonProperties\n          }\n        }\n        cursor\n      } \n    }\n  }"
      }
    },
    "company/viewCompanyAffiliations/:id": {
      "component": "viewCompanyAffiliations-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    currentAffiliations: _.get(data, \"company.currentAffiliations.items\", []).map(x => $dynamicUiExtraService.mapOrganizationToItem(x)),\n    cursor: _.get(data, \"company.currentAffiliations.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    company(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      currentAffiliations(after: null, first:$dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          organization {\n            ...organizationCommonProperties\n          }\n        }\n        cursor\n      } \n    }\n  }"
      }
    },
    "company/manageCompanyBranches/:id": {
      "component": "manageCompanyBranches-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "(async (data) => {\n  \n  const result =  {\n    ...data,\n    incomingBranchesrequests:  _.get(data, \"company.incomingBranchesrequests.items\", []).map(x => $dynamicUiExtraService.mapCompanyToItem(x)),\n    outgoingBranchesRequests:  _.get(data, \"company.outgoingBranchesRequests.items\", []).map(x => $dynamicUiExtraService.mapCompanyToItem(x)),\n    incomingBranchesrequestsCursor: _.get(data, \"company.incomingBranchesrequests.cursor\"),\n    outgoingBranchesRequestsCursor: _.get(data, \"company.outgoingBranchesRequests.cursor\"),\n    actions: _.get(data, \"company.actions\", {})\n  }\n\n  const parentBranchesResponse = await $dynamicUiExtraService.getCompanyParentBranches($activatedRoute.snapshot.params.id, $actionHelper);\n  const rootBranchId = parentBranchesResponse.rootBranchId;\n  const hasParentBranch = parentBranchesResponse.hasParentBranch;\n  const parentBranchId = parentBranchesResponse.parentBranchId;\n\n  let branchesTree = [];\n  if(hasParentBranch) {\n    branchesTree = await $dynamicUiExtraService.prepareCompanyChildBranches(rootBranchId, $actionHelper, $activatedRoute.snapshot.params.id);\n  }\n\n  result.branchesTree = branchesTree;\n  result.parentBranchId = parentBranchId;\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    company(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      actions {\n        canAddParentEntity    \n        canRemoveBranchEntity\n        canApproveBranch\n      }\n\n      incomingBranchesrequests(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          company {\n            ...companyCommonProperties      \n          }\n        }\n        cursor\n      }   \n      outgoingBranchesRequests(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          company {\n            ...companyCommonProperties\n          }\n        }\n        cursor\n      }  \n    }\n  }"
      }
    },
    "company/viewCompanyBranches/:id": {
      "component": "viewCompanyBranches-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "(async(data) => {\n  const parentBranchesResponse = $dynamicUiExtraService.prepareCompanyParentBranches(data);\n  const rootBranchId = parentBranchesResponse.rootBranchId;\n  const hasParentBranch = parentBranchesResponse.hasParentBranch;\n  const parentBranchId = parentBranchesResponse.parentBranchId;\n\n  let branchesTree = [];\n  if(hasParentBranch) {\n    branchesTree = await $dynamicUiExtraService.prepareCompanyChildBranches(rootBranchId, $actionHelper, $activatedRoute.snapshot.params.id);\n  }\n  \n  $actionHelper.printData({ branchesTree, data })\n  return {branchesTree: branchesTree, parentBranchId: parentBranchId};\n}\n\n)(data)",
        "query": "query \n  { \n    company(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n      companyType\n\n      photoCover {\n        imageThumbnailUrl\n      }         \n\n      place {\n        country {\n          lookupId\n          isoCode\n          name\n        }\n        city{\n          lookupId \n          name\n        }\n      }                   \n      ...companyParentBranches\n    }\n  }"
      }
    },
    "company/followers/:id": {
      "component": "followersCompany-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    followers: _.get(data, \"company.followers.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"company.followers.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    company(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      followers(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }   \n        },\n        cursor      \n      }               \n    }\n  }"
      }
    },
    "company/claimCompany/:id": {
      "component": "claim-company-page-template",
      "withGuard": true
    },
    "company/:id": {
      "component": "company-page-template",
      "additionalCssClasses": "grayBg",
      "withGuard": true,
      "pathMatch": "full",
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n\n  const canCreateRoleAction = $dynamicUiExtraService.checkIfCanCreateRole(data.company); \n\n  const canInvite = $dynamicUiExtraService.checkIfCanInvite(data.company); \n  const canManage = $dynamicUiExtraService.checkIfCanManage(data.company); \n  const canShare = $dynamicUiExtraService.checkIfCanShare(data.company); \n  const canFollow = $dynamicUiExtraService.checkIfCanFollow(data.company); \n  const canUnFollow = $dynamicUiExtraService.checkIfCanUnFollow(data.company); \n  const canSendMessage = $dynamicUiExtraService.checkIfCanSendMessage(data.company); \n  const canAddPost = $dynamicUiExtraService.checkIfCanAddPost(data.company); \n  const canAddEvent = $dynamicUiExtraService.checkIfCanAddEvent(data.company);  \n  const canAddMember = $dynamicUiExtraService.checkIfCanAddMember(data.company);   \n\n  const badges = $dynamicUiExtraService.prepareCompanyBadges(data.company, canManage);\n  const generalDetailsInfo = $dynamicUiExtraService.prepareCompanyInfo(data.company, canManage); \n  const socialMediaInfo = $dynamicUiExtraService.prepareSocialMediaInfo(data.company); \n  const galleryId = $dynamicUiExtraService.getGalleryId(data.company);  \n\n  const mediaGallery =  _.get(data, \"company.gallery.mediaGallery\", null);\n  const canUploadImage = mediaGallery ? $dynamicUiExtraService.checkIfCanUploadImage(data.company) : false;  \n  const canUploadVideoLink = mediaGallery ? $dynamicUiExtraService.checkIfCanUploadVideoLink(data.company) : false; \n  const canUploadMedia = canUploadImage || canUploadVideoLink;\n\n  const parentCompany = _.get(data, \"company.parent\", []).length > 0 ? _.get(data, \"company.parent\")[0] : null;\n  const prepareChildBranches = $dynamicUiExtraService.prepareChildBranches(data.company);\n  const branchesList = $dynamicUiExtraService.prepareTreeForCompanyPage(parentCompany, prepareChildBranches);\n  const admins = _.get(data, \"company.admins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x));\n\n  const result =  {\n    ...data,\n    brands: _.get(data, \"company.brands\", []).map(x => { return {...x, title: x.name }  }),\n    branches: branchesList ? branchesList.map(x => $dynamicUiExtraService.mapCompanyToTreeItem(x)) : [],\n    currentAffiliations: _.get(data, \"company.currentAffiliations.items\", []).map(x => $dynamicUiExtraService.mapOrganizationToItem(x)),          \n    teamMembers: _.get(data, \"company.employees.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    gallery: _.get(data, \"company.gallery.mediaGallery.galleryItems.items\", []).map(x => $dynamicUiExtraService.mapGalleryToItem(x)),\n\n    products: _.get(data, \"company.products.items\", []).map(x => $dynamicUiExtraService.mapCompanyOfferToItem(x)),\n    services: _.get(data, \"company.services.items\", []).map(x => $dynamicUiExtraService.mapCompanyOfferToItem(x)),\n    franchises: _.get(data, \"company.franchises.items\", []).map(x => $dynamicUiExtraService.mapCompanyOfferToItem(x)),\n    updates: _.get(data, \"company.updates.items\", []).map(x => $dynamicUiExtraService.mapUpdateToItem(x)),\n    admins: admins, \n    \n    receiverMailboxId: _.get(data, \"company.mailBox.mailBox.id\", null),\n\n    generalDetailsInfo: generalDetailsInfo,\n    socialMediaInfo: socialMediaInfo,\n    badges: badges,\n    galleryId: galleryId,\n\n    canCreateRoleAction: canCreateRoleAction,\n    canAddMember: canAddMember,\n    canInvite: canInvite,\n    canManage: canManage,\n    canShare: canShare,\n    canFollow: canFollow,\n    canUnFollow: canUnFollow,\n    canSendMessage: canSendMessage,\n    canAddPost: canAddPost,\n    canAddEvent: canAddEvent,\n    canUploadMedia: canUploadMedia,\n    canUploadImage: canUploadImage,\n    canUploadVideoLink: canUploadVideoLink            \n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n)(data)",
        "query": "query \n  { \n    company(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n      companyType\n      introduction\n  \n      actions {\n        canUpdate\n        canInvite\n        canCreateRole\n        canAddPost\n        canAddEvent\n\n        canShare\n        canFollow\n        canUnfollow\n        canSendMessage\n        canAddMember\n      }\n\n      statistics {\n        followers\n        team\n      }\n\n      sector {\n        lookupId\n        name\n      }\n\n      brands {\n        lookupId\n        name\n      }\n\n      mailBox {\n        mailBox {\n          id\n        }\n      } \n\n      ...companyPlaces\n      ...companyImage\n      ...companyContactDetails\n      ...companySocialMedia\n      ...companyMediaGallery\n      ...companyCommonProperties\n      ...companyActivities\n\n      parent{\n        ...companyParentBranch   \n      }\n\n      branches{\n        ...companyChildBranch\n      }              \n\n      products(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.domainPageSize) {\n        items {\n          offer {\n            ...offerProperties\n          }\n        }\n      }\n\n      services(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.domainPageSize) {\n        items {\n          offer {\n            ...offerProperties\n          }\n        }\n      }  \n\n      franchises(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.domainPageSize) {\n        items {\n          offer {\n            ...offerProperties\n          }\n        }\n      }                                       \n\n      currentAffiliations(after: null, first:$dynamicUiVariables->initialDataSource.generalInfo.domainPageSize) {\n        items {\n          organization {\n            ...organizationCommonProperties\n          }\n        }\n      }     \n\n      employees(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.domainPageSize) {\n        items {\n          role {\n            positionName\n            role\n          }\n          user {\n            ...userBasicDetailsProperties\n          }   \n        }\n      }    \n\n      admins(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.domainPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }\n        }\n      }\n\n    }\n  }"
      }
    },
    "diplomaticMission/edit/:id": {
      "component": "editDiplomatic-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {     \n  const result =  {\n    ...data,\n    actions: _.get(data, \"diplomaticMission.actions\", {})\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    diplomaticMission(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n      introduction  \n\n      actions {\n        canUploadLogo\n      }                  \n\n      ...diplomaticPlaces\n      ...diplomaticImage     \n      ...diplomaticContactDetails\n      ...diplomaticSocialMedia\n    }\n  }"
      }
    },
    "diplomaticMission/manageDiplomatic/:id": {
      "component": "manageDiplomaticMission-page-template",
      "withGuard": true
    },
    "diplomaticMission/manageDiplomaticKeyStaff/:id": {
      "component": "manageDiplomaticKeyStaff-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    verifiedKeyStaff: _.get(data, \"diplomaticMission.verifiedEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    unverifiedKeyStaff: _.get(data, \"diplomaticMission.pendingEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n\n    verifiedKeyStaffCursor: _.get(data, \"diplomaticMission.verifiedEmployees.cursor\"),\n    unverifiedKeyStaffCursor: _.get(data, \"diplomaticMission.pendingEmployees.cursor\"),\n    actions: _.get(data, \"diplomaticMission.actions\", {})\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    diplomaticMission(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      actions {\n        canApproveMember\n        canRemoveMember\n      }\n\n      verifiedEmployees (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items  {\n          role {\n            positionName\n            role                    \n          }\n          user {\n            ...userBasicDetailsProperties\n          }\n        }\n        cursor\n      } \n      pendingEmployees (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items  {\n          role {\n            positionName\n            role\n          }\n          user {\n            ...userBasicDetailsProperties                    \n          }\n        }\n        cursor\n      } \n    }\n  }"
      }
    },
    "diplomaticMission/viewDiplomaticKeyStaff/:id": {
      "component": "viewDiplomaticKeyStaff-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    verifiedKeyStaff: _.get(data, \"diplomaticMission.verifiedDiplomatAndKeyStaff.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.verifiedDiplomatAndKeyStaff.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    diplomaticMission(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      verifiedDiplomatAndKeyStaff (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items  {\n          role {\n            positionName\n            role\n          }\n          user {\n            ...userBasicDetailsProperties\n          }\n        }\n        cursor\n      } \n    }\n  }"
      }
    },
    "diplomaticMission/viewDiplomaticAdministrator/:id": {
      "component": "viewDiplomaticMissionAdministrators-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    admins: _.get(data, \"diplomaticMission.admins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.admins.cursor\"),\n    actions: _.get(data, \"diplomaticMission.actions\", {})\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    diplomaticMission(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      actions {\n        canRemoveAdmin\n      }              \n\n      admins {\n        items {\n          user {\n            ...userCommonProperties\n          }    \n        }\n        cursor\n      }  \n    }\n  }"
      }
    },
    "diplomaticMission/manageDiplomaticAdministrator/:id": {
      "component": "manageDiplomaticAdministrators-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    admins: _.get(data, \"diplomaticMission.admins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.admins.cursor\"),\n    actions: _.get(data, \"diplomaticMission.actions\", {})\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    diplomaticMission(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      actions {\n        canRemoveAdmin\n      }              \n\n      admins {\n        items {\n          user {\n            ...userCommonProperties\n          }    \n        }\n        cursor\n      }  \n    }\n  }"
      }
    },
    "diplomaticMission/addDiplomaticAdministrator/:id": {
      "component": "addDiplomaticAdministrator-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    verifiedMembers: _.get(data, \"diplomaticMission.verifiedEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.verifiedEmployees.cursor\"),\n    actions: _.get(data, \"diplomaticMission.actions\", {})\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    diplomaticMission(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n      ...diplomaticImage    \n\n      actions {\n        canAddAdmin\n        canInviteAdmin\n      }              \n\n      verifiedEmployees(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          role {\n            positionName\n            role\n          }\n          user {\n            ...userBasicDetailsProperties\n          }   \n        }\n        cursor\n      }\n    }\n  }"
      }
    },
    "diplomaticMission/followers/:id": {
      "component": "followersDiplomatic-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    followers: _.get(data, \"diplomaticMission.followers.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.followers.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    diplomaticMission(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      followers(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }   \n        }   \n        cursor   \n      }               \n    }\n  }"
      }
    },
    "diplomaticMission/members/:id": {
      "component": "membersDiplomatic-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    verifiedMembers: _.get(data, \"diplomaticMission.employees.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.employees.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    diplomaticMission(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      employees(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          role {\n            positionName\n            role\n          }\n          user {\n            ...userBasicDetailsProperties\n          }   \n        }\n        cursor\n      }\n    }\n  }"
      }
    },
    "diplomaticMission/manageDiplomaticAmbassadorialNetwork/:id": {
      "component": "manageDiplomaticAmbassadorialNetwork-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    ambassadorialNetworks: _.get(data, \"diplomaticMission.ambassadorialNetwork.items\", []).map(x => $dynamicUiExtraService.mapOrganizationToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.ambassadorialNetwork.cursor\"),\n    actions: _.get(data, \"diplomaticMission.actions\", {})\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n)(data)",
        "query": "query \n  { \n    diplomaticMission(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      actions {\n        canRemoveAmbassadorialEntity\n        canAddAmbassadorialEntity\n      }\n\n      ambassadorialNetwork (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items  {\n          organization {\n            __typename\n            ... on Organization {\n              ...organizationCommonProperties\n            }\n          }\n        }\n        cursor\n      } \n    }\n  }"
      }
    },
    "diplomaticMission/viewDiplomaticAmbassadorialNetwork/:id": {
      "component": "viewDiplomaticAmbassadorialNetwork-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    ambassadorialNetworks: _.get(data, \"diplomaticMission.ambassadorialNetwork.items\", []).map(x => $dynamicUiExtraService.mapOrganizationToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.ambassadorialNetwork.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    diplomaticMission(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      ambassadorialNetwork (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items  {\n          organization {\n            __typename\n            ... on Organization {\n              ...organizationCommonProperties\n            }\n          }\n        }\n        cursor\n      } \n    }\n  }"
      }
    },
    "diplomaticMission/manageDiplomaticTradeOffice/:id": {
      "component": "manageDiplomaticTradeOffice-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    tradeOffices: _.get(data, \"diplomaticMission.tradeOffice.items\", []).map(x =>  $dynamicUiExtraService.mapCompanyToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.tradeOffice.cursor\"),\n    actions: _.get(data, \"diplomaticMission.actions\", {})\n  }\n  \n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    diplomaticMission(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      actions {\n        canAddTradeOfficeEntity\n        canRemoveTradeOfficeEntity\n      }\n\n      tradeOffice (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {          \n        items {\n          company {\n            __typename\n            ... on Company {\n              ...companyCommonProperties\n            }\n          }\n        }\n        cursor\n      }\n    }\n  }"
      }
    },
    "diplomaticMission/viewDiplomaticTradeOffice/:id": {
      "component": "viewDiplomaticTradeOffice-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    tradeOffices: _.get(data, \"diplomaticMission.tradeOffice.items\", []).map(x => $dynamicUiExtraService.mapCompanyToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.tradeOffice.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}     \n)(data)",
        "query": "query \n  { \n    diplomaticMission(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      tradeOffice (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {          \n        items {\n          company {\n            __typename\n            ... on Company {\n              ...companyCommonProperties   \n            }\n          }\n        }\n        cursor\n      }\n    }\n  }"
      }
    },
    "diplomaticMission/manageDiplomaticOffices/:id": {
      "component": "manageDiplomaticOffices-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {          \n  const canCreateOffice = $dynamicUiExtraService.checkIfCanCreateOffice(data.diplomaticMission); \n\n  const result =  {\n    ...data,\n    offices: _.get(data, \"diplomaticMission.committees\", []).map(x => $dynamicUiExtraService.mapOfficeToItem(x)),\n    canCreateOffice: canCreateOffice\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    diplomaticMission(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      actions {\n        canCreateDiplomaticMissionCommittee\n      }\n\n      committees {\n        diplomaticMissionCommittee {\n          id\n          name\n          statistics {\n            members\n          }                  \n        }\n      }\n    }\n  }"
      }
    },
    "diplomaticMission/viewDiplomaticOffices/:id": {
      "component": "viewDiplomaticOffices-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    offices: _.get(data, \"diplomaticMission.committees\", []).map(x => $dynamicUiExtraService.mapOfficeToItem(x))\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    diplomaticMission(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      committees {\n        diplomaticMissionCommittee {\n          id\n          name\n          statistics {\n            members\n          }                  \n        }\n      }\n    }\n  }"
      }
    },
    "diplomaticMission/viewDiplomaticOfficeDetails/:id": {
      "component": "viewDiplomaticOfficeDetails-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n\n  const canJoinMember = $dynamicUiExtraService.checkIfCanJoinMember(data.diplomaticMissionCommittee); \n  const result =  {\n    ...data,\n    id: $dynamicUiExtraService.getOfficeId(data),\n    name: $dynamicUiExtraService.getOfficeName(data),\n    members: _.get(data, \"diplomaticMissionCommittee.keyStaff.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"diplomaticMissionCommittee.keyStaff.cursor\"),\n    canJoinMember: canJoinMember\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    diplomaticMissionCommittee(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n\n      actions {\n        canJoinMember\n      }\n      \n      keyStaff (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }\n        }\n        cursor\n      }\n    }\n  }"
      }
    },
    "diplomaticMission/manageDiplomaticOfficesDetails/:id": {
      "component": "manageDiplomaticOfficeDetails-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const canRemoveMember = $dynamicUiExtraService.checkIfCanRemoveMember(data.diplomaticMissionCommittee); \n  const canJoinMember = $dynamicUiExtraService.checkIfCanJoinMember(data.diplomaticMissionCommittee); \n  const canEditOffice = $dynamicUiExtraService.checkIfCanEditCommittee(data.diplomaticMissionCommittee); \n  const canDeleteOffice = $dynamicUiExtraService.checkIfCanDeleteCommittee(data.diplomaticMissionCommittee); \n\n  const result =  {\n    ...data,\n    id: $dynamicUiExtraService.getOfficeId(data),\n    name: $dynamicUiExtraService.getOfficeName(data),\n    members: _.get(data, \"diplomaticMissionCommittee.keyStaff.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"diplomaticMissionCommittee.keyStaff.cursor\"),\n\n    canRemoveMember: canRemoveMember,\n    canJoinMember: canJoinMember,\n    canEditOffice: canEditOffice,\n    canDeleteOffice: canDeleteOffice\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    diplomaticMissionCommittee(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n\n      actions {\n        canRemoveMember\n        canJoinMember\n        canUpdate\n        canDelete\n      }\n\n      keyStaff (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }\n        }\n        cursor\n      }\n    }\n  }"
      }
    },
    "diplomaticMission/addDiplomaticOfficeMember/:id": {
      "component": "addDiplomaticOfficeMember-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const canAddMember = $dynamicUiExtraService.checkIfCanAddMember(data.diplomaticMissionCommittee); \n  const canInviteMember = $dynamicUiExtraService.checkIfCanInviteMember(data.diplomaticMissionCommittee); \n\n  const result =  {\n    ...data,\n    members: _.get(data, \"diplomaticMission.verifiedEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    cursor: _.get(data, \"diplomaticMission.verifiedEmployees.cursor\"),\n    canAddMember: canAddMember,\n    canInviteMember: canInviteMember            \n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    diplomaticMissionCommittee(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      actions {\n        canAddMember\n        canInviteMember\n      }\n    }\n\n    diplomaticMission(id: $dynamicUiVariables->$actionHelper.parameters.diplomaticMissionId) {\n      verifiedEmployees(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          role {\n            positionName\n            role\n          }\n          user { \n            ...userBasicDetailsProperties\n          }\n        }\n        cursor\n      }\n    }\n  }"
      }
    },
    "diplomaticMission/addDiplomaticOffice/:id": {
      "component": "addDiplomaticOffice-page-template",
      "withGuard": true
    },
    "diplomaticMission/editDiplomaticOffice/:id": {
      "component": "editDiplomaticOffice-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "localData"
      }
    },
    "diplomaticMission/:id": {
      "component": "diplomatic-page-template",
      "additionalCssClasses": "grayBg",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const canCreateRoleAction = $dynamicUiExtraService.checkIfCanCreateRole(data.diplomaticMission); \n\n  const canInvite = $dynamicUiExtraService.checkIfCanInvite(data.diplomaticMission); \n  const canManage = $dynamicUiExtraService.checkIfCanManage(data.diplomaticMission); \n  const canShare = $dynamicUiExtraService.checkIfCanShare(data.diplomaticMission); \n  const canFollow = $dynamicUiExtraService.checkIfCanFollow(data.diplomaticMission); \n  const canUnFollow = $dynamicUiExtraService.checkIfCanUnFollow(data.diplomaticMission); \n\n  const canSendMessage = $dynamicUiExtraService.checkIfCanSendMessage(data.diplomaticMission); \n  const canAddPost = $dynamicUiExtraService.checkIfCanAddPost(data.diplomaticMission); \n  const canAddEvent = $dynamicUiExtraService.checkIfCanAddEvent(data.diplomaticMission);  \n  const canAddMember = $dynamicUiExtraService.checkIfCanAddMember(data.diplomaticMission);   \n  const canJoin = $dynamicUiExtraService.checkIfCanJoinEntity(data.diplomaticMission);   \n\n  const canUploadImage = $dynamicUiExtraService.checkIfCanUploadImage(data.diplomaticMission);  \n  const canUploadVideoLink = $dynamicUiExtraService.checkIfCanUploadVideoLink(data.diplomaticMission); \n  const canUploadMedia = canUploadImage || canUploadVideoLink;\n\n  const badges = $dynamicUiExtraService.prepareDiplomaticMissionBadges(data.diplomaticMission, canManage);\n  const generalDetailsInfo = $dynamicUiExtraService.prepareDiplomaticMissionInfo(data.diplomaticMission, canManage); \n  const socialMediaInfo = $dynamicUiExtraService.prepareSocialMediaInfo(data.diplomaticMission); \n  const galleryId = $dynamicUiExtraService.getGalleryId(data.diplomaticMission);  \n  const admins = _.get(data, \"diplomaticMission.admins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x));\n\n  const result =  {\n    ...data,\n    members: _.get(data, \"diplomaticMission.employees.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    verifiedKeyStaff: _.get(data, \"diplomaticMission.verifiedDiplomatAndKeyStaff.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    ambassadorialNetworks: _.get(data, \"diplomaticMission.ambassadorialNetwork.items\", []).map(x => $dynamicUiExtraService.mapOrganizationToItem(x)),\n    tradeOffices: _.get(data, \"diplomaticMission.tradeOffice.items\", []).map(x => $dynamicUiExtraService.mapCompanyToItem(x)),\n    supportStaff: _.get(data, \"diplomaticMission.committees\", []).map(x => $dynamicUiExtraService.mapOfficeToItem(x)),\n    gallery: _.get(data, \"diplomaticMission.gallery.mediaGallery.galleryItems.items\", []).map(x => $dynamicUiExtraService.mapGalleryToItem(x)),\n    updates: _.get(data, \"diplomaticMission.updates.items\", []).map(x => $dynamicUiExtraService.mapUpdateToItem(x)),\n    receiverMailboxId: _.get(data, \"diplomaticMission.mailBox.mailBox.id\", null),\n \n    generalDetailsInfo: generalDetailsInfo,\n    socialMediaInfo: socialMediaInfo,\n    galleryId: galleryId,\n    badges: badges,\n    admins: admins, \n\n    canCreateRoleAction: canCreateRoleAction,\n    canAddMember: canAddMember,\n    canInvite: canInvite,\n    canManage: canManage,\n    canShare: canShare,\n    canFollow: canFollow,\n    canUnFollow: canUnFollow,\n    canSendMessage: canSendMessage,\n    canAddPost: canAddPost,\n    canAddEvent: canAddEvent,\n    canUploadMedia: canUploadMedia,\n    canUploadImage: canUploadImage,\n    canUploadVideoLink: canUploadVideoLink,\n    canJoin: canJoin          }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    diplomaticMission(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n      introduction    \n  \n      actions {\n        canInvite\n        canCreateRole\n        canAddPost\n        canAddEvent\n        canAddMember\n\n        canUpdate\n        canShare\n        canFollow\n        canUnfollow\n        canSendMessage \n        canJoin               \n      } \n\n      statistics {\n        followers\n        diplomats\n        keyStaff\n      }\n\n      mailBox {\n        mailBox {\n          id\n        }\n      }\n\n      ...diplomaticPlaces\n      ...diplomaticContactDetails\n      ...diplomaticSocialMedia\n      ...diplomaticMediaGallery\n      ...diplomaticImage\n      ...diplomaticActivities\n\n      verifiedDiplomatAndKeyStaff (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.domainPageSize) {\n        items  {\n          role {\n            positionName\n            role\n          }\n          user {\n            ...userBasicDetailsProperties\n          }\n        }\n      }\n\n      employees(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.domainPageSize) {\n        items {\n          role {\n            positionName\n            role\n          }\n          user {\n            ...userBasicDetailsProperties\n          }   \n        }\n      }\n\n      ambassadorialNetwork (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.domainPageSize) {\n        items  {\n          organization {\n            __typename\n            ... on Organization {\n              ...organizationCommonProperties\n            }\n          }\n        }\n      }\n\n      tradeOffice (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.domainPageSize) {          \n        items {\n          company {\n            __typename\n            ... on Company {\n              ...companyCommonProperties\n            }\n          }\n        }\n      }\n\n      committees {\n        diplomaticMissionCommittee {\n          id\n          name\n          statistics {\n            members\n          }                  \n        }\n      }\n\n      admins(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.domainPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }\n        }\n      }\n  \n    }\n  }"
      }
    },
    "searchForCompany": {
      "component": "searchForCompany-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "localData"
      }
    },
    "searchForOrganization": {
      "component": "searchForOrganization-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "localData"
      }
    },
    "reportPage": {
      "component": "report-page-template",
      "withGuard": true
    },
    "requestToBeFeature": {
      "component": "requestToBeFeature-page-template",
      "withGuard": true
    },
    "advertiseWithUs": {
      "component": "advertiseWithUs-page-template",
      "withGuard": true
    },
    "aboutUs": {
      "component": "aboutUs-page-template",
      "withGuard": true
    },
    "changePassword": {
      "component": "changePassword-page-template",
      "withGuard": true
    },
    "manageAccounts": {
      "component": "manageAccounts-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const municipalityId =_.get(data, \"user.municipality.municipality.id\", null);\n  const cityOriginId = _.get(data, \"user.placeOfOrigin.city.lookupId\", null);\n\n  const roles = _.get(data, \"user.roles\", []).map(x => $dynamicUiExtraService.mapUserRolesToItem(x, cityOriginId)).filter(item => item.hasAdminRole);\n\n  const entitiesRoles = roles.filter((value, index, array) => array.findIndex(role => role.id === value.id) === index);\n\n  const result =  {   \n    municipalityId: municipalityId,\n    entitiesRoles: entitiesRoles   \n  }\n  $actionHelper.printData({data, result});\n  return result;\n}\n)(data)",
        "query": "query   { \n  user(id: $dynamicUiVariables->initialDataSource.profileId) { \n    id\n    firstName\n    lastName\n\n    placeOfOrigin {\n      city {\n        lookupId\n        name\n      }\n    }\n\n    municipality {\n      municipality {\n        id\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n      }\n    }            \n\n    roles {                 \n      role {\n        role\n        positionName\n        featured\n      }\n\n      entity {\n        __typename ... on Organization{\n          id\n          name\n          actions {\n            canUpdate\n          } \n                             \n          photoCover {\n            imageUrl\n            imageThumbnailUrl\n          }        \n          mailBox {\n            mailBox {\n              id\n            }\n          }                       \n        }\n        __typename ... on DiplomaticMission{\n          id\n          name\n          actions {\n            canUpdate\n          }                                \n          photoCover {\n            imageUrl\n            imageThumbnailUrl\n          }        \n          \n          mailBox {\n            mailBox {\n              id\n            }\n          }                       \n        }\n        __typename ... on Company{\n          id\n          name\n          actions {\n            canUpdate\n          }                                                 \n          photoCover {\n            imageUrl\n            imageThumbnailUrl\n          }\n          mailBox {\n            mailBox {\n              id\n            }\n          }                      \n        }\n        __typename ... on Municipality{\n          id\n          name: title\n          actions {\n            canUpdate\n          }                                \n                     \n          photoCover {\n            imageUrl\n            imageThumbnailUrl\n          }    \n          mailBox {\n            mailBox {\n              id\n            }\n          }                              \n        }\n        __typename ... on OrganizationCommittee {\n          id\n          name\n          organization {\n            organization {\n              id\n              name\n              actions {\n                canUpdate\n              }                                \n\n              photoCover {\n                imageUrl\n                imageThumbnailUrl\n              }      \n              place {\n                country {\n                  lookupId\n                  name\n                  isoCode\n                }\n                city {\n                  lookupId\n                  name\n                }\n              }  \n\n              mailBox {\n                mailBox {\n                  id\n                }\n              }                                                  \n            }\n          }              \n        }\n        __typename ... on DiplomaticMissionCommittee {\n          id\n          name\n          diplomaticMission {\n            diplomaticMission {\n              id \n              name\n              actions {\n                canUpdate\n              }                                \n\n              photoCover {\n                imageUrl\n                imageThumbnailUrl\n              }\n              place {\n                country {\n                  lookupId\n                  name\n                  isoCode\n                }\n                city {\n                  lookupId\n                  name\n                }\n              } \n\n              mailBox {\n                mailBox {\n                  id\n                }\n              }                                         \n            }\n          }              \n        }                      \n      }\n    }\n  } \n}"
      }
    },
    "conversations/:type/:id": {
      "component": "conversations-domain-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "(async (data) => {\n\n  const domainType = $activatedRoute.snapshot.params.type;\n  const selectedMailbox = _.get(data, domainType + '.mailBox', null);\n  const targetMailbox = $dynamicUiExtraService.mapMailboxToItem(selectedMailbox);\n  \n  const messagesResponse = await $dynamicUiExtraService.getMailboxConversations(targetMailbox.lookupId);\n  const messages = messagesResponse.messages;\n  const cursor = messagesResponse.cursor; \n\n  const result =  {\n    messages: messages,\n    targetMailbox: targetMailbox,\n    cursor: cursor\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n)(data)",
        "query": "query \n  { \n    $dynamicUiExpression((|$activatedRoute.snapshot.params.type|))(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      mailBox {\n        mailBox {\n          id\n          owner {\n            entity {\n              __typename ... on User {\n                id\n                firstName\n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Company {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Organization {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on DiplomaticMission {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Municipality {\n                id\n                name: title\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            }\n          }                  \n        }\n      }\n    }\n  }"
      }
    },
    "notifications": {
      "component": "notifications-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const result =  {\n    ...data,\n    notifications:  _.get(data, \"notification.userNotifications.items\", []).map(x => $dynamicUiExtraService.mapNotificationToItem(x)),\n    notificationCursor: _.get(data, \"notification.userNotifications.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query{\n  notification{\n    userNotifications (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize ) {\n      items{\n        id\n        message\n        createdDate\n        read\n        object{\n          __typename ... on User {\n            id \n            firstName\n            lastName\n            photoCover {\n              imageUrl\n              image: imageThumbnailUrl\n            }\n          }          \n          __typename ... on Municipality {\n            id\n            name: title\n            photoCover {\n              imageUrl\n              image: imageThumbnailUrl\n            }\n          }\n          __typename ... on Company{\n            id\n            name\n            photoCover {\n              imageUrl\n              image: imageThumbnailUrl\n            }            \n          }\n          __typename ... on Organization {\n            id\n            name\n            photoCover {\n              imageUrl\n              image: imageThumbnailUrl\n            }            \n          }\n          __typename ... on OrganizationCommittee {\n            id\n            name\n            organization {\n              organization {\n                id\n                photoCover {\n                  imageUrl\n                  image: imageThumbnailUrl\n                }                                          \n              }\n            }\n          }\n          __typename ... on DiplomaticMission {\n            id\n            name\n            photoCover {\n              imageUrl\n              image: imageThumbnailUrl\n            }            \n          }\n          __typename ... on DiplomaticMissionCommittee {\n            id \n            name          \n            diplomaticMission {\n              diplomaticMission {\n                photoCover {\n                  imageUrl\n                  image: imageThumbnailUrl\n                }                  \n              }\n            }\n          }        \n          __typename ... on Offer {\n            id\n            name\n            photoCover {\n              imageUrl\n              image: imageThumbnailUrl\n            }            \n          }         \n          __typename ... on Event {\n            id\n            name: title\n            photoCover {\n              imageUrl\n              image: imageThumbnailUrl\n            }            \n          }      \n          __typename ... on Post {\n            id\n            name: title\n            photoCover {\n              imageUrl\n              image: imageThumbnailUrl\n            }            \n          }\n          __typename ... on Conversation {\n            id\n            fromMailBoxId\n            toMailBoxId\n          \n            receiver {\n              id\n              owner {\n                entity {                      \n                  __typename ... on User {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Company {\n                    id\n                    name\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Organization {\n                    id\n                    name\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on DiplomaticMission {\n                    id\n                    name\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Municipality {\n                    id\n                    name: title\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                }\n              }\n            }\n\n            sender {\n              id\n              owner {\n                entity {                          \n                  __typename ... on User {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Company {\n                    id\n                    name\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Organization {\n                    id\n                    name\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on DiplomaticMission {\n                    id\n                    name\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Municipality {\n                    id\n                    name: title\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                }\n              }\n            }\n          }\n          __typename ... on Comment {\n            id\n            text\n\n            creater {\n              user {\n                id\n                firstName\n                lastName\n                photoCover {\n                  imageUrl\n                  image: imageThumbnailUrl\n                }\n              }\n            }\n\n            listUnder {\n              entity {\n                __typename ... on Event {\n                  id\n                  owner {\n                    __typename ... on Company {\n                      name\n                      photoCover {\n                        imageUrl\n                        imageThumbnailUrl\n                      }\n                    }\n                    __typename ... on Organization {\n                      name\n                      photoCover {\n                        imageUrl\n                        imageThumbnailUrl\n                      }\n                    }\n                    __typename ... on DiplomaticMission {\n                      name \n                      photoCover {\n                        imageUrl\n                        imageThumbnailUrl\n                      }\n                    }\n                    __typename ...  on Municipality {\n                      name: title\n                      photoCover {\n                        imageUrl\n                        imageThumbnailUrl\n                      }\n                    }\n                  }\n                }\n                __typename ... on Post {\n                  id\n                  owner {\n                    __typename ... on User {\n                      firstName\n                      lastName\n                      photoCover {\n                        imageUrl\n                        imageThumbnailUrl\n                      }                              \n                    }\n                    __typename ... on Company {\n                      name\n                      photoCover {\n                        imageUrl\n                        imageThumbnailUrl\n                      }\n                    }\n                    __typename ... on Organization {\n                      name\n                      photoCover {\n                        imageUrl\n                        imageThumbnailUrl\n                      }\n                    }\n                    __typename ... on DiplomaticMission {\n                      name \n                      photoCover {\n                        imageUrl\n                        imageThumbnailUrl\n                      }\n                    }\n                    __typename ...  on Municipality {\n                      name: title\n                      photoCover {\n                        imageUrl\n                        imageThumbnailUrl\n                      }\n                    }\n                  }                          \n                }\n                __typename ... on Offer {\n                  id\n                  owner {\n                    __typename ... on Company {\n                      name\n                      photoCover {\n                        imageUrl\n                        imageThumbnailUrl\n                      }\n                    }\n                  }                          \n                }\n              }\n            }\n          }\n        }\n      }\n      cursor\n    }\n  }\n}"
      }
    },
    "manage/notifications": {
      "component": "manage-notifications-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const notificationSettings = $dynamicUiExtraService.prepareNotificationSettings(data.notification.notificationSettings); \n\n  const result =  {\n    initiallNotifications: _.get(data, \"notification.notificationSettings\", []),\n    notificationSettings:  notificationSettings\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query {\n  notification{\n    notificationSettings{\n      id\n      description\n      emailEnabled\n      pushEnabled\n      group\n    }\n  }\n}"
      }
    },
    "savedPosts": {
      "component": "saved-posts-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const result =  {\n    favoriteCards: _.get(data, 'user.favorites.items', []).map(x => $dynamicUiExtraService.mapFavoriteCardToItem(x)),\n    cursor:  _.get(data, 'user.favorites.cursor', null)\n  }\n  \n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query \n  { \n    user(id: $dynamicUiVariables->initialDataSource.profileId) {\n      favorites(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          entity {\n            __typename ... on Event {\n                id\n                title\n                description\n              \n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n                creater {\n                  user {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                } \n\n                owner {\n                  __typename ... on User {\n                    id\n                    firstName \n                    lastName\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on  Municipality {\n                    id\n                    name: title\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on Company {\n                    id\n                    name\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on Organization {\n                    id\n                    name\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on DiplomaticMission {\n                    id\n                    name\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                }   \n\n                createdDate\n            }\n\n            __typename ... on Post {\n                id\n                title\n                description\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n                creater {\n                  user {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                } \n\n                owner {\n                  __typename ... on User {\n                    id\n                    firstName \n                    lastName\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on  Municipality {\n                    id\n                    name: title\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on Company {\n                    id\n                    name\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on Organization {\n                    id\n                    name\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on DiplomaticMission {\n                    id\n                    name\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                }                          \n                createdDate            \n            }\n\n            __typename ... on Offer {\n                id\n                type\n                name\n                description\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n\n                creater {\n                  user {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                }\n\n                owner {\n                  id\n                  name\n                  photoCover {\n                    imageUrl\n                    imageThumbnailUrl\n                  }\n                }\n                \n                createdDate\n                createdBy\n            }        \n          }\n        }\n        cursor\n      }\n    }\n  }"
      }
    },
    "conversationMessages/:targetType/:targetId/:senderMailboxId/:receiverMailboxId": {
      "component": "conversation-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "(async (data) => {\n  const fromMailBoxId = $activatedRoute.snapshot.params.senderMailboxId;\n  const toMailBoxId =  $activatedRoute.snapshot.params.receiverMailboxId;\n\n  const conversationId = _.get(data, 'conversation.getConversation.id', null)\n  const conversationDetails = await $dynamicUiExtraService.getConversationDetails(conversationId);\n  const mailboxName = $dynamicUiExtraService.getConversationDetailsSenderMailboxId(conversationDetails.conversation) === fromMailBoxId ? \n                        $dynamicUiExtraService.getConversationDetailsReceiverTypeMailbox(conversationDetails.conversation) === 'User' ? ($dynamicUiExtraService.getConversationDetailsReceiverFirstNameMailbox(conversationDetails.conversation) + ' ' + $dynamicUiExtraService.getConversationDetailsReceiverLastNameMailbox(conversationDetails.conversation)) : ($dynamicUiExtraService.getConversationDetailsReceiverNameMailbox(conversationDetails.conversation)):\n                        $dynamicUiExtraService.getConversationDetailsSenderTypeMailbox(conversationDetails.conversation) === 'User' ? ($dynamicUiExtraService.getConversationDetailsSenderFirstNameMailbox(conversationDetails.conversation) + ' ' + $dynamicUiExtraService.getConversationDetailsSenderLastNameMailbox(conversationDetails.conversation)) : ($dynamicUiExtraService.getConversationDetailsSenderNameMailbox(conversationDetails.conversation));\n \n  const conversationMessages =  _.get(conversationDetails, 'conversation.messages.items', []).map(x => $dynamicUiExtraService.mapToConversationMessages(x, fromMailBoxId));\n  const messages = conversationMessages.reverse();\n\n  const senderId =  $dynamicUiExtraService.getConversationDetailsSenderMailboxId(conversationDetails.conversation) === fromMailBoxId ? $dynamicUiExtraService.getConversationDetailsSenderIdMailbox(conversationDetails.conversation) : $dynamicUiExtraService.getConversationDetailsReceiverIdMailbox(conversationDetails.conversation);\n  const senderName = $dynamicUiExtraService.getConversationDetailsSenderMailboxId(conversationDetails.conversation) === fromMailBoxId ? ($dynamicUiExtraService.getConversationDetailsSenderTypeMailbox(conversationDetails.conversation) === 'User' ? ($dynamicUiExtraService.getConversationDetailsSenderFirstNameMailbox(conversationDetails.conversation) + ' ' + $dynamicUiExtraService.getConversationDetailsSenderLastNameMailbox(conversationDetails.conversation)) : ($dynamicUiExtraService.getConversationDetailsSenderNameMailbox(conversationDetails.conversation))): \n                                                                                      ($dynamicUiExtraService.getConversationDetailsReceiverTypeMailbox(conversationDetails.conversation) === 'User' ? ($dynamicUiExtraService.getConversationDetailsReceiverFirstNameMailbox(conversationDetails.conversation) + ' ' + $dynamicUiExtraService.getConversationDetailsReceiverLastNameMailbox(conversationDetails.conversation)) : ($dynamicUiExtraService.getConversationDetailsReceiverNameMailbox(conversationDetails.conversation)));         \n  const senderImage =  $dynamicUiExtraService.getConversationDetailsSenderMailboxId(conversationDetails.conversation) === fromMailBoxId ? $dynamicUiExtraService.getConversationDetailsSenderImageMailbox(conversationDetails.conversation) : $dynamicUiExtraService.getConversationDetailsReceiverImageMailbox(conversationDetails.conversation);\n\n  $dynamicUiExtraService.setMessagesAsRead($actionHelper.getGraphQL, conversationId);\n\n  const result =  {\n    messages: messages,\n    cursor:  _.get(conversationDetails, 'conversation.messages.cursor', null),\n    mailboxName: mailboxName,\n    conversationId: conversationId,\n    fromMailBoxId: fromMailBoxId,\n    toMailBoxId: toMailBoxId,\n    senderId: senderId,\n    senderName: senderName,\n    senderImage: senderImage\n  }\n  \n  $actionHelper.printData({ result, conversationDetails })\n  return result;\n}   \n)(data)",
        "query": "mutation { \n  conversation {\n    getConversation(fromMailBoxId: $dynamicUiVariables->$activatedRoute.snapshot.params.senderMailboxId, toMailBoxId: $dynamicUiVariables->$activatedRoute.snapshot.params.receiverMailboxId) {\n      id\n    }\n  }   \n}"
      }
    },
    "activities/:id": {
      "component": "activities-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const result =  {\n    activities: _.get(data, 'user.activities.items', []).map(x => $dynamicUiExtraService.mapUserActivitiesToItem(x)),\n    cursor:  _.get(data, 'user.activities.cursor', null)\n  }\n  \n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query \n  { \n    user(id: $dynamicUiVariables->initialDataSource.profileId) {\n      activities(after: null, first: 10) {\n        items {\n          __typename ... on UserNewPost {\n            object {\n              ...postProperties\n            }\n          }\n\n          __typename ... on CompanyNewPost {\n            object {\n            ...postProperties\n            }\n          }\n          \n          __typename ... on CompanyNewEvent {\n            object {\n              ...eventProperties\n            }\n          }\n\n          __typename ... on MunicipalityNewPost {\n            object {\n              ...postProperties\n            }\n          }\n          \n          __typename ... on MunicipalityNewEvent {\n            object {\n              ...eventProperties\n            }\n          }\n          \n          __typename ... on OrganizationNewPost {\n            object {\n            ...postProperties          \n            }\n          }\n          \n          __typename ... on OrganizationNewEvent {\n            object {\n              ...eventProperties\n            }\n          }\n          \n          __typename ... on DiplomaticMissionNewPost {\n            object {\n            ...postProperties          \n            }\n          }\n          \n          __typename ... on DiplomaticMissionNewEvent {\n            object {\n              ...eventProperties\n            }\n          }   \n        }\n        cursor\n      }              \n    }\n  }"
      }
    },
    "organization/createNewOrganization": {
      "component": "createOrganization-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "localData"
      }
    },
    "organization/edit/:id": {
      "component": "editOrganization-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {     \n  const result =  {\n    ...data,\n    actions: _.get(data, \"organization.actions\", {})\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    organization(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n      description      \n      organizationType\n      organizationCategory\n\n      actions {\n        canUploadLogo\n      }                 \n      ...organizationPlaces\n      ...organizationImage\n      ...organizationContactDetails\n      ...organizationSocialMedia\n    }\n  }"
      }
    },
    "organization/manageOrganization/:id": {
      "component": "manageOrganization-page-template",
      "withGuard": true
    },
    "organization/manageOrganizationMembers/:id": {
      "component": "manageOrganizationMembers-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    verifiedMembers: _.get(data, \"organization.verifiedEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    unverifiedMembers: _.get(data, \"organization.pendingEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    verifiedMembersCursor: _.get(data, \"organization.verifiedEmployees.cursor\"),\n    unverifiedMembersCursor: _.get(data, \"organization.pendingEmployees.cursor\"),\n    actions: _.get(data, \"organization.actions\", {})\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    organization(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      \n      actions { \n        canApproveMember\n        canRemoveMember\n      } \n\n      verifiedEmployees(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          role {\n            positionName\n            role\n          }\n          user {\n            ...userBasicDetailsProperties\n          }   \n        }\n        cursor\n      }  \n\n      pendingEmployees(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          role {\n            positionName\n            role\n          }\n          user {\n            ...userBasicDetailsProperties\n          }   \n        }\n        cursor\n      }                              \n    }\n  }"
      }
    },
    "organization/viewOrganizationMembers/:id": {
      "component": "viewOrganizationMembers-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    verifiedMembers: _.get(data, \"organization.employees.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    cursor: _.get(data, \"organization.employees.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    organization(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      employees(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          role {\n            positionName\n            role\n          }\n          user {\n            ...userBasicDetailsProperties\n          }   \n        }\n        cursor\n      }                            \n    }\n  }"
      }
    },
    "organization/viewOrganizationAdministrator/:id": {
      "component": "viewOrganizationAdministrator-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    admins: _.get(data, \"organization.admins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"organization.admins.cursor\"),\n    actions: _.get(data, \"organization.actions\", {})\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    organization(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      actions { \n        canRemoveAdmin\n      } \n\n      admins {\n        items {\n          user {\n            ...userCommonProperties\n          }    \n        }\n        cursor\n      }           \n    }\n  }"
      }
    },
    "organization/manageOrganizationAdministrator/:id": {
      "component": "manageOrganizationAdministrator-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    admins: _.get(data, \"organization.admins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"organization.admins.cursor\"),\n    actions: _.get(data, \"organization.actions\", {})\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    organization(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      actions { \n        canRemoveAdmin\n      } \n\n      admins {\n        items {\n          user {\n            ...userCommonProperties\n          }    \n        }\n        cursor\n      }           \n    }\n  }"
      }
    },
    "organization/addOrganizationAdministrator/:id": {
      "component": "addOrganizationAdministrator-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    verifiedMembers: _.get(data, \"organization.verifiedEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    cursor: _.get(data, \"organization.verifiedEmployees.cursor\"),\n    actions: _.get(data, \"organization.actions\", {})\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    organization(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n      ...organizationImage\n\n      actions { \n        canAddAdmin\n        canInviteAdmin\n      } \n\n      verifiedEmployees(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          role {\n            positionName\n            role\n          }\n          user {\n            ...userBasicDetailsProperties\n          }   \n        }\n        cursor\n      }            \n    }\n  }"
      }
    },
    "organization/manageOrganizationAffiliations/:id": {
      "component": "manageOrganizationAffiliations-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    currentAffiliations: _.get(data, \"organization.currentAffiliations.items\", []).map(x => $dynamicUiExtraService.mapCompanyToItem(x)),\n    requestedAffiliations: _.get(data, \"organization.requestedAffiliations.items\", []).map(x => $dynamicUiExtraService.mapCompanyToItem(x)),\n    currentAffiliationsCursor: _.get(data, \"organization.currentAffiliations.cursor\"),\n    requestedAffiliationsCursor: _.get(data, \"organization.requestedAffiliations.cursor\"),\n    actions: _.get(data, \"organization.actions\", {})\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    organization(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      actions { \n        canApproveAffiliatedCompany\n        canRemoveAffiliatedCompany\n        canAddAffiliatedCompany\n      } \n\n      currentAffiliations (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          company {\n            ...companyCommonProperties\n          }   \n        }\n        cursor\n      }\n\n      requestedAffiliations (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          company {\n            ...companyCommonProperties\n          }   \n        }\n        cursor\n      }\n    }\n  }"
      }
    },
    "organization/viewOrganizationAffiliations/:id": {
      "component": "viewOrganizationAffiliations-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    currentAffiliations: _.get(data, \"organization.currentAffiliations.items\", []).map(x => $dynamicUiExtraService.mapCompanyToItem(x)),\n    cursor: _.get(data, \"organization.currentAffiliations.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    organization(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      currentAffiliations (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          company {\n            ...companyCommonProperties\n          }   \n        }\n        cursor\n      }\n    }\n  }"
      }
    },
    "organization/manageOrganizationChapters/:id": {
      "component": "manageOrganizationChapters-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "(async(data) => {\n  const result =  {\n    ...data,\n    incomingChaptersRequests: _.get(data, \"organization.incomingChaptersRequests.items\", []).map(x => $dynamicUiExtraService.mapOrganizationToItem(x)),\n    outgoingChaptersRequests: _.get(data, \"organization.outgoingChaptersRequests.items\",[]).map(x => $dynamicUiExtraService.mapOrganizationToItem(x)),\n    incomingChaptersRequestsCursor: _.get(data, \"organization.incomingChaptersRequests.cursor\"),\n    outgoingChaptersRequestsCursor: _.get(data, \"organization.outgoingChaptersRequests.cursor\"),\n    actions: _.get(data, \"organization.actions\", {})\n  }\n\n  const parentChapterResponse = await $dynamicUiExtraService.getOrganizationParentChapters($activatedRoute.snapshot.params.id, $actionHelper);\n  const rootChapterId = parentChapterResponse.rootChapterId;\n  const hasParentChapter = parentChapterResponse.hasParentChapter;\n  const parentChapterId = parentChapterResponse.parentChapterId;\n\n  let chaptersTree = [];\n  if(hasParentChapter) {\n    chaptersTree = await $dynamicUiExtraService.prepareOrganizationChildChapters(rootChapterId, $actionHelper, $activatedRoute.snapshot.params.id);\n  }\n\n  result.chaptersTree = chaptersTree;\n  result.parentChapterId = parentChapterId;\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n)(data)",
        "query": "query \n  { \n    organization(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      actions { \n        canAddParentEntity\n        canRemoveChapterEntity\n        canApproveChapter\n      } \n\n      incomingChaptersRequests(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          organization {\n            ...organizationCommonProperties\n          }\n        }\n        cursor\n      }   \n      outgoingChaptersRequests(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          organization {\n            ...organizationCommonProperties\n          }\n        }\n        cursor\n      }   \n    }\n  }"
      }
    },
    "organization/viewOrganizationChapters/:id": {
      "component": "viewOrganizationChapters-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "(async(data) => {\n  const parentChapterResponse = $dynamicUiExtraService.prepareOrganizationParentChapters(data);\n  const rootChapterId = parentChapterResponse.rootChapterId;\n  const hasParentChapter = parentChapterResponse.hasParentChapter;\n  const parentChapterId = parentChapterResponse.parentChapterId;\n\n  let chaptersTree = [];\n  if(hasParentChapter) {\n    chaptersTree = await $dynamicUiExtraService.prepareOrganizationChildChapters(rootChapterId, $actionHelper, $activatedRoute.snapshot.params.id);\n  }\n  \n  return {chaptersTree: chaptersTree, parentChapterId: parentChapterId};\n}\n\n)(data)",
        "query": "query \n  { \n    organization(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n      organizationType\n      organizationCategory\n\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }   \n\n      place {\n        country {\n          lookupId\n          isoCode\n          name\n        }\n        city{\n          lookupId \n          name\n        }\n      } \n      ...organizationParentChapters\n    }\n  }"
      }
    },
    "organization/manageOrganizationCommittees/:id": {
      "component": "manageOrganizationCommittees-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const canCreateCommittee = $dynamicUiExtraService.checkIfCanCreateCommittee(data.organization); \n  \n  const result =  {\n    ...data,\n    committees: _.get(data, \"organization.committees\", []).map(x => $dynamicUiExtraService.mapCommitteeToItem(x)),\n    canCreateCommittee: canCreateCommittee\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    organization(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      actions {\n        canCreateOrganizationCommitte\n      }\n\n      committees {\n        organizationCommittee {\n          id\n          name\n          statistics {\n            members\n          }                  \n        }\n      }\n    }\n  }"
      }
    },
    "organization/viewOrganizationCommittees/:id": {
      "component": "viewOrganizationCommittees-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    committees: _.get(data, \"organization.committees\", []).map(x => $dynamicUiExtraService.mapCommitteeToItem(x)),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    organization(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      committees {\n        organizationCommittee {\n          id\n          name\n          statistics {\n            members\n          }                  \n        }\n      }\n    }\n  }"
      }
    },
    "organization/addOrganizationCommittee/:id": {
      "component": "addOrganizationCommittee-page-template",
      "withGuard": true
    },
    "organization/editOrganizationCommittee/:id": {
      "component": "editOrganizationCommittee-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "localData"
      }
    },
    "organization/manageCommitteeDetails/:id": {
      "component": "manageOrganizationCommitteeDetails-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {         \n\n  const canRemoveMember = $dynamicUiExtraService.checkIfCanRemoveMember(data.organizationCommittee); \n  const canJoinMember = $dynamicUiExtraService.checkIfCanJoinMember(data.organizationCommittee); \n  const canEditCommittee = $dynamicUiExtraService.checkIfCanEditCommittee(data.organizationCommittee); \n  const canDeleteCommittee = $dynamicUiExtraService.checkIfCanDeleteCommittee(data.organizationCommittee); \n\n  const result =  {\n    ...data,\n    id:  $dynamicUiExtraService.getCommitteeId(data),\n    name: $dynamicUiExtraService.getCommitteeName(data),\n    members: _.get(data, \"organizationCommittee.employees.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"organizationCommittee.employees.cursor\"),\n\n    canRemoveMember: canRemoveMember,\n    canJoinMember: canJoinMember,\n    canEditCommittee: canEditCommittee,\n    canDeleteCommittee: canDeleteCommittee         \n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    organizationCommittee(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n      actions {\n        canRemoveMember\n        canJoinMember\n        canUpdate\n        canDelete\n      }\n\n      employees (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }\n        }\n        cursor\n      }\n    }\n  }"
      }
    },
    "organization/viewOrganizationCommitteeDetails/:id": {
      "component": "viewOrganizationCommitteeDetails-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n\n  const canJoinMember = $dynamicUiExtraService.checkIfCanJoinMember(data.organizationCommittee); \n\n  const result =  {\n    ...data,\n    id:  $dynamicUiExtraService.getCommitteeId(data),\n    name: $dynamicUiExtraService.getCommitteeName(data),\n    members: _.get(data, \"organizationCommittee.employees.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"organizationCommittee.employees.cursor\"),\n    canJoinMember: canJoinMember\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    organizationCommittee(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n\n      actions {\n        canJoinMember\n      }\n\n      employees (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }\n        }\n        cursor\n      }\n    }\n  }"
      }
    },
    "organization/addOrganizationCommitteeMember/:id": {
      "component": "addOrganizationCommitteeMember-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  \n  const canAddMember = $dynamicUiExtraService.checkIfCanAddMember(data.organizationCommittee); \n  const canInviteMember = $dynamicUiExtraService.checkIfCanInviteMember(data.organizationCommittee); \n\n  const result =  {\n    ...data,\n    members: _.get(data, \"organization.verifiedEmployees.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    cursor: _.get(data, \"organization.verifiedEmployees.cursor\"),\n    canAddMember: canAddMember,\n    canInviteMember: canInviteMember\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    organizationCommittee(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      actions {\n        canAddMember\n        canInviteMember\n      }\n    }\n\n    organization(id: $dynamicUiVariables->$actionHelper.parameters.organizationId) {\n      verifiedEmployees(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          role {\n            positionName\n            role\n          }\n          user {\n            ...userBasicDetailsProperties\n          }   \n        }\n        cursor\n      }                            \n    }\n  }"
      }
    },
    "organization/followers/:id": {
      "component": "followersOrganization-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    followers: _.get(data, \"organization.followers.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"organization.followers.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    organization(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      followers(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }   \n        }\n        cursor      \n      }               \n    }\n  }"
      }
    },
    "organization/leaderships/:id": {
      "component": "leadershipsOrganization-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    leaderShips: _.get(data, \"organization.leaderships\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    organization(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      leaderships {\n        role {\n          positionName\n          role\n        }\n        user {\n          ...userBasicDetailsProperties\n        }   \n      }           \n    }\n  }"
      }
    },
    "organization/claimOrganization/:id": {
      "component": "claim-organization-page-template",
      "withGuard": true
    },
    "organization/:id": {
      "component": "organization-page-template",
      "additionalCssClasses": "grayBg",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const canCreateRoleAction = $dynamicUiExtraService.checkIfCanCreateRole(data.organization); \n\n  const canManage = $dynamicUiExtraService.checkIfCanManage(data.organization); \n  const canInvite = $dynamicUiExtraService.checkIfCanInvite(data.organization); \n  const canShare = $dynamicUiExtraService.checkIfCanShare(data.organization); \n  const canFollow = $dynamicUiExtraService.checkIfCanFollow(data.organization); \n  const canUnFollow = $dynamicUiExtraService.checkIfCanUnFollow(data.organization); \n  \n  const canSendMessage = $dynamicUiExtraService.checkIfCanSendMessage(data.organization); \n  const canAddPost = $dynamicUiExtraService.checkIfCanAddPost(data.organization); \n  const canAddEvent = $dynamicUiExtraService.checkIfCanAddEvent(data.organization);  \n  const canAddMember = $dynamicUiExtraService.checkIfCanAddMember(data.organization);   \n  const canJoin = $dynamicUiExtraService.checkIfCanJoinEntity(data.organization);   \n\n  const badges = $dynamicUiExtraService.prepareOrganizationBadges(data.organization, canManage);\n\n  const generalDetailsInfo = $dynamicUiExtraService.prepareOrganizationInfo(data.organization, canManage); \n  const socialMediaInfo = $dynamicUiExtraService.prepareSocialMediaInfo(data.organization); \n  const galleryId = $dynamicUiExtraService.getGalleryId(data.organization);  \n\n  const canUploadImage = $dynamicUiExtraService.checkIfCanUploadImage(data.organization);  \n  const canUploadVideoLink = $dynamicUiExtraService.checkIfCanUploadVideoLink(data.organization); \n  const canUploadMedia = canUploadImage || canUploadVideoLink;\n\n  const parentOrganization = _.get(data, \"organization.parent\", []).length > 0 ? _.get(data, \"organization.parent\")[0] : null;\n  const prepareChildChapters = $dynamicUiExtraService.prepareChildChapters(data.organization);\n  const chapterList = $dynamicUiExtraService.prepareTreeForOrganizationPage(parentOrganization, prepareChildChapters);\n  const admins = _.get(data, \"organization.admins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x));\n\n  const result =  {\n    ...data,\n    members: _.get(data, \"organization.employees.items\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    leaderShips: _.get(data, \"organization.leaderships\", []).map(x => $dynamicUiExtraService.mapUserWithRoleToItem(x)),\n    chapters: chapterList ? chapterList.map(x => $dynamicUiExtraService.mapOrganizationToTreeItem(x)) : [],\n    currentAffiliations: _.get(data, \"organization.currentAffiliations.items\", []).map(x => $dynamicUiExtraService.mapCompanyToItem(x)),\n    committees: _.get(data, \"organization.committees\", []).map(x => $dynamicUiExtraService.mapCommitteeToItem(x)),\n    gallery: _.get(data, \"organization.gallery.mediaGallery.galleryItems.items\", []).map(x => $dynamicUiExtraService.mapGalleryToItem(x)),\n    updates: _.get(data, \"organization.updates.items\", []).map(x => $dynamicUiExtraService.mapUpdateToItem(x)),\n    receiverMailboxId: _.get(data, \"organization.mailBox.mailBox.id\", null),\n    admins: admins,\n\n    generalDetailsInfo: generalDetailsInfo,\n    socialMediaInfo: socialMediaInfo,\n    galleryId: galleryId,\n    badges: badges,\n\n    canCreateRoleAction: canCreateRoleAction,\n    canAddMember: canAddMember,\n    canInvite: canInvite,\n    canManage: canManage,\n    canShare: canShare,\n    canFollow: canFollow,\n    canUnFollow: canUnFollow,\n    canSendMessage: canSendMessage,\n    canAddPost: canAddPost,\n    canAddEvent: canAddEvent,\n    canUploadMedia: canUploadMedia,\n    canUploadImage: canUploadImage,\n    canUploadVideoLink: canUploadVideoLink,\n    canJoin: canJoin\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query  \n  { \n    organization(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      name\n      organizationType\n      organizationCategory\n      description\n\n      ...organizationImage\n      ...organizationPlaces\n      ...organizationContactDetails\n      ...organizationImage\n      ...organizationSocialMedia\n      ...organizationMediaGallery\n      ...organizationActivities\n\n      statistics {\n        followers\n        boardMembers\n        president\n      }\n\n      actions {\n          canUpdate\n          canShare\n          canFollow\n          canUnfollow\n          canSendMessage\n          canInvite\n          canAddMember\n          canJoin\n\n          canCreateRole\n          canAddPost\n          canAddEvent\n      }     \n\n      mailBox {\n        mailBox {\n          id\n        }\n      }                           \n      \n      parent{\n        ...organizationParentChapter   \n      }\n\n      chapters{\n        ...organizationChildChapter\n      }\n\n      leaderships {\n        role {\n          positionName\n          role\n        }\n        user {\n          ...userBasicDetailsProperties\n        }   \n      }\n\n      employees(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.domainPageSize) {\n        items {\n          role {\n            positionName\n            role\n          }\n\n          user {\n            ...userBasicDetailsProperties\n          }   \n        }\n      }  \n\n      currentAffiliations(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.domainPageSize) {\n        items {\n          company {\n            ...companyCommonProperties   \n          }   \n        }\n      }\n\n      committees {\n        organizationCommittee {\n          id\n          name\n          statistics {\n            members\n          }                  \n        }\n      } \n\n      admins(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.domainPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }\n        }\n      }\n    }\n  }"
      }
    },
    "profile/addCompanyRole/:id": {
      "component": "addCompanyRole-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "localData"
      }
    },
    "profile/editCompanyRole/:id": {
      "component": "editCompanyRole-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "localData"
      }
    },
    "profile/addOrganizationRole/:id": {
      "component": "addOrganizationRole-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "localData"
      }
    },
    "profile/editOrganizationRole/:id": {
      "component": "editOrganizationRole-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "localData"
      }
    },
    "profile/addDiplomaticRole/:id": {
      "component": "addDiplomaticRole-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "localData"
      }
    },
    "profile/editDiplomaticRole/:id": {
      "component": "editDiplomaticRole-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "localData"
      }
    },
    "profile/manageProfile/:id": {
      "component": "manageprofile-page-template",
      "withGuard": true
    },
    "profile/edit/:id": {
      "component": "editprofile-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const canUpdatePhoto = $dynamicUiExtraService.checkIfUserCanUploadMedia(data); \n  const fullName = _.get(data, \"user.firstName\", \"\") + \" \" +  _.get(data, \"user.lastName\", \"\");\n  const result =  {\n    ...data,\n    canUpdatePhoto: canUpdatePhoto\n  }\n  if(result.user) {\n    result.user.fullName = fullName;\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
        "query": "query \n  {\n    userMetadata {\n      actions {\n        canUploadPhoto\n      }\n    }\n\n    user(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      firstName\n      lastName\n      shortBio\n      ...userProfession\n      ...userSector\n      ...userImage\n      ...userContactDetails\n      ...userPlaceDetails\n      ...userSocialMedia\n    }\n  }"
      }
    },
    "profile/managePrivacy/:id": {
      "component": "editprivacy-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n\n  const privacySettings = $dynamicUiExtraService.getUserPrivacyKey(data.user.privacySettings);\n  const canUpdatePrivacySettings = $dynamicUiExtraService.checkIfUserCanUpdatePrivacySettings(data); \n\n  const result =  {\n    ...data,\n    privacySettings: privacySettings,\n    canUpdatePrivacySettings: canUpdatePrivacySettings\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n})(data)",
        "query": "query \n  {\n    userMetadata {\n      actions {\n        canUpdatePrivacysettings\n      }\n    }\n\n    user(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      privacySettings {\n        contactEmail\n        contactPhone\n      }\n    }\n  }"
      }
    },
    "profile/manageNetworkRole/:id": {
      "component": "managenetworkroles-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    networkRoles: _.get(data, \"user.networkRoles\", []).map(x => $dynamicUiExtraService.mapNetworRoleToItem(x))\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query  { \n  user(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n    ...userNetworkRoles\n  }\n}"
      }
    },
    "profile/manageBusinessRole/:id": {
      "component": "managebusinessroles-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    businessRoles: _.get(data, \"user.businessRoles\", []).map(x => $dynamicUiExtraService.mapBusinessRoleToItem(x))\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query  { \n  user(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n    ...userBusinessRoles\n  }\n}"
      }
    },
    "profile/viewNetworkRole/:id": {
      "component": "viewnetworksroles-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    networkRoles: _.get(data, \"user.networkRoles\", []).map(x => $dynamicUiExtraService.mapNetworRoleToItem(x))\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query  { \n  user(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n    ...userNetworkRoles\n  }\n}"
      }
    },
    "profile/viewBusinessRole/:id": {
      "component": "viewbusinesssroles-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    businessRoles: _.get(data, \"user.businessRoles\", []).map(x => $dynamicUiExtraService.mapBusinessRoleToItem(x))\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query  { \n  user(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n    ...userBusinessRoles\n  }\n}"
      }
    },
    "profile/viewFollowers/:id": {
      "component": "managefollowers-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const result =  {\n    ...data,\n    followers: _.get(data, \"user.followers.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    followedBy: _.get(data, \"user.followedBy.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    followerCursor: _.get(data, \"user.followers.cursor\"),\n    followingCursor: _.get(data, \"user.followedBy.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    user(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      followers(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items { \n          user {\n            id\n            firstName\n            lastName      \n            actions {\n              canFollow\t\n              canUnfollow\n            }\n            ...userImage\n            ...userPlaceDetails\n            ...userFeaturedRole       \n          }\n        }\n        cursor\n      }\n      followedBy(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items { \n          user {\n            id\n            firstName\n            lastName      \n            actions {\n              canFollow\t\n              canUnfollow\n            }\n            ...userImage\n            ...userPlaceDetails\n            ...userFeaturedRole     \n          }\n        }\n        cursor\n      }\n    }\n  }"
      }
    },
    "profile/manageFollowingPage/:id": {
      "component": "managefollowing-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const result =  {\n    ...data,\n    followingBusinesses: _.get(data, \"user.followingBusinesses.items\", []).map(x => $dynamicUiExtraService.mapCompanyToItem(x)),\n    followingNetworks: _.get(data, \"user.followingNetworks.items\", []).map(x => $dynamicUiExtraService.mapNetworkToItem(x)),\n    businessCursor: _.get(data, \"user.followingBusinesses.cursor\"),\n    networkCursor: _.get(data, \"user.followingNetworks.cursor\")\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query \n  {\n    user(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      followingBusinesses (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          company {\n            ...companyCommonProperties\n          }                  \n        }\n        cursor\n      } \n\n      followingNetworks(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          entity {\n            __typename\n            ... on Organization {\n              ...organizationCommonProperties\n            }\n            ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }\n            ... on Municipality {\n              ...municipalityCommonProperties\n            }\n          }\n        }\n        cursor\n      }\n    }\n  }"
      }
    },
    "profile/managePrimaryRole/:id": {
      "component": "managePrimaryRole-page-template",
      "withGuard": true
    },
    "profile/:id": {
      "component": "profile-page-template",
      "additionalCssClasses": "grayBg",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n\n  const canManage = $dynamicUiExtraService.checkIfUserCanManage(data); \n  const canAddPost = $dynamicUiExtraService.checkIfUserCanAddPost(data); \n\n  const canFollow = $dynamicUiExtraService.checkIfCanFollow(data.user); \n  const canUnFollow = $dynamicUiExtraService.checkIfCanUnFollow(data.user);  \n  const canShare = $dynamicUiExtraService.checkIfCanShare(data.user); \n  const canInvite = $dynamicUiExtraService.checkIfCanInvite(data.user);  \n  const canSendMessage = $dynamicUiExtraService.checkIfCanSendMessage(data.user); \n\n  const myProfile = ($activatedRoute.snapshot.params.id === initialDataSource.profileId) ? true: false;\n\n  const generalDetailsInfo = $dynamicUiExtraService.prepareUserInfo(data.user, myProfile && canManage); \n  const socialMediaInfo = $dynamicUiExtraService.prepareSocialMediaInfo(data.user); \n  const userMailbox = _.get(data, \"user.mailBoxes\", []).find(x => x.mailBox.owner.entity.__typename === 'User');\n\n  const galleryId = $dynamicUiExtraService.getGalleryId(data.user);  \n  const badges = $dynamicUiExtraService.prepareUserBadges(data.user, myProfile && canManage);\n\n  const canUploadImage =  $dynamicUiExtraService.checkIfCanUploadImage(data.user);  \n  const canUploadVideoLink = $dynamicUiExtraService.checkIfCanUploadVideoLink(data.user); \n  const canUploadMedia = canUploadImage || canUploadVideoLink;\n  const hasTownRole = _.get(data, 'user.roles', []).filter(userRole => (((_.get(userRole, 'entity.__typename', '') || '').toLowerCase() === 'municipality') && ((_.get(userRole, 'role.role', '') || '').toLowerCase() === 'electedmember'))).length > 0 ? true : false; \n  const hasDiplomaticRole = _.get(data, 'user.networkRoles', []).filter(userRole => (_.get(userRole, 'entity.__typename', '').toLowerCase() === 'diplomaticmission') && (_.get(userRole, 'role.role', '').toLowerCase() === 'president')).length > 0 ? true : false; \n\n  const result =  {\n    ...data,\n    galleryId: galleryId,\n    hasDiplomaticRole: hasDiplomaticRole,\n    hasTownRole: hasTownRole,\n    businessRoles: _.get(data, \"user.businessRoles\", []).map(x => $dynamicUiExtraService.mapBusinessRoleToItem(x)),\n    networkRoles: _.get(data, \"user.networkRoles\", []).map(x => $dynamicUiExtraService.mapNetworRoleToItem(x)),\n    peoples: _.get(data, \"user.people.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    gallery: _.get(data, \"user.gallery.mediaGallery.galleryItems.items\", []).map(x => $dynamicUiExtraService.mapGalleryToItem(x)),\n    updates: _.get(data, \"user.updates.items\", []).map(x => $dynamicUiExtraService.mapPostToItem(x)),\n    receiverMailboxId: _.get(userMailbox, \"mailBox.id\", null),\n\n    generalDetailsInfo: generalDetailsInfo,\n    socialMediaInfo: socialMediaInfo,\n    badges: badges,\n\n    canManage: canManage,\n    canAddPost: canAddPost,\n    canUploadMedia: canUploadMedia,\n    canUploadImage: canUploadImage,\n    canUploadVideoLink: canUploadVideoLink,            \n\n    canFollow: canFollow,\n    canUnFollow: canUnFollow,\n    canShare: canShare,\n    canInvite: canInvite,\n    canSendMessage: canSendMessage,\n\n    myProfile: myProfile\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query { \n  userMetadata{\n    actions{\n      canUpdate\n      canAddPost\n      canUploadPhoto\n    }\n  }\n  \n  user(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n    id\n    firstName\n    lastName\n    shortBio\n\n    ...userProfession\n    ...userSector\n    ...userImage\n    ...userFeaturedRole \n    ...userPlaceDetails\n    ...userMunicipalityDetails\n    ...userContactDetails\n    ...userSocialMedia\n    ...userPeople\n    ...userBusinessRoles\n    ...userNetworkRoles\n    ...userMediaGallery     \n    ...userActivities               \n\n    actions {\n      canFollow\n      canUnfollow\n      canShare\t\n      canInvite\n      canSendMessage\n    }\n\n    statistics {\n      followers\n      following\n    }            \n  \n    roles {                 \n      role {\n        role\n        positionName\n        featured\n      }\n\n      entity {\n        __typename ... on Organization{\n          id\n          name\n          actions {\n            canUpdate\n          } \n          photoCover {\n            imageUrl\n            imageThumbnailUrl\n          }            \n        }\n        __typename ... on DiplomaticMission{\n          id\n          name\n          actions {\n            canUpdate\n          }             \n          photoCover {\n            imageUrl\n            imageThumbnailUrl\n          }            \n        }\n        __typename ... on Company{\n          id\n          name\n          actions {\n            canUpdate\n          }             \n          photoCover {\n            imageUrl\n            imageThumbnailUrl\n          }\n        }\n        __typename ... on Municipality{\n          id\n          name: title\n          actions {\n            canUpdate\n          }             \n          photoCover {\n            imageUrl\n            imageThumbnailUrl\n          }            \n        }\n        __typename ... on OrganizationCommittee {\n          id\n          name\n          organization {\n            organization {\n              id\n              name\n              photoCover {\n                imageUrl\n                imageThumbnailUrl\n              }    \n              actions {\n                canUpdate\n              }  \n              place {\n                country {\n                  lookupId\n                  name\n                  isoCode\n                }\n                city {\n                  lookupId\n                  name\n                }\n              }                          \n            }\n          }              \n        }\n        __typename ... on DiplomaticMissionCommittee {\n          id\n          name\n          diplomaticMission {\n            diplomaticMission {\n              id \n              name\n              photoCover {\n                imageUrl\n                imageThumbnailUrl\n              }\n              actions {\n                canUpdate\n              }\n              place {\n                country {\n                  lookupId\n                  name\n                  isoCode\n                }\n                city {\n                  lookupId\n                  name\n                }\n              }                \n            }\n          }              \n        }                      \n      }\n    }               \n\n\n    mailBoxes {\n      mailBox\n       {\n        id\n        owner {\n          entity {\n            __typename ... on User {\n              id\n            }\n\n            __typename ... on Municipality {\n              id\n            }\n            \n            __typename ... on Company {\n              id\n            }\n            \n            __typename ... on Organization {\n              id\n            }\n            \n            __typename ... on DiplomaticMission {\n              id\n            }\n          }\n        }\n      }\n    }  \n\n  }\n}",
        "comment": "Depends on Fragments"
      }
    },
    "tabs": {
      "component": "tabs-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {     \n  $actionHelper.getGraphQL = component.getGraphQL;\n  $actionHelper.templateContext = component.templateContext;\n\n  $actionHelper.mergeHierarchy($actionHelper.uiDefinition.initialDataSource, data);\n  $actionHelper.printData({initialDataSource: $actionHelper.uiDefinition.initialDataSource, data});\n})(data)",
        "query": "query \n  {               \n    companyMetadata {\n      actions {\n        canCreate\n      }\n    }\n    \n    organizationMetadata {\n      actions {\n        canCreate\n      }\n    }\n  }"
      },
      "children": {
        "home": {
          "component": "home-page-template",
          "withGuard": true,
          "additionalCssClasses": "grayBg",
          "dataSource": {
            "$dynamicUI:resourceType": "graphql",
            "dataExpression": "(async (data) => {\n  \n  const blockInfo = await $dynamicUiExtraService.getBlocksInfo();\n\n  const result =  {   \n    ...data,\n    peoples: _.get(data, \"search.directory.peopleDirectory.peopleToFollow.items\", []).map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n    businesses: _.get(data, \"search.directory.businessDirectory.business.items\", []).map(x => $dynamicUiExtraService.mapSearchCompanyToItem(x)),\n    organizations: _.get(data, \"search.directory.networkDirectory.networks.items\", []).map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x)),\n\n    featuredActivities: _.get(data, \"organization.updates.items\", []).map(x => $dynamicUiExtraService.mapUpdateToItem(x)),\n    activities:  _.get(data, \"user.activities.items\", []).map(x => $dynamicUiExtraService.mapUserActivitiesToItem(x)),    \n    upcomingEvents: _.get(data, \"search.directory.networkDirectory.upcomingEvents.items\", []).map(x => $dynamicUiExtraService.mapDirectoryEventToItem(x)),\n\n    blockHP1: blockInfo['blockHP1'],\n    blockHP2: blockInfo['blockHP2'],\n    blockHP1Items: _.get(data, \"search.directory.featureDirectory.blockHP1.items\", []).map(x => $dynamicUiExtraService.mapFeaturedBlocks(x, blockInfo, 'blockHP1')),\n    blockHP2Items: _.get(data, \"search.directory.featureDirectory.blockHP2.items\", []).map(x => $dynamicUiExtraService.mapFeaturedBlocks(x, blockInfo, 'blockHP2')),\n\n    blockHB1: blockInfo['blockHB1'],\n    blockHB2: blockInfo['blockHB2'],\n    blockHB1Items: _.get(data, \"search.directory.featureDirectory.blockHB1.items\", []).map(x => $dynamicUiExtraService.mapFeaturedBlocks(x, blockInfo, 'blockHB1')),\n    blockHB2Items: _.get(data, \"search.directory.featureDirectory.blockHB2.items\", []).map(x => $dynamicUiExtraService.mapFeaturedBlocks(x, blockInfo, 'blockHB2')),\n\n    blockHN1: blockInfo['blockHN1'],\n    blockHN2: blockInfo['blockHN2'],\n    blockHN1Items: _.get(data, \"search.directory.featureDirectory.blockHN1.items\", []).map(x => $dynamicUiExtraService.mapFeaturedBlocks(x, blockInfo, 'blockHN1')),\n    blockHN2Items: _.get(data, \"search.directory.featureDirectory.blockHN2.items\", []).map(x => $dynamicUiExtraService.mapFeaturedBlocks(x, blockInfo, 'blockHN2')),\n\n    hasPeoplesItems: false,\n    hasFeaturedActivities: false,\n    hasActivities: false,\n    hasUpcomingEvents: false,\n    hasBusinessesItems: false,\n    hasOrganizationsItems: false,\n\n    hasBlockHP1: false,\n    hasBlockHP2: false,\n    hasBlockHB1: false,\n    hasBlockHB2: false,\n    hasBlockHN1: false,\n    hasBlockHN2: false\n  }\n\n  result.hasPeoplesItems = result.peoples.length > 0;\n  result.hasFeaturedActivities = result.featuredActivities.length > 0;\n  result.hasActivities = result.activities.length > 0;\n  result.hasUpcomingEvents = result.upcomingEvents.length > 0;\n  result.hasBusinessesItems = result.businesses.length > 0;\n  result.hasOrganizationsItems = result.organizations.length > 0;\n\n  result.hasBlockHP1 = result.blockHP1Items.length > 0 && blockInfo['blockHP1'].visible;\n  result.hasBlockHP2 = result.blockHP2Items.length > 0 && blockInfo['blockHP2'].visible;\n  result.hasBlockHB1 = result.blockHB1Items.length > 0 && blockInfo['blockHB1'].visible;\n  result.hasBlockHB2 = result.blockHB2Items.length > 0 && blockInfo['blockHB2'].visible;\n  result.hasBlockHN1 = result.blockHN1Items.length > 0 && blockInfo['blockHN1'].visible;\n  result.hasBlockHN2 = result.blockHN2Items.length > 0 && blockInfo['blockHN2'].visible;\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n)(data)",
            "query": "query   { \n  organization(id: $dynamicUiVariables->initialDataSource.organizationDiasporaIdHeadline) {\n    ...organizationActivities                \n  }\n\n  user(id: $dynamicUiVariables->initialDataSource.profileId) { \n    activities(after: null, first: 4) {\n      items {\n        __typename ... on UserNewPost {\n          object {\n            ...postProperties\n          }\n        }\n\n        __typename ... on CompanyNewPost {\n          object {\n          ...postProperties\n          }\n        }\n\n        __typename ... on CompanyNewEvent {\n          object {\n            ...eventProperties\n          }\n        }\n\n        __typename ... on MunicipalityNewPost {\n          object {\n            ...postProperties\n          }\n        }\n\n        __typename ... on MunicipalityNewEvent {\n          object {\n            ...eventProperties\n          }\n        }\n\n        __typename ... on OrganizationNewPost {\n          object {\n          ...postProperties          \n          }\n        }\n\n        __typename ... on OrganizationNewEvent {\n          object {\n            ...eventProperties\n          }\n        }\n\n        __typename ... on DiplomaticMissionNewPost {\n          object {\n          ...postProperties          \n          }\n        }\n\n        __typename ... on DiplomaticMissionNewEvent {\n          object {\n            ...eventProperties\n          }\n        }   \n      }\n      cursor\n    }\n  }\n\n  search {\n    directory {\n      peopleDirectory {\n        peopleToFollow(first: 9){\n          items {\n            ...userCommonProperties\n          }\n        }\n      }\n\n      businessDirectory {\n        business(first: 9){\n          items {\n            ...companyCommonProperties\t          \n          }\n        } \n      }\n\n      networkDirectory {\n        networks(first: 9){\n          items {\n            ...organizationCommonProperties\t          \n          }\n        } \n      }\n\n      featureDirectory {\n        blockHP1(first: 9) {\n          items {\n            __typename ... on User {\n              ...userCommonProperties\n            }\n\n            __typename ... on Company {\n              ...companyCommonProperties\n            }\n\n            __typename ... on Municipality {\n              ...municipalityCommonProperties\n            }\n\n            __typename ... on Organization {\n              ...organizationCommonProperties\t                                                  \n            }\n\n            __typename ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }                \n          }      \n        }\n        \n        blockHP2(first: 9) {\n          items {\n            __typename ... on User {\n              ...userCommonProperties\n            }\n\n            __typename ... on Company {\n              ...companyCommonProperties\n            }\n\n            __typename ... on Municipality {\n              ...municipalityCommonProperties\n            }\n\n            __typename ... on Organization {\n              ...organizationCommonProperties\t                                                  \n            }\n\n            __typename ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }               \n          }                 \n        }\n        \n        blockHB1(first: 9) {\n          items {\n            __typename ... on User {\n              ...userCommonProperties\n            }\n\n            __typename ... on Company {\n              ...companyCommonProperties\n            }\n\n            __typename ... on Municipality {\n              ...municipalityCommonProperties\n            }\n\n            __typename ... on Organization {\n              ...organizationCommonProperties\t                                                  \n            }\n\n            __typename ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }              \n          } \n        }\n        \n        blockHB2(first: 9) {\n          items {\n            __typename ... on User {\n              ...userCommonProperties\n            }\n\n            __typename ... on Company {\n              ...companyCommonProperties\n            }\n\n            __typename ... on Municipality {\n              ...municipalityCommonProperties\n            }\n\n            __typename ... on Organization {\n              ...organizationCommonProperties\t                                                  \n            }\n\n            __typename ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }                 \n          }     \n        }\n        \n        blockHN1(first: 9) {\n          items {\n            __typename ... on User {\n              ...userCommonProperties\n            }\n\n            __typename ... on Company {\n              ...companyCommonProperties\n            }\n\n            __typename ... on Municipality {\n              ...municipalityCommonProperties\n            }\n\n            __typename ... on Organization {\n              ...organizationCommonProperties\t                                                  \n            }\n\n            __typename ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }              \n          }        \n        }\n        \n        blockHN2(first: 9) {\n          items {\n            __typename ... on User {\n              ...userCommonProperties\n            }\n\n            __typename ... on Company {\n              ...companyCommonProperties\n            }\n\n            __typename ... on Municipality {\n              ...municipalityCommonProperties\n            }\n\n            __typename ... on Organization {\n              ...organizationCommonProperties\t                                                  \n            }\n\n            __typename ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }                      \n          }\n        }                     \n      }\n      \n      networkDirectory{\n        upcomingEvents(first: 9){\n            items{\n              id\n              title\n              description\n\n              location\n              startDate\n              endDate\n\n              photoCover {\n                imageUrl\n                imageThumbnailUrl\n              }\n\n              creater {\n                user {\n                  id\n                  firstName\n                  lastName\n                  photoCover {\n                    imageUrl\n                    imageThumbnailUrl\n                  }\n                }\n              }\n\n              owner {\n                __typename ... on User {\n                  id\n                  firstName \n                  lastName\n                  photoCover {\n                    imageUrl\n                    imageThumbnailUrl\n                  }\n                }\n\n                __typename ... on  Municipality {\n                  id\n                  name: title\n                  photoCover {\n                    imageUrl\n                    imageThumbnailUrl\n                  }\n                }\n\n                __typename ... on Company {\n                  id\n                  name\n                  photoCover {\n                    imageUrl\n                    imageThumbnailUrl\n                  }\n                }\n\n                __typename ... on Organization {\n                  id\n                  name\n                  photoCover {\n                    imageUrl\n                    imageThumbnailUrl\n                  }\n                }\n\n                __typename ... on DiplomaticMission {\n                  id\n                  name\n                  photoCover {\n                    imageUrl\n                    imageThumbnailUrl\n                  }\n                }\n              }      \n\n              createdDate\n              createdBy                \n          }\n        }\n      }\n    }\n  }\n}"
          }
        },
        "directory": {
          "component": "directory-page-template",
          "withGuard": true,
          "additionalCssClasses": "grayBg",
          "dataSource": {
            "$dynamicUI:resourceType": "graphql",
            "dataExpression": "(async (data) => {\n  const blockInfo = await $dynamicUiExtraService.getBlocksInfo();\n  \n  const result =  {       \n    peopleDirectory: {\n      peopleToFollow: _.get(data, \"search.directory.peopleDirectory.peopleToFollow.items\", []).map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n      ambassadorsAndConsuls: _.get(data, \"search.directory.peopleDirectory.ambassadorsAndConsuls.items\", []).map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n      withYourLastName: _.get(data, \"search.directory.peopleDirectory.withYourLastName.items\", []).map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n  \n      blockDP1: blockInfo['blockDP1'],\n      blockDP2: blockInfo['blockDP2'],\n      blockDP1Items: _.get(data, \"search.directory.featureDirectory.blockDP1.items\", []).map(x => $dynamicUiExtraService.mapFeaturedBlocks(x, blockInfo, 'blockDP1')),\n      blockDP2Items: _.get(data, \"search.directory.featureDirectory.blockDP2.items\", []).map(x => $dynamicUiExtraService.mapFeaturedBlocks(x, blockInfo, 'blockDP2')),\n\n      hasPeopleToFollow: false,\n      hasAmbassadorsAndConsuls: false,\n      hasPeopleWithYourLastName: false,\n      hasBlockDP1: false,\n      hasBlockDP2: false\n    },\n\n    businessDirectory: {\n      companiesToFollow: _.get(data, \"search.directory.businessDirectory.companiesToFollow.items\", []).map(x => $dynamicUiExtraService.mapSearchCompanyToItem(x)),\n      supportOrganizations: _.get(data, \"search.directory.businessDirectory.supportOrganizations.items\", []).map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x)),\n\n      blockDB1: blockInfo['blockDB1'],\n      blockDB2: blockInfo['blockDB2'],\n      blockDB1Items: _.get(data, \"search.directory.featureDirectory.blockDB1.items\", []).map(x => $dynamicUiExtraService.mapFeaturedBlocks(x, blockInfo, 'blockDB1')),\n      blockDB2Items: _.get(data, \"search.directory.featureDirectory.blockDB2.items\", []).map(x => $dynamicUiExtraService.mapFeaturedBlocks(x, blockInfo, 'blockDB2')),\n\n      hasCompaniesToFollow: false,\n      hasSupportOrganizations: false,\n      hasBlockDB1: false,\n      hasBlockDB2: false\n    },\n\n    networkDirectory: {\n      organizationsToFollow: _.get(data, \"search.directory.networkDirectory.organizationsToFollow.items\", []).map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x)),\n      townsToFollow: _.get(data, \"search.directory.networkDirectory.townsToFollow.items\", []).map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x)),\n      diplomaticMissionsToFollow: _.get(data, \"search.directory.networkDirectory.diplomaticMissionsToFollow.items\", []).map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x)),\n\n      blockDN1: blockInfo['blockDN1'],\n      blockDN2: blockInfo['blockDN2'],\n      blockDN1Items: _.get(data, \"search.directory.featureDirectory.blockDN1.items\", []).map(x => $dynamicUiExtraService.mapFeaturedBlocks(x, blockInfo, 'blockDN1')),\n      blockDN2Items: _.get(data, \"search.directory.featureDirectory.blockDN2.items\", []).map(x => $dynamicUiExtraService.mapFeaturedBlocks(x, blockInfo, 'blockDN2')),\n\n      hasOrganizationsToFollow: false,\n      hasTownsToFollow: false,\n      hasDiplomaticMissionsToFollow: false,\n      hasBlockDN1: false,\n      hasBlockDN2: false\n    }\n  }\n\n  result.peopleDirectory.hasPeopleToFollow = result.peopleDirectory.peopleToFollow.length > 0;\n  result.peopleDirectory.hasAmbassadorsAndConsuls = result.peopleDirectory.ambassadorsAndConsuls.length > 0;\n  result.peopleDirectory.hasPeopleWithYourLastName = result.peopleDirectory.withYourLastName.length > 0;\n  result.peopleDirectory.hasBlockDP1 = result.peopleDirectory.blockDP1Items.length > 0 && blockInfo['blockDP1'].visible;\n  result.peopleDirectory.hasBlockDP2 = result.peopleDirectory.blockDP2Items.length > 0 && blockInfo['blockDP2'].visible;\n\n  result.businessDirectory.hasCompaniesToFollow = result.businessDirectory.companiesToFollow.length > 0;\n  result.businessDirectory.hasSupportOrganizations = result.businessDirectory.supportOrganizations.length > 0;\n  result.businessDirectory.hasBlockDB1 = result.businessDirectory.blockDB1Items.length > 0 && blockInfo['blockDB1'].visible;\n  result.businessDirectory.hasBlockDB2 = result.businessDirectory.blockDB2Items.length > 0 && blockInfo['blockDB2'].visible;\n\n  result.networkDirectory.hasOrganizationsToFollow = result.networkDirectory.organizationsToFollow.length > 0;\n  result.networkDirectory.hasTownsToFollow = result.networkDirectory.townsToFollow.length > 0;\n  result.networkDirectory.hasDiplomaticMissionsToFollow = result.networkDirectory.diplomaticMissionsToFollow.length > 0;\n  result.networkDirectory.hasBlockDN1 = result.networkDirectory.blockDN1Items.length > 0 && blockInfo['blockDN1'].visible;\n  result.networkDirectory.hasBlockDN2 = result.networkDirectory.blockDN2Items.length > 0 && blockInfo['blockDN2'].visible;\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n)(data)",
            "query": "query { \n  search {\n    directory {\n      peopleDirectory {        \n        peopleToFollow(first: 9) {\n          items {\n            ...userCommonProperties\n          }\n        }\n        ambassadorsAndConsuls(first: 9) {\n          items {\n            ...userCommonProperties\n          }  \n        }\n        withYourLastName(first: 9) {\n          items {\n            ...userCommonProperties\n          }  \n        }\n      }\n      \n      businessDirectory {\n        companiesToFollow(first: 9) {\n          items {\n            ...companyCommonProperties\t                      \n          }\n        }\n        \n        supportOrganizations(first: 9) {\n          items {\n            ...organizationCommonProperties\t                      \n          }                      }\n      }\n      \n      networkDirectory {\n        organizationsToFollow(first: 9) {\n          items {\n            ...organizationCommonProperties\t                                    \n          }\n        }   \n        \n        diplomaticMissionsToFollow(first: 9) {\n          items {\n            ...diplomaticCommonProperties\n          }\n        }\n\n        townsToFollow(first: 9) {\n          items {\n            ...municipalityCommonProperties\n          }\n        }          \n      }\n      \n      featureDirectory {\n        blockDP1(first: 9) {\n          items {\n            __typename ... on User {\n              ...userCommonProperties\n            }\n\n            __typename ... on Company {\n              ...companyCommonProperties\n            }\n\n            __typename ... on Municipality {\n              ...municipalityCommonProperties\n            }\n\n            __typename ... on Organization {\n              ...organizationCommonProperties\t                                                  \n            }\n\n            __typename ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }              \n          } \n        }\n\n        blockDP2(first: 9) {\n          items {\n            __typename ... on User {\n              ...userCommonProperties\n            }\n\n            __typename ... on Company {\n              ...companyCommonProperties\n            }\n\n            __typename ... on Municipality {\n              ...municipalityCommonProperties\n            }\n\n            __typename ... on Organization {\n              ...organizationCommonProperties\t                                                  \n            }\n\n            __typename ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }                 \n          }     \n        }\n        \n        blockDB1(first: 9) {\n          items {\n            __typename ... on User {\n              ...userCommonProperties\n            }\n\n            __typename ... on Company {\n              ...companyCommonProperties\n            }\n\n            __typename ... on Municipality {\n              ...municipalityCommonProperties\n            }\n\n            __typename ... on Organization {\n              ...organizationCommonProperties\t                                                  \n            }\n\n            __typename ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }                \n          }      \n        }\n\n        blockDB2(first: 9) {\n          items {\n            __typename ... on User {\n              ...userCommonProperties\n            }\n\n            __typename ... on Company {\n              ...companyCommonProperties\n            }\n\n            __typename ... on Municipality {\n              ...municipalityCommonProperties\n            }\n\n            __typename ... on Organization {\n              ...organizationCommonProperties\t                                                  \n            }\n\n            __typename ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }               \n          }                 \n        }\n        \n        blockDN1(first: 9) {\n          items {\n            __typename ... on User {\n              ...userCommonProperties\n            }\n\n            __typename ... on Company {\n              ...companyCommonProperties\n            }\n\n            __typename ... on Municipality {\n              ...municipalityCommonProperties\n            }\n\n            __typename ... on Organization {\n              ...organizationCommonProperties\t                                                  \n            }\n\n            __typename ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }              \n          }        \n        }\n\n        blockDN2(first: 9) {\n          items {\n            __typename ... on User {\n              ...userCommonProperties\n            }\n\n            __typename ... on Company {\n              ...companyCommonProperties\n            }\n\n            __typename ... on Municipality {\n              ...municipalityCommonProperties\n            }\n\n            __typename ... on Organization {\n              ...organizationCommonProperties\t                                                  \n            }\n\n            __typename ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }                      \n          }\n        }                     \n      }\n    }\n  }\n}"
          }
        },
        "directory/:type": {
          "component": "directory-page-template",
          "withGuard": true,
          "additionalCssClasses": "grayBg",
          "dataSource": {
            "$dynamicUI:resourceType": "graphql",
            "dataExpression": "(async (data) => {\n  const blockInfo = await $dynamicUiExtraService.getBlocksInfo();\n  \n  const result =  {       \n    peopleDirectory: {\n      peopleToFollow: _.get(data, \"search.directory.peopleDirectory.peopleToFollow.items\", []).map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n      ambassadorsAndConsuls: _.get(data, \"search.directory.peopleDirectory.ambassadorsAndConsuls.items\", []).map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n      withYourLastName: _.get(data, \"search.directory.peopleDirectory.withYourLastName.items\", []).map(x => $dynamicUiExtraService.mapSearchPeopleToItem(x)),\n  \n      blockDP1: blockInfo['blockDP1'],\n      blockDP2: blockInfo['blockDP2'],\n      blockDP1Items: _.get(data, \"search.directory.featureDirectory.blockDP1.items\", []).map(x => $dynamicUiExtraService.mapFeaturedBlocks(x, blockInfo, 'blockDP1')),\n      blockDP2Items: _.get(data, \"search.directory.featureDirectory.blockDP2.items\", []).map(x => $dynamicUiExtraService.mapFeaturedBlocks(x, blockInfo, 'blockDP2')),\n\n      hasPeopleToFollow: false,\n      hasAmbassadorsAndConsuls: false,\n      hasPeopleWithYourLastName: false,\n      hasBlockDP1: false,\n      hasBlockDP2: false\n    },\n\n    businessDirectory: {\n      companiesToFollow: _.get(data, \"search.directory.businessDirectory.companiesToFollow.items\", []).map(x => $dynamicUiExtraService.mapSearchCompanyToItem(x)),\n      supportOrganizations: _.get(data, \"search.directory.businessDirectory.supportOrganizations.items\", []).map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x)),\n\n      blockDB1: blockInfo['blockDB1'],\n      blockDB2: blockInfo['blockDB2'],\n      blockDB1Items: _.get(data, \"search.directory.featureDirectory.blockDB1.items\", []).map(x => $dynamicUiExtraService.mapFeaturedBlocks(x, blockInfo, 'blockDB1')),\n      blockDB2Items: _.get(data, \"search.directory.featureDirectory.blockDB2.items\", []).map(x => $dynamicUiExtraService.mapFeaturedBlocks(x, blockInfo, 'blockDB2')),\n\n      hasCompaniesToFollow: false,\n      hasSupportOrganizations: false,\n      hasBlockDB1: false,\n      hasBlockDB2: false\n    },\n\n    networkDirectory: {\n      organizationsToFollow: _.get(data, \"search.directory.networkDirectory.organizationsToFollow.items\", []).map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x)),\n      townsToFollow: _.get(data, \"search.directory.networkDirectory.townsToFollow.items\", []).map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x)),\n      diplomaticMissionsToFollow: _.get(data, \"search.directory.networkDirectory.diplomaticMissionsToFollow.items\", []).map(x => $dynamicUiExtraService.mapSearchNetworkToItem(x)),\n\n      blockDN1: blockInfo['blockDN1'],\n      blockDN2: blockInfo['blockDN2'],\n      blockDN1Items: _.get(data, \"search.directory.featureDirectory.blockDN1.items\", []).map(x => $dynamicUiExtraService.mapFeaturedBlocks(x, blockInfo, 'blockDN1')),\n      blockDN2Items: _.get(data, \"search.directory.featureDirectory.blockDN2.items\", []).map(x => $dynamicUiExtraService.mapFeaturedBlocks(x, blockInfo, 'blockDN2')),\n\n      hasOrganizationsToFollow: false,\n      hasTownsToFollow: false,\n      hasDiplomaticMissionsToFollow: false,\n      hasBlockDN1: false,\n      hasBlockDN2: false\n    }\n  }\n\n  result.peopleDirectory.hasPeopleToFollow = result.peopleDirectory.peopleToFollow.length > 0;\n  result.peopleDirectory.hasAmbassadorsAndConsuls = result.peopleDirectory.ambassadorsAndConsuls.length > 0;\n  result.peopleDirectory.hasPeopleWithYourLastName = result.peopleDirectory.withYourLastName.length > 0;\n  result.peopleDirectory.hasBlockDP1 = result.peopleDirectory.blockDP1Items.length > 0 && blockInfo['blockDP1'].visible;\n  result.peopleDirectory.hasBlockDP2 = result.peopleDirectory.blockDP2Items.length > 0 && blockInfo['blockDP2'].visible;\n\n  result.businessDirectory.hasCompaniesToFollow = result.businessDirectory.companiesToFollow.length > 0;\n  result.businessDirectory.hasSupportOrganizations = result.businessDirectory.supportOrganizations.length > 0;\n  result.businessDirectory.hasBlockDB1 = result.businessDirectory.blockDB1Items.length > 0 && blockInfo['blockDB1'].visible;\n  result.businessDirectory.hasBlockDB2 = result.businessDirectory.blockDB2Items.length > 0 && blockInfo['blockDB2'].visible;\n\n  result.networkDirectory.hasOrganizationsToFollow = result.networkDirectory.organizationsToFollow.length > 0;\n  result.networkDirectory.hasTownsToFollow = result.networkDirectory.townsToFollow.length > 0;\n  result.networkDirectory.hasDiplomaticMissionsToFollow = result.networkDirectory.diplomaticMissionsToFollow.length > 0;\n  result.networkDirectory.hasBlockDN1 = result.networkDirectory.blockDN1Items.length > 0 && blockInfo['blockDN1'].visible;\n  result.networkDirectory.hasBlockDN2 = result.networkDirectory.blockDN2Items.length > 0 && blockInfo['blockDN2'].visible;\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n)(data)",
            "query": "query { \n  search {\n    directory {\n      peopleDirectory {        \n        peopleToFollow(first: 9) {\n          items {\n            ...userCommonProperties\n          }\n        }\n        ambassadorsAndConsuls(first: 9) {\n          items {\n            ...userCommonProperties\n          }  \n        }\n        withYourLastName(first: 9) {\n          items {\n            ...userCommonProperties\n          }  \n        }\n      }\n      \n      businessDirectory {\n        companiesToFollow(first: 9) {\n          items {\n            ...companyCommonProperties\t                      \n          }\n        }\n        \n        supportOrganizations(first: 9) {\n          items {\n            ...organizationCommonProperties\t                      \n          }                      }\n      }\n      \n      networkDirectory {\n        organizationsToFollow(first: 9) {\n          items {\n            ...organizationCommonProperties\t                                    \n          }\n        }   \n        \n        diplomaticMissionsToFollow(first: 9) {\n          items {\n            ...diplomaticCommonProperties\n          }\n        }\n\n        townsToFollow(first: 9) {\n          items {\n            ...municipalityCommonProperties\n          }\n        }          \n      }\n      \n      featureDirectory {\n        blockDP1(first: 9) {\n          items {\n            __typename ... on User {\n              ...userCommonProperties\n            }\n\n            __typename ... on Company {\n              ...companyCommonProperties\n            }\n\n            __typename ... on Municipality {\n              ...municipalityCommonProperties\n            }\n\n            __typename ... on Organization {\n              ...organizationCommonProperties\t                                                  \n            }\n\n            __typename ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }              \n          } \n        }\n\n        blockDP2(first: 9) {\n          items {\n            __typename ... on User {\n              ...userCommonProperties\n            }\n\n            __typename ... on Company {\n              ...companyCommonProperties\n            }\n\n            __typename ... on Municipality {\n              ...municipalityCommonProperties\n            }\n\n            __typename ... on Organization {\n              ...organizationCommonProperties\t                                                  \n            }\n\n            __typename ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }                 \n          }     \n        }\n        \n        blockDB1(first: 9) {\n          items {\n            __typename ... on User {\n              ...userCommonProperties\n            }\n\n            __typename ... on Company {\n              ...companyCommonProperties\n            }\n\n            __typename ... on Municipality {\n              ...municipalityCommonProperties\n            }\n\n            __typename ... on Organization {\n              ...organizationCommonProperties\t                                                  \n            }\n\n            __typename ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }                \n          }      \n        }\n\n        blockDB2(first: 9) {\n          items {\n            __typename ... on User {\n              ...userCommonProperties\n            }\n\n            __typename ... on Company {\n              ...companyCommonProperties\n            }\n\n            __typename ... on Municipality {\n              ...municipalityCommonProperties\n            }\n\n            __typename ... on Organization {\n              ...organizationCommonProperties\t                                                  \n            }\n\n            __typename ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }               \n          }                 \n        }\n        \n        blockDN1(first: 9) {\n          items {\n            __typename ... on User {\n              ...userCommonProperties\n            }\n\n            __typename ... on Company {\n              ...companyCommonProperties\n            }\n\n            __typename ... on Municipality {\n              ...municipalityCommonProperties\n            }\n\n            __typename ... on Organization {\n              ...organizationCommonProperties\t                                                  \n            }\n\n            __typename ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }              \n          }        \n        }\n\n        blockDN2(first: 9) {\n          items {\n            __typename ... on User {\n              ...userCommonProperties\n            }\n\n            __typename ... on Company {\n              ...companyCommonProperties\n            }\n\n            __typename ... on Municipality {\n              ...municipalityCommonProperties\n            }\n\n            __typename ... on Organization {\n              ...organizationCommonProperties\t                                                  \n            }\n\n            __typename ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }                      \n          }\n        }                     \n      }\n    }\n  }\n}"
          }
        },
        "mailboxConversations": {
          "component": "conversations-page-template",
          "withGuard": true,
          "additionalCssClasses": "grayBg",
          "dataSource": {
            "$dynamicUI:resourceType": "graphql",
            "dataExpression": "(async (data) => {\n    let selectedMailbox;\n    const showBadge = false;\n\n    const mailboxes = _.get(data, \"user.mailBoxes\", []).map(x => $dynamicUiExtraService.mapMailboxToItem(x));\n    if($dynamicUiExtraService.getSelectedMailbox()) {\n      selectedMailbox = mailboxes.find(mailbox => mailbox.lookupId === $dynamicUiExtraService.getSelectedMailbox());\n      if(!selectedMailbox) {\n        selectedMailbox = mailboxes.find(mailbox => mailbox.type === 'User');\n      }\n    } else {\n      selectedMailbox = mailboxes.find(mailbox => mailbox.type === 'User');\n    }\n\n    const messagesResponse = await $dynamicUiExtraService.getMailboxConversations(selectedMailbox.lookupId);\n    const messages = messagesResponse.messages;\n    const cursor = messagesResponse.cursor; \n\n    const result =  {\n      mailboxes: mailboxes,\n      messages: messages,\n      targetMailbox: selectedMailbox,\n      showBadge: showBadge,\n      cursor: cursor\n    }\n    \n    $actionHelper.printData({ result, data })\n    return result;\n\n  }\n)(data)",
            "query": "query \n  { \n    user(id: $dynamicUiVariables->initialDataSource.profileId) {\n      mailBoxes {\n        mailBox\n         {\n          id\n          owner {\n            entity {\n              __typename ... on User {\n                id\n                firstName\n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Company {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Organization {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on DiplomaticMission {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Municipality {\n                id\n                name: title\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }"
          }
        },
        "my-profile": {
          "component": "my-profile-page-template",
          "withGuard": true,
          "additionalCssClasses": "grayBg",
          "dataSource": {
            "$dynamicUI:resourceType": "graphql",
            "dataExpression": "((data) => {\n    const canManage = $dynamicUiExtraService.checkIfUserCanManage(data); \n    const canAddPost = $dynamicUiExtraService.checkIfUserCanAddPost(data); \n    \n    const galleryId = $dynamicUiExtraService.getGalleryId(data.user);  \n    \n    const canFollow = $dynamicUiExtraService.checkIfCanFollow(data.user); \n    const canUnFollow = $dynamicUiExtraService.checkIfCanUnFollow(data.user);  \n    const canShare = $dynamicUiExtraService.checkIfCanShare(data.user); \n    const canInvite = $dynamicUiExtraService.checkIfCanInvite(data.user);  \n    const canSendMessage = $dynamicUiExtraService.checkIfCanSendMessage(data.user); \n\n    const generalDetailsInfo = $dynamicUiExtraService.prepareUserInfo(data.user, true); \n    const socialMediaInfo = $dynamicUiExtraService.prepareSocialMediaInfo(data.user); \n    \n    const canUploadImage = $dynamicUiExtraService.checkIfCanUploadImage(data.user);  \n    const canUploadVideoLink = $dynamicUiExtraService.checkIfCanUploadVideoLink(data.user); \n    const canUploadMedia = canUploadImage || canUploadVideoLink;\n\n    const badges =  $dynamicUiExtraService.prepareUserBadges(data.user, true);\n\n    const result =  {\n      ...data,\n      businessRoles: _.get(data, \"user.businessRoles\", []).map(x => $dynamicUiExtraService.mapBusinessRoleToItem(x)),\n      networkRoles: _.get(data, \"user.networkRoles\", []).map(x => $dynamicUiExtraService.mapNetworRoleToItem(x)),\n      peoples: _.get(data, \"user.people.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n      gallery: _.get(data, \"user.gallery.mediaGallery.galleryItems.items\", []).map(x => $dynamicUiExtraService.mapGalleryToItem(x)),\n      updates: _.get(data, \"user.updates.items\", []).map(x => $dynamicUiExtraService.mapPostToItem(x)), \n      generalDetailsInfo: generalDetailsInfo,\n      socialMediaInfo: socialMediaInfo,\n      galleryId: galleryId,\n      badges: badges,\n\n      canManage: canManage,\n      canAddPost: canAddPost,\n\n      canUploadImage: canUploadImage,\n      canUploadVideoLink: canUploadVideoLink,\n      canUploadMedia: canUploadMedia,\n\n      canFollow: canFollow,\n      canUnFollow: canUnFollow,\n      canShare: canShare,\n      canInvite: canInvite,\n      canSendMessage: canSendMessage\n    }\n    $actionHelper.printData({ result, data })\n    return result;\n  }\n)(data)",
            "query": "query \n  { \n    userMetadata{\n      actions{\n        canUpdate\n        canAddPost\n      }\n    }\n\n    user(id: $dynamicUiVariables->initialDataSource.profileId) {\n      id\n      firstName\n      lastName\n      shortBio\n\n      ...userProfession\n      ...userSector\n      ...userImage\n      ...userFeaturedRole \n      ...userPlaceDetails\n      ...userMunicipalityDetails\n      ...userContactDetails\n      ...userSocialMedia\n      ...userPeople\n      ...userBusinessRoles\n      ...userNetworkRoles\n      ...userMediaGallery\n      ...userActivities   \n\n      actions {\n        canFollow\n        canUnfollow\n        canShare\t\n        canInvite\n        canSendMessage\n      }\n\n      privacySettings {\n        contactEmail\n        contactPhone\n      }\n\n      statistics {\n        followers\n        following\n      }\n\n      roles {                 \n        role {\n          role\n          positionName\n          featured\n        }\n\n        entity {\n          __typename ... on Organization{\n            id\n            name\n            actions {\n              canUpdate\n            }\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }            \n          }\n          __typename ... on DiplomaticMission{\n            id\n            name\n            actions {\n              canUpdate\n            }                                     \n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }            \n          }\n          __typename ... on Company{\n            id\n            name\n            actions {\n              canUpdate\n            }                                     \n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n          }\n          __typename ... on Municipality{\n            id\n            name: title\n            actions {\n              canUpdate\n            }                                     \n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }            \n          }\n          __typename ... on OrganizationCommittee {\n            id\n            name\n            organization {\n              organization {\n                id\n                name\n                actions {\n                  canUpdate\n                }                            \n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }      \n                place {\n                  country {\n                    lookupId\n                    name\n                    isoCode\n                  }\n                  city {\n                    lookupId\n                    name\n                  }\n                }                          \n              }\n            }              \n          }\n          __typename ... on DiplomaticMissionCommittee {\n            id\n            name\n            diplomaticMission {\n              diplomaticMission {\n                id \n                name\n                actions {\n                  canUpdate\n                }                            \n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n                place {\n                  country {\n                    lookupId\n                    name\n                    isoCode\n                  }\n                  city {\n                    lookupId\n                    name\n                  }\n                }                \n              }\n            }              \n          }                      \n        }\n      }               \n\n    } \n  }"
          }
        }
      }
    },
    "town/manageTown/:id": {
      "component": "manageTown-page-template",
      "withGuard": true
    },
    "town/manageTownAdministrator/:id": {
      "component": "manageTownAdministrators-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const result =  {\n    ...data,\n    admins: _.get(data, \"municipality.admins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"municipality.admins.cursor\"),\n    actions: _.get(data, \"municipality.actions\", {})            \n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    municipality(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n    actions {\n      canRemoveAdmin\n    }\n\n     admins (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize){\n        items {\n          user {\n            ...userCommonProperties \n          }\n        }\n        cursor\n      }   \n    }\n  }"
      }
    },
    "town/addTownAdministrator/:id": {
      "component": "addTownAdministrator-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {     \n  const result =  {\n    ...data,\n    members: _.get(data, \"municipality.members.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"municipality.members.cursor\"),\n    actions: _.get(data, \"municipality.actions\", {})\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    municipality(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      title\n      ...municipalityImage\n\n      actions {\n        canAddAdmin\n        canInviteAdmin\n      }\n\n      members(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }   \n        }\n        cursor\n      }\n    }\n  }"
      }
    },
    "town/edit/:id": {
      "component": "editTown-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {     \n  const result =  {\n    ...data,\n    actions: _.get(data, \"municipality.actions\", {})\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    municipality(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id  \n      title\n      about\n      etymology\n      history\n\n      actions {\n        canUploadCover\n      }         \n\n      country {\n        lookupId\n        isoCode\n        name\n      }\n      \n      ...municipalityImage\n      ...municipalityContactDetails\n      ...municipalitySocialMedia\n    }\n  }"
      }
    },
    "town/members/:id": {
      "component": "membersTown-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    members: _.get(data, \"municipality.members.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"municipality.members.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    municipality(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      members(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }\n        }    \n        cursor  \n      }               \n    }\n  }"
      }
    },
    "town/followers/:id": {
      "component": "followersTown-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    followers: _.get(data, \"municipality.followers.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"municipality.followers.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    municipality(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      followers(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }   \n        }\n        cursor      \n      }               \n    }\n  }"
      }
    },
    "town/viewTownAdministrator/:id": {
      "component": "administratorsTown-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    ...data,\n    admins: _.get(data, \"municipality.admins.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    cursor: _.get(data, \"municipality.admins.cursor\")\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    municipality(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      admins (after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize){\n        items {\n          user {\n            ...userCommonProperties\n          }\n        }\n        cursor\n      }\n    }\n  }"
      }
    },
    "town/applyToBeAmbassadorNotes/:id": {
      "component": "applyToBeAmbassadorNotes-page-template",
      "withGuard": true
    },
    "town/applyToBeAmbassadorAction/:id": {
      "component": "applyToBeAmbassadorAction-page-template",
      "withGuard": true
    },
    "town/:id": {
      "component": "town-page-template",
      "additionalCssClasses": "grayBg",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const canApplyToBeAmbassadorAction = $dynamicUiExtraService.checkIfCanApplyToBeAnAmbassador(data.municipality); \n  const etymology = _.get(data.municipality, 'etymology');\n\n  const canInvite = $dynamicUiExtraService.checkIfCanInvite(data.municipality); \n  const canManage = $dynamicUiExtraService.checkIfCanManage(data.municipality); \n  const canShare = $dynamicUiExtraService.checkIfCanShare(data.municipality); \n  const canFollow = $dynamicUiExtraService.checkIfCanFollow(data.municipality); \n  const canUnFollow = $dynamicUiExtraService.checkIfCanUnFollow(data.municipality); \n  const canSendMessage = $dynamicUiExtraService.checkIfCanSendMessage(data.municipality); \n  const canAddPost = $dynamicUiExtraService.checkIfCanAddPost(data.municipality); \n  const canAddEvent = $dynamicUiExtraService.checkIfCanAddEvent(data.municipality);  \n\n  const generalDetailsInfo = $dynamicUiExtraService.prepareTownInfo(data.municipality, canManage); \n  const geoLocationInfo = $dynamicUiExtraService.prepareTownGeoLocation(data.municipality); \n  const socialMediaInfo = $dynamicUiExtraService.prepareSocialMediaInfo(data.municipality); \n  const badges = $dynamicUiExtraService.prepareTownBadges(data.municipality, canManage);\n\n  const canUploadImage = $dynamicUiExtraService.checkIfCanUploadImage(data.municipality);  \n  const canUploadVideoLink = $dynamicUiExtraService.checkIfCanUploadVideoLink(data.municipality); \n  const canUploadMedia = canUploadImage || canUploadVideoLink;\n  const galleryId = $dynamicUiExtraService.getGalleryId(data.municipality);  \n\n  const municipalityId = _.get(initialDataSource, \"municipality.municipality.id\", null);\n  const myHomeTown = municipalityId === data.municipality.id;\n\n  const cityOriginId = _.get(initialDataSource, \"placeOfOrigin.city.lookupId\", null);\n\n  const result =  {\n    ...data,\n    electedMembers: _.get(data, \"municipality.electedMembers.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    members: _.get(data, \"municipality.members.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    ambassadors: _.get(data, \"municipality.ambassadors.items\", []).map(x => $dynamicUiExtraService.mapUserToItem(x)),\n    admins: _.get(data, \"municipality.admins.items\", []).map(x =>  $dynamicUiExtraService.mapUserToItem(x)),\n    gallery: _.get(data, \"municipality.gallery.mediaGallery.galleryItems.items\", []).map(x => $dynamicUiExtraService.mapGalleryToItem(x)),\n    updates: _.get(data, \"municipality.updates.items\", []).map(x => $dynamicUiExtraService.mapUpdateToItem(x)),\n    receiverMailboxId: _.get(data, \"municipality.mailBox.mailBox.id\", null),\n    towns: _.get(data, \"municipality.towns\", []),\n\n    municipalityId: municipalityId,\n    cityOriginId: cityOriginId,\n    galleryId: galleryId,\n    etymology: etymology,\n    generalDetailsInfo: generalDetailsInfo,\n    geoLocationInfo: geoLocationInfo,\n    socialMediaInfo: socialMediaInfo,\n    badges: badges,\n\n    canApplyToBeAmbassadorAction: canApplyToBeAmbassadorAction,\n    canInvite: canInvite,\n    canManage: canManage,\n    canShare: canShare,\n    canFollow: canFollow,\n    canUnFollow: canUnFollow,\n    canSendMessage: canSendMessage,\n    canAddPost: canAddPost,\n    canAddEvent: canAddEvent,\n    canUploadMedia: canUploadMedia,\n    canUploadImage: canUploadImage,\n    canUploadVideoLink: canUploadVideoLink,\n\n    myHomeTown: myHomeTown\n  }\n\n  $actionHelper.printData({ result, data })\n  return result;\n}\n)(data)",
        "query": "query \n  { \n    municipality(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      id\n      title\n      about\n      etymology\n      history\n      federationName\n      \n      towns\n      geoCoordinates\n      distanceFromBeirut\n      altitude\n      surface\n\n      country {\n        lookupId\n        isoCode\n        name\n      }\n\n      ...municipalityImage\n      ...municipalityContactDetails\n      ...municipalitySocialMedia\n      ...municipalityMediaGallery\n      ...municipalityActivities\n\n      mailBox {\n        mailBox {\n          id\n        }\n      }\n\n      actions {\n        canInvite\n        canAddPost\n        canAddEvent\n\n        canShare\n        canFollow\n        canUnfollow\n        canSendMessage\n\n        canUpdate\n        canApplyToBeAmbassador\n      }\n\n      governateDistrict {\n        governate {\n          name \n          lookupId\n        }\n        district {\n          governateId\n          lookupId\n          name\n        }\n      }\n\n      statistics {\n        followers\n        officials\n      }\n                    \n      electedMembers(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.maxPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }   \n        }\n      }\n\n      ambassadors(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.maxPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }   \n        }\n      }\n\n      members(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.domainPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }   \n        }\n      }\n\n      admins(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.domainPageSize) {\n        items {\n          user {\n            ...userCommonProperties\n          }\n        }\n      }\n\n      followers(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.domainPageSize){\n        items {\n          user {\n            ...userCommonProperties\n          }   \n        }\n      }     \n    }\n  }"
      }
    },
    "searchPage": {
      "component": "search-page",
      "withGuard": true
    },
    "createPost/:type/:id": {
      "component": "createPost-page-template",
      "withGuard": true
    },
    "editPost/:type/:id": {
      "component": "editPost-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {const result =  {\n    id: _.get(data, \"post.id\", null),\n    title: _.get(data, \"post.title\", null),\n    description: _.get(data, \"post.description\", null),\n    image: _.get(data, \"post.photoCover.imageThumbnailUrl\", null),\n    actorId: _.get(data, 'post.owner.id', null),\n    actorName: _.get(data, 'post.owner.__typename', '') === 'User' ? (_.get(data, 'post.owner.firstName', '') + ' ' + _.get(data, 'post.owner.lastName', '')) : _.get(data, 'post.owner.name', ''),\n    actorImage: _.get(data, 'post.owner.photoCover.imageThumbnailUrl', null),\n    actorType: _.camelCase(_.get(data, 'post.owner.__typename', \"\"))\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query  { \n  post(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n    id\n    title\n    description\n    photoCover {\n      imageUrl\n      imageThumbnailUrl\n    }\n\n    owner {\n      __typename ... on User {\n        id\n        firstName \n        lastName\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n      }\n      \n      __typename ... on  Municipality {\n        id\n        name: title\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n      }\n      \n      __typename ... on Company {\n        id\n        name\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n      }\n      \n      __typename ... on Organization {\n        id\n        name\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n      }\n      \n      __typename ... on DiplomaticMission {\n        id\n        name\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n      }\n    } \n  }\n}"
      }
    },
    "createEvent/:type/:id": {
      "component": "createEvent-page-template",
      "withGuard": true
    },
    "editEvent/:type/:id": {
      "component": "editEvent-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const result =  {\n    id: _.get(data, \"event.id\", null),\n    title: _.get(data, \"event.title\", null),\n    startDate: _.get(data, \"event.startDate\", null),\n    endDate: _.get(data, \"event.endDate\", null),\n    location: _.get(data, \"event.location\", null),\n    description: _.get(data, \"event.description\", null),\n    image: _.get(data, \"event.photoCover.imageThumbnailUrl\", null),\n    actorId: _.get(data, 'event.owner.id', null),\n    actorName: _.get(data, 'event.owner.name', ''),\n    actorImage: _.get(data, 'event.owner.photoCover.imageThumbnailUrl', null),\n    actorType: _.camelCase(_.get(data, 'event.owner.__typename', \"\"))\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query  { \n  event(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n    id\n    title\n    startDate\n    endDate\n    location\n    description\n    photoCover {\n      imageUrl\n      imageThumbnailUrl\n    }\n    owner {\n      __typename ... on User {\n        id\n        firstName \n        lastName\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n      }\n      \n      __typename ... on  Municipality {\n        id\n        name: title\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n      }\n      \n      __typename ... on Company {\n        id\n        name\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n      }\n      \n      __typename ... on Organization {\n        id\n        name\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n      }\n      \n      __typename ... on DiplomaticMission {\n        id\n        name\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n      }\n    }             \n  }\n}"
      }
    },
    "addMedia/:id": {
      "component": "addMedia-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "localData"
      }
    },
    "addProduct/:id": {
      "component": "addProduct-page-template",
      "withGuard": true
    },
    "editProduct/:id": {
      "component": "editProduct-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const result =  {\n    id: _.get(data, \"offer.id\", null),\n    offerName: _.get(data, \"offer.name\", null),\n    description: _.get(data, \"offer.description\", null),\n\n    sector: _.get(data, \"offer.sector\", null),\n    countries: _.get(data, \"offer.countries\", []),\n    keywords: _.get(data, \"offer.keywords\", []),\n\n    image: _.get(data, \"offer.photoCover.imageThumbnailUrl\", null),\n\n    actorId: _.get(data, 'offer.owner.id', null),\n    actorName: _.get(data, 'offer.owner.name', ''),\n    actorImage: _.get(data, 'offer.owner.photoCover.imageThumbnailUrl', null),\n    actorType: 'Company'\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query  { \n  offer(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n    id\n    name\n    description\n  \n    sector {\n      lookupId\n      name\n    }\n    \n    countries {\n      lookupId\n      name\n      isoCode\n    }\n    \n    keywords {\n      lookupId\n      name\n    }\n  \n    photoCover {\n      imageUrl\n      imageThumbnailUrl\n    }\n\n    owner {\n      id\n      name\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }          \n  }\n}"
      }
    },
    "addService/:id": {
      "component": "addService-page-template",
      "withGuard": true
    },
    "editService/:id": {
      "component": "editService-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const result =  {\n    id: _.get(data, \"offer.id\", null),\n    offerName: _.get(data, \"offer.name\", null),\n    description: _.get(data, \"offer.description\", null),\n\n    sector: _.get(data, \"offer.sector\", null),\n    countries: _.get(data, \"offer.countries\", []),\n    keywords: _.get(data, \"offer.keywords\", []),\n\n    image: _.get(data, \"offer.photoCover.imageThumbnailUrl\", null),\n    actorId: _.get(data, 'offer.owner.id', null),\n    actorName: _.get(data, 'offer.owner.name', ''),\n    actorImage: _.get(data, 'offer.owner.photoCover.imageThumbnailUrl', null),\n    actorType: 'Company'\n\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query  { \n  offer(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n    id\n    name\n    description\n  \n    sector {\n      lookupId\n      name\n    }\n    \n    countries {\n      lookupId\n      name\n      isoCode\n    }\n    \n    keywords {\n      lookupId\n      name\n    }\n  \n    photoCover {\n      imageUrl\n      imageThumbnailUrl\n    }\n\n    owner {\n      id\n      name\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }           \n  }\n}"
      }
    },
    "addFranchise/:id": {
      "component": "addFranchise-page-template",
      "withGuard": true
    },
    "editFranchise/:id": {
      "component": "editFranchise-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const result =  {\n    id: _.get(data, \"offer.id\", null),\n    offerName: _.get(data, \"offer.name\", null),\n    description: _.get(data, \"offer.description\", null),\n\n    sector: _.get(data, \"offer.sector\", null),\n    countries: _.get(data, \"offer.countries\", []),\n    keywords: _.get(data, \"offer.keywords\", []),\n\n    image: _.get(data, \"offer.photoCover.imageThumbnailUrl\", null),\n    actorId: _.get(data, 'offer.owner.id', null),\n    actorName: _.get(data, 'offer.owner.name', ''),\n    actorImage: _.get(data, 'offer.owner.photoCover.imageThumbnailUrl', null),\n    actorType: 'Company'\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query  { \n  offer(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n    id\n    name\n    description\n  \n    sector {\n      lookupId\n      name\n    }\n    \n    countries {\n      lookupId\n      name\n      isoCode\n    }\n    \n    keywords {\n      lookupId\n      name\n    }\n  \n    photoCover {\n      imageUrl\n      imageThumbnailUrl\n    }\n\n    owner {\n      id\n      name\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }          \n  }\n}"
      }
    },
    "gallery/:type/:id": {
      "component": "gallery-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const domainType = $activatedRoute.snapshot.params.type;\n  const result =  {\n    ...data,\n    gallery: _.get(data, domainType + '.gallery.mediaGallery.galleryItems.items', []).map(x => $dynamicUiExtraService.mapGalleryToItem(x)),\n    cursor: _.get(data, domainType + '.gallery.mediaGallery.galleryItems.cursor')\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}\n\n)(data)",
        "query": "query \n  { \n    $dynamicUiExpression((|$activatedRoute.snapshot.params.type|))(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      gallery {\n        mediaGallery {\n          id\n          name\n          galleryItems(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.galleryPageSize) {\n            items{\n              media {\n                id\n                createdDate \n                \n                actions {\n                  canDelete\n                }\n\n                creator {\n                  user {\n                    id\n                    firstName\n                    lastName\n                  }\n                }\n                details {\n                __typename ... on ImageMedia{\n                    imageUrl\n                    imageThumbnailUrl\n                    caption\n                } \n                __typename ... on VideoLinkMedia{\n                    imageUrl\n                    imageThumbnailUrl\n                    videoUrl\n                    caption\n                } \n                  \n                }\n              }\n            }\n            cursor\n          }\n        }\n      }             \n    }\n  }"
      }
    },
    "imageViewer": {
      "component": "imageViewer-page-template",
      "additionalCssClasses": "blackBg",
      "withGuard": true
    },
    "userUpdates/:id": {
      "component": "updates-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const result =  {\n    updates: _.get(data, 'user.updates.items', []).map(x => $dynamicUiExtraService.mapPostToItem(x)),\n    cursor:  _.get(data, 'user.updates.cursor', null),\n    userUpdates: true\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query \n  { \n    user(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      updates(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          entity {\n            id\n            title\n            description\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n            creater {\n              user {\n                id\n                firstName\n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }                \n              }\n            } \n            \n            owner {\n              __typename ... on User {\n                id\n                firstName \n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on  Municipality {\n                id\n                name: title\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Company {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Organization {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on DiplomaticMission {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            }\n                            \n            createdDate            \n          }\n        }\n        cursor\n      }              \n    }\n  }"
      }
    },
    "updates/:type/:id": {
      "component": "updates-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  const domainType = $activatedRoute.snapshot.params.type;\n  const result =  {\n    updates: _.get(data, domainType + '.updates.items', []).map(x => $dynamicUiExtraService.mapUpdateToItem(x)),\n    cursor:  _.get(data, domainType + '.updates.cursor', null),\n    userUpdates: false\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query \n  { \n    $dynamicUiExpression((|$activatedRoute.snapshot.params.type|))(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n      updates(after: null, first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          entity {\n            __typename ... on Event {\n                id\n                title\n                description\n              \n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n                creater {\n                  user {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                } \n\n                owner {\n                  __typename ... on User {\n                    id\n                    firstName \n                    lastName\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on  Municipality {\n                    id\n                    name: title\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on Company {\n                    id\n                    name\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on Organization {\n                    id\n                    name\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on DiplomaticMission {\n                    id\n                    name\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                }      \n                                    \n                createdDate\n            }\n            \n            __typename ... on Post {\n                id\n                title\n                description\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n                creater {\n                  user {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                } \n\n                owner {\n                  __typename ... on User {\n                    id\n                    firstName \n                    lastName\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on  Municipality {\n                    id\n                    name: title\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on Company {\n                    id\n                    name\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on Organization {\n                    id\n                    name\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on DiplomaticMission {\n                    id\n                    name\n                    photoCover {\n                      imageUrl\n                      imageThumbnailUrl\n                    }\n                  }\n                }                        \n                createdDate            \n            }\n            \n          }\n        }\n        cursor\n      }\n    }\n  }"
      }
    },
    "offerDetails/:id": {
      "component": "offer-details-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  \n  if(!data.offer) {\n    $actionHelper.showToast(\"*general-label.invalid_activity_error_message*\");\n    $actionHelper.goBackPage();\n    return;\n  }\n\n  const result =  {\n    card: $dynamicUiExtraService.prepareOfferProperties(data.offer),\n    comments: _.get(data, \"offer.comments.items\", []).map(x => $dynamicUiExtraService.mapCommentToItem(data.offer, x)),\n    cursor: _.get(data, \"offer.comments.cursor\", false)\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query  { \n  offer(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n    ...commonOfferProperties\n  }\n}"
      }
    },
    "postDetails/:id": {
      "component": "card-details-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n\n  if(!data.post) {\n    $actionHelper.showToast(\"*general-label.invalid_activity_error_message*\");\n    $actionHelper.goBackPage();\n    return;\n  }\n\n  const result =  {\n    card: $dynamicUiExtraService.preparePostProperties(data.post),\n    comments: _.get(data, \"post.comments.items\", []).map(x => $dynamicUiExtraService.mapCommentToItem(data.post, x)),\n    cursor: _.get(data, \"post.comments.cursor\", false)\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query  { \n  post(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n    ...commonPostProperties\n  }\n}"
      }
    },
    "eventDetails/:id": {
      "component": "card-details-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "graphql",
        "dataExpression": "((data) => {\n  \n  if(!data.event) {\n    $actionHelper.showToast(\"*general-label.invalid_activity_error_message*\");\n    $actionHelper.goBackPage();\n    return;\n  }\n\n  const result =  {\n    card: $dynamicUiExtraService.prepareEventProperties(data.event),\n    comments: _.get(data, \"event.comments.items\", []).map(x => $dynamicUiExtraService.mapCommentToItem(data.event, x)),\n    cursor: _.get(data, \"event.comments.cursor\", false)\n  }\n  $actionHelper.printData({ result, data })\n  return result;\n}   \n)(data)",
        "query": "query { \n  event(id: $dynamicUiVariables->$activatedRoute.snapshot.params.id) {\n    ...commonEventProperties\n  }\n}"
      }
    },
    "editComment/:id": {
      "component": "editComment-page-template",
      "withGuard": true,
      "dataSource": {
        "$dynamicUI:resourceType": "localData"
      }
    }
  },
  "predefinedGraphQlFragments": {
    "userImage": "on User {\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }\n}",
    "userActivities": "on User {\n  updates(after: null, first: 4) {\n    items {\n      entity {\n        id\n        title\n        description\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n        creater {\n          user {\n            id\n            firstName\n            lastName\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }                \n          }\n        } \n\n        owner {\n          __typename ... on User {\n            id\n            firstName \n            lastName\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n          }\n          \n          __typename ... on  Municipality {\n            id\n            name: title\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n          }\n          \n          __typename ... on Company {\n            id\n            name\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n          }\n          \n          __typename ... on Organization {\n            id\n            name\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n          }\n          \n          __typename ... on DiplomaticMission {\n            id\n            name\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n          }\n        }\n\n        createdDate            \n      }\n    }\n    cursor\n  }\n}",
    "userFeaturedRole": "on User {\n  placeOfOrigin {\n    country {\n      lookupId\n      name\n      isoCode\n    }\n    city {\n      lookupId\n      name\n    }\n  }\n\n  featuredRole {\n    entity {\n      __typename\n\n      ... on DiplomaticMissionCommittee {\n        name\n      }\n\n      ... on OrganizationCommittee {\n        name\n      }          \n      ... on Organization {\n        name \n      }\n      ... on DiplomaticMission {\n        name \n      }\n\n      ... on Company {\n        name\n      }\n      ... on Municipality {\n        name: title\n      }                        \n    }\n    role {\n      positionName\n    }\n  }      \n}",
    "userPlaceDetails": "on User {\n  placeOfOrigin {\n    country {\n      lookupId\n      name\n      isoCode\n    }\n    city {\n      lookupId\n      name\n    }\n  }\n\n  placeOfResidence {\n    country {\n      lookupId\n      name\n      isoCode\n    }\n    city { \n      lookupId\n      name\n    }\n  }\n}",
    "userMunicipalityDetails": "on User {\n  municipality {\n    municipality {\n      id\n      title\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n  }    \n}",
    "userContactDetails": "on User {\n  contactDetails {\n    contactEmail\n    phone {\n      countryCode\n      number\n      isoCode\n    }\n  }\n}",
    "userSocialMedia": "on User {\n  socialMedia {\n    facebook\n    linkedin\n    twitter\n    instagram\n  }\n}",
    "userPeople": "on User {\n  people(after: null, first: 9) {\n    items { \n      user {\n        id\n        firstName\n        lastName      \n        actions {\n          canFollow\t\n          canUnfollow\n        }\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n        placeOfOrigin {\n          city {\n            lookupId\n            name\n          }\n          country {\n            lookupId\n            name\n            isoCode\n          }\n        }\n        placeOfResidence {\n          city { \n            lookupId\n            name\n          }\n          country {\n            lookupId\n            name\n            isoCode\n          }\n        }\n        featuredRole {\n          entity {\n            __typename\n            ... on DiplomaticMissionCommittee {\n              name\n            }\n\n            ... on Company {\n              name\n            }\n\n            ... on OrganizationCommittee {\n              name\n            }                \n            ... on Organization {\n              name \n            }\n            ... on DiplomaticMission {\n              name \n            }\n            ... on Municipality {\n              name: title  \n            }                          \n          }\n          role {\n            positionName\n          }\n        }     \n      }\n    }\n  }\n}",
    "userBusinessRoles": "on User {\n  businessRoles {\n    company {\n      id\n      name\n      actions {\n        canFollow\t\n        canUnfollow\n        canUpdateRole \n        canFeatureRole\n        canUnfeatureRole\n        canRemoveRole\n      }\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n      place {\n        country {\n          lookupId\n          name\n          isoCode\n        }\n        city {\n          lookupId\n          name\n        }\n      }\n    }\n    role {\n      featured\n      positionName\n      role\n    }\n  } \n}",
    "userNetworkRoles": "on User {\n  networkRoles {\n    role {\t\n      featured\n      positionName\n      role\n    }\n    entity {\n      __typename\n\n      ... on OrganizationCommittee {\n        id\n        name\n\n        actions {\n          canUpdateRole\n          canFeatureRole\n          canUnfeatureRole\n          canRemoveRole \n        }\n\n        organization {\n          organization {\n            id\n            name\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }      \n            place {\n              country {\n                lookupId\n                name\n                isoCode\n              }\n              city {\n                lookupId\n                name\n              }\n            }  \n            \n            actions {\n              canFollow\t\n              canUnfollow\n            }                          \n          }\n        }\n      }\n\n      ... on DiplomaticMissionCommittee {\n        id\n        name\n\n        actions {\n          canUpdateRole\n          canFeatureRole\n          canUnfeatureRole\n          canRemoveRole\n        }\n\n        diplomaticMission {\n          diplomaticMission {\n            id \n            name\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n            place {\n              country {\n                lookupId\n                name\n                isoCode\n              }\n              city {\n                lookupId\n                name\n              }\n            }\n\n            actions {\n              canFollow\t\n              canUnfollow\n            }                \n          }\n        }\n      }\n      \n      ... on Organization {\n        id\n        name\n        # organizationType\n        # organizationCategory\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n        place {\n          country {\n            lookupId\n            name\n            isoCode\n          }\n          city {\n            lookupId\n            name\n          }\n        }\n        actions {\n          canFollow\t\n          canUnfollow\n          canUpdateRole\n          canFeatureRole\n          canUnfeatureRole\n          canRemoveRole\n        }\n      }\n\n      ... on DiplomaticMission {\n        id\n        name\n        diplomaticMissionType\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n        place {\n          country {\n            lookupId\n            isoCode\n            name\n          }\n          city {\n            lookupId\n            name\n          }\n        }\n        actions {\n          canFollow\t\n          canUnfollow\n          canUpdateRole\n          canFeatureRole\n          canUnfeatureRole\n          canRemoveRole\n        }\n      }\n\n      ... on Municipality {\n        id\n        name: title\n\n        governateDistrict {\n          governate {\n            name \n            lookupId\n          }\n          district {\n            governateId\n            lookupId\n            name\n          }\n        }\n\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n        \n        actions {\n          canFollow\t\n          canUnfollow\n        }\n        \n        country {\n          lookupId\n          isoCode\n          name\n        }  \n      }\n    }\n  }\n}",
    "userMediaGallery": "on User {\n  gallery {\n    mediaGallery {\n      id\n      name\n      actions {\n        canUploadImage\n        canUploadVideoLink\n      }\n      galleryItems(after: null, first: 4){\n        items{\n          media {\n            id\n            createdDate \n            creator {\n              user {\n                id\n                firstName\n                lastName\n              }\n            }\n            details {\n            __typename ... on ImageMedia{\n                imageUrl\n                imageThumbnailUrl\n                caption\n            } \n            __typename ... on VideoLinkMedia{\n                imageUrl\n                imageThumbnailUrl\n                videoUrl\n                caption\n            } \n              \n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "userProfession": "on User {\n  profession {\n    lookupId\n    name\n  }      \n}",
    "userSector": "on User {\n  sector {\n    lookupId\n    name\n  }\n}",
    "userCommonProperties": "on User {\n  id\n  firstName\n  lastName      \n  actions {\n    canFollow\n    canUnfollow\n  }\n\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }\n  placeOfOrigin {\n    city {\n      lookupId\n      name\n    }\n    country {\n      lookupId\n      name\n      isoCode\n    }\n  }\n  placeOfResidence {\n    city { \n      lookupId\n      name\n    }\n    country {\n      lookupId\n      name\n      isoCode\n    }\n  }\n  featuredRole {\n    entity {\n      __typename\n      ... on DiplomaticMissionCommittee {\n        name\n      }\n\n      ... on Company {\n        name\n      }\n\n      ... on OrganizationCommittee {\n        name\n      }          \n      ... on Organization {\n        name \n      }\n      ... on DiplomaticMission {\n        name \n      }\n      ... on Municipality {\n        name: title  \n      }                          \n    }\n    role {\n      positionName\n    }\n  } \n}",
    "userBasicDetailsProperties": "on User {\n  id\n  firstName\n  lastName    \n  actions {\n    canFollow\t\n    canUnfollow\n  }\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }\n\n  placeOfOrigin {\n    city {\n      lookupId\n      name\n    }\n    country {\n      lookupId\n      name\n      isoCode\n    }\n  }\n\n  placeOfResidence {\n    city {\n      lookupId\n      name\n    }\n    country {\n      lookupId\n      name\n      isoCode\n    }\n  }\n\n  featuredRole {\n    entity {\n      __typename\n      ... on DiplomaticMissionCommittee {\n        name\n      }\n      ... on Company {\n        name\n      }\n      ... on OrganizationCommittee {\n        name\n      }          \n      ... on Organization {\n        name \n      }\n      ... on DiplomaticMission {\n        name \n      }\n      ... on Municipality {\n        name: title  \n      }                          \n    }\n    role {\n      positionName\n    }\n  }   \n}",
    "userRoles": "on User {\n  roles {                 \n    role {\n      role\n      positionName\n      featured\n    }\n\n    entity {\n      __typename ... on Organization{\n        id\n        name\n        actions {\n          canUpdate\n        }\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }   \n\n        mailBox {\n          mailBox {\n            id\n          }\n        }                    \n      }\n      __typename ... on DiplomaticMission{\n        id\n        name\n        actions {\n          canUpdate\n        }\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n\n        mailBox {\n          mailBox {\n            id\n          }\n        }               \n      }\n      __typename ... on Company{\n        id\n        name\n        actions {\n          canUpdate\n        }                                 \n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n\n        mailBox {\n          mailBox {\n            id\n          }\n        }               \n      }\n      __typename ... on Municipality{\n        id\n        name: title\n        actions {\n          canUpdate\n        }                                 \n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }    \n\n        mailBox {\n          mailBox {\n            id\n          }\n        }                       \n      }\n      __typename ... on OrganizationCommittee {\n        id\n        name\n        organization {\n          organization {\n            id\n            name\n            actions {\n              canUpdate\n            }\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }      \n            place {\n              country {\n                lookupId\n                name\n                isoCode\n              }\n              city {\n                lookupId\n                name\n              }\n            }    \n            mailBox {\n              mailBox {\n                id\n              }\n            }                                         \n          }\n        }              \n      }\n      __typename ... on DiplomaticMissionCommittee {\n        id\n        name\n        diplomaticMission {\n          diplomaticMission {\n            id \n            name\n            actions {\n              canUpdate\n            }\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n            place {\n              country {\n                lookupId\n                name\n                isoCode\n              }\n              city {\n                lookupId\n                name\n              }\n            }   \n            mailBox {\n              mailBox {\n                id\n              }\n            }                                \n          }\n        }              \n      }                      \n    }\n  }    \n}",
    "companyCommonProperties": "on Company {\n  id\n  name\n  companyType\n\n  actions {\n    canFollow\t\n    canUnfollow\n    canAddMember\n    canCreateRole\n  }\n\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }\n  place {\n    country {\n      lookupId\n      isoCode\n      name\n    }\n    city {\n      lookupId\n      name\n    }\n  }\n}",
    "companyActivities": "on Company {\n  updates(after: null, first: 4) {\n    items {\n      entity {\n        __typename ... on Event {\n            id\n            title\n            description\n          \n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n            creater {\n              user {\n                id\n                firstName\n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            } \n\n            owner {\n              __typename ... on User {\n                id\n                firstName \n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on  Municipality {\n                id\n                name: title\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Company {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Organization {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on DiplomaticMission {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            }\n\n            createdDate\n        }\n        \n        __typename ... on Post {\n            id\n            title\n            description\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n            creater {\n              user {\n                id\n                firstName\n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            }\n\n            owner {\n              __typename ... on User {\n                id\n                firstName \n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on  Municipality {\n                id\n                name: title\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Company {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Organization {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on DiplomaticMission {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            }\n\n            createdDate            \n        }\n      }\n    }\n    cursor\n  }\n}",
    "companyMediaGallery": "on Company {\n  gallery {\n    mediaGallery {\n      id\n      name\n      actions {\n        canUploadImage\n        canUploadVideoLink\n      }\n      galleryItems(after: null, first: 4) {\n        items{\n          media {\n            id\n            createdDate \n            creator {\n              user {\n                id\n                firstName\n                lastName\n              }\n            }\n            details {\n            __typename ... on ImageMedia{\n                imageUrl\n                imageThumbnailUrl\n                caption\n            } \n            __typename ... on VideoLinkMedia{\n                imageUrl\n                imageThumbnailUrl\n                videoUrl\n                caption\n            } \n              \n            }\n          }\n        }\n      }\n    }\n  }      \n}",
    "companyContactDetails": "on Company {\n  contactUs {\n    address\n    email\n    poBox\n    website\n    phone {\n      countryCode\n      isoCode\n      number\n    }\n  }\n}",
    "companySocialMedia": "on Company {\n  socialMedia {\n    facebook\n    linkedin\n    twitter\n    instagram\n  }\n}",
    "companyImage": "on Company {\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }      \n}",
    "companyPlaces": "on Company {\n  place {\n    country {\n      lookupId\n      isoCode\n      name\n    }\n    city {\n      lookupId\n      name\n    }\n  }\n}",
    "companyChildBranches": "on Company {\n  branches{\n    ...companyChildBranch\n    branches{\n      ...companyChildBranch\n      branches{\n        ...companyChildBranch\n        branches{\n          ...companyChildBranch\n          branches{\n            ...companyChildBranch\n            branches{\n              ...companyChildBranch\n              branches{\n                ...companyChildBranch\n                branches{\n                  ...companyChildBranch\n                  branches{\n                    ...companyChildBranch\n                    branches{\n                      ...companyChildBranch\n                      branches{\n                        ...companyChildBranch\n                        branches{\n                          ...companyChildBranch\n                          branches{\n                            ...companyChildBranch\n                            branches{\n                              ...companyChildBranch\n                              branches{\n                                ...companyChildBranch\n                                branches{\n                                  ...companyChildBranch\n                                  branches{\n                                    ...companyChildBranch\n                                    branches{\n                                      ...companyChildBranch\n                                      branches{\n                                        ...companyChildBranch\n                                        branches{\n                                          ...companyChildBranch\n                                          branches{\n                                            ...companyChildBranch\n                                            branches{\n                                              ...companyChildBranch\n                                              branches{\n                                                ...companyChildBranch\n                                                branches{\n                                                  ...companyChildBranch\n                                                  branches{\n                                                    ...companyChildBranch\n                                                    branches{\n                                                      ...companyChildBranch\n                                                      branches{\n                                                        ...companyChildBranch\n                                                        branches{\n                                                          ...companyChildBranch\n                                                          branches{\n                                                            ...companyChildBranch\n                                                            branches{\n                                                              ...companyChildBranch\n                                                              branches{\n                                                                ...companyChildBranch\n                                                                branches{\n                                                                  ...companyChildBranch\n                                                                  branches{\n                                                                    ...companyChildBranch\n                                                                    branches{\n                                                                      ...companyChildBranch\n                                                                      branches{\n                                                                        ...companyChildBranch\n                                                                      }                  \n                                                                    }\n                                                                  }\n                                                                }            \n                                                              }                                                                  \n                                                            }                  \n                                                          }\n                                                        }\n                                                      }            \n                                                    }\n                                                  }\n                                                }            \n                                              }\n                                            }\n                                          }\n                                        }                  \n                                      }\n                                    }\n                                  }            \n                                }\n                              }\n                            }            \n                          }\n                        }\n                      }\n                    }                  \n                  }\n                }\n              }            \n            }\n          }\n        }            \n      }\n    }\n  }\n}",
    "companyChildBranch": "on Branch {\n  id\n  name\n  companyType\n  \n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }\n\n  place {\n    country {\n      lookupId\n      isoCode\n      name\n    }\n    city{\n      lookupId \n      name\n    }\n  }\n}",
    "companyParentBranches": "on Company {\n  parent{\n    ...companyParentBranch\n    parent{\n      ...companyParentBranch\n      parent{\n        ...companyParentBranch\n        parent{\n          ...companyParentBranch\n          parent{\n            ...companyParentBranch\n            parent{\n              ...companyParentBranch\n              parent{\n                ...companyParentBranch\n                parent{\n                  ...companyParentBranch\n                  parent{\n                    ...companyParentBranch\n                    parent{\n                      ...companyParentBranch\n                      parent{\n                        ...companyParentBranch\n                        parent{\n                          ...companyParentBranch\n                          parent{\n                            ...companyParentBranch\n                            parent{\n                              ...companyParentBranch\n                              parent{\n                                ...companyParentBranch\n                                parent{\n                                  ...companyParentBranch\n                                  parent{\n                                    ...companyParentBranch\n                                    parent{\n                                      ...companyParentBranch\n                                      parent{\n                                        ...companyParentBranch\n                                        parent{\n                                          ...companyParentBranch\n                                          parent{\n                                            ...companyParentBranch\n                                            parent{\n                                              ...companyParentBranch\n                                              parent{\n                                                ...companyParentBranch\n                                                parent{\n                                                  ...companyParentBranch\n                                                  parent{\n                                                    ...companyParentBranch\n                                                    parent{\n                                                      ...companyParentBranch\n                                                      parent{\n                                                        ...companyParentBranch\n                                                        parent{\n                                                          ...companyParentBranch\n                                                          parent{\n                                                            ...companyParentBranch\n                                                            parent{\n                                                              ...companyParentBranch\n                                                            }\n                                                          }\n                                                        }      \n                                                      }\n                                                    }\n                                                  }      \n                                                }        \n                                              }\n                                            }      \n                                          }\n                                          \n                                        }\n                                      }\n                                    }      \n                                  }\n                                }\n                              }      \n                            }        \n                          }\n                        }      \n                      }\n                    }\n                  }\n                }      \n              }\n            }\n          }      \n        }        \n      }\n    }      \n  }\n}",
    "companyParentBranch": "on BranchParent {\n  id\n  name  \n  companyType\n\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }\n  \n  place {\n    country {\n      lookupId\n      isoCode\n      name\n    }\n    city{\n      lookupId \n      name\n    }\n  }    \n}",
    "organizationCommonProperties": "on Organization {\n  id\n  name\n  organizationType\n  organizationCategory\n\n  actions {\n    canFollow\n    canUnfollow\n    canAddMember\n    canCreateRole\n    canJoin\n  }\n\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }\n\n  place {\n    country {\n      lookupId\n      isoCode\n      name\n    }\n    city {\n      lookupId\n      name\n    }\n  }\n}",
    "organizationActivities": "on Organization {\n  updates(after: null, first: 4) {\n    items {\n      entity {\n        __typename ... on Event {\n            id\n            title\n            description\n          \n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n            creater {\n              user {\n                id\n                firstName\n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            } \n            owner {\n              __typename ... on User {\n                id\n                firstName \n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on  Municipality {\n                id\n                name: title\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Company {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Organization {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on DiplomaticMission {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            }\n\n            createdDate\n        }\n        \n        __typename ... on Post {\n            id\n            title\n            description\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n            creater {\n              user {\n                id\n                firstName\n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            } \n\n            owner {\n              __typename ... on User {\n                id\n                firstName \n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on  Municipality {\n                id\n                name: title\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Company {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Organization {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on DiplomaticMission {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            }\n\n            createdDate            \n        }\n      }\n    }\n    cursor\n  }\n}",
    "organizationPlaces": "on Organization {\n  place {\n    country {\n      lookupId\n      isoCode\n      name\n    }\n    city {\n      lookupId\n      name\n    }\n  }\n}",
    "organizationContactDetails": "on Organization {\n  contactUs {\n    address\n    email\n    poBox\n    website\n    phone {\n      countryCode\n      isoCode\n      number\n    }\n  }\n}",
    "organizationImage": "on Organization {\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }      \n}",
    "organizationSocialMedia": "on Organization {\n  socialMedia {\n    facebook\n    linkedin\n    twitter\n    instagram\n  }\n}",
    "organizationMediaGallery": "on Organization {\n  gallery {\n    mediaGallery {\n      id\n      name\n      actions {\n        canUploadImage\n        canUploadVideoLink\n      }          \n      galleryItems(after: null, first: 4) {\n        items{\n          media {\n            id\n            createdDate \n            creator {\n              user {\n                id\n                firstName\n                lastName\n              }\n            }\n            details {\n            __typename ... on ImageMedia{\n                imageUrl\n                imageThumbnailUrl\n                caption\n            } \n            __typename ... on VideoLinkMedia{\n                imageUrl\n                imageThumbnailUrl\n                videoUrl\n                caption\n            } \n              \n            }\n          }\n        }\n      }\n    }\n  }      \n}",
    "organizationChildChapters": "on Organization {\n  chapters{\n    ...organizationChildChapter\n    chapters{\n      ...organizationChildChapter\n      chapters{\n        ...organizationChildChapter\n        chapters{\n          ...organizationChildChapter\n          chapters{\n            ...organizationChildChapter\n            chapters{\n              ...organizationChildChapter\n              chapters{\n                ...organizationChildChapter\n                chapters{\n                  ...organizationChildChapter\n                  chapters{\n                    ...organizationChildChapter\n                    chapters{\n                      ...organizationChildChapter\n                      chapters{\n                        ...organizationChildChapter\n                        chapters{\n                          ...organizationChildChapter\n                          chapters{\n                            ...organizationChildChapter\n                            chapters{\n                              ...organizationChildChapter\n                              chapters{\n                                ...organizationChildChapter\n                                chapters{\n                                  ...organizationChildChapter\n                                  chapters{\n                                    ...organizationChildChapter\n                                    chapters{\n                                      ...organizationChildChapter\n                                      chapters{\n                                        ...organizationChildChapter\n                                        chapters{\n                                          ...organizationChildChapter\n                                          chapters{\n                                            ...organizationChildChapter\n                                            chapters{\n                                              ...organizationChildChapter\n                                              chapters{\n                                                ...organizationChildChapter\n                                                chapters{\n                                                  ...organizationChildChapter\n                                                  chapters{\n                                                    ...organizationChildChapter\n                                                    chapters{\n                                                      ...organizationChildChapter\n                                                      chapters{\n                                                        ...organizationChildChapter\n                                                        chapters{\n                                                          ...organizationChildChapter\n                                                          chapters{\n                                                            ...organizationChildChapter\n                                                              chapters{\n                                                                ...organizationChildChapter\n                                                              }\n                                                          }\n                                                        }\n                                                      }              \n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }              \n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }              \n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "organizationChildChapter": "on Chapter {\n  id\n  name\n  organizationType\n  organizationCategory\n\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }\n  \n  place {\n    country {\n      lookupId\n      isoCode\n      name\n    }\n    city{\n      lookupId \n      name\n    }\n  }\n}",
    "organizationParentChapters": "on Organization {\n  parent{\n    ...organizationParentChapter\n    parent{\n      ...organizationParentChapter\n      parent{\n        ...organizationParentChapter\n        parent{\n          ...organizationParentChapter\n          parent{\n            ...organizationParentChapter\n            parent{\n              ...organizationParentChapter\n              parent{\n                ...organizationParentChapter\n                parent{\n                  ...organizationParentChapter\n                  parent{\n                    ...organizationParentChapter\n                    parent{\n                      ...organizationParentChapter\n                      parent{\n                      ...organizationParentChapter\n                        parent{\n                          ...organizationParentChapter\n                          parent{\n                            ...organizationParentChapter\n                            parent{\n                              ...organizationParentChapter\n                              parent{\n                                ...organizationParentChapter\n                                parent{\n                                  ...organizationParentChapter\n                                  parent{\n                                    ...organizationParentChapter\n                                    parent{\n                                      ...organizationParentChapter\n                                      parent{\n                                        ...organizationParentChapter\n                                        parent{\n                                          ...organizationParentChapter\n                                          parent{\n                                            ...organizationParentChapter\n                                            parent{\n                                              ...organizationParentChapter\n                                              parent{\n                                                ...organizationParentChapter\n                                                parent{\n                                                  ...organizationParentChapter\n                                                  parent{\n                                                    ...organizationParentChapter\n                                                    parent{\n                                                      ...organizationParentChapter\n                                                      parent{\n                                                        ...organizationParentChapter\n                                                        parent{\n                                                          ...organizationParentChapter\n                                                          parent{\n                                                            ...organizationParentChapter\n                                                            parent{\n                                                              ...organizationParentChapter\n                                                              parent{\n                                                                ...organizationParentChapter\n                                                                parent{\n                                                                  ...organizationParentChapter\n                                                                  parent{\n                                                                    ...organizationParentChapter\n                                                                    parent{\n                                                                      ...organizationParentChapter\n                                                                      parent{\n                                                                        ...organizationParentChapter\n                                                                      }                    \n                                                                    }\n                                                                  }      \n                                                                }              \n                                                              }                                                              \n                                                            }                    \n                                                          }\n                                                        }      \n                                                      }              \n                                                    }\n                                                  }      \n                                                }\n                                              }\n                                            }      \n                                          }\n                                        }                    \n                                      }\n                                    }      \n                                  }              \n                                }\n                              }      \n                            }\n                          }\n                        }\n                      }\n                    }                    \n                  }\n                }      \n              }              \n            }\n          }      \n        }\n      }\n    }      \n  }\n}",
    "organizationParentChapter": "on ChapterParent {\n  id\n  name\n  organizationType\n  organizationCategory\n\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }\n  \n  place {\n    country {\n      lookupId\n      isoCode\n      name\n    }\n    city{\n      lookupId \n      name\n    }\n  }    \n}",
    "municipalityCommonProperties": "on Municipality{\n  id\n  name: title\n  governateDistrict {\n    governate {\n      name \n      lookupId\n    }\n    district {\n      governateId\n      lookupId\n      name\n    }\n  }\n\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }\n\n  actions {\n    canFollow\t\n    canUnfollow\n  }\n\n  country {\n    lookupId\n    isoCode\n    name\n  }\n}",
    "municipalityActivities": "on Municipality {\n  updates(after: null, first: 4) {\n    items {\n      entity {\n        __typename ... on Event {\n            id\n            title\n            description\n          \n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n            creater {\n              user {\n                id\n                firstName\n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            } \n\n            owner {\n              __typename ... on User {\n                id\n                firstName \n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on  Municipality {\n                id\n                name: title\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Company {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Organization {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on DiplomaticMission {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            }\n\n            createdDate\n        }\n        \n        __typename ... on Post {\n            id\n            title\n            description\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n            creater {\n              user {\n                id\n                firstName\n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            } \n\n            owner {\n              __typename ... on User {\n                id\n                firstName \n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on  Municipality {\n                id\n                name: title\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Company {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Organization {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on DiplomaticMission {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            }\n\n            createdDate            \n        }\n      }\n    }\n    cursor\n  }\n}",
    "municipalityContactDetails": "on Municipality {\n  contactUs {\n    address\n    email\n    poBox\n    website\n    phone {\n      countryCode\n      number\n      isoCode\n    }\n  }\n}",
    "municipalityImage": "on Municipality {\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }         \n}",
    "municipalitySocialMedia": "on Municipality {\n  socialMedia {\n    facebook\n    linkedin\n    twitter\n    instagram\n  }\n}",
    "municipalityMediaGallery": "on Municipality {\n  gallery {\n    mediaGallery {\n      id\n      name\n      actions {\n        canUploadImage\n        canUploadVideoLink\n      }          \n      galleryItems(after: null, first: 4) {\n        items{\n          media {\n            id\n            createdDate \n            creator {\n              user {\n                id\n                firstName\n                lastName\n              }\n            }\n            details {\n            __typename ... on ImageMedia{\n                imageUrl\n                imageThumbnailUrl\n                caption\n            } \n            __typename ... on VideoLinkMedia{\n                imageUrl\n                imageThumbnailUrl\n                videoUrl\n                caption\n            } \n              \n            }\n          }\n        }\n      }\n    }\n  }      \n}",
    "diplomaticCommonProperties": "on DiplomaticMission {\n  id\n  name\n  diplomaticMissionType\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }\n  place {\n    country {\n      lookupId\n      isoCode\n      name\n    }\n    city {\n      lookupId\n      name\n    }\n  }\n  actions {\n    canFollow\t\n    canUnfollow\n  }\n}",
    "diplomaticActivities": "on DiplomaticMission {\n  updates(after: null, first: 4) {\n    items {\n      entity {\n        __typename ... on Event {\n            id\n            title\n            description\n          \n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n            creater {\n              user {\n                id\n                firstName\n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            } \n\n            owner {\n              __typename ... on User {\n                id\n                firstName \n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on  Municipality {\n                id\n                name: title\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Company {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Organization {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on DiplomaticMission {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            }\n\n            createdDate\n        }\n        \n        __typename ... on Post {\n            id\n            title\n            description\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n            creater {\n              user {\n                id\n                firstName\n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            }\n\n            owner {\n              __typename ... on User {\n                id\n                firstName \n                lastName\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on  Municipality {\n                id\n                name: title\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Company {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Organization {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on DiplomaticMission {\n                id\n                name\n                photoCover {\n                  imageUrl\n                  imageThumbnailUrl\n                }\n              }\n            }\n\n            createdDate            \n        }\n      }\n    }\n    cursor\n  }\n}",
    "diplomaticMediaGallery": "on DiplomaticMission {\n  gallery{\n    mediaGallery{\n      id\n      name\n      actions {\n        canUploadImage\n        canUploadVideoLink\n      }          \n      galleryItems(after: null, first: 4){\n        items{\n          media {\n            id\n            createdDate \n            creator {\n              user {\n                id\n                firstName\n                lastName\n              }\n            }\n            details {\n            __typename ... on ImageMedia{\n                imageUrl\n                imageThumbnailUrl\n                caption\n            } \n            __typename ... on VideoLinkMedia{\n                imageUrl\n                imageThumbnailUrl\n                videoUrl\n                caption\n            } \n              \n            }\n          }\n        }\n      }\n    }\n  }    \n}",
    "diplomaticSocialMedia": "on DiplomaticMission {\n  socialMedia {\n    facebook\n    linkedin\n    twitter\n    instagram\n  }\n}",
    "diplomaticContactDetails": "on DiplomaticMission {\n  contactUs {\n    address\n    email\n    poBox\n    website\n    phone {\n      countryCode\n      number\n      isoCode\n    }\n  }\n}",
    "diplomaticImage": "on DiplomaticMission {\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }     \n}",
    "diplomaticPlaces": "on DiplomaticMission {\n  place {\n    country {\n      lookupId\n      isoCode\n      name\n    }\n    city {\n      lookupId\n      name\n    }\n  }\n}",
    "cardProperties": "on Company {\n  id\n  name\n  companyType\n\n  actions {\n    canFollow\t\n    canUnfollow\n  }\n\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }\n  place {\n    country {\n      lookupId\n      isoCode\n      name\n    }\n    city {\n      lookupId\n      name\n    }\n  }\n}",
    "offerProperties": "on Offer {\n  id\n  name\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n    caption\n  }\n  countries {\n    lookupId\n    name\n  }\n}",
    "searchOfferProperties": "on Offer {\n  id\n  name\n  type\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n    caption\n  }\n  countries {\n    lookupId\n    name\n  }\n}",
    "searchPostProperties": "on Post {\n    id\n    title\n    description\n\n    photoCover {\n      imageUrl\n      imageThumbnailUrl\n    }\n\n    creater {\n      user {\n        id\n        firstName\n        lastName\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n      }\n    }\n\n    owner {\n      __typename ... on User {\n        id\n        firstName \n        lastName\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n      }\n\n      __typename ... on  Municipality {\n        id\n        name: title\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n      }\n\n      __typename ... on Company {\n        id\n        name\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n      }\n\n      __typename ... on Organization {\n        id\n        name\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n      }\n\n      __typename ... on DiplomaticMission {\n        id\n        name\n        photoCover {\n          imageUrl\n          imageThumbnailUrl\n        }\n      }\n    } \n    createdDate\n    createdBy\n}",
    "searchEventProperties": "on Event {\n  id\n  title\n  description\n\n  location\n\tstartDate\n  endDate\n\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }\n  \n  creater {\n    user {\n      id\n      firstName\n      lastName\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n  }\n\n  owner {\n    __typename ... on User {\n      id\n      firstName \n      lastName\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n    \n    __typename ... on  Municipality {\n      id\n      name: title\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n    \n    __typename ... on Company {\n      id\n      name\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n    \n    __typename ... on Organization {\n      id\n      name\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n    \n    __typename ... on DiplomaticMission {\n      id\n      name\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n  }      \n\n  createdDate\n  createdBy      \n}",
    "commentProperties": "on Comment {\n  id\n  text\n  createdDate\n  creater {\n    user {\n      id\n      firstName\n      lastName\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n  }\n  actions {\n    canDeleteMyComment\n    canUpdate\n    canLike\n    canUnlike\n  }\n}",
    "commonPostProperties": "on Post {\n  id\n  title\n  description\n\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }\n  \n  creater {\n    user {\n      id\n      firstName\n      lastName\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n  }\n\n  owner {\n    __typename ... on User {\n      id\n      firstName \n      lastName\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n    \n    __typename ... on  Municipality {\n      id\n      name: title\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n    \n    __typename ... on Company {\n      id\n      name\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n    \n    __typename ... on Organization {\n      id\n      name\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n    \n    __typename ... on DiplomaticMission {\n      id\n      name\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n  }      \n\n  createdDate\n  createdBy\n  \n  statistics {\n    likers\n    comments\n  }    \n\n  actions {\n    canAddComment\n    canLike\n    canUnlike\n    \n    canMakeAsFeatured\n    canMakeAsUnFeatured\n    canRemoveComment\n    canSave\t\n    canUnsave\n    canUploadPhoto\n\n    canUpdate\n    canDelete\n  }\n  \n  comments(after: null, first: 4) {\n    items {\n      comment {\n        id\n        text\n        createdDate\n        \n        creater {\n          user {\n            id\n            firstName\n            lastName\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n          }\n        }\n        \n        actions {\n          canLike\n          canCreate\n          canDeleteMyComment\n          canUnlike\n          canUpdate\n        }\n                    \n        statistics {\n          comments\n          likers\n        }\n\n      }\n    }\n    cursor\n  }\n}",
    "commonEventProperties": "on Event {\n  id\n  title\n  description\n\n  location\n\tstartDate\n  endDate\n\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }\n  \n  creater {\n    user {\n      id\n      firstName\n      lastName\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n  }\n\n  owner {\n    __typename ... on User {\n      id\n      firstName \n      lastName\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n    \n    __typename ... on  Municipality {\n      id\n      name: title\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n    \n    __typename ... on Company {\n      id\n      name\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n    \n    __typename ... on Organization {\n      id\n      name\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n    \n    __typename ... on DiplomaticMission {\n      id\n      name\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n  }      \n\n  createdDate\n  createdBy\n  \n  statistics {\n    likers\n    comments\n  }    \n\n  actions {\n    canAddComment\n    \n    canLike\n    canUnlike\n    \n    canMakeAsFeatured\n    canMakeAsUnFeatured\n    canRemoveComment\n    canSave\t\n    canUnsave\n    canUploadPhoto\n    canUpdate\n    canDelete\n  }\n  \n  comments(after: null, first: 4) {\n    items {\n      comment {\n        id\n        text\n        createdDate\n        \n        creater {\n          user {\n            id\n            firstName\n            lastName\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n          }\n        }\n        \n        actions {\n          canLike\n          canCreate\n          canDeleteMyComment\n          canUnlike\n          canUpdate\n        }\n                    \n        statistics {\n          comments\n          likers\n        }\n\n      }\n    }\n    cursor\n  }\n}",
    "commonOfferProperties": "on Offer {\n  id\n  type\n  name\n  description\n  \n  countries {\n    lookupId\n    name\n    isoCode\n  }\n  \n  keywords {\n    lookupId\n    name\n  }\n  \n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }\n\n  creater {\n    user {\n      id\n      firstName\n      lastName\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n  }\n  \n  owner {\n    id\n    name\n    photoCover {\n      imageUrl\n      imageThumbnailUrl\n    }\n\n    mailBox {\n      mailBox {\n        id\n      }\n    } \n  }\n  \n  createdDate\n  createdBy\n  \n  statistics {\n    likers\n    comments\n  }\n  \n  actions {\n    canAddComment\n    canLike\n    canUnlike\n    canMakeAsFeatured\n    canMakeAsUnFeatured\n    canRemoveComment\n    canSave\n    canUnsave\n    canUploadPhoto\n    canUpdate\n    canDelete\n    canSendMessageToOwner\n  }\n\n  comments(after: null, first: 4) {\n    items {\n      comment {\n        id\n        text\n        createdDate\n\n        creater {\n          user {\n            id\n            firstName\n            lastName\n            photoCover {\n              imageUrl\n              imageThumbnailUrl\n            }\n          }\n        }\n\n        actions {\n          canLike\n          canCreate\n          canDeleteMyComment\n          canUnlike\n          canUpdate\n        }\n\n        statistics {\n          comments\n          likers\n        }\n\n      }\n    }\n    cursor\n  }      \n}",
    "postProperties": "on Post {\n  id\n  title\n  description\n\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }\n\n  creater {\n    user {\n      id\n      firstName\n      lastName\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n  }\n\n  owner {\n    __typename ... on User {\n      id\n      firstName \n      lastName\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n\n    __typename ... on  Municipality {\n      id\n      name: title\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n\n    __typename ... on Company {\n      id\n      name\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n\n    __typename ... on Organization {\n      id\n      name\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n\n    __typename ... on DiplomaticMission {\n      id\n      name\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n  } \n  createdDate\n  createdBy      \n}",
    "eventProperties": "on Event {\n  id\n  title\n  description\n\n  location\n  startDate\n  endDate\n\n  photoCover {\n    imageUrl\n    imageThumbnailUrl\n  }\n  \n  creater {\n    user {\n      id\n      firstName\n      lastName\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n  }\n\n  owner {\n    __typename ... on User {\n      id\n      firstName \n      lastName\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n    \n    __typename ... on  Municipality {\n      id\n      name: title\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n    \n    __typename ... on Company {\n      id\n      name\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n    \n    __typename ... on Organization {\n      id\n      name\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n    \n    __typename ... on DiplomaticMission {\n      id\n      name\n      photoCover {\n        imageUrl\n        imageThumbnailUrl\n      }\n    }\n  }      \n\n  createdDate\n  createdBy            \n}",
    "blockInfo": "on Block {\n  title\n  subTitle\n  visible\n  itemType\n  items\n}",
    "conversationProperties": "on Conversation {\n  id\n  createdDate\n\n  receiverMessage: receiver {\n    id\n    owner {\n      entity {\n        __typename ... on User {\n          id\n          firstName\n          lastName\n          photoCover {\n            imageUrl\n            imageThumbnailUrl\n          }\n        }\n\n        __typename ... on Company {\n          id\n          name\n          photoCover {\n            imageUrl\n            imageThumbnailUrl\n          }\n        }\n\n        __typename ... on Organization {\n          id\n          name\n          photoCover {\n            imageUrl\n            imageThumbnailUrl\n          }\n        }\n\n        __typename ... on DiplomaticMission {\n          id\n          name\n          photoCover {\n            imageUrl\n            imageThumbnailUrl\n          }\n        }\n\n        __typename ... on Municipality {\n          id\n          name: title\n          photoCover {\n            imageUrl\n            imageThumbnailUrl\n          }\n        }\n      }\n    }\n  }\n\n  senderMessage: sender {\n    id\n    owner {\n      entity {\n        __typename ... on User {\n          id\n          firstName\n          lastName\n          photoCover {\n            imageUrl\n            imageThumbnailUrl\n          }\n        }\n\n        __typename ... on Company {\n          id\n          name\n          photoCover {\n            imageUrl\n            imageThumbnailUrl\n          }\n        }\n\n        __typename ... on Organization {\n          id\n          name\n          photoCover {\n            imageUrl\n            imageThumbnailUrl\n          }\n        }\n\n        __typename ... on DiplomaticMission {\n          id\n          name\n          photoCover {\n            imageUrl\n            imageThumbnailUrl\n          }\n        }\n\n        __typename ... on Municipality {\n          id\n          name: title\n          photoCover {\n            imageUrl\n            imageThumbnailUrl\n          }\n        }\n      }\n    }              \n  }\n}"
  },
  "functionalityExtensions": {
    "$actionHelper": {
      "updateLinkToDomain": "function(domainType, domainId, item, updateType) {  domainType = _.camelCase(domainType);\n  domainType = (domainType === 'profile') ? 'user' : domainType;\n  this.$loaderService.present().then(() => {\n    item.isUpdatingLinkToDomain = true;\n    const that = this;\n    this.getGraphQL(`mutation   { \n    ${domainType} {\n      ${updateType}(id: \"${domainId}\")\n    }\n    }`).then(\n      (data) => {\n        item.canFollow = !item.canFollow;\n        item.canUnFollow = !item.canUnFollow;\n        this.followSubject.next({domainId: domainId, domainType: domainType, canFollow: item.canFollow, canUnFollow: item.canUnFollow })\n      }\n    ).finally(() => {\n      this.$loaderService.dismiss();\n      item.isUpdatingLinkToDomain = false;\n    })\n  });\n}\n",
      "linkDomain": "function(domainType, domainId, item) { this.updateLinkToDomain(domainType, domainId, item, 'follow') }",
      "unLinkDomain": "function(domainType, domainId, item) {this.updateLinkToDomain(domainType, domainId, item, 'unfollow') }",
      "getMethodFromDeeplinkg": "function(url, deeplinkResponse) {  this.printData({url, deeplinkResponse});\n  if (url === undefined || url === null) {\n    return;\n  } else {\n    if (url.includes(this.DeepLinkingURL.DIASPORA_PROFILE_URL)) {\n      const targetId = this.generalService.getParameterFromUrl(url, 'ProfileId');\n      if (targetId && targetId.length > 0) {\n        deeplinkResponse.targetId = targetId;\n        deeplinkResponse.calledMethod = this.DeepLinkingMethods.DiasporaProfile;\n        deeplinkResponse.url = url;              \n        this.$parametersStorageService.saveDeeplinkOrNotificationResponse(deeplinkResponse);\n        this.notifyDeeplinkAndNotificationSubscribers(deeplinkResponse);\n      } \n    } else if (url.includes(this.DeepLinkingURL.DIASPORA_MUNICIPALITY_URL)) {\n      const targetId = this.generalService.getParameterFromUrl(url, 'MunicipalityId');\n\n      if (targetId && targetId.length > 0) {\n        deeplinkResponse.targetId = targetId;\n        deeplinkResponse.calledMethod = this.DeepLinkingMethods.DiasporaMunicipality;\n        deeplinkResponse.url = url;              \n        this.$parametersStorageService.saveDeeplinkOrNotificationResponse(deeplinkResponse);\n        this.notifyDeeplinkAndNotificationSubscribers(deeplinkResponse);\n      } \n    }\n    else if (url.includes(this.DeepLinkingURL.DIASPORA_COMPANY_URL)) {\n      const targetId = this.generalService.getParameterFromUrl(url, 'CompanyId');\n\n      if (targetId && targetId.length > 0) {\n        deeplinkResponse.targetId = targetId;\n        deeplinkResponse.calledMethod = this.DeepLinkingMethods.DiasporaCompany;\n        deeplinkResponse.url = url;              \n        this.$parametersStorageService.saveDeeplinkOrNotificationResponse(deeplinkResponse);\n        this.notifyDeeplinkAndNotificationSubscribers(deeplinkResponse);\n      }\n    }\n    else if (url.includes(this.DeepLinkingURL.DIASPORA_ORGANIZATION_URL)) {\n      const targetId = this.generalService.getParameterFromUrl(url, 'OrganizationId');\n\n      if (targetId && targetId.length > 0) {\n        deeplinkResponse.targetId = targetId;\n        deeplinkResponse.calledMethod = this.DeepLinkingMethods.DiasporaOrganization;\n        deeplinkResponse.url = url;              \n        this.$parametersStorageService.saveDeeplinkOrNotificationResponse(deeplinkResponse);\n        this.notifyDeeplinkAndNotificationSubscribers(deeplinkResponse);\n      } \n    }\n    else if (url.includes(this.DeepLinkingURL.DIASPORA_EMBASSY_URL)) {\n      const targetId = this.generalService.getParameterFromUrl(url, 'EmbassyId');\n\n      if (targetId && targetId.length > 0) {\n        deeplinkResponse.targetId = targetId;\n        deeplinkResponse.calledMethod = this.DeepLinkingMethods.DiasporaDiplomatic;\n        deeplinkResponse.url = url;              \n        this.$parametersStorageService.saveDeeplinkOrNotificationResponse(deeplinkResponse);\n        this.notifyDeeplinkAndNotificationSubscribers(deeplinkResponse);\n      } \n    }\n    else if (url.includes(this.DeepLinkingURL.DIASPORA_ACTIVITY_URL)) {\n      const targetId = this.generalService.getParameterFromUrl(url, 'EntityId');\n      const targetType = this.generalService.getParameterFromUrl(url, 'EntityType');\n\n      if (targetId && targetId.length > 0 && targetType && targetType.length > 0) {\n        deeplinkResponse.targetId = targetId;\n        deeplinkResponse.calledMethod = (targetType.toLowerCase() === 'offer') ? this.DeepLinkingMethods.DiasporaOfferDetails : this.DeepLinkingMethods.DisplayActivityDetails;\n        deeplinkResponse.cardType = targetType.toLowerCase();\n        deeplinkResponse.url = url;              \n        this.$parametersStorageService.saveDeeplinkOrNotificationResponse(deeplinkResponse);\n        this.notifyDeeplinkAndNotificationSubscribers(deeplinkResponse);\n      }\n    }\n    else if (url.includes(this.DeepLinkingURL.DIASPORA_ABOUT_URL)) {\n      deeplinkResponse.calledMethod = this.DeepLinkingMethods.DiasporaAbout;\n      deeplinkResponse.url = url;              \n      this.$parametersStorageService.saveDeeplinkOrNotificationResponse(deeplinkResponse);\n      this.notifyDeeplinkAndNotificationSubscribers(deeplinkResponse);\n    }\n    else if (url.includes(this.DeepLinkingURL.DIASPORA_NOTIFICATION_SETTINGS_URL)) {\n      deeplinkResponse.calledMethod = this.DeepLinkingMethods.DiasporaNotificationSettings;\n      deeplinkResponse.url = url;              \n      this.$parametersStorageService.saveDeeplinkOrNotificationResponse(deeplinkResponse);\n      this.notifyDeeplinkAndNotificationSubscribers(deeplinkResponse);            \n    }\n    else if (url.includes(this.DeepLinkingURL.DIASPORA_NOTIFICATION_URL)) {\n      deeplinkResponse.calledMethod = this.DeepLinkingMethods.DiasporaNotification;\n      deeplinkResponse.url = url;              \n\n      this.$parametersStorageService.saveDeeplinkOrNotificationResponse(deeplinkResponse);\n      this.notifyDeeplinkAndNotificationSubscribers(deeplinkResponse);\n    } else {\n      switch (deeplinkResponse.calledMethod) {\n\n        case this.DeepLinkingMethods.DiasporaMunicipality:\n        case this.DeepLinkingMethods.DisplayActivityDetails:\n        case this.DeepLinkingMethods.DiasporaOfferDetails:\n        case this.DeepLinkingMethods.DiasporaProfile:\n        case this.DeepLinkingMethods.DiasporaCompany:\n        case this.DeepLinkingMethods.DiasporaDiplomatic:\n        case this.DeepLinkingMethods.DiasporaOrganization:\n        case this.DeepLinkingMethods.DiasporaAdminMunicipality:\n        case this.DeepLinkingMethods.DiasporaAdminCompany:\n        case this.DeepLinkingMethods.DiasporaAdminDiplomatic:\n        case this.DeepLinkingMethods.DiasporaAdminOrganization:\n        case this.DeepLinkingMethods.DiasporaStaffMember:\n        case this.DeepLinkingMethods.DiasporaCommitteeMember:\n          deeplinkResponse.url = url;              \n          this.$parametersStorageService.saveDeeplinkOrNotificationResponse(deeplinkResponse);\n          this.notifyDeeplinkAndNotificationSubscribers(deeplinkResponse);\n        break;\n\n        case this.DeepLinkingMethods.InviteToTown: \n          deeplinkResponse.url = url;              \n          this.$parametersStorageService.saveDeeplinkOrNotificationResponse(deeplinkResponse);\n        break;\n      }\n    }\n  }\n}\n",
      "getMethodFromNotification": "function(notificationPayload) {  const notificationResponse = new this.DeeplinkResponse();\n  switch(notificationPayload.targetType.toLowerCase()) {\n    case 'user': \n      notificationResponse.calledMethod = this.DeepLinkingMethods.DiasporaProfile;          \n    break;\n\n    case 'company': \n      notificationResponse.calledMethod = this.DeepLinkingMethods.DiasporaCompany;          \n    break;\n    \n    case 'organization': \n      notificationResponse.calledMethod = this.DeepLinkingMethods.DiasporaOrganization;          \n    break;\n    \n    case 'diplomaticmission': \n      notificationResponse.calledMethod = this.DeepLinkingMethods.DiasporaDiplomatic;          \n    break;\n    \n    case 'municipality': \n      notificationResponse.calledMethod = this.DeepLinkingMethods.DiasporaMunicipality;          \n    break;\n    \n    case 'post': \n      notificationResponse.calledMethod = this.DeepLinkingMethods.DisplayActivityDetails;          \n      notificationResponse.cardType = 'post';\n    break;\n\n    case 'event': \n      notificationResponse.calledMethod = this.DeepLinkingMethods.DisplayActivityDetails;    \n      notificationResponse.cardType = 'event';\n    break;\n\n    \n    case 'offer': \n      notificationResponse.calledMethod = this.DeepLinkingMethods.DiasporaOfferDetails;          \n    break;          \n\n    case 'conversation': \n      notificationResponse.calledMethod = this.DeepLinkingMethods.DiasporaConversationDetails;\n    break;\n\n    case 'comment': \n      notificationResponse.calledMethod = this.DeepLinkingMethods.DiasporaCommentDetails;\n    break;\n\n  }\n  notificationResponse.targetId = notificationPayload.targetId;\n  this.$parametersStorageService.saveDeeplinkOrNotificationResponse(notificationResponse);\n  this.notifyDeeplinkAndNotificationSubscribers(notificationResponse);\n}\n",
      "notifyDeeplinkAndNotificationSubscribers": "function(targetDetails) {  this.deeplinkAndNotificationSubject.next(targetDetails);\n}\n",
      "goToTargetFromNotificationOrDeeplink": "function(targetDetails, userId) {  switch (targetDetails.calledMethod) {\n    case this.DeepLinkingMethods.DiasporaAbout:\n      this.ngZone.run(() => {\n        this.navigateTo('aboutUs');\n      });\n    break;\n\n    case this.DeepLinkingMethods.DiasporaNotification:\n      this.ngZone.run(() => {\n        this.navigateTo('notifications');\n      });\n    break;\n\n    case this.DeepLinkingMethods.DiasporaNotificationSettings:\n      this.ngZone.run(() => {\n        this.navigateTo('manage/notifications');\n      });\n    break;\n\n    case this.DeepLinkingMethods.DiasporaProfile:\n      this.ngZone.run(() => {\n        this.navigateTo('profile/' + targetDetails.targetId);\n      });\n    break;\n\n    case this.DeepLinkingMethods.DiasporaCompany:\n      this.ngZone.run(() => {\n        this.navigateTo('company/' + targetDetails.targetId);\n      });\n    break;\n\n    case this.DeepLinkingMethods.DiasporaDiplomatic:\n      this.ngZone.run(() => {\n        this.navigateTo('diplomaticMission/' + targetDetails.targetId);\n      });\n    break;\n\n    case this.DeepLinkingMethods.DiasporaMunicipality:\n      this.ngZone.run(() => {\n        this.navigateTo('town/' + targetDetails.targetId);\n      });\n    break;\n\n    case this.DeepLinkingMethods.DiasporaOrganization:\n      this.ngZone.run(() => {\n        this.navigateTo('organization/' + targetDetails.targetId);\n      });\n    break;\n\n    case this.DeepLinkingMethods.DisplayActivityDetails:\n      this.ngZone.run(() => {\n        targetDetails.cardType === 'event' ? this.navigateTo('eventDetails/' + targetDetails.targetId) : this.navigateTo('postDetails/' + targetDetails.targetId);\n      });\n    break;\n\n    case this.DeepLinkingMethods.DiasporaOfferDetails: \n      this.ngZone.run(() => {\n        this.navigateTo('offerDetails/' + targetDetails.targetId);\n      });\n    break;\n\n    case this.DeepLinkingMethods.DiasporaMessageAccount:\n      this.ngZone.run(() => {\n        this.navigateTo('tabs/mailboxConversations');\n      });\n    break;\n\n    case this.DeepLinkingMethods.CompanyAffiliation:\n      this.ngZone.run(() => {\n        this.navigateTo('company/' + targetDetails.targetId);\n      });\n    break;\n\n    case this.DeepLinkingMethods.OrganizationAffliation:\n      this.ngZone.run(() => {\n        this.navigateTo('organization/' + targetDetails.targetId);\n      });\n    break;\n\n    case this.DeepLinkingMethods.ManageCompanyMembers:\n      this.ngZone.run(() => {\n        this.navigateTo('company/manageCompanyTeamMembers/' + targetDetails.targetId);\n      });\n    break;\n\n    case this.DeepLinkingMethods.ManageOrganizationMembers:\n      this.ngZone.run(() => {\n        this.navigateTo('organization/manageOrganizationMembers/' + targetDetails.targetId);\n      });\n    break;\n\n    case this.DeepLinkingMethods.ManageDiplomaticMembers:\n      this.ngZone.run(() => {\n        this.navigateTo('diplomaticMission/manageDiplomaticKeyStaff/' + targetDetails.targetId);\n      });\n    break;\n\n    case this.DeepLinkingMethods.DiasporaManageCompanyBranches:\n      this.ngZone.run(() => {\n        this.navigateTo('company/manageCompanyBranches/' + targetDetails.targetId);\n      });\n    break;\n\n    case this.DeepLinkingMethods.DiasporaManageOrganizationChapters:\n      this.ngZone.run(() => {\n        this.navigateTo('organization/manageOrganizationChapters/' + targetDetails.targetId);\n      });\n    break;\n\n    case this.DeepLinkingMethods.DiasporaConversationDetails:\n      this.goToConversation(targetDetails.targetId);\n    break;\n\n    case this.DeepLinkingMethods.DiasporaCommentDetails: \n      this.goToCommentDetails(targetDetails.targetId);\n    break;\n\n    case this.DeepLinkingMethods.DiasporaAdminMunicipality:\n      case this.DeepLinkingMethods.DiasporaAdminCompany:\n      case this.DeepLinkingMethods.DiasporaAdminDiplomatic:\n      case this.DeepLinkingMethods.DiasporaAdminOrganization:\n      case this.DeepLinkingMethods.DiasporaStaffMember:\n      case this.DeepLinkingMethods.DiasporaCommitteeMember:\n        setTimeout(() => {\n          this.checkIfFromInvitation(targetDetails, userId);\n        }, 1500);              \n    break;  \n  }\n  this.$parametersStorageService.clearDeeplinkOrNotificationResponse();\n}\n",
      "goToCommentDetails": "function(targetId) {  let action = {};\n  action.query = \"query { comment (id:$templateContext->additionalParameters.targetId) { id text listUnder { entity {  __typename ... on Event { id } __typename ... on Post { id } __typename ... on Offer { id } } } } }\"\n  action.postAction = \"const commentDetails = $graphQlResults.comment; const commentActivityType = _.get(commentDetails, 'listUnder.entity.__typename', null); const commentActivityId = _.get(commentDetails, 'listUnder.entity.id', null); $actionHelper.navigateToDomain(commentActivityType, commentActivityId);\"\n  action.additionalParameters = {'targetId': targetId };\n  this.callApi(action);\n}\n",
      "goToConversation": "function(targetId) {  let action = {};\n  action.query = \"query { conversation (id:$templateContext->additionalParameters.targetId) { id fromMailBoxId toMailBoxId receiver { id owner { entity { __typename ... on User { id firstName lastName photoCover { imageThumbnailUrl imageUrl } } __typename ... on Company { id name photoCover { imageThumbnailUrl imageUrl } } __typename ... on Organization { id name photoCover { imageThumbnailUrl imageUrl } } __typename ... on DiplomaticMission { id name photoCover { imageThumbnailUrl imageUrl } } __typename ... on Municipality { id name: title photoCover { imageThumbnailUrl imageUrl } } } } } sender { id owner { entity { __typename ... on User {id firstName  lastName photoCover { imageThumbnailUrl imageUrl } } __typename ... on Company { id name photoCover { imageThumbnailUrl imageUrl } } __typename ... on Organization { id  name photoCover { imageThumbnailUrl imageUrl } } __typename ... on DiplomaticMission { id name photoCover { imageThumbnailUrl imageUrl } } __typename ... on Municipality { id name: title photoCover { imageThumbnailUrl imageUrl } } } } } } }\"\n  action.postAction = \"const conversation = $graphQlResults.conversation; const conversationType = _.get(conversation, 'receiver.owner.entity.__typename', null); const conversationTargetId = _.get(conversation, 'receiver.owner.entity.id', null); const conversationSenderMailboxId = _.get(conversation, 'fromMailBoxId', null); const conversationReceiverMailboxId = _.get(conversation, 'toMailBoxId', null); $actionHelper.navigateTo('conversationMessages/' + conversationType +  '/'+ conversationTargetId + '/' + conversationSenderMailboxId + '/' + conversationReceiverMailboxId);\"\n  action.additionalParameters = {'targetId': targetId };\n  this.callApi(action);\n}\n",
      "checkIfFromInvitation": "function(deeplinkResponse, userId) {  const urlParams = this.getAllUrlParams(deeplinkResponse.url);\n\n  const targetId = deeplinkResponse.targetId;\n  const committeeId = deeplinkResponse.committeeId;\n  const invitationId = urlParams.invitationid;\n\n  switch (deeplinkResponse.calledMethod) {\n    case this.DeepLinkingMethods.DiasporaAdminMunicipality:\n      this.assignUserAsMunicipalityAdmin(targetId, invitationId, userId);\n    break;\n\n    case this.DeepLinkingMethods.DiasporaAdminCompany:\n      this.assignUserAsCompanyAdmin(targetId, invitationId, userId);\n    break;\n\n    case this.DeepLinkingMethods.DiasporaAdminDiplomatic:\n      this.assignUserAsDiplomaticMissionAdmin(targetId, invitationId, userId);\n    break;\n\n    case this.DeepLinkingMethods.DiasporaAdminOrganization:\n      this.assignUserAsOrganizationAdmin(targetId, invitationId, userId);\n    break;\n\n    case this.DeepLinkingMethods.DiasporaStaffMember:\n      this.assignUserAsStaffMember(targetId, invitationId, userId, committeeId);\n    break;\n\n    case this.DeepLinkingMethods.DiasporaCommitteeMember:\n      this.assignUserAsCommitteeMember(targetId, invitationId, userId, committeeId);\n    break;\n  }\n}\n",
      "assignUserAsMunicipalityAdmin": "function(targetId, invitationId, userId) {  let action = {};\n  action.query = \"mutation { municipality { addInvitedAdmin(id: $templateContext->additionalParameters.targetId, userId: $templateContext->additionalParameters.userId, invitationId: $templateContext->additionalParameters.invitationId) }}\"\n  action.postAction = \"$actionHelper.showToast('User assigned as admin')\"\n  action.additionalParameters = {'targetId': targetId, 'userId':userId, 'invitationId': invitationId }\n  this.callApi(action);\n}\n",
      "assignUserAsCompanyAdmin": "function(targetId, invitationId, userId) {  let action =  {};\n  action.query = \"mutation { company { addInvitedAdmin(id: $templateContext->additionalParameters.targetId, userId: $templateContext->additionalParameters.userId, invitationId: $templateContext->additionalParameters.invitationId) }}\"\n  action.postAction = \"$actionHelper.showToast('User assigned as admin')\"\n  action.additionalParameters = {'targetId': targetId, 'userId':userId, 'invitationId': invitationId }\n  this.callApi(action);\n}\n",
      "assignUserAsOrganizationAdmin": "function(targetId, invitationId, userId) {  let action =  {};\n  action.query = \"mutation { organization { addInvitedAdmin(id: $templateContext->additionalParameters.targetId, userId: $templateContext->additionalParameters.userId, invitationId: $templateContext->additionalParameters.invitationId) }}\"\n  action.postAction = \"$actionHelper.showToast('User assigned as admin')\"\n  action.additionalParameters = {'targetId': targetId, 'userId':userId, 'invitationId': invitationId } \n  this.callApi(action);\n}\n",
      "assignUserAsDiplomaticMissionAdmin": "function(targetId, invitationId, userId) {  let action =  {};\n  action.query = \"mutation { diplomaticMission { addInvitedAdmin(id: $templateContext->additionalParameters.targetId, userId: $templateContext->additionalParameters.userId, invitationId: $templateContext->additionalParameters.invitationId ) }}\"\n  action.postAction = \"$actionHelper.showToast('User assigned as admin')\"\n  action.additionalParameters = {'targetId': targetId, 'userId':userId, 'invitationId': invitationId } \n  this.callApi(action);\n}\n",
      "assignUserAsCommitteeMember": "function(targetId, invitationId, userId, committeeId) {  let action =  {};\n  action.query = `mutation { organizationCommittee { joinMember(organizationId: $templateContext->additionalParameters.targetId, id: $templateContext->additionalParameters.committeeId, invitationId: $templateContext->additionalParameters.invitationId, role:{positionName: \"Committee Member\", roleName:\"CommitteeMember\"}) }}`\n  action.postAction = \"$actionHelper.showToast('User assigned as a committee member')\"\n  action.additionalParameters = {'targetId': targetId, 'userId':userId, 'invitationId': invitationId, 'committeeId': committeeId } \n  this.callApi(action); \n}\n",
      "assignUserAsStaffMember": "function(targetId, invitationId, userId, officeId) {  let action =  {};\n  action.query = `mutation { diplomaticMissionCommittee { joinMember(diplomaticMissionId: $templateContext->additionalParameters.targetId, id: $templateContext->additionalParameters.officeId, invitationId: $templateContext->additionalParameters.invitationId, role:{positionName: \"Committee Member\", roleName:\"CommitteeMember\"}) }}`\n  action.postAction = \"$actionHelper.showToast('User assigned as a key staff member')\"\n  action.additionalParameters = {'targetId': targetId, 'userId':userId, 'invitationId': invitationId, 'officeId': officeId } \n  this.callApi(action); \n}\n",
      "checkFollowList": "function(itemList, followInfo) {  for(const item of itemList) {\n    if (item.id === followInfo.domainId) {\n      item.canFollow = followInfo.canFollow;\n      item.canUnFollow = followInfo.canUnFollow;\n    }\n  }\n}\n",
      "checkMainEntity": "function(dataSource, followInfo) {  dataSource.canFollow = followInfo.canFollow;\n  dataSource.canUnFollow = followInfo.canUnFollow;\n}\n",
      "globalNotificationSubscribers": {
        "onNotificationReloadBasicUserInfo": [
          "edit-profile-details",
          "edit-company",
          "edit-diplomatic",
          "edit-organization",
          "edit-municipality",
          "create-company",
          "create-organization",
          "add-organizaiton-role",
          "edit-organization-role",
          "add-business-role",
          "edit-business-role",
          "add-diplomatic-role",
          "edit-diplomatic-role",
          "add-committee-member",
          "remove-committee-member",
          "delete-commiteee",
          "add-organization-administrators",
          "manage-organization-administrators",
          "manage-organization-team-members",
          "manage-company-team-members",
          "manage-company-administrators",
          "add-company-administrators",
          "add-office-member",
          "remove-office-member",
          "delete-office",
          "add-diplomaticMission-administrators",
          "manage-diplomaticMission-administrators",
          "manage-diplomaticMission-key-staff"
        ]
      },
      "onNotificationReloadBasicUserInfo": "function(changedSubject) {  this.getGraphQL(`query {\n    user(id: $dynamicUiVariables->initialDataSource.profileId) {\n      id\n      firstName\n      lastName\n\n      ...userImage\n      ...userPlaceDetails\n      ...userRoles\n      ...userSector\n      ...userMunicipalityDetails\n\n      statistics {\n        followers\n        following\n      }            \n\n    }\n  }`)\n  .then( data => {\n    const userDetails = _.get(data, 'user', null);\n    const userRoles = _.get(data, \"user.roles\", []);\n    const companiesRoles = userRoles.filter(x => x.entity.__typename === 'Company');\n    const organizationRoles = userRoles.filter(x => x.entity.__typename === 'Organization'); \n\n    const initialDataSource= this.uiDefinition.initialDataSource;\n\n    initialDataSource.firstName = _.get(data, 'user.firstName', null);\n    initialDataSource.lastName = _.get(data, 'user.lastName', null);\n    initialDataSource.fullName = initialDataSource.firstName + ' ' + initialDataSource.lastName;\n\n    initialDataSource.photoCover = _.get(data, 'user.photoCover', null);\n    initialDataSource.profileImage = _.get(data, 'user.photoCover.imageThumbnailUrl', null);\n    initialDataSource.profileCoverImage = _.get(data, 'user.municipality.municipality.photoCover.imageThumbnailUrl', '');\n\n    initialDataSource.placeOfOrigin = _.get(data, 'user.placeOfOrigin', null);\n    initialDataSource.placeOfResidence = _.get(data, 'user.placeOfResidence', null);\n    initialDataSource.municipality = _.get(data, 'user.municipality', null);\n\n    initialDataSource.userRoles = userRoles;\n    initialDataSource.hasCompanyRole = companiesRoles.length > 0 ? true : false;\n    initialDataSource.hasOrganizationRole = organizationRoles.length > 0 ? true : false;\n    initialDataSource.hasAmbassadorDiplomaticRole = userRoles.filter(userRole => (_.get(userRole, 'entity.__typename', '').toLowerCase() === 'diplomaticmission') && (_.get(userRole, 'role.role', '').toLowerCase() === 'president')).length > 0 ? true : false;\n    initialDataSource.hasTownRole = userRoles.filter(userRole => (((_.get(userRole, 'entity.__typename', '') || '').toLowerCase() === 'municipality') && ((_.get(userRole, 'role.role', '') || '').toLowerCase() === 'electedmember'))).length > 0 ? true : false; \n    initialDataSource.hasSector = _.get(data, \"user.sector\", null) ? true : false;\n  \n  \n    // prepare data\n    initialDataSource.userBadges = this.$dynamicUiExtraService.prepareUserBadges(userDetails, true);\n    initialDataSource.entityRoles = this.$dynamicUiExtraService.mapUserRoleToEntityRoles(userRoles);\n  })\n}\n",
      "getOffersLookups": "function() {  this.getGraphQL(`\n    query {\n      brands {\n        lookupId\n        name\n      }\n\n      keywords {\n        lookupId\n        name\n      }\n    }        \n  `)\n  .then((data) =>\n   {\n    const initialDataSource= this.uiDefinition.initialDataSource;\n    initialDataSource.brands = data.brands;\n    initialDataSource.keywords = data.keywords;\n   }\n  )\n}\n",
      "getProfessionLookups": "function() {  this.getGraphQL(`\n    query {\n      professions{\n        lookupId\n        name\n      }\n    }        \n  `)\n  .then((data) =>\n   {\n    const initialDataSource= this.uiDefinition.initialDataSource;\n    const lookups = this.$parametersStorageService.getLookups();\n    const lookupInfo = JSON.parse(lookups);\n    lookupInfo.professions = data.professions;\n    initialDataSource.professions = data.professions;\n    this.$parametersStorageService.saveLookups(JSON.stringify(lookupInfo), this.lookupCacheInterval);\n   }\n  )\n}\n",
      "getKeywordsLookups": "function() {  this.getGraphQL(`\n    query {\n      keywords {\n        lookupId\n        name\n      }\n    }        \n  `)\n  .then((data) =>\n   {\n    const initialDataSource= this.uiDefinition.initialDataSource;\n    initialDataSource.keywords = data.keywords;\n   }\n  )\n}\n",
      "getBrandsLookups": "function() {  this.getGraphQL(`\n    query {\n      brands {\n        lookupId\n        name\n      }\n    }        \n  `)\n  .then((data) =>\n   {\n    const initialDataSource= this.uiDefinition.initialDataSource;\n    initialDataSource.brands = data.brands;\n   }\n  )\n}\n",
      "afterCheckUserDetails": "function(userInfo) {    const profileId = _.get(userInfo, 'id', null);\n    const userRoles = _.get(userInfo, \"roles\", []);\n    const companiesRoles = userRoles.filter(x => x.entity.__typename === 'Company');\n    const organizationRoles = userRoles.filter(x => x.entity.__typename === 'Organization'); \n    const userMailbox = _.get(userInfo, \"mailBoxes\", []).find(x => x.mailBox && x.mailBox.owner && x.mailBox.owner.entity.__typename && x.mailBox.owner.entity.__typename === 'User');\n    const initialDataSource = this.uiDefinition.initialDataSource;\n\n    this.applicationInsightsService.setUserId(profileId);\n    this.$parametersStorageService.saveProfileId(profileId);\n    initialDataSource.profileId = profileId;\n\n    initialDataSource.placeOfOrigin = _.get(userInfo, 'placeOfOrigin', null);\n    initialDataSource.placeOfResidence = _.get(userInfo, 'placeOfResidence', null);\n    initialDataSource.municipality = _.get(userInfo, 'municipality', null);\n\n    initialDataSource.userMailboxId = _.get(userMailbox, 'mailBox.id', null);\n\n    initialDataSource.firstName = _.get(userInfo, 'firstName', null);\n    initialDataSource.lastName = _.get(userInfo, 'lastName', null);\n    initialDataSource.fullName = initialDataSource.firstName + ' ' + initialDataSource.lastName;\n\n    initialDataSource.photoCover = _.get(userInfo, 'photoCover', null);\n    initialDataSource.profileImage = _.get(userInfo, 'photoCover.imageThumbnailUrl', null);\n    initialDataSource.profileCoverImage = _.get(userInfo, 'municipality.municipality.photoCover.imageThumbnailUrl', '');\n\n    initialDataSource.userRoles = userRoles;\n    initialDataSource.hasCompanyRole = companiesRoles.length > 0 ? true : false;\n    initialDataSource.hasOrganizationRole = organizationRoles.length > 0 ? true : false;\n    initialDataSource.hasAmbassadorDiplomaticRole = userRoles.filter(userRole => ((_.get(userRole, 'entity.__typename', '') || '').toLowerCase() === 'diplomaticmission') && ((_.get(userRole, 'role.role', '') || '').toLowerCase() === 'president')).length > 0 ? true : false;\n    initialDataSource.hasTownRole = userRoles.filter(userRole => (((_.get(userRole, 'entity.__typename', '') || '').toLowerCase() === 'municipality') && ((_.get(userRole, 'role.role', '') || '').toLowerCase() === 'electedmember'))).length > 0 ? true : false; \n\n    initialDataSource.hasSector = _.get(userInfo, \"sector\", null) ? true : false;\n\n    // prepare data\n    initialDataSource.userBadges = this.$dynamicUiExtraService.prepareUserBadges(userInfo, true);\n    initialDataSource.entityRoles = this.$dynamicUiExtraService.mapUserRoleToEntityRoles(userRoles);\n}\n"
    },
    "$dynamicUiExtraService": {
      "getUserId": "(x) => _.get(x, \"id\", \"\")",
      "getUserFullName": "(x) => _.get(x, \"firstName\", \"\") + ' ' + _.get(x, \"lastName\", \"\")",
      "getUserFeaturedRole": "(x) => _.get(x, \"featuredRole\") ?  (_.get(x, \"featuredRole.role.positionName\", \"\").toLowerCase() === 'electedmember' ? 'Elected Member' : (_.get(x, \"featuredRole.role.positionName\", \"\").toLowerCase() === 'ambassador' && _.get(x, \"featuredRole.entity.__typename\", \"\") === 'Municipality') ? 'Town Ambassador' :  _.get(x, \"featuredRole.role.positionName\", \"\").toLowerCase() === 'vicepresident' ? 'Vice President' : _.get(x, \"featuredRole.role.positionName\", \"\")) + ', ' + _.get(x, \"featuredRole.entity.name\", \"\")     : _.get(x, \"placeOfOrigin.city\", \"\") ? 'Member, ' + _.get(x, \"placeOfOrigin.city.name\", \"\") : \"\"\n",
      "getUserProfessionRole": "(x) => _.get(x, \"profession\") ?  _.get(x, \"profession.name\", \"\") : \"\"\n",
      "getUserFollowAction": "(x) => _.get(x, \"actions.canFollow\", false)",
      "getUserUnFollowAction": "(x) => _.get(x, \"actions.canUnfollow\", false)",
      "getUserImage": "(x) => _.get(x, \"photoCover.imageThumbnailUrl\", null)",
      "getUserMainImage": "(x) => _.get(x, \"photoCover.imageUrl\", null)",
      "getUserCountryOfOrigin": "(x) => _.get(x, \"placeOfOrigin.country.isoCode\", \"\").toLowerCase()",
      "getUserCityOfOrigin": "(x) => _.get(x, \"placeOfOrigin.city.name\", \"\")",
      "getUserCountryOfResidence": "(x) => _.get(x, \"placeOfResidence.country.isoCode\", \"\").toLowerCase()",
      "getUserCityOfResidence": "(x) => _.get(x, \"placeOfResidence.city.name\", \"\")",
      "getUserCoverImage": "(x) => _.get(x, \"municipality.municipality.photoCover.imageThumbnailUrl\", \"\")",
      "getUserPrivacyKey": "(x) => Object.keys(x).map(function(key){ return { id:key, value:x[key], label:'PRIVACY_SETTINGS.'+ key  };}).filter(privacy => privacy.id !== '__typename');",
      "getEntityRoleType": "(x) => _.get(x, \"entity.__typename\", \"\");",
      "getEntityRoleId": "(x) => _.get(x, \"entity.id\", \"\");",
      "getReceiverMailboxId": "(x) => _.get(x, \"entity.mailBox.mailBox.id\", \"\")",
      "getOrganizationReceiverMailboxId": "(x) => _.get(x, \"entity.organization.organization.mailBox.mailBox.id\", \"\")",
      "getDiplomaticMissionReceiverMailboxId": "(x) => _.get(x, \"entity.diplomaticMission.diplomaticMission.mailBox.mailBox.id\", \"\")",
      "getEntityOrganizationId": "(x) => _.get(x, \"entity.organization.organization.id\", \"\")",
      "getEntityOrganizationName": "(x) => _.get(x, \"entity.organization.organization.name\", \"\")",
      "getEntityOrganizationImage": "(x) => _.get(x, \"entity.organization.organization.photoCover.imageThumbnailUrl\", null)",
      "getEntityDiplomaticMissionId": "(x) => _.get(x, \"entity.diplomaticMission.diplomaticMission.id\", \"\")",
      "getEntityDiplomaticMissionName": "(x) => _.get(x, \"entity.diplomaticMission.diplomaticMission.name\", \"\")",
      "getEntityDiplomaticMissionImage": "(x) => _.get(x, \"entity.diplomaticMission.diplomaticMission.photoCover.imageThumbnailUrl\", null)",
      "getEntityRoleName": "(x) => _.get(x, \"entity.name\", \"\");",
      "getEntityRoleImage": "(x) => _.get(x, \"entity.photoCover.imageThumbnailUrl\", null);",
      "checkIfHasAdminEntityRole": "(x) => _.get(x, \"entity.actions.canUpdate\", false);",
      "checkIfHasAdminEntityOrganizationRole": "(x) => _.get(x, \"entity.organization.organization.actions.canUpdate\", false);",
      "checkIfHasAdminEntityDiplomaticRole": "(x) => _.get(x, \"entity.diplomaticMission.diplomaticMission.actions.canUpdate\", false);",
      "getCompanyId": "(x) => _.get(x, \"company.id\", \"\")",
      "getCompanyName": "(x) =>  _.get(x, \"company.name\", \"\")",
      "getCompanyType": "(x) => _.get(x, \"company.companyType\", \"\").toLowerCase()",
      "getCompanyFollowAction": "(x) => _.get(x, \"company.actions.canFollow\", false)",
      "getCompanyUnFollowAction": "(x) => _.get(x, \"company.actions.canUnfollow\", false)",
      "checkIfCanUpdateBusinessRole": "(x) => _.get(x, \"company.actions.canUpdateRole\", false)",
      "checkIfCanFeatureBusinessRole": "(x) => _.get(x, \"company.actions.canFeatureRole\", false)",
      "checkIfCanUnFeaturBusinessRole": "(x) => _.get(x, \"company.actions.canUnfeatureRole\", false)",
      "checkIfCanRemoveBusinessRole": "(x) => _.get(x, \"company.actions.canRemoveRole\", false)",
      "getCompanyImage": "(x) => _.get(x, \"company.photoCover.imageThumbnailUrl\", \"\")",
      "getCompanyMainImage": "(x) => _.get(x, \"company.photoCover.imageUrl\", \"\")",
      "getCompanyPositionName": "(x) => _.get(x, \"role.positionName\", \"\")",
      "getCompanyPositionType": "(x) => _.get(x, \"role.role\", \"\")",
      "getCompanyIsFeatured": "(x) => _.get(x, \"role.featured\", false)",
      "getCompanyCountry": "(x) => _.get(x, \"company.place.country.isoCode\", \"\").toLowerCase()",
      "getCompanyCity": "(x) => _.get(x, \"company.place.city.name\", \"\")",
      "getCompanyRole": "(x) =>  _.get(x, \"user.featuredRole\") ? _.get(x, \"user.featuredRole.role.positionName\", \"\") + ', ' + _.get(x, \"user.featuredRole.entity.name\", \"\")      : _.get(x, \"user.placeOfOrigin.city\") ? 'Member, ' + _.get(x, \"user.placeOfOrigin.city.name\", \"\") : \"\"\n",
      "getSearchCompanyId": "(x) => _.get(x, \"id\", \"\")",
      "getSearchCompanyName": "(x) =>  _.get(x, \"name\", \"\")",
      "getSearchCompanyType": "(x) => _.get(x, \"companyType\", \"\").toLowerCase()",
      "getSearchCompanyFollowAction": "(x) => _.get(x, \"actions.canFollow\", false)",
      "getSearchCompanyUnFollowAction": "(x) => _.get(x, \"actions.canUnfollow\", false)",
      "getSearchCompanyAddMemberAction": "(x) => _.get(x, \"actions.canAddMember\", false)",
      "getSearchCompanyAddCreateRole": "(x) => _.get(x, \"actions.canCreateRole\", false)",
      "getSearchCompanyImage": "(x) => _.get(x, \"photoCover.imageThumbnailUrl\", \"\")",
      "getSearchCompanyPositionName": "(x) => _.get(x, \"role.positionName\", \"\")",
      "getSearchCompanyIsFeatured": "(x) => _.get(x, \"role.featured\", false)",
      "getSearchCompanyCountry": "(x) => _.get(x, \"place.country.isoCode\", \"\").toLowerCase()",
      "getSearchCompanyCity": "(x) => _.get(x, \"place.city.name\", \"\")",
      "getSearchCompanyRole": "(x) => _.get(x, \"positionName\", \"\")",
      "getOrganizationId": "(x) => _.get(x, \"organization.id\", \"\")",
      "getOrganizationName": "(x) => _.get(x, \"organization.name\", \"\")",
      "getOrganizationType": "(x) => (_.get(x, \"organization.organizationType\", \"\").toLowerCase() === 'mentorhub' ? 'Mentor Hub' :_.get(x, \"organization.organizationType\", \"\").toLowerCase())  + ' • ' + (_.get(x, \"organization.organizationCategory\", \"\").toLowerCase() === 'researchdevelopment' ? 'Research Development' :_.get(x, \"organization.organizationCategory\", \"\").toLowerCase())",
      "getOrganizationFollowAction": "(x) => _.get(x, \"organization.actions.canFollow\", false)",
      "getOrganizationUnFollowAction": "(x) => _.get(x, \"organization.actions.canUnfollow\", false)",
      "getOrganizationImage": "(x) => _.get(x, \"organization.photoCover.imageThumbnailUrl\", \"\")",
      "getOrganizationMainImage": "(x) => _.get(x, \"organization.photoCover.imageUrl\", \"\")",
      "getOrganizationPositionName": "(x) => _.get(x, \"role.positionName\", \"\")",
      "getOrganizationRoleName": "(x) => _.get(x, \"role.role\", \"\")",
      "getOrganizationIsFeatured": "(x) => _.get(x, \"role.featured\", false)",
      "getOrganizationCountry": "(x) => _.get(x, \"organization.place.country.isoCode\", \"\").toLowerCase()",
      "getOrganizationCity": "(x) => _.get(x, \"organization.place.city.name\", \"\")",
      "getOrganizationRole": "(x) => _.get(x, \"positionName\", \"\")",
      "getCommitteeId": "(x) => _.get(x, \"organizationCommittee.id\", \"\")",
      "getCommitteeName": "(x) => _.get(x, \"organizationCommittee.name\",\"\")",
      "getCommitteeMemberCount": "(x) => _.get(x, \"organizationCommittee.statistics.members\", 0)",
      "getDiplomaticMissionId": "(x) => _.get(x, \"diplomaticMission.id\", \"\")",
      "getDiplomaticMissionName": "(x) => _.get(x, \"diplomaticMission.name\", \"\")",
      "getDiplomaticMissionFollowAction": "(x) => _.get(x, \"diplomaticMission.actions.canFollow\", false)",
      "getDiplomaticMissionUnFollowAction": "(x) => _.get(x, \"diplomaticMission.actions.canUnfollow\", false)",
      "getDiplomaticMissionImage": "(x) => _.get(x, \"diplomaticMission.photoCover.imageThumbnailUrl\", \"\")",
      "getDiplomaticMissionMainImage": "(x) => _.get(x, \"diplomaticMission.photoCover.imageUrl\", \"\")",
      "getDiplomaticMissionCountry": "(x) => _.get(x, \"diplomaticMission.place.country.isoCode\", \"\").toLowerCase()",
      "getDiplomaticMissionCity": "(x) => _.get(x, \"diplomaticMission.place.city.name\", \"\")",
      "getDiplomaticMissionRole": "(x) => _.get(x, \"positionName\")",
      "getOfficeId": "(x) => _.get(x, \"diplomaticMissionCommittee.id\", \"\")",
      "getOfficeName": "(x) => _.get(x, \"diplomaticMissionCommittee.name\", \"\")",
      "getOfficeMemberCount": "(x) => _.get(x, \"diplomaticMissionCommittee.statistics.members\", 0)",
      "getNetworkId": "(x) => _.get(x, \"entity.id\", \"\")",
      "getOrganizationNetworkId": "(x) => _.get(x, \"entity.organization.organization.id\", \"\")",
      "getDiplomaticNetworkId": "(x) => _.get(x, \"entity.diplomaticMission.diplomaticMission.id\", \"\")",
      "getNetworkType": "(x) => _.get(x, \"entity.__typename\", \"\")",
      "getOrganizationNetworkType": "(x) => (_.get(x, \"entity.organizationType\", \"\").toLowerCase() === 'mentorhub' ? 'Mentor Hub' :_.get(x, \"entity.organizationType\", \"\").toLowerCase()) + ' • ' + (_.get(x, \"entity.organizationCategory\", \"\").toLowerCase() === 'researchdevelopment' ? 'Research Development' :_.get(x, \"entity.organizationCategory\", \"\").toLowerCase() )",
      "getDiplomaticMissinoNetworkType": "(x) => _.get(x, \"entity.diplomaticMissionType\", \"\") ? (_.get(x, \"entity.diplomaticMissionType\").toLowerCase() === 'honoraryconsulate' ? 'honorary consulate' :_.get(x, \"entity.diplomaticMissionType\", '').toLowerCase()) :_.get(x, \"entity.diplomaticMissionType\", '').toLowerCase()",
      "getTownNetworkType": "(x) => _.get(x, \"entity.governateDistrict.governate.name\", \"\") + ' • ' + _.get(x, \"entity.governateDistrict.district.name\", \"\")",
      "getNetworkName": "(x) => _.get(x, \"entity.name\", \"\")",
      "getNetworkFollowAction": "(x) => _.get(x, \"entity.actions.canFollow\", false)",
      "getNetworkUnFollowAction": "(x) => _.get(x, \"entity.actions.canUnfollow\", false)",
      "checkIfCanUpdateNetworkRole": "(x) => _.get(x, \"entity.actions.canUpdateRole\", false)",
      "checkIfCanFeatureNetworkRole": "(x) => _.get(x, \"entity.actions.canFeatureRole\", false)",
      "checkIfCanUnFeatureNetworkRole": "(x) => _.get(x, \"entity.actions.canUnfeatureRole\", false)",
      "checkIfCanRemoveNetworkRole": "(x) => _.get(x, \"entity.actions.canRemoveRole\", false)",
      "getOrganizationCommitteeFollowAction": "(x) => _.get(x, \"entity.organization.organization.actions.canFollow\", false)",
      "getOrganizationCommitteeUnFollowAction": "(x) => _.get(x, \"entity.organization.organization.actions.canUnfollow\", false)",
      "getDiplomaticOfficeFollowAction": "(x) => _.get(x, \"entity.diplomaticMission.diplomaticMission.actions.canFollow\", false)",
      "getDiplomaticOfficeUnFollowAction": "(x) => _.get(x, \"entity.diplomaticMission.diplomaticMission.actions.canUnfollow\", false)",
      "getNetworkImage": "(x) => _.get(x, \"entity.photoCover.imageThumbnailUrl\", \"\")",
      "getOrganizationCommitteeImage": "(x) => _.get(x, \"entity.organization.organization.photoCover.imageThumbnailUrl\", \"\")",
      "getDiplomaticMissionOfficeImage": "(x) => _.get(x, \"entity.diplomaticMission.diplomaticMission.photoCover.imageThumbnailUrl\", \"\")",
      "getNetworkCountry": "(x) => _.get(x, \"entity.place.country.isoCode\", \"\").toLowerCase()",
      "getMunicipalityCountryCode": "(x) => _.get(x, \"entity.country.isoCode\", \"\").toLowerCase()",
      "getMunicipalityCountryName": "(x) => _.get(x, \"entity.country.name\", \"\")",
      "getOrganizationCommitteeCountry": "(x) => _.get(x, \"entity.organization.organization.place.country.isoCode\", \"\")",
      "getDiplomaticMissionOfficeCountry": "(x) => _.get(x, \"entity.diplomaticMission.diplomaticMission.place.country.isoCode\", \"\")",
      "getNetworkCity": "(x) => _.get(x, \"entity.place.city.name\", \"\")",
      "getOrganizationCommitteeCity": "(x) => _.get(x, \"entity.organization.organization.place.city.name\", \"\")",
      "getDiplomaticMissionOfficeCity": "(x) => _.get(x, \"entity.diplomaticMission.diplomaticMission.place.city.name\", \"\")",
      "getNetworkIsFeatured": "(x) => _.get(x, \"role.featured\", false)",
      "getNetworkPositionName": "(x) => _.get(x, \"role.positionName\", \"\")",
      "getNetworkRoleName": "(x) => _.get(x, \"role.role\", \"\")",
      "getSearchNetworkId": "(x) => _.get(x, \"id\", \"\")",
      "getSearchNetworkType": "(x) => _.get(x, \"__typename\", \"\")",
      "getSearchOrganizationNetworkType": "(x) => (_.get(x, \"organizationType\", \"\").toLowerCase() === 'mentorhub' ? 'Mentor Hub' :_.get(x, \"organizationType\", \"\").toLowerCase()) + ' • ' + (_.get(x, \"organizationCategory\", \"\").toLowerCase() === 'researchdevelopment' ? 'Research Development' :_.get(x, \"organizationCategory\", \"\").toLowerCase())",
      "getSearchDiplomaticMissinoNetworkType": "(x) => _.get(x, \"diplomaticMissionType\", \"\") ? (_.get(x, \"diplomaticMissionType\") === 'HONORARYCONSULATE' ? 'honorary consulate' :_.get(x, \"diplomaticMissionType\", '').toLowerCase()) :_.get(x, \"diplomaticMissionType\", '').toLowerCase()",
      "getSearchTownNetworkType": "(x) => _.get(x, \"governateDistrict.governate.name\", \"\") + ' • ' + _.get(x, \"governateDistrict.district.name\", \"\")",
      "getSearchNetworkName": "(x) => _.get(x, \"name\", \"\")",
      "getSearchNetworkFollowAction": "(x) => _.get(x, \"actions.canFollow\", false)",
      "getSearchNetworkUnFollowAction": "(x) => _.get(x, \"actions.canUnfollow\", false)",
      "getSearchNetworkAddMemberAction": "(x) => _.get(x, \"actions.canAddMember\", false)",
      "getSearchNetworkAddCreateRole": "(x) => _.get(x, \"actions.canCreateRole\", false)",
      "getSearchNetworkImage": "(x) => _.get(x, \"photoCover.imageThumbnailUrl\", \"\")",
      "getSearchNetworkPositionName": "(x) => _.get(x, \"role.positionName\", \"\")",
      "getSearchMunicipalityCountryCode": "(x) => _.get(x, \"country.isoCode\", \"\").toLowerCase()",
      "getSearchMunicipalityCountryName": "(x) => _.get(x, \"country.name\", \"\")",
      "getSearchNetworkCountry": "(x) => _.get(x, \"place.country.isoCode\", \"\").toLowerCase()",
      "getSearchNetworkCity": "(x) => _.get(x, \"place.city.name\", \"\")",
      "getSearchNetworkIsFeatured": "(x) => _.get(x, \"role.featured\", false)",
      "getMediaId": "(x) => _.get(x, \"media.id\", \"\")",
      "getMediaType": "(x) => _.get(x, \"media.details.__typename\", \"\")",
      "checkIfCanDeleteImage": "(x) => _.get(x, \"media.actions.canDelete\", false)",
      "getMediaThumbnail": "(x) => _.get(x, \"media.details.imageThumbnailUrl\", \"\")",
      "getMediaImage": "(x) => _.get(x, \"media.details.imageUrl\", \"\")",
      "getMediaYoutubeUrl": "(x) => _.get(x, \"media.details.videoUrl\", \"\")",
      "getMediaCaption": "(x) => _.get(x, \"media.details.caption\", \"\")",
      "getMediaCreatorName": "(x) => _.get(x, \"media.creator.user.firstName\", \"\") + ' ' +_.get(x, \"media.creator.user.lastName\", \"\")",
      "getMediaCreatorId": "(x) => _.get(x, \"media.creator.user.id\", \"\")",
      "getGalleryId": "(x) => _.get(x, \"gallery.mediaGallery.id\", null)",
      "checkIfCanUploadImage": "(x) => _.get(x, \"gallery.mediaGallery.actions.canUploadImage\", false)",
      "checkIfCanUploadVideoLink": "(x) => _.get(x, \"gallery.mediaGallery.actions.canUploadVideoLink\", false)",
      "getTownId": "(x) => _.get(x, \"municipality.id\", \"\")",
      "getTownName": "(x) => _.get(x, \"municipality.title\", \"\")",
      "getTownGovernate": "(x) => _.get(x, \"municipality.governateDistrict.governate.name\", \"\")",
      "getTownDistrict": "(x) => _.get(x, \"municipality.governateDistrict.district.name\", \"\")",
      "getTownImage": "(x) => _.get(x, \"municipality.photoCover.imageThumbnailUrl\", \"\")",
      "getTownMainImage": "(x) => _.get(x, \"municipality.photoCover.imageUrl\", \"\")",
      "getTownGeoCoordinates": "(x) => _.get(x, \"municipality.geoCoordinates\", \"\")",
      "getTownDistanceFromBeirut": "(x) => _.get(x, \"municipality.distanceFromBeirut\", \"\")",
      "getTownAltitude": "(x) => _.get(x, \"municipality.altitude\", \"\")",
      "checkIfHasAdminRole": "(x) => _.get(x, \"roles\", []).includes(\"Admin\")",
      "checkIfCanCreateRole": "(x) => _.get(x, \"actions.canCreateRole\", false)",
      "checkIfCanApplyToBeAnAmbassador": "(x) => _.get(x, \"actions.canApplyToBeAmbassador\", false)",
      "checkIfCanFollow": "(x) => _.get(x, \"actions.canFollow\", false)",
      "checkIfCanUnFollow": "(x) => _.get(x, \"actions.canUnfollow\", false)",
      "checkIfUserCanManage": "(x) => _.get(x, \"userMetadata.actions.canUpdate\", false)",
      "checkIfUserCanAddPost": "(x) => _.get(x, \"userMetadata.actions.canAddPost\", false)",
      "checkIfUserCanUploadMedia": "(x) => _.get(x, \"userMetadata.actions.canUploadPhoto\", false)",
      "checkIfUserCanUpdatePrivacySettings": "(x) => _.get(x, \"userMetadata.actions.canUpdatePrivacysettings\", false)",
      "checkIfCanManage": "(x) => _.get(x, \"actions.canUpdate\", false)",
      "checkIfCanShare": "(x) => _.get(x, \"actions.canShare\", false)",
      "checkIfCanInvite": "(x) => _.get(x, \"actions.canInvite\", false)",
      "checkIfCanSendMessage": "(x) => _.get(x, \"actions.canSendMessage\", false)",
      "checkIfCanAddEvent": "(x) => _.get(x, \"actions.canAddEvent\", false)",
      "checkIfCanAddPost": "(x) => _.get(x, \"actions.canAddPost\", false)",
      "checkIfCanUploadMedia": "(x) => _.get(x, \"actions.canUploadMedia\", false)",
      "checkIfCanCreateCommittee": "(x) => _.get(x, \"actions.canCreateOrganizationCommitte\", false)",
      "checkIfCanCreateOffice": "(x) => _.get(x, \"actions.canCreateDiplomaticMissionCommittee\", false)",
      "checkIfCanAddMember": "(x) => _.get(x, \"actions.canAddMember\", false)",
      "checkIfCanInviteMember": "(x) => _.get(x, \"actions.canInviteMember\", false)",
      "checkIfCanRemoveMember": "(x) => _.get(x, \"actions.canRemoveMember\", false)",
      "checkIfCanJoinMember": "(x) => _.get(x, \"actions.canJoinMember\", false)",
      "checkIfCanEditCommittee": "(x) => _.get(x, \"actions.canUpdate\", false)",
      "checkIfCanDeleteCommittee": "(x) => _.get(x, \"actions.canDelete\", false)",
      "checkIfCanJoinEntity": "(x) => _.get(x, \"actions.canJoin\", false)",
      "getOfferId": "(x) => _.get(x, \"offer.id\", \"\")",
      "getOfferName": "(x) => _.get(x, \"offer.name\", \"\")",
      "getOfferImage": "(x) => _.get(x, \"offer.photoCover.imageThumbnailUrl\", \"\")",
      "getCountriesCount": "(x) => _.get(x, \"offer.countries\", []).length",
      "getSearchOfferId": "(x) => _.get(x, \"id\", \"\")",
      "getSearchOfferName": "(x) => _.get(x, \"name\", \"\")",
      "getSearchOfferType": "(x) => _.get(x, \"type\", \"\")",
      "getSearchOfferImage": "(x) => _.get(x, \"photoCover.imageThumbnailUrl\", \"\")",
      "getSearchCountriesCount": "(x) => _.get(x, \"countries\", []).length",
      "getNotificationId": "(x) => _.get(x, \"id\", \"\")",
      "getNotificationMessage": "(x) => _.get(x, \"message\", \"\")",
      "getNotificationCreatedDate": "(x) => x.createdDate ? moment(x.createdDate).fromNow():\"\"",
      "checkNotificationReaded": "(x) =>  _.get(x, \"read\", false)",
      "getObjectId": "(x) => _.get(x, \"object.id\", \"\")",
      "getOrganizationObjectId": "(x) => _.get(x, \"object.organization.organization.id\", \"\")",
      "getDiplomaticObjectId": "(x) => _.get(x, \"object.diplomaticMission.diplomaticMission.id\", \"\")",
      "getObjectType": "(x) => _.get(x, \"object.__typename\", \"\")",
      "getObjectImage": "(x) => _.get(x, \"object.photoCover.image\", \"\")",
      "getObjectName": "(x) => _.get(x, \"object.name\", \"\")",
      "getUserObjectName": "(x) => _.get(x, \"object.firstName\", \"\") + ' ' +_.get(x, \"object.lastName\", \"\")",
      "getConversationOwnerName": "(x) => _.get(x, \"object.sender.owner.entity.__typename\", \"\") === 'User' ? (_.get(x, \"object.sender.owner.entity.firstName\", \"\") + ' ' + _.get(x, \"object.sender.owner.entity.lastName\", \"\")) :_.get(x, \"object.sender.owner.entity.name\", \"\")",
      "getConversationOwnerImage": "(x) => _.get(x, \"object.sender.owner.entity.photoCover.imageThumbnailUrl\", \"\")",
      "getCommentnOwnerName": "(x) => _.get(x, \"object.listUnder.entity.__typename\", \"\") === 'User' ? _.get(x, \"object.listUnder.entity.owner.firstName\", \"\") + ' ' + _.get(x, \"object.listUnder.entity.owner.lastName\", \"\") :_.get(x, \"object.listUnder.entity.owner.name\", \"\")",
      "getCommentnOwnerImage": "(x) => _.get(x, \"object.listUnder.entity.owner.photoCover.imageThumbnailUrl\", \"\")",
      "getUpdateId": "(x) => _.get(x, \"entity.id\", \"\")",
      "getUpdateType": "(x) => _.get(x, \"entity.__typename\", \"\")",
      "getUpdateTitle": "(x) => _.get(x, \"entity.title\", \"\")",
      "getUpdateSubtTitle": "(x) => _.get(x, \"entity.description\", \"\")",
      "getUpdateDate": "(x) => _.get(x, \"entity.createdDate\") ? moment(_.get(x, \"entity.createdDate\")).fromNow():\"\"",
      "getUpdateImage": "(x) => _.get(x, \"entity.photoCover.imageThumbnailUrl\", null)",
      "getUpdateCreatorName": "(x) => _.get(x, \"entity.creater.user.firstName\", \"\") + ' ' +_.get(x, \"entity.creater.user.lastName\", \"\")",
      "getUpdateOwnerId": "(x) => _.get(x, \"entity.owner.id\", \"\")",
      "getUpdateOwnerType": "(x) => _.get(x, \"entity.owner.__typename\", \"\")",
      "getUpdateUserOwnerName": "(x) => _.get(x, \"entity.owner.firstName\", \"\") + ' ' +_.get(x, \"entity.owner.lastName\", \"\")",
      "getUpdateEntityOwnerName": "(x) => _.get(x, \"entity.owner.name\", \"\")",
      "getUpdateOwnerImage": "(x) => _.get(x, \"entity.owner.photoCover.imageThumbnailUrl\", null)",
      "getCommentId": "(x) => _.get(x, \"id\", \"\")",
      "getCommentText": "(x) => _.get(x, \"text\", \"\")",
      "getCommentPrettyDate": "(x) => x.createdDate ? moment(x.createdDate).fromNow():\"\"",
      "getCommentCreatedDate": "(x) => x.createdDate ? x.createdDate :\"\"",
      "getCommentNumberOfLikes": "(x) => _.get(x, \"statistics.likers\", 0)",
      "checkIfCanDelete": "(x) =>  _.get(x, \"actions.canDeleteMyComment\", false)",
      "checkIfHadAdminActivityRole": "(x) =>  _.get(x, \"actions.canRemoveComment\", false)",
      "checkIfCanUpdate": "(x) =>  _.get(x, \"actions.canUpdate\", false)",
      "checkIfCanLike": "(x) =>  _.get(x, \"actions.canLike\", false)",
      "checkIfCanUnlike": "(x) =>  _.get(x, \"actions.canUnlike\", false)",
      "getCreatorId": "(x) => _.get(x, \"creater.user.id\", \"\")",
      "getCreatorName": "(x) => _.get(x, \"creater.user.firstName\", \"\") + \" \" + _.get(x, \"creater.user.lastName\", \"\")",
      "getCreatorImage": "(x) => _.get(x, \"creater.user.photoCover.imageThumbnailUrl\", \"\")",
      "getFavoriteId": "(x) => _.get(x, \"entity.id\", \"\")",
      "getFavoriteType": "(x) => _.get(x, \"entity.__typename\", \"\")",
      "getFavoriteTitle": "(x) => _.get(x, \"entity.title\", \"\")",
      "getFavoriteName": "(x) => _.get(x, \"entity.name\", \"\")",
      "getFavoriteSubtTitle": "(x) => _.get(x, \"entity.description\", \"\")",
      "getFavoriteDate": "(x) => _.get(x, \"entity.createdDate\") ? moment(_.get(x, \"entity.createdDate\")).fromNow():\"\"",
      "getFavoriteImage": "(x) => _.get(x, \"entity.photoCover.imageThumbnailUrl\", null)",
      "getFavoriteOfferType": "(x) => _.get(x, \"entity.type\", \"\")",
      "getFavoriteCreatorId": "(x) => _.get(x, \"entity.creater.user.id\", \"\")",
      "getFavoriteCreatorName": "(x) => _.get(x, \"entity.creater.user.firstName\", \"\") + ' ' +_.get(x, \"entity.creater.user.lastName\", \"\")",
      "getFavoriteCreatorImage": "(x) => _.get(x, \"entity.creater.user.photoCover.imageThumbnailUrl\", null)",
      "getFavoriteOwnerId": "(x) => _.get(x, \"entity.owner.id\", \"\")",
      "getFavoriteOwnerName": "(x) => _.get(x, \"entity.owner.name\", \"\")",
      "getFavoriteOwnerType": "(x) => _.get(x, \"entity.owner.__typename\", \"\")",
      "getFavoriteOwnerUserName": "(x) => _.get(x, \"entity.owner.firstName\", \"\") + ' ' +_.get(x, \"entity.owner.lastName\", \"\")",
      "getFavoriteOwnerImage": "(x) => _.get(x, \"entity.owner.photoCover.imageThumbnailUrl\", null)",
      "getFavoriteOfferOwnerId": "(x) => _.get(x, \"entity.owner.id\", \"\")",
      "getFavoriteOfferOwnerName": "(x) => _.get(x, \"entity.owner.name\", \"\")",
      "getFavoriteOfferOwnerImage": "(x) => _.get(x, \"entity.owner.photoCover.imageThumbnailUrl\", null)",
      "getSearchNewsId": "(x) => _.get(x, \"id\", \"\")",
      "getSearchNewsTitle": "(x) => _.get(x, \"title\", \"\")",
      "getSearchNewsDate": "(x) => x.createdDate ? moment(x.createdDate).fromNow():\"\"",
      "getSearchNewsImage": "(x) => _.get(x, \"photoCover.imageThumbnailUrl\", null)",
      "getSearchNewsCreatorName": "(x) => _.get(x, \"creater.user.firstName\", \"\") + ' ' +_.get(x, \"creater.user.lastName\", \"\")",
      "getSearchNewsOwnerId": "(x) => _.get(x, \"owner.id\", \"\")",
      "getSearchNewsOwnerType": "(x) => _.get(x, \"owner.__typename\", \"\")",
      "getSearchNewsUserOwnerName": "(x) => _.get(x, \"owner.firstName\", \"\") + ' ' +_.get(x, \"owner.lastName\", \"\")",
      "getSearchNewsEntityOwnerName": "(x) => _.get(x, \"owner.name\", \"\")",
      "getSearchNewsOwnerImage": "(x) => _.get(x, \"owner.photoCover.imageThumbnailUrl\", null)",
      "getSearchEventId": "(x) => _.get(x, \"id\", \"\")",
      "getSearchEventTitle": "(x) => _.get(x, \"title\", \"\")",
      "getSearchEventDate": "(x) => x.createdDate ? moment(x.createdDate).fromNow():\"\"",
      "getSearchEventImage": "(x) => _.get(x, \"photoCover.imageThumbnailUrl\", null)",
      "getSearchEventCreatorName": "(x) => _.get(x, \"creater.user.firstName\", \"\") + ' ' +_.get(x, \"creater.user.lastName\", \"\")",
      "getSearchEventOwnerId": "(x) => _.get(x, \"owner.id\", \"\")",
      "getSearchEventOwnerType": "(x) => _.get(x, \"owner.__typename\", \"\")",
      "getSearchEventEntityOwnerName": "(x) => _.get(x, \"owner.name\", \"\")",
      "getSearchEventOwnerImage": "(x) => _.get(x, \"owner.photoCover.imageThumbnailUrl\", null)",
      "getActivityId": "(x) => _.get(x, \"id\", \"\")",
      "getActivityType": "(x) => _.get(x, \"__typename\") ? (_.get(x, \"__typename\").includes(\"Post\") ? 'Post' :'Event'):''",
      "getActivityTitle": "(x) => _.get(x, \"title\", \"\")",
      "getActivityDate": "(x) => x.createdDate ? moment(x.createdDate).fromNow():\"\"",
      "getAcitivyImage": "(x) => _.get(x, \"photoCover.imageThumbnailUrl\", null)",
      "getActivityCreatorName": "(x) => _.get(x, \"creater.user.firstName\", \"\") + ' ' +_.get(x, \"creater.user.lastName\", \"\")",
      "getActivityOwnerId": "(x) => _.get(x, \"owner.id\", \"\")",
      "getActivityOwnerType": "(x) => _.get(x, \"owner.__typename\", \"\")",
      "getActivityUserOwnerName": "(x) => _.get(x, \"owner.firstName\", \"\") + ' ' +_.get(x, \"owner.lastName\", \"\")",
      "getActivityEntityOwnerName": "(x) => _.get(x, \"owner.name\", \"\")",
      "getActivityOwnerImage": "(x) => _.get(x, \"owner.photoCover.imageThumbnailUrl\", null)",
      "getDirectoryEventId": "(x) => _.get(x, \"id\", \"\")",
      "getDirectoryEventTitle": "(x) => _.get(x, \"title\", \"\")",
      "getDirectoryEventSubtitle": "(x) => _.get(x, \"subTtitle\", \"\")",
      "getDirectoryEventDateDay": "(x) => x.createdDate ? moment(x.createdDate).day():\"\"",
      "getDirectoryEventDateMonth": "(x) => x.createdDate ? moment(moment(x.createdDate).month()).format(\"MMM\"):\"\"",
      "getDirectoryEventImage": "(x) => _.get(x, \"photoCover.imageThumbnailUrl\", null)",
      "getDirectoryCreatorName": "(x) => _.get(x, \"creater.user.firstName\", \"\") + ' ' +_.get(x, \"creater.user.lastName\", \"\")",
      "getMailboxId": "(x) => _.get(x, \"id\", \"\")",
      "getMailboxOwnerId": "(x) => _.get(x, \"owner.entity.id\", \"\")",
      "getMailboxOwneType": "(x) => _.get(x, \"owner.entity.__typename\", \"\")",
      "getMailboxOwnerUserName": "(x) => _.get(x, \"owner.entity.firstName\", \"\") + ' ' +  _.get(x, \"owner.entity.lastName\", \"\")",
      "getMailboxOwnerName": "(x) => _.get(x, \"owner.entity.name\", \"\")",
      "getMailboxOwnerImage": "(x) => _.get(x, \"owner.entity.photoCover.imageThumbnailUrl\", null)",
      "getEntityMailboxId": "(x) => _.get(x, \"mailBox.id\", \"\")",
      "getEntityMailboxOwnerId": "(x) => _.get(x, \"mailBox.owner.entity.id\", \"\")",
      "getEntityMailboxOwneType": "(x) => _.get(x, \"mailBox.owner.entity.__typename\", \"\")",
      "getEntityMailboxOwnerUserName": "(x) => _.get(x, \"mailBox.owner.entity.firstName\", \"\") + ' ' +  _.get(x, \"mailBox.owner.entity.lastName\", \"\")",
      "getEntityMailboxOwnerName": "(x) => _.get(x, \"mailBox.owner.entity.name\", \"\")",
      "getEntityMailboxOwnerImage": "(x) => _.get(x, \"mailBox.owner.entity.photoCover.imageThumbnailUrl\", null)",
      "getConversationId": "(x) => _.get(x, \"id\", \"\")",
      "getConversationMessage": "(x) => _.get(x, \"messages\") ? (_.get(x, \"messages.items\", []).length > 0 ? _.get(x, \"messages.items\")[0].message :null) :null",
      "getConversationMessageSender": "(x) => _.get(x, \"sender\", null)",
      "getConversationReceiver": "(x) => _.get(x, \"receiver\", null)",
      "getConversationSender": "(x) => _.get(x, \"sender\", null)",
      "getConversationTotalUnreadMessages": "(x) => _.get(x, \"statistics.totalUnreadMessages\", null)",
      "getConversationTotalMessages": "(x) => _.get(x, \"statistics.totalMessages\", null)",
      "checkIfMyMessage": "function(senderMailboxOwnerId, lastMessageSenderId) {  return senderMailboxOwnerId === lastMessageSenderId ? true : false\n}\n",
      "getConversationDetailsId": "(x) => _.get(x, \"id\", \"\")",
      "getConversationDetailsSenderMailboxId": "(x) => _.get(x, \"senderMailbox.id\", null)",
      "getConversationDetailsReceiverMailboxId": "(x) => _.get(x, \"receiverMailbox.id\", null)",
      "getConversationDetailsSenderIdMailbox": "(x) => _.get(x, \"senderMailbox.owner.entity.id\", null)",
      "getConversationDetailsReceiverIdMailbox": "(x) => _.get(x, \"receiverMailbox.owner.entity.id\", null)",
      "getConversationDetailsSenderTypeMailbox": "(x) => _.get(x, \"senderMailbox.owner.entity.__typename\", null)",
      "getConversationDetailsSenderNameMailbox": "(x) => _.get(x, \"senderMailbox.owner.entity.name\", null)",
      "getConversationDetailsSenderFirstNameMailbox": "(x) => _.get(x, \"senderMailbox.owner.entity.firstName\", null)",
      "getConversationDetailsSenderLastNameMailbox": "(x) => _.get(x, \"senderMailbox.owner.entity.lastName\", null)",
      "getConversationDetailsSenderImageMailbox": "(x) => _.get(x, \"senderMailbox.owner.entity.photoCover.imageThumbnailUrl\", null)",
      "getConversationDetailsReceiverTypeMailbox": "(x) => _.get(x, \"receiverMailbox.owner.entity.__typename\", null)",
      "getConversationDetailsReceiverNameMailbox": "(x) => _.get(x, \"receiverMailbox.owner.entity.name\", null)",
      "getConversationDetailsReceiverFirstNameMailbox": "(x) => _.get(x, \"receiverMailbox.owner.entity.firstName\", null)",
      "getConversationDetailsReceiverLastNameMailbox": "(x) => _.get(x, \"receiverMailbox.owner.entity.lastName\", null)",
      "getConversationDetailsReceiverImageMailbox": "(x) => _.get(x, \"receiverMailbox.owner.entity.photoCover.imageThumbnailUrl\", null)",
      "getConversationDetailsMessageId": "(x) => _.get(x, \"message.id\", null)",
      "getConversationDetailsMessageText": "(x) => _.get(x, \"message.text\", null)",
      "getConversationDetailsMessageDate": "(x) => _.get(x, \"message.createdDate\", null)",
      "getConversationDetailsSenderMessageMailboxId": "(x) => _.get(x, \"message.senderMessage.id\", null)",
      "getConversationDetailsSenderMessageOwnerId": "(x) => _.get(x, \"message.senderMessage.owner.entity.id\", null)",
      "getConversationDetailsSenderMessageOwnerName": "(x) => _.get(x, \"message.senderMessage.owner.entity.name\", \"\")",
      "getConversationDetailsSenderMessageUserOwnerName": "(x) => _.get(x, \"message.senderMessage.owner.entity.firstName\", \"\") + ' ' + _.get(x, \"message.senderMessage.owner.entity.lastName\", \"\")",
      "getConversationDetailsSenderMessageOwnerType": "(x) => _.get(x, \"message.senderMessage.owner.entity.__typename\", null)",
      "getConversationDetailsSenderMessageOwnerImage": "(x) => _.get(x, \"message.senderMessage.owner.entity.photoCover.imageThumbnailUrl\", null)",
      "getConversationDetailsReceiverMessageMailboxId": "(x) => _.get(x, \"message.receiverMessage.id\", null)",
      "getConversationDetailsReceiverMessageOwnerId": "(x) => _.get(x, \"message.receiverMessage.owner.entity.id\", null)",
      "getConversationDetailsReceiverMessageOwnerName": "(x) => _.get(x, \"message.receiverMessage.owner.entity.name\", \"\")",
      "getConversationDetailsReceiverMessageUserOwnerName": "(x) => _.get(x, \"message.receiverMessage.owner.entity.firstName\", \"\") + ' ' + _.get(x, \"message.receiverMessage.owner.entity.lastName\", \"\")",
      "getConversationDetailsReceiverMessageOwnerType": "(x) => _.get(x, \"message.receiverMessage.owner.entity.__typename\", null)",
      "getConversationDetailsReceiverMessageOwnerImage": "(x) => _.get(x, \"message.receiverMessage.owner.entity.photoCover.imageThumbnailUrl\", null)",
      "mapFeaturedBlocks": "function(blockItem, blockInfo, blockKey) {  const blockType = (_.get(blockInfo[blockKey], 'itemType', '') || '').toLowerCase();\n  switch(blockType) {\n    case 'user': \n      return this.mapSearchPeopleToItem(blockItem);\n    break;\n\n    case 'company': \n      return this.mapSearchCompanyToItem(blockItem);\n    break;\n\n    case 'municipality': \n    case 'organization': \n    case 'diplomaticmission': \n      return this.mapSearchNetworkToItem(blockItem);\n    break;\n  }\n}\n",
      "mapUserRoleToEntityRoles": "function(userRoles) {  const cityOriginId = (initialDataSource.placeOfOrigin && initialDataSource.placeOfOrigin.city) ? initialDataSource.placeOfOrigin.city.lookupId : null;\n  const roles =  userRoles.map(x => this.mapUserRolesToItem(x, cityOriginId));\n  return roles.filter((value, index, array) => array.findIndex(role => role.id === value.id) === index);\n}\n",
      "mapSearchPeopleToItem": "function(x) {  return {\n    ...x, \n    id: this.getUserId(x), \n    title: this.getUserFullName(x), \n    subTitle: this.getUserFeaturedRole(x), \n    image: this.getUserImage(x), \n    canFollow: this.getUserFollowAction(x),\n    canUnFollow: this.getUserUnFollowAction(x),\n    tagOneIcon: this.getUserCountryOfOrigin(x), \n    tagOneLabel: this.getUserCityOfOrigin(x), \n    tagTwoIcon: this.getUserCountryOfResidence(x), \n    tagTwoLabel: this.getUserCityOfResidence(x),\n    type: 'Profile'\n  }\n}\n",
      "mapSearchProfessionalsPeopleToItem": "function(x) {  return {\n    ...x, \n    id: this.getUserId(x), \n    title: this.getUserFullName(x), \n    subTitle: this.getUserProfessionRole(x), \n    image: this.getUserImage(x), \n    canFollow: this.getUserFollowAction(x),\n    canUnFollow: this.getUserUnFollowAction(x),\n    tagOneIcon: this.getUserCountryOfOrigin(x), \n    tagOneLabel: this.getUserCityOfOrigin(x), \n    tagTwoIcon: this.getUserCountryOfResidence(x), \n    tagTwoLabel: this.getUserCityOfResidence(x)\n  }\n}\n",
      "mapSearchCompanyToItem": "function(x) {  return {\n    ...x, \n    id: this.getSearchCompanyId(x), \n    title: this.getSearchCompanyName(x), \n    subTitle: this.getSearchCompanyType(x) === 'socialenterprise' ? 'social enterprise' : this.getSearchCompanyType(x),\n    image: this.getSearchCompanyImage(x), \n    canFollow: this.getSearchCompanyFollowAction(x), \n    canUnFollow: this.getSearchCompanyUnFollowAction(x), \n    canAddMember: this.getSearchCompanyAddMemberAction(x),\n    canCreateRole: this.getSearchCompanyAddCreateRole(x),\n    tagOneIcon: this.getSearchCompanyCountry(x), \n    tagOneLabel: this.getSearchCompanyCity(x),\n    type: 'Company'\n  }\n}\n",
      "mapSearchOfferToItem": "function(x) {  return {\n    ...x, \n    id: this.getSearchCompanyId(x), \n    title: this.getSearchCompanyName(x), \n    subTitle: this.getSearchCompanyType(x) === 'socialenterprise' ? 'social enterprise' : this.getSearchCompanyType(x),\n    image: this.getSearchCompanyImage(x), \n    canFollow: this.getSearchCompanyFollowAction(x),\n    canUnFollow: this.getSearchCompanyUnFollowAction(x),  \n    tagOneIcon: this.getSearchCompanyCountry(x), \n    tagOneLabel: this.getSearchCompanyCity(x) \n  }\n}\n",
      "mapSearchNewsToItem": "function(x) {  return {\n    ...x, \n    id: this.getSearchNewsId(x),\n    type: \"Post\", \n    title: this.getSearchNewsTitle(x),\n    subTitle: this.getSearchNewsDate(x) + ' • by ' + this.getSearchNewsCreatorName(x), \n    date: this.getSearchNewsDate(x),\n    image: this.getSearchNewsImage(x),\n    showImage: this.getSearchNewsImage(x) ? true: false,\n    actorId: this.getSearchNewsOwnerId(x),\n    actorType: this.getSearchNewsOwnerType(x),\n    actorName: this.getSearchNewsOwnerType(x) === 'User' ? this.getSearchNewsUserOwnerName(x)  : this.getSearchNewsEntityOwnerName(x),\n    actorImage: this.getSearchNewsOwnerImage(x)\n  }\n}\n",
      "mapSearchEventToItem": "function(x) {  return {\n    ...x, \n    id: this.getSearchEventId(x),\n    type: \"Event\", \n    title: this.getSearchEventTitle(x),\n    subTitle: this.getSearchEventDate(x) + ' • by ' + this.getSearchEventCreatorName(x), \n    date: this.getSearchEventDate(x),\n    image: this.getSearchEventImage(x),\n    showImage: this.getSearchEventImage(x) ? true: false,\n    actorId: this.getSearchEventOwnerId(x),\n    actorType: this.getSearchEventOwnerType(x),\n    actorName: this.getSearchEventEntityOwnerName(x),\n    actorImage: this.getSearchEventOwnerImage(x)\n  }\n}\n",
      "mapDirectoryEventToItem": "function(x) {  return {\n    id: this.getDirectoryEventId(x),\n    image: this.getDirectoryEventImage(x),\n    title:  this.getDirectoryEventTitle(x),\n    dateDay: this.getDirectoryEventDateDay(x),\n    dateMonth: this.getDirectoryEventDateMonth(x),\n    subTitle: 'Hosted by ' + this.getDirectoryCreatorName(x)\n  }\n}\n",
      "mapSearchCardToItem": "function(x) {  return {\n    ...x, \n    id: this.getSearchCompanyId(x), \n    title: this.getSearchCompanyName(x), \n    subTitle: this.getSearchCompanyType(x) === 'socialenterprise' ? 'social enterprise' : this.getSearchCompanyType(x),\n    image: this.getSearchCompanyImage(x), \n    canFollow: this.getSearchCompanyFollowAction(x),  \n    canUnFollow: this.getSearchCompanyUnFollowAction(x),  \n    tagOneIcon: this.getSearchCompanyCountry(x), \n    tagOneLabel: this.getSearchCompanyCity(x) \n  }\n}\n",
      "mapSearchNetworkToItem": "function(x) {  const networkType = this.getSearchNetworkType(x);\n  return {\n    ...x, \n    id: this.getSearchNetworkId(x), \n    type: networkType, \n    title: this.getSearchNetworkName(x), \n    subTitle: networkType === 'Organization' \n              ? this.getSearchOrganizationNetworkType(x) : \n                  networkType === 'DiplomaticMission' \n                    ? this.getSearchDiplomaticMissinoNetworkType(x) : \n                       networkType === 'Municipality' \n                        ? this.getSearchTownNetworkType(x): '',\n\n    image: this.getSearchNetworkImage(x), \n    canFollow: this.getSearchNetworkFollowAction(x), \n    canUnFollow: this.getSearchNetworkUnFollowAction(x), \n    canAddMember: this.getSearchNetworkAddMemberAction(x),\n    canCreateRole: this.getSearchNetworkAddCreateRole(x),\n    tagOneIcon: networkType === 'Municipality' \n                    ? this.getSearchMunicipalityCountryCode(x): this.getSearchNetworkCountry(x), \n    tagOneLabel: networkType === 'Municipality' \n                    ? this.getSearchMunicipalityCountryName(x): this.getSearchNetworkCity(x),\n    type: networkType === 'Organization' ? 'Organization' : (networkType === 'DiplomaticMission' ? 'DiplomaticMission' : 'Municipality')\n  }\n}\n",
      "mapCompanySearchOfferToItem": "function(x) {  return {\n    ...x, \n    id: this.getSearchOfferId(x), \n    title: this.getSearchOfferName(x),\n    image: this.getSearchOfferImage(x),\n    icon: \"assets/icon/dynamic-ui/glob.svg\",\n    location: this.getSearchCountriesCount(x) + (this.getSearchCountriesCount(x) === 1 ? ' Country' : ' Countries')  \n  }\n}\n",
      "mapUserRolesToItem": "function(x, cityOfOriginId) {  const entityRoleType = this.getEntityRoleType(x);\n  const role = {\n    ...x, \n    id: entityRoleType === 'OrganizationCommittee' \n            ? this.getEntityOrganizationId(x) : \n                entityRoleType === 'DiplomaticMissionCommittee' \n                  ? this.getEntityDiplomaticMissionId(x) : this.getEntityRoleId(x),  \n\n    receiverMailboxId: entityRoleType === 'OrganizationCommittee' \n            ? this.getOrganizationReceiverMailboxId(x) : \n                entityRoleType === 'DiplomaticMissionCommittee' \n                  ? this.getDiplomaticMissionReceiverMailboxId(x) : this.getReceiverMailboxId(x),  \n\n    type: entityRoleType === 'OrganizationCommittee' ? 'Organization' : entityRoleType === 'DiplomaticMissionCommittee' ? 'DiplomaticMission' : entityRoleType,\n    title: this.getEntityRoleName(x),\n    parentTitle: entityRoleType === 'OrganizationCommittee' \n            ? this.getEntityOrganizationName(x) : \n                entityRoleType === 'DiplomaticMissionCommittee' \n                  ? this.getEntityDiplomaticMissionName(x) : this.getEntityRoleName(x), \n\n    thumbnailImage: entityRoleType === 'OrganizationCommittee' \n            ? this.getEntityOrganizationImage(x) : \n                entityRoleType === 'DiplomaticMissionCommittee' \n                  ? this.getEntityDiplomaticMissionImage(x) : this.getEntityRoleImage(x), \n\n    coverImage: \"assets/images/dynamic-ui/default-cover-image.jpg\",\n    hasAdminRole: entityRoleType === 'OrganizationCommittee' \n            ? this.checkIfHasAdminEntityOrganizationRole(x) : \n                entityRoleType === 'DiplomaticMissionCommittee' \n                  ? this.checkIfHasAdminEntityDiplomaticRole(x) : this.checkIfHasAdminEntityRole(x), \n        \n    postUrl: entityRoleType === 'OrganizationCommittee' \n            ? this.getPostUrl('Organization', this.getEntityOrganizationId(x)) : \n                entityRoleType === 'DiplomaticMissionCommittee' \n                  ? this.getPostUrl('DiplomaticMission', this.getEntityDiplomaticMissionId(x)) : this.getPostUrl(entityRoleType, this.getEntityRoleId(x)) \n  }\n\n  role.conversationUrl = 'conversationMessages/' + _.camelCase(role.type) + '/' + role.id + '/' + initialDataSource.userMailboxId + '/' + role.receiverMailboxId;\n\n  role.inviteParametes = this.getDomainInviteInfo(entityRoleType === 'Municipality' ? cityOfOriginId : role.id, role.type, role.title, role.thumbnailImage);\n  \n  return role;\n}\n",
      "mapUserToItem": "function(x) {  return {\n    ...x, \n    id: this.getUserId(x.user), \n    title: this.getUserFullName(x.user), \n    subTitle: this.getUserFeaturedRole(x.user), \n    image: this.getUserImage(x.user), \n    canFollow: this.getUserFollowAction(x.user), \n    canUnFollow: this.getUserUnFollowAction(x.user),\n    tagOneIcon: this.getUserCountryOfOrigin(x.user), \n    tagOneLabel: this.getUserCityOfOrigin(x.user), \n    tagTwoIcon: this.getUserCountryOfResidence(x.user), \n    tagTwoLabel: this.getUserCityOfResidence(x.user)\n  }\n}\n",
      "mapUserWithRoleToItem": "function(x) {  return {\n    ...x, \n    id: this.getUserId(x.user), \n    title: this.getUserFullName(x.user), \n    subTitle: this.getCompanyRole(x), \n    image: this.getUserImage(x.user), \n    canFollow: this.getUserFollowAction(x.user),\n    canUnFollow: this.getUserUnFollowAction(x.user),\n    tagOneIcon: this.getUserCountryOfOrigin(x.user), \n    tagOneLabel: this.getUserCityOfOrigin(x.user), \n    tagTwoIcon: this.getUserCountryOfResidence(x.user), \n    tagTwoLabel: this.getUserCityOfResidence(x.user)  \n  }\n}\n",
      "mapBusinessRoleToItem": "function(x) {  return {\n    ...x, \n    id: this.getCompanyId(x), \n    title: this.getCompanyName(x), \n    subTitle: this.getCompanyPositionName(x), \n    image: this.getCompanyImage(x), \n    featured: this.getCompanyIsFeatured(x),\n    canFollow: this.getCompanyFollowAction(x), \n    canUnFollow: this.getCompanyUnFollowAction(x), \n\n    tagOneIcon: this.getCompanyCountry(x), \n    tagOneLabel: this.getCompanyCity(x),\n    positionName: this.getCompanyPositionName(x), \n    positionType: this.getCompanyPositionType(x), \n\n    canUpdateRole: this.checkIfCanUpdateBusinessRole(x),\n    canFeatureRole: this.checkIfCanFeatureBusinessRole(x),\n    canUnFeatureRole: this.checkIfCanUnFeaturBusinessRole(x),\n    canRemoveRole: this.checkIfCanRemoveBusinessRole(x)\n  }\n}\n",
      "mapNetworRoleToItem": "function(x) {  const networkType = this.getNetworkType(x);\n  const roleName = this.getNetworkPositionName(x);\n  const positionName =  roleName ?  (roleName.toLowerCase() === 'electedmember' ? 'Elected Member' : (roleName.toLowerCase() === 'ambassador' && _.get(x, \"entity.__typename\", \"\") === 'Municipality') ? 'Town Ambassador' :  roleName.toLowerCase() === 'vicepresident' ? 'Vice President' : roleName) : \"\";\n\n  return {\n      ...x, \n      id: this.getNetworkId(x), \n      type: networkType, \n      title: this.getNetworkName(x), \n      subTitle: positionName, \n      featured: this.getNetworkIsFeatured(x),\n      parentDomainId: networkType === 'OrganizationCommittee' \n              ? this.getOrganizationNetworkId(x) : \n                  networkType === 'DiplomaticMissionCommittee' \n                    ? this.getDiplomaticNetworkId(x) : this.getNetworkId(x), \n      parentDomainType: networkType === 'OrganizationCommittee' ? 'Organization' : networkType === 'DiplomaticMissionCommittee' ? 'DiplomaticMission' : networkType,                           \n      image: networkType === 'OrganizationCommittee' \n              ? this.getOrganizationCommitteeImage(x) : \n                  networkType === 'DiplomaticMissionCommittee' \n                    ? this.getDiplomaticMissionOfficeImage(x) : this.getNetworkImage(x), \n      canFollow: networkType === 'OrganizationCommittee' \n                  ? this.getOrganizationCommitteeFollowAction(x)\n                    : ((networkType === 'DiplomaticMissionCommittee') ? this.getDiplomaticOfficeFollowAction(x) : this.getNetworkFollowAction(x)), \n      canUnFollow: networkType === 'OrganizationCommittee' \n                  ? this.getOrganizationCommitteeUnFollowAction(x)\n                    : ((networkType === 'DiplomaticMissionCommittee') ? this.getDiplomaticOfficeUnFollowAction(x) : this.getNetworkUnFollowAction(x)), \n\n      tagOneIcon: networkType === 'OrganizationCommittee' \n                    ? this.getOrganizationCommitteeCountry(x) : \n                        networkType === 'DiplomaticMissionCommittee' \n                          ? this.getDiplomaticMissionOfficeCountry(x) : \n                              networkType === 'Municipality' \n                                ? this.getMunicipalityCountryCode(x): this.getNetworkCountry(x),             \n      tagOneLabel: networkType === 'OrganizationCommittee' \n                    ? this.getOrganizationCommitteeCity(x) : \n                        networkType === 'DiplomaticMissionCommittee' \n                          ? this.getDiplomaticMissionOfficeCity(x) : \n                              networkType === 'Municipality' \n                                ? this.getMunicipalityCountryName(x) : this.getNetworkCity(x),               \n      positionName: positionName, \n      positionType: this.getNetworkRoleName(x),\n      canUpdateRole: this.checkIfCanUpdateNetworkRole(x),\n      canFeatureRole: this.checkIfCanFeatureNetworkRole(x),\n      canUnFeatureRole: this.checkIfCanUnFeatureNetworkRole(x),\n      canRemoveRole: this.checkIfCanRemoveNetworkRole(x)\n  }\n}\n",
      "mapGalleryToItem": "function(x) {  return {\n    ...x, \n    id: this.getMediaId(x),\n    type: this.getMediaType(x), \n    thumbnailUrl: this.getMediaThumbnail(x),\n    imageUrl: this.getMediaImage(x),\n    url: this.getMediaYoutubeUrl(x), \n    caption: this.getMediaCaption(x),\n    creatorName: this.getMediaCreatorName(x),\n    creatorId: this.getMediaCreatorId(x),\n    canDelete: this.checkIfCanDeleteImage(x),\n    fromGallery: true\n  }\n}\n",
      "mapPostToItem": "function(x) {  const updateImage = this.getUpdateImage(x);\n  const updateOwnerType = this.getUpdateOwnerType(x);\n\n  return {\n    ...x, \n    id: this.getUpdateId(x),\n    type: \"Post\", \n    title: this.getUpdateTitle(x),\n    subTitle: this.getUpdateDate(x) + ' • by ' + this.getUpdateCreatorName(x), \n    date: this.getUpdateDate(x),\n    image: updateImage,\n    showImage: updateImage ? true: false,\n    actorId: this.getUpdateOwnerId(x),\n    actorType: updateOwnerType,\n    actorName: updateOwnerType === 'User' ? this.getUpdateUserOwnerName(x)  : this.getUpdateEntityOwnerName(x),\n    actorImage: this.getUpdateOwnerImage(x)\n  }\n}\n",
      "mapUpdateToItem": "function(x) {  const updateType= this.getUpdateType(x);\n  const updateImage = this.getUpdateImage(x);\n  const updateOwnerType = this.getUpdateOwnerType(x);\n  return {\n    ...x, \n    id: this.getUpdateId(x),\n    type: updateType, \n    title: this.getUpdateTitle(x),\n    subTitle: this.getUpdateDate(x) + ' • by ' + this.getUpdateCreatorName(x), \n    date: this.getUpdateDate(x),\n    image: updateImage,\n    showImage: (updateType === 'Post' && updateImage) || (updateType === 'Event') ? true : false,\n\n    actorId: this.getUpdateOwnerId(x),\n    actorType: updateOwnerType,\n    actorName: updateOwnerType === 'User' ? this.getUpdateUserOwnerName(x)  : this.getUpdateEntityOwnerName(x),\n    actorImage: this.getUpdateOwnerImage(x)\n  }\n}\n",
      "mapCompanyToItem": "function(x) {  return {\n    ...x, \n    id: this.getCompanyId(x), \n    title: this.getCompanyName(x), \n    subTitle: this.getCompanyType(x) === 'socialenterprise' ? 'social enterprise' : this.getCompanyType(x), \n    image: this.getCompanyImage(x), \n    canFollow: this.getCompanyFollowAction(x), \n    canUnFollow: this.getCompanyUnFollowAction(x), \n    tagOneIcon: this.getCompanyCountry(x), \n    tagOneLabel: this.getCompanyCity(x) \n  }\n}\n",
      "mapCompanyToTreeItem": "function(item) {  return {\n    id: item.targetId, \n    title: item.title, \n    subTitle: item.subTitle,\n    image: item.image,\n    tagOneIcon: item.countryId,\n    tagOneLabel: item.cityTitle,\n  }\n}\n",
      "mapCompanyOfferToItem": "function(x) {  const countriesCount = this.getCountriesCount(x);\n  return {\n    ...x, \n    id: this.getOfferId(x), \n    title: this.getOfferName(x), \n    image: this.getOfferImage(x),\n    icon: \"assets/icon/dynamic-ui/glob.svg\",\n    location: countriesCount + (countriesCount === 1 ? ' Country' : ' Countries')  \n  }\n}\n",
      "mapUserActivitiesToItem": "function(x) {  const activityDate = this.getActivityDate(x.object);\n  const activityImage = this.getAcitivyImage(x.object);\n  const activityOwnerType = this.getActivityOwnerType(x.object);\n\n  return {\n    ...x, \n    id: this.getActivityId(x.object),\n    type: this.getActivityType(x), \n    title: this.getActivityTitle(x.object),\n    subTitle: activityDate + ' • by ' + this.getActivityCreatorName(x.object), \n    date: activityDate,\n    image: activityImage,\n    showImage: activityImage ? true: false,\n    actorId: this.getActivityOwnerId(x.object),\n    actorType: activityOwnerType,\n    actorName: activityOwnerType === 'User' ? this.getActivityUserOwnerName(x.object)  : this.getActivityEntityOwnerName(x.object),\n    actorImage: this.getActivityOwnerImage(x.object)\n  }\n}\n",
      "mapOrganizationToItem": "function(x) {  return {\n    ...x, \n    id: this.getOrganizationId(x), \n    title: this.getOrganizationName(x), \n    subTitle: this.getOrganizationType(x), \n    image: this.getOrganizationImage(x), \n    canFollow: this.getOrganizationFollowAction(x),\n    canUnFollow: this.getOrganizationUnFollowAction(x),\n    tagOneIcon: this.getOrganizationCountry(x), \n    tagOneLabel: this.getOrganizationCity(x) \n  }\n}\n",
      "mapOrganizationToTreeItem": "function(item) {  return {\n    id: item.targetId, \n    title: item.title, \n    subTitle: item.subTitle,\n    image: item.image,\n    tagOneIcon: item.countryId,\n    tagOneLabel: item.cityTitle,\n  }\n}\n",
      "mapNetworkToItem": "function(x) {  const networkType = this.getNetworkType(x);\n  return {\n    ...x, \n    id: this.getNetworkId(x), \n    type: networkType, \n    title: this.getNetworkName(x), \n    subTitle: networkType === 'Organization' \n              ? this.getOrganizationNetworkType(x) : \n                  networkType === 'DiplomaticMission' \n                    ? this.getDiplomaticMissinoNetworkType(x) : \n                       networkType === 'Municipality' \n                        ? this.getTownNetworkType(x): '',\n    image: this.getNetworkImage(x), \n    canFollow: this.getNetworkFollowAction(x),\n    canUnFollow: this.getNetworkUnFollowAction(x), \n    tagOneIcon:  networkType === 'Municipality' \n                                ? this.getMunicipalityCountryCode(x): this.getNetworkCountry(x), \n    tagOneLabel: networkType === 'Municipality' \n                    ? this.getMunicipalityCountryName(x): this.getNetworkCity(x) \n  }\n}\n",
      "mapCommitteeToItem": "function(x) {  const committeeMemberCount = this.getCommitteeMemberCount(x);\n  return {\n    ...x, \n    id: this.getCommitteeId(x), \n    title: this.getCommitteeName(x), \n    subTitle: committeeMemberCount + (committeeMemberCount === 1 ? \" Member\" : \" Members\")\n  }\n}\n",
      "mapOfficeToItem": "function(x) {  const officeMemberCount = this.getOfficeMemberCount(x);\n\n  return {\n    ...x, \n    id: this.getOfficeId(x), \n    title: this.getOfficeName(x), \n    subTitle: officeMemberCount + (officeMemberCount === 1 ? \" Member\" : \" Members\") \n  }\n}\n",
      "mapNotificationToItem": "function(x) {  const objectType = this.getObjectType(x);\n  let objectName;\n  let objectImage;\n  let conversationTargetType;\n  let conversationTargetId;\n\n  if(objectType === 'User') {\n    objectName = this.getUserObjectName(x);\n    objectImage = this.getObjectImage(x);\n  } else if (objectType === 'Conversation') {\n    objectName = this.getConversationOwnerName(x);\n    objectImage = this.getConversationOwnerImage(x);\n    conversationTargetType = _.get(x, \"object.fromMailBoxId\", null) === _.get(x, \"object.receiver.id\", null) ? _.get(x, \"object.sender.owner.entity.__typename\", null) : _.get(x, \"object.receiver.owner.entity.__typename\", null) ;\n    conversationTargetId = _.get(x, \"object.fromMailBoxId\", null) === _.get(x, \"object.receiver.id\", null) ? _.get(x, \"object.sender.owner.entity.id\", null) : _.get(x, \"object.receiver.owner.entity.id\", null) ;         \n  } else if (objectType === 'Comment') {\n    objectName = this.getCommentnOwnerName(x);\n    objectImage = this.getCommentnOwnerImage(x);\n  } else {\n    objectName = this.getObjectName(x);\n    objectImage = this.getObjectImage(x);\n  }\n  \n  return {\n    id: this.getNotificationId(x), \n    message: this.getNotificationMessage(x), \n    createdDate: this.getNotificationCreatedDate(x),\n    readed: this.checkNotificationReaded(x),\n\n    objectId: this.getObjectId(x),\n    parentDomainId: objectType === 'OrganizationCommittee' \n            ? this.getOrganizationObjectId(x) : \n                objectType === 'DiplomaticMissionCommittee' \n                  ? this.getDiplomaticObjectId(x) : this.getObjectId(x), \n\n    objectType: objectType,\n    objectName:  objectName,\n    objectImage: objectImage,\n    \n    conversationTargetType: objectType === 'Conversation' ? conversationTargetType : null,\n    conversationTargetId: objectType === 'Conversation' ? conversationTargetId : null,\n    conversationSenderMailboxId: objectType === 'Conversation' ? _.get(x, \"object.fromMailBoxId\", null) : null,\n    conversationReceiverMailboxId: objectType === 'Conversation' ? _.get(x, \"object.toMailBoxId\", null) : null,\n\n    commentActivityType: objectType === 'Comment' ? _.get(x, \"object.listUnder.entity.__typename\", null) : null,\n    commentActivityId: objectType === 'Comment' ? _.get(x, \"object.listUnder.entity.id\", null) : null,\n  }\n}\n",
      "mapNewCommentToItem": "function(activity, comment) {  return {\n    id: this.getCommentId(comment), \n    text: this.getCommentText(comment), \n    prettyDate: this.getCommentPrettyDate(comment),\n    createdDate: this.getCommentCreatedDate(comment),\n\n    numberOfLikes: this.getCommentNumberOfLikes(comment),\n    \n    creatorId: this.getCreatorId(comment),\n    creatorName: this.getCreatorName(comment),\n    creatorImage: this.getCreatorImage(comment),\n\n    checkIfCanDelete: this.checkIfCanDelete(comment),\n    checkIfHadAdminActivityRole: this.checkIfHadAdminActivityRole(activity),\n    checkIfCanUpdate: this.checkIfCanUpdate(comment),\n    checkIfCanLike: this.checkIfCanLike(comment),\n    checkIfCanUnlike: this.checkIfCanUnlike(comment),\n\n    myComment: this.checkIfHadAdminActivityRole(activity) || this.checkIfCanDelete(comment) || this.checkIfCanUpdate(comment)\n  }\n}\n",
      "mapCommentToItem": "function(activity, x) {  return {\n    id: this.getCommentId(x.comment), \n    text: this.getCommentText(x.comment), \n    prettyDate: this.getCommentPrettyDate(x.comment),\n    createdDate: this.getCommentCreatedDate(x.comment),\n\n    numberOfLikes: this.getCommentNumberOfLikes(x.comment),\n    \n    creatorId: this.getCreatorId(x.comment),\n    creatorName: this.getCreatorName(x.comment),\n    creatorImage: this.getCreatorImage(x.comment),\n\n    checkIfCanDelete: this.checkIfCanDelete(x.comment),\n    checkIfHadAdminActivityRole: this.checkIfHadAdminActivityRole(activity), \n    checkIfCanUpdate: this.checkIfCanUpdate(x.comment),\n    checkIfCanLike: this.checkIfCanLike(x.comment),\n    checkIfCanUnlike: this.checkIfCanUnlike(x.comment),\n\n    myComment: this.checkIfHadAdminActivityRole(activity) || this.checkIfCanDelete(x.comment) || this.checkIfCanUpdate(x.comment)\n  }\n}\n",
      "mapFavoriteCardToItem": "function (x) {  const favoriteType = this.getFavoriteType(x);\n  return {\n    ...x,\n    id: this.getFavoriteId(x),\n    type: favoriteType, \n    title: favoriteType === 'Offer' ? this.getFavoriteName(x) : this.getFavoriteTitle(x),\n    subTitle: favoriteType === 'Offer' ? (this.getFavoriteDate(x) + ' • ' + _.camelCase(this.getFavoriteOfferType(x)))  : (this.getFavoriteDate(x) + ' • by ' + this.getFavoriteCreatorName(x)), \n    date: this.getFavoriteDate(x),\n    image: this.getFavoriteImage(x),\n    showImage: (favoriteType === 'Post' && this.getFavoriteImage(x)) || (favoriteType === 'Event') || (favoriteType === 'Offer') ? true : false,\n\n    creatorId: this.getFavoriteCreatorId(x),\n    creatorName: this.getFavoriteCreatorName(x),\n    creatorImage: this.getFavoriteCreatorImage(x),\n\n    actorId: (favoriteType === 'Offer') ?  this.getFavoriteOfferOwnerId(x) : this.getFavoriteOwnerId(x),\n    actorName: (favoriteType === 'Offer') ? this.getFavoriteOfferOwnerName(x) : (this.getFavoriteOwnerType(x) === 'User' ? this.getFavoriteOwnerUserName(x) :  this.getFavoriteOwnerName(x)),\n    actorImage: (favoriteType === 'Offer') ? this.getFavoriteOfferOwnerImage(x)  : this.getFavoriteOwnerImage(x)\n  }\n}\n",
      "mapMailboxToItem": "function (x) {  const entityMailboxOwneType = this.getEntityMailboxOwneType(x);\n  return {\n    ...x,\n    lookupId: this.getEntityMailboxId(x),\n    id: this.getEntityMailboxOwnerId(x),\n    type: entityMailboxOwneType, \n    name: entityMailboxOwneType === 'User' ? this.getEntityMailboxOwnerUserName(x) : this.getEntityMailboxOwnerName(x),\n    thumbnail: this.getEntityMailboxOwnerImage(x)\n  }\n}\n",
      "mapToConversationSummary": "function(x, selectedMailbox) {  const conversationMessage = this.getConversationMessage(x);\n  const conversationReceiver = this.getConversationReceiver(x);\n  const conversationSender = this.getConversationSender(x);\n  let conversationMessageSender;\n  let conversationMessageReceiver;\n\n  if(conversationMessage) {\n    conversationMessageSender = this.getConversationMessageSender(conversationMessage);\n    conversationMessageReceiver = this.getConversationReceiver(conversationMessage);\n  }\n\n  const response =  {\n    conversationId: this.getConversationId(x),\n\n    lastMessageId: conversationMessage ? conversationMessage.id: null,\n    lastMessageText: conversationMessage ? conversationMessage.text: \"\",\n    lastMessageDate: conversationMessage ? conversationMessage.createdDate: \"\",\n    lastMessageSenderId: conversationMessage ? (conversationMessageSender ? conversationMessageSender.owner.entity.id : null): null,\n    lastMessageSenderType: conversationMessage ? (conversationMessageSender ? conversationMessageSender.owner.entity.__typename : null): null,\n\n    lastMessageReceiverId: conversationMessage ? (conversationMessageReceiver ? conversationMessageReceiver.owner.entity.id : null): null,\n    lastMessageReceiverType: conversationMessage ? (conversationMessageReceiver ? conversationMessageReceiver.owner.entity.__typename : null): null,\n\n    receiverMailboxId: conversationReceiver ? this.getMailboxId(conversationReceiver) : null, \n    receiverMailboxOwnerId: conversationReceiver ? this.getMailboxOwnerId(conversationReceiver) : null, \n    receiverMailboxOwnerType: conversationReceiver ? this.getMailboxOwneType(conversationReceiver) : null,\n    receiverMailboxOwnerName: conversationReceiver ?  (this.getMailboxOwneType(conversationReceiver) === 'User' ? this.getMailboxOwnerUserName(conversationReceiver) : this.getMailboxOwnerName(conversationReceiver)) :\"\" ,\n    receiverMailboxOwnerImage: conversationReceiver ? this.getMailboxOwnerImage(conversationReceiver) : null,\n\n    senderMailboxId: conversationSender ? this.getMailboxId(conversationSender) : null, \n    senderMailboxOwnerId: conversationSender ? this.getMailboxOwnerId(conversationSender) : null, \n    senderMailboxOwnerType: conversationSender ? this.getMailboxOwneType(conversationSender) : null,\n    senderMailboxOwnerName: conversationSender ?  (this.getMailboxOwneType(conversationSender) === 'User' ? this.getMailboxOwnerUserName(conversationSender) : this.getMailboxOwnerName(conversationSender)) :\"\" ,\n    senderMailboxOwnerImage: conversationSender ? this.getMailboxOwnerImage(conversationSender) : null,\n\n    myMessage: false,\n    totalUnreadMessages: this.getConversationTotalUnreadMessages(x),\n    totalMessages: this.getConversationTotalMessages(x)\n  }\n  \n  response.myMessage = response.senderMailboxId === selectedMailbox ? true : false;\n  return response;\n}\n",
      "mapToConversationMessages": "function(x, senderMailboxId) {  const myMessage =  this.getConversationDetailsSenderMessageMailboxId(x) === senderMailboxId ? true : false;\n  const conversationDetailsSenderMessageOwnerType = this.getConversationDetailsSenderMessageOwnerType(x);\n\n  const response =  {\n    myMessage: myMessage,\n\n    conversationOwnerMailboxId: this.getConversationDetailsSenderMessageMailboxId(x),\n    conversationOwnerId: this.getConversationDetailsSenderMessageOwnerId(x),\n    conversationOwnerImage: this.getConversationDetailsSenderMessageOwnerImage(x),\n    conversationOwnerName: conversationDetailsSenderMessageOwnerType === 'User' ? this.getConversationDetailsSenderMessageUserOwnerName(x): this.getConversationDetailsSenderMessageOwnerName(x),\n    conversationOwnerType: conversationDetailsSenderMessageOwnerType,\n\n    messageId: this.getConversationDetailsMessageId(x),\n    messageText: this.getConversationDetailsMessageText(x),\n    messageDate: this.getConversationDetailsMessageDate(x)\n  }\n\n  return response;\n}\n",
      "preparePostProperties": "function prepareNotificationSettings(dataSource) {  const post = {}\n  post.id = _.get(dataSource, 'id', null);\n  post.cardType = 'news';\n  post.actionType = 'post';\n  post.title = _.get(dataSource, 'title', '');\n  post.subTitle = (dataSource.createdDate ? moment(dataSource.createdDate).fromNow():\"\") +  ' • by ' + _.get(dataSource, 'creater.user.firstName', '') + ' ' + _.get(dataSource, 'creater.user.lastName', '');\n  post.description = _.get(dataSource, 'description', '');\n\n  post.image = _.get(dataSource, 'photoCover.imageThumbnailUrl', null);\n  post.mainImage = _.get(dataSource, 'photoCover.imageUrl', null);\n\n  post.createrId =  _.get(dataSource, 'creater.user.id', '');\n  post.createrName =  _.get(dataSource, 'creater.user.firstName', '') + ' ' + _.get(dataSource, 'creater.user.lastName', '');\n\n  post.actorId = _.get(dataSource, 'owner.id', null);\n  post.actorName = _.get(dataSource, 'owner.__typename', '') === 'User' ? (_.get(dataSource, 'owner.firstName', '') + ' ' + _.get(dataSource, 'owner.lastName', '')) : _.get(dataSource, 'owner.name', '');\n  post.actorImage = _.get(dataSource, 'owner.photoCover.imageThumbnailUrl', null);\n  post.actorType = _.get(dataSource, \"owner.__typename\", \"\");\n\n  post.canLike =  _.get(dataSource, 'actions.canLike', false);\n  post.canSave = _.get(dataSource, 'actions.canSave', false);\n\n  post.likersCount =  _.get(dataSource, 'statistics.likers', 0);\n  \n  post.canEditPost = _.get(dataSource, 'actions.canUpdate', false);\n  post.canDeletePost = _.get(dataSource, 'actions.canDelete', false);\n  post.canFeaturePost = _.get(dataSource, 'actions.canMakeAsFeatured', false);\n  post.canRemoveComment = _.get(dataSource, 'actions.canRemoveComment', false);\n\n  post.canManagePost = (post.canEditPost || post.canDeletePost || post.canFeaturePost) ? true : false;\n\n  return post;\n}\n",
      "prepareEventProperties": "function prepareEventProperties(dataSource) {  const event = {}\n  event.id = _.get(dataSource, 'id', null);\n  event.cardType = 'event';\n  event.actionType = 'event';\n\n  event.title = _.get(dataSource, 'title', '');\n  event.subTitle = (dataSource.createdDate ? moment(dataSource.createdDate).fromNow():\"\") +  ' • by ' + _.get(dataSource, 'creater.user.firstName', '') + ' ' + _.get(dataSource, 'creater.user.lastName', '');\n  event.description = _.get(dataSource, 'description', '');\n  event.startDate = _.get(dataSource, 'startDate', null);\n  event.endDate = _.get(dataSource, 'endDate', null);\n  event.location = _.get(dataSource, 'location', null);\n\n  event.image = _.get(dataSource, 'photoCover.imageThumbnailUrl', null);\n  event.mainImage = _.get(dataSource, 'photoCover.imageUrl', null);\n\n  event.createrId =  _.get(dataSource, 'creater.user.id', '');\n  event.createrName =  _.get(dataSource, 'creater.user.firstName', '') + ' ' + _.get(dataSource, 'creater.user.lastName', '');\n\n  event.actorId = _.get(dataSource, 'owner.id', null);\n  event.actorName = _.get(dataSource, 'owner.__typename', '') === 'User' ? (_.get(dataSource, 'owner.firstName', '') + ' ' + _.get(dataSource, 'owner.lastName', '')) : _.get(dataSource, 'owner.name', '');\n  event.actorImage = _.get(dataSource, 'owner.photoCover.imageThumbnailUrl', null);\n  event.actorType = _.get(dataSource, \"owner.__typename\", \"\");\n\n  event.canLike =  _.get(dataSource, 'actions.canLike', false);\n  event.canSave = _.get(dataSource, 'actions.canSave', false);\n\n  event.likersCount =  _.get(dataSource, 'statistics.likers', 0);\n  \n  event.canEditPost = _.get(dataSource, 'actions.canUpdate', false);\n  event.canDeletePost = _.get(dataSource, 'actions.canDelete', false);\n  event.canRemoveComment = _.get(dataSource, 'actions.canRemoveComment', false);\n\n  event.canFeaturePost = _.get(dataSource, 'actions.canMakeAsFeatured', false);\n  event.canManagePost = (event.canEditPost || event.canDeletePost || event.canFeaturePost) ? true : false;\n\n  return event;\n}\n",
      "prepareOfferProperties": "function prepareOfferProperties(dataSource) {  const offer = {}\n  offer.id = _.get(dataSource, 'id', null);\n  offer.offerType = _.get(dataSource, 'type', null);\n  offer.actionType = 'offer';\n\n  offer.title = _.get(dataSource, 'name', '');\n  offer.subTitle = (dataSource.createdDate ? moment(dataSource.createdDate).fromNow():\"\") +  ' • by ' + _.get(dataSource, 'creater.user.firstName', '') + ' ' + _.get(dataSource, 'creater.user.lastName', '');\n  offer.description = _.get(dataSource, 'description', '');\n\n  offer.countries = _.get(dataSource, 'countries', []);\n  offer.keywords = _.get(dataSource, 'keywords', []);\n  offer.image = _.get(dataSource, 'photoCover.imageThumbnailUrl', null);\n  offer.mainImage = _.get(dataSource, 'photoCover.imageUrl', null);\n\n  offer.actorId = _.get(dataSource, 'owner.id', null);\n  offer.actorName = _.get(dataSource, 'owner.name', '');\n  offer.actorImage = _.get(dataSource, 'owner.photoCover.imageThumbnailUrl', null);\n  offer.actorMailbox = _.get(dataSource, 'owner.mailBox.mailBox.id', null);\n  offer.actorType = 'Company';\n\n  offer.createrId =  _.get(dataSource, 'creater.user.id', '');\n  offer.createrName =  _.get(dataSource, 'creater.user.firstName', '') + ' ' + _.get(dataSource, 'creater.user.lastName', '');\n\n  offer.canLike =  _.get(dataSource, 'actions.canLike', false);\n  offer.canSave = _.get(dataSource, 'actions.canSave', false);\n\n  offer.likersCount =  _.get(dataSource, 'statistics.likers', 0);\n\n  offer.canEditPost = _.get(dataSource, 'actions.canUpdate', false);\n  offer.canDeletePost = _.get(dataSource, 'actions.canDelete', false);\n  offer.canFeaturePost = _.get(dataSource, 'actions.canMakeAsFeatured', false);\n  offer.canRemoveComment = _.get(dataSource, 'actions.canRemoveComment', false);\n  offer.canSendMessageToOwner = _.get(dataSource, 'actions.canSendMessageToOwner', false);\n\n  offer.canManagePost = (offer.canEditPost || offer.canDeletePost || offer.canFeaturePost) ? true : false;\n\n  return offer;\n}\n",
      "prepareNotificationSettings": "function prepareNotificationSettings(notificationSettings) {  const notificationSectionSettings = [];\n  const notificationSettingsGroup = this.groupByPipe.transform(notificationSettings, 'group');\n\n  if (notificationSettingsGroup) {\n    notificationSettingsGroup.forEach(\n      (notificationSection) => {\n        if (notificationSection.key.toLowerCase() === 'general') {\n          notificationSection.value.forEach(newNotificationSection => {\n            if (newNotificationSection.group.toLowerCase() === 'general') {\n              notificationSectionSettings.push(new this.NotificationSettingsGroup(newNotificationSection.description, [], newNotificationSection.pushEnabled, newNotificationSection.emailEnabled));\n            }\n          });\n        } else {\n          notificationSection.pushEnabled = notificationSection.value[0].pushEnabled ? notificationSection.value[0].pushEnabled : false;\n          notificationSection.emailEnabled = notificationSection.value[0].emailEnabled ? notificationSection.value[0].emailEnabled : false;\n          notificationSectionSettings.push(notificationSection);\n        }\n      }\n    );\n  }\n\n  return notificationSectionSettings;\n}\n",
      "prepareUserInfo": "function prepareUserInfo(dataSource, hasAdminRole) {  const domainDetails = [];\n  let domainId = _.get(dataSource, 'id');\n  const biography = _.get(dataSource, 'shortBio');\n  const sector = _.get(dataSource, 'sector.name');\n  const profession = _.get(dataSource, 'profession.name');\n\n  let countryCode = _.get(dataSource, 'contactDetails.phone.countryCode');\n  let phoneNumber = _.get(dataSource, 'contactDetails.phone.number');\n  let phoneNumberPrivacy = _.get(dataSource, 'privacySettings.contactPhone') === 'HIDDEN' ? true : false;\n  let contactEmail = _.get(dataSource, 'contactDetails.contactEmail');\n  let contactEmailPrivacy = _.get(dataSource, 'privacySettings.contactEmail') === 'HIDDEN' ? true: false;\n\n  if (biography) {\n    const shortBio_details = new this.AboutModel(this.AboutUsTextTypes.ExcerptTextType, this.AppIcons.about_description_icon, biography, false);\n    domainDetails.push(shortBio_details);\n  } else {\n    if (hasAdminRole) {\n      const description_emptyStateLabel = this.dynamicUiExternalResourcesService.get('profile-page.my-profile.about.empty-state.short-biography');\n      const shortBio_details = new this.AboutModel(this.AboutUsTextTypes.ExcerptTextType, this.AppIcons.about_description_icon, description_emptyStateLabel, true);\n      domainDetails.push(shortBio_details);  \n    }\n  }\n\n  if (sector) {\n    const sector_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.about_sector_icon, sector, false);\n    domainDetails.push(sector_details);\n  } else {\n    if (hasAdminRole) {\n      const sector_emptyStateLabel = this.dynamicUiExternalResourcesService.get('profile-page.my-profile.about.empty-state.sector');\n      const sector_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.about_sector_icon, sector_emptyStateLabel, true);\n      domainDetails.push(sector_details);\n    }\n  }\n  \n  if (profession) {\n    const profession_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.about_profession_icon, profession, false);\n    domainDetails.push(profession_details);\n  } else {\n    if (hasAdminRole) {\n      const profession_emptyStateLabel = this.dynamicUiExternalResourcesService.get('profile-page.my-profile.about.empty-state.profession');\n      const profession_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.about_profession_icon, profession_emptyStateLabel, true);\n      domainDetails.push(profession_details);\n    }\n  }\n\n  if (countryCode && phoneNumber) {\n  } else {\n    if (hasAdminRole) {\n      const phoneNumber_emptyStateLabel = this.dynamicUiExternalResourcesService.get('profile-page.my-profile.about.empty-state.phone-number');\n      const phoneNumber_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_phone, phoneNumber_emptyStateLabel, true, null, false);\n      domainDetails.push(phoneNumber_details);\n    }\n  }\n\n  if (contactEmail) {\n  } else {\n    if (hasAdminRole) {\n      const email_emptyStateLabel = this.dynamicUiExternalResourcesService.get('profile-page.my-profile.about.empty-state.email');\n      const contactEmail_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_email, email_emptyStateLabel, true, null, false);\n      domainDetails.push(contactEmail_details);\n    }\n  }\n\n  return domainDetails;\n}\n",
      "prepareUserBadges": "function prepareUserBadges(dataSource, hasAdminRole) {  const domainBadges = [];\n  const id = _.get(dataSource, 'id');\n  const followersCount = _.get(dataSource, 'statistics.followers', 0);\n  const followingCount = _.get(dataSource, 'statistics.following', 0);\n\n  const business_Label = this.dynamicUiExternalResourcesService.get('profile-page.my-profile.about.badge.business-label');\n  const network_Label = this.dynamicUiExternalResourcesService.get('profile-page.my-profile.about.badge.network-label');\n\n  const countryOfOriginCode = _.get(dataSource, 'placeOfOrigin.country.isoCode', \"\").toLowerCase();\n  const cityOfOriginName = _.get(dataSource, 'placeOfOrigin.city.name', \"\");\n  const countryOfResidenceCode = _.get(dataSource, 'placeOfResidence.country.isoCode', \"\").toLowerCase();\n  const cityOfResidenceName = _.get(dataSource, 'placeOfResidence.city.name', \"\");\n\n  const hasDiplomaticRole = _.get(dataSource, 'roles', []).filter(userRole => ((_.get(userRole, 'entity.__typename', '') || '').toLowerCase() === 'diplomaticmission') && ((_.get(userRole, 'role.role', '') || '').toLowerCase() === 'president')).length > 0 ? true : false; \n  const hasTownRole = _.get(dataSource, 'roles', []).filter(userRole => (((_.get(userRole, 'entity.__typename', '') || '').toLowerCase() === 'municipality') && ((_.get(userRole, 'role.role', '') || '').toLowerCase() === 'electedmember'))).length > 0 ? true : false; \n\n  const diplomaticRole = hasDiplomaticRole ? _.get(dataSource, 'roles', []).find(userRole => ((_.get(userRole, 'entity.__typename', '') || '').toLowerCase() === 'diplomaticmission') && ((_.get(userRole, 'role.role', '') || '').toLowerCase() === 'president')) : null;\n  const townRole = hasTownRole ? _.get(dataSource, 'roles', []).find(userRole => (((_.get(userRole, 'entity.__typename', '') || '').toLowerCase() === 'municipality') && ((_.get(userRole, 'role.role', '') || '').toLowerCase() === 'electedmember'))) : null;\n  \n  let municipalityId;\n  let companyRoleBadge;\n  let organizationRoleBadge;\n\n  \n  let companyRole = null;\n  const featuredCompanyRole = _.get(dataSource, 'roles', []).find(userRole => ((_.get(userRole, 'entity.__typename', '') || '').toLowerCase() === 'company') && userRole.role.featured );\n  if(featuredCompanyRole) {\n    companyRole = featuredCompanyRole;\n  } else {\n    companyRole =  _.get(dataSource, 'roles', []).find(userRole => ((_.get(userRole, 'entity.__typename', '') || '').toLowerCase() === 'company'));\n  }\n\n  let organizationRole = null;\n  const featuredOrganizationRole = _.get(dataSource, 'roles', []).find(userRole => (((_.get(userRole, 'entity.__typename', '') || '').toLowerCase() === 'organization') || ((_.get(userRole, 'entity.__typename', '') || '').toLowerCase() === 'organizationcommittee'))  && userRole.role.featured );\n  if(featuredOrganizationRole) {\n    organizationRole = featuredOrganizationRole;\n  } else {\n    organizationRole =  _.get(dataSource, 'roles', []).find(userRole => ((_.get(userRole, 'entity.__typename', '') || '').toLowerCase() === 'organization') || ((_.get(userRole, 'entity.__typename', '') || '').toLowerCase() === 'organizationcommittee'));\n  }\n\n  if(countryOfOriginCode === 'lb') {\n    municipalityId = _.get(dataSource, 'municipality.municipality.id', null);\n  }\n\n  if(companyRole) {\n    companyRoleBadge = new this.BadgeModel(companyRole.role.positionName, this.BadgeType.LogoType, companyRole.entity.name, companyRole.entity.id, companyRole.entity.name, (companyRole.entity.photoCover ? companyRole.entity.photoCover.imageThumbnailUrl : null) , \"company/\" + companyRole.entity.id);\n  } else {\n    if(hasAdminRole) {\n    companyRoleBadge = new this.BadgeModel(business_Label, this.BadgeType.LogoType, null, null, null, \"assets/icon/dynamic-ui/add_new_company.svg\", \"searchForCompany\", {'companies': []});\n    }\n  }\n\n  if(organizationRole) {\n    if(organizationRole.entity.__typename === 'OrganizationCommittee') {\n      organizationRoleBadge = new this.BadgeModel(organizationRole.role.positionName, this.BadgeType.LogoType, organizationRole.entity.organization.organization.name, organizationRole.entity.organization.organization.id, organizationRole.entity.organization.organization.name, (organizationRole.entity.organization.organization.photoCover ? organizationRole.entity.organization.organization.photoCover.imageThumbnailUrl : null), \"organization/\" + organizationRole.entity.organization.organization.id);\n    } else {\n      organizationRoleBadge = new this.BadgeModel(organizationRole.role.positionName, this.BadgeType.LogoType, organizationRole.entity.name, organizationRole.entity.id, organizationRole.entity.name, (organizationRole.entity.photoCover ? organizationRole.entity.photoCover.imageThumbnailUrl : null), \"organization/\" + organizationRole.entity.id);\n    }\n  } else {\n    if(hasAdminRole) {\n      organizationRoleBadge = new this.BadgeModel(network_Label, this.BadgeType.LogoType, null, null, null, \"assets/icon/dynamic-ui/add_new_organization.svg\", \"searchForOrganization\", {'organizations': []});\n    }\n  }\n  \n  if(hasTownRole) {\n    if(countryOfResidenceCode && cityOfResidenceName) {\n      const countryOfResidenceBadge = new this.BadgeModel(cityOfResidenceName, this.BadgeType.FlagType, null, id, name, countryOfResidenceCode.toLowerCase(), null);  \n      domainBadges.push(countryOfResidenceBadge);\n    }  \n\n    let positionNameLabel = townRole.role.positionName.toLowerCase() == 'electedmember' ? 'Elected Member' : ( townRole.role.positionName.toLowerCase() == 'vicepresident' ? 'Vice President': townRole.role.positionName);\n\n    const townBadge = new this.BadgeModel(positionNameLabel, this.BadgeType.LogoType, followersCount, id, null, \"assets/icon/dynamic-ui/Networks_Badge_Gold.svg\", null);\n    domainBadges.push(townBadge);\n\n    if(organizationRoleBadge) {\n      domainBadges.push(organizationRoleBadge);\n    }\n\n    if(companyRoleBadge) {\n      domainBadges.push(companyRoleBadge);\n    }\n  } \n  else if (hasDiplomaticRole) {\n    if(countryOfOriginCode && cityOfOriginName) {\n      const countryOfOriginBadge = new this.BadgeModel(cityOfOriginName, this.BadgeType.FlagType, null, municipalityId, name, countryOfOriginCode.toLowerCase(), municipalityId? (\"town/\"  + municipalityId ): null);  \n      domainBadges.push(countryOfOriginBadge);\n    }\n    \n    if(countryOfResidenceCode && cityOfResidenceName) {\n      const countryOfResidenceBadge = new this.BadgeModel(cityOfResidenceName, this.BadgeType.FlagType, null, null, name, countryOfResidenceCode.toLowerCase(), null);  \n      domainBadges.push(countryOfResidenceBadge);\n    }  \n\n    const diplomaticBadge = new this.BadgeModel(diplomaticRole.role.positionName, this.BadgeType.LogoType, followersCount, null, null, \"assets/icon/dynamic-ui/Networks_Badge_Gold.svg\", \"diplomaticMission/\" + diplomaticRole.entity.id);\n    const followingBadge = new this.BadgeModel(\"Reach\", this.BadgeType.TextType, followingCount, id, null, null, ('profile/viewFollowers/' + id));\n\n    domainBadges.push(diplomaticBadge);\n    domainBadges.push(followingBadge);\n\n  } \n  else {\n    if(countryOfOriginCode && cityOfOriginName) {\n      const countryOfOriginBadge = new this.BadgeModel(cityOfOriginName, this.BadgeType.FlagType, null, municipalityId, name, countryOfOriginCode.toLowerCase(),  municipalityId? (\"town/\"  + municipalityId ): null);  \n      domainBadges.push(countryOfOriginBadge);\n    }\n    \n    if(countryOfResidenceCode && cityOfResidenceName) {\n      const countryOfResidenceBadge = new this.BadgeModel(cityOfResidenceName, this.BadgeType.FlagType, null, null, name, countryOfResidenceCode.toLowerCase(), null);  \n      domainBadges.push(countryOfResidenceBadge);\n    }    \n\n    if(organizationRoleBadge) {\n      domainBadges.push(organizationRoleBadge);\n    }\n    if(companyRoleBadge) {\n      domainBadges.push(companyRoleBadge);\n    }\n  }    \n\n\n  return domainBadges;\n}\n",
      "prepareCompanyInfo": "function prepareCompanyInfo(dataSource, hasAdminRole) {  const domainDetails = [];\n\n  const introduction = _.get(dataSource, 'introduction');\n  const sector = _.get(dataSource, 'sector.name');\n  const address = _.get(dataSource, 'contactUs.address');\n\n  let countryCode = _.get(dataSource, 'contactUs.phone.countryCode');\n  let phoneNumber = _.get(dataSource, 'contactUs.phone.number');\n  let email = _.get(dataSource, 'contactUs.email');\n  let website = _.get(dataSource, 'contactUs.website');\n  let poBox = _.get(dataSource, 'contactUs.poBox');\n\n  if (introduction) {\n    const introduction_details = new this.AboutModel(this.AboutUsTextTypes.ExcerptTextType, this.AppIcons.about_description_icon, introduction, false);\n    domainDetails.push(introduction_details);\n  } else {\n    if (hasAdminRole) {\n      const descriptionEmptyState = this.dynamicUiExternalResourcesService.get('company-page.company.about.empty-state.description');\n      const introduction_details = new this.AboutModel(this.AboutUsTextTypes.ExcerptTextType, this.AppIcons.about_description_icon, descriptionEmptyState, true);\n      domainDetails.push(introduction_details);\n    }\n  }\n\n  if (sector) {\n    const sector_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.about_sector_icon, sector, false);\n    domainDetails.push(sector_details);\n  } else {\n    if (hasAdminRole) {\n      const sectorEmptyState = this.dynamicUiExternalResourcesService.get('company-page.company.about.empty-state.sector');\n      const sector_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.about_sector_icon, sectorEmptyState, true);\n      domainDetails.push(sector_details);\n    }\n  }\n  \n  if (address) {\n    const addess_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_location, address, false);\n    domainDetails.push(addess_details);\n  } else {\n    if (hasAdminRole) {\n        const addressEmptyState = this.dynamicUiExternalResourcesService.get('company-page.company.about.empty-state.address');\n        const addess_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_location, addressEmptyState, true);\n        domainDetails.push(addess_details);\n    }\n  }\n\n  if (countryCode && phoneNumber) {\n    if (hasAdminRole) {\n      const phoneNumber_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_phone, countryCode + phoneNumber, false, null, false);\n      domainDetails.push(phoneNumber_details);\n    } else {\n      const phoneNumbe_action = new this.AboutAction(\"Call\", null, \"phone\");\n      const phoneNumber_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_phone, countryCode + phoneNumber, false, phoneNumbe_action, false);\n      domainDetails.push(phoneNumber_details);\n    }\n  } else {\n    if (hasAdminRole) {\n        const phoneNumberEmptyState = this.dynamicUiExternalResourcesService.get('company-page.company.about.empty-state.phone-number');\n        const phoneNumber_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_phone, phoneNumberEmptyState, true, null, false);\n        domainDetails.push(phoneNumber_details);\n    }\n  }\n\n  if (email) {\n    if (hasAdminRole) {\n      const email_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_email, email, false, null, false);\n      email_details.withCapitalize = false;\n      domainDetails.push(email_details);\n    } else {\n      const contactEmail_action = new this.AboutAction(\"Email\", null, \"email\");\n      const email_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_email, email, false, contactEmail_action, false);\n      email_details.withCapitalize = false;\n      domainDetails.push(email_details);\n    }\n  } else {\n    if (hasAdminRole) {\n        const emailEmptyState = this.dynamicUiExternalResourcesService.get('company-page.company.about.empty-state.email');\n        const email_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_email, emailEmptyState, true, null, false);\n        domainDetails.push(email_details);\n    }\n  }\n\n  if (website) {\n    if (hasAdminRole) {\n      const website_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_website, website, false, null, false);\n      website_details.withCapitalize = false;\n      domainDetails.push(website_details);\n    } else {\n      const contactWebsite_action = new this.AboutAction(\"Visit\", null, \"website\");\n      const website_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_website, website, false, contactWebsite_action, false);\n      website_details.withCapitalize = false;\n      domainDetails.push(website_details);\n    }\n  } else {\n    if (hasAdminRole) {\n        const websiteEmptyState = this.dynamicUiExternalResourcesService.get('company-page.company.about.empty-state.website');\n        const website_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_website, websiteEmptyState, true, null, false);\n        domainDetails.push(website_details);\n    }\n  }\n\n  if (poBox) {\n    if (hasAdminRole) {\n      const poBox_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_pobox, poBox, false, null, false);\n      domainDetails.push(poBox_details);\n    } else {\n      const poBox_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_pobox, poBox, false, null, false);\n      domainDetails.push(poBox_details);\n    }\n  } else {\n    if (hasAdminRole) {\n        const poboxEmptyState = this.dynamicUiExternalResourcesService.get('company-page.company.about.empty-state.po-box');\n        const poBox_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_pobox, poboxEmptyState, true, null, false);\n        domainDetails.push(poBox_details);\n    }\n  }\n\n  return domainDetails;\n}\n",
      "prepareCompanyBadges": "function prepareCompanyBadges(dataSource, hasAdminRole) {  const domainBadges = [];\n\n  const id = _.get(dataSource, 'id');\n  const name = _.get(dataSource, 'name');\n  const followersCount = _.get(dataSource, 'statistics.followers', 0);\n  const teamMemberCount = _.get(dataSource, 'statistics.team', 0);\n  const countryCode = _.get(dataSource, 'place.country.isoCode', \"\");\n  const cityName = _.get(dataSource, 'place.city.name', \"\");\n  const cityId = _.get(dataSource, 'place.city.lookupId', \"\");\n\n  if(countryCode && cityName) {\n    const countryBadge = new this.BadgeModel(cityName, this.BadgeType.FlagType, null, id, name, countryCode.toLowerCase(), null);  \n    domainBadges.push(countryBadge);\n  }\n\n  const followerBadge = new this.BadgeModel(followersCount === 1 ? this.dynamicUiExternalResourcesService.get('company-page.company.about.badges.follower') : this.dynamicUiExternalResourcesService.get('company-page.company.about.badges.followers'), this.BadgeType.TextType, followersCount, id, name, null, 'company/followers/' + id);\n  const teamBadge = new this.BadgeModel(this.dynamicUiExternalResourcesService.get('company-page.company.about.badges.team'), this.BadgeType.TextType, teamMemberCount, id, name, null, hasAdminRole? ('company/manageCompanyTeamMembers/' + id) : ('company/viewCompanyTeamMembers/' + id));\n\n  domainBadges.push(followerBadge);\n  domainBadges.push(teamBadge);\n\n  return domainBadges;\n}\n",
      "getCompanyParentBranches": "function getCompanyParentBranches(companyId, $actionHelper) {  return this.getAsyncGraphQl(`\n    query \n      { \n      company(id: \"${companyId}\") {\n          id\n          name\n          companyType\n\n          photoCover {\n            imageThumbnailUrl\n          }         \n\n          place {\n            country {\n              lookupId\n              isoCode\n              name\n            }\n            city{\n              lookupId \n              name\n            }\n          }                             \n          ...companyParentBranches\n        }\n      }\n  `, $actionHelper)\n  .then(data => { return this.prepareCompanyParentBranches(data); });        \n}\n",
      "prepareCompanyParentBranches": "function prepareCompanyParentBranches(dataSource) {\n  const parents = dataSource.company.parent;\n  let rootBranchId = dataSource.company.id;\n\n  if(!parents || parents.length === 0) {\n    return {rootBranchId: rootBranchId, hasParentBranch: false, parentBranchId: null};\n  }\n\n  const parentBranch = this.getAllParentBranches(parents[0]);\n  let parentBranchId = null;\n\n  if(dataSource.company && dataSource.company.parent && dataSource.company.parent.length > 0)\n    parentBranchId = dataSource.company.parent[0].id;\n\n  if(parentBranch) {\n    return {rootBranchId: parentBranch.id, hasParentBranch: true, parentBranchId: parentBranchId };\n  }\n\n  return {rootBranchId: rootBranchId, hasParentBranch: false, parentBranchId: null};\n}\n",
      "getAllParentBranches": "function getAllParentBranches(branch) {  if(!branch.parent || branch.parent.length === 0) { return branch; }\n  const parentBranch = getAllParentBranches(branch.parent[0]);\n  if(parentBranch) { return parentBranch; }\n  return null;\n}\n",
      "prepareCompanyChildBranches": "function prepareCompanyChildBranches(companyId, $actionHelper, currentCompanyId) {  return this.getAsyncGraphQl(`\n    query \n      { \n      company(id: \"${companyId}\") {\n          id\n          name\n          companyType\n\n          photoCover {\n            imageThumbnailUrl\n          }         \n\n          place {\n            country {\n              lookupId\n              isoCode\n              name\n            }\n            city{\n              lookupId \n              name\n            }\n          }                                                  \n          ...companyChildBranches\n        }\n      }\n  `, $actionHelper)\n  .then(data => {const branches = this.prepareChildBranches(data.company);  return this.checkBranchesChild(branches, currentCompanyId); });\n}\n",
      "prepareChildBranches": "function prepareChildBranches(branch) {  const subtTitle = _.get(branch, 'companyType', \"\").toLowerCase() === 'socialenterprise' ? 'social enterprise' : _.get(branch, 'companyType', \"\").toLowerCase(); \n  const item = new this.TreeComponentModel(_.get(branch, 'id', null), _.get(branch, 'name', \"\"), subtTitle , _.get(branch, 'photoCover.imageThumbnailUrl'), []);\n\n  item.countryId = _.get(branch, 'place.country.isoCode', \"\");\n  item.cityTitle = _.get(branch, 'place.city.name', \"\");\n\n  if (branch.branches && branch.branches.length > 0) {\n    for (let i = 0; i < branch.branches.length; i++) {\n      item.children.push(this.prepareChildBranches(branch.branches[i]));\n    }\n  } \n  return item;\n}\n",
      "checkBranchesChild": "function checkBranchesChild(branch, currentCompanyId) {  const branchesTree = [];\n  branchesTree.push(branch);\n\n  for (const branchTree of branchesTree) {\n    this.checkIfTreeContainsChildBranches(branchTree, branchTree.children, currentCompanyId);\n  }\n\n  return branchesTree;\n}\n",
      "checkIfTreeContainsChildBranches": "function checkIfTreeContainsChildBranches(tree, childs, currentCompanyId) {  if (tree.targetId === currentCompanyId) {\n    return true;\n  }\n\n  for (const child of childs) {\n    const result = this.checkIfTreeContainsChildBranches(child, child.children, currentCompanyId);\n\n    if (result) {\n      tree.containsChild = true;\n      return result;\n    }\n  }\n  return false;\n}\n",
      "prepareTreeForCompanyPage": "function prepareTreeForCompanyPage(parentCompany, prepareChildBranches) {  const branchesList = [];\n  let count = 0;\n\n  if (parentCompany) {\n    const subtTitle = _.get(parentCompany, 'companyType', \"\").toLowerCase()  === 'socialenterprise' ? 'social enterprise' : _.get(parentCompany, 'companyType', \"\").toLowerCase();\n    const item = new this.TreeComponentModel(_.get(parentCompany, 'id', null), _.get(parentCompany, 'name', \"\"), subtTitle , _.get(parentCompany, 'photoCover.imageThumbnailUrl'), []);\n\n    item.countryId = _.get(parentCompany, 'place.country.isoCode', \"\");\n    item.cityTitle = _.get(parentCompany, 'place.city.name', \"\");\n\n    branchesList.push(item);\n    count++;\n  }\n\n  for (let i = 0; i < prepareChildBranches.children.length; i++) {\n    if (count < 3) {\n      count++;\n      branchesList.push(prepareChildBranches.children[i]);\n    } else {\n      break;\n    }\n  }\n  return branchesList;\n}\n",
      "prepareOrganizationInfo": "function prepareOrganizationInfo(dataSource, hasAdminRole) {  const domainDetails = [];\n\n  const introduction = _.get(dataSource, 'description');\n  const organizationType = _.get(dataSource, 'organizationType', \"\").toLowerCase() === 'mentorhub' ? 'Mentor Hub'  : _.get(dataSource, 'organizationType', \"\").toLowerCase();\n  const organizationCategory = _.get(dataSource, \"organizationCategory\").toLowerCase() === 'researchdevelopment' ? 'Research Development' : _.get(dataSource, \"organizationCategory\").toLowerCase();\n  const address = _.get(dataSource, 'contactUs.address');\n\n  let countryCode = _.get(dataSource, 'contactUs.phone.countryCode');\n  let phoneNumber = _.get(dataSource, 'contactUs.phone.number');\n  let email = _.get(dataSource, 'contactUs.email');\n  let website = _.get(dataSource, 'contactUs.website');\n  let poBox = _.get(dataSource, 'contactUs.poBox');\n\n  if (introduction) {\n    const introduction_details = new this.AboutModel(this.AboutUsTextTypes.ExcerptTextType, this.AppIcons.about_description_icon, introduction, false);\n    domainDetails.push(introduction_details);\n  } else {\n    if (hasAdminRole) {\n      const desriptionEmptyStateLabel = this.dynamicUiExternalResourcesService.get('organization-page.organization.about.empty-state.short-description');\n      const introduction_details = new this.AboutModel(this.AboutUsTextTypes.ExcerptTextType, this.AppIcons.about_description_icon, desriptionEmptyStateLabel, true);\n      domainDetails.push(introduction_details);\n    }\n  }\n\n  if (organizationType && organizationCategory) {\n    const organizationTypeAndCategory = organizationType + ' • ' + organizationCategory;\n    const organizationType_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.about_sector_icon, organizationTypeAndCategory, false);\n    domainDetails.push(organizationType_details);\n  }\n  \n  if (address) {\n    const addess_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_location, address, false);\n    domainDetails.push(addess_details);\n  } else {\n    if (hasAdminRole) {\n      const addressEmptyStateLabel = this.dynamicUiExternalResourcesService.get('organization-page.organization.about.empty-state.address');\n      const addess_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_location, addressEmptyStateLabel, true);\n      domainDetails.push(addess_details);\n    }\n  }\n\n  if (countryCode && phoneNumber) {\n    if (hasAdminRole) {\n      const phoneNumber_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_phone, countryCode + phoneNumber, false, null, false);\n      domainDetails.push(phoneNumber_details);\n    } else {\n      const phoneNumbe_action = new this.AboutAction(\"Call\", null, \"phone\");\n      const phoneNumber_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_phone, countryCode + phoneNumber, false, phoneNumbe_action, false);\n      domainDetails.push(phoneNumber_details);\n    }\n  } else {\n    if (hasAdminRole) {\n      const phoneEmptyStateLabel = this.dynamicUiExternalResourcesService.get('organization-page.organization.about.empty-state.phone-number');\n      const phoneNumber_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_phone, phoneEmptyStateLabel, true, null, false);\n      domainDetails.push(phoneNumber_details);\n    }\n  }\n\n  if (email) {\n    if (hasAdminRole) {\n      const email_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_email, email, false, null, false);\n      email_details.withCapitalize = false;\n      domainDetails.push(email_details);\n    } else {\n      const contactEmail_action = new this.AboutAction(\"Email\", null, \"email\");\n      const email_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_email, email, false, contactEmail_action, false);\n      email_details.withCapitalize = false;\n      domainDetails.push(email_details);\n    }\n  } else {\n    if (hasAdminRole) {\n      const emailEmptyStateLabel = this.dynamicUiExternalResourcesService.get('organization-page.organization.about.empty-state.email');\n      const email_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_email, emailEmptyStateLabel, true, null, false);\n      domainDetails.push(email_details);\n    }\n  }\n\n  if (website) {\n    if (hasAdminRole) {\n      const website_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_website, website, false, null, false);\n      website_details.withCapitalize = false;\n      domainDetails.push(website_details);\n    } else {\n      const contactWebsite_action = new this.AboutAction(\"Visit\", null, \"website\");\n      const website_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_website, website, false, contactWebsite_action, false);\n      website_details.withCapitalize = false;\n      domainDetails.push(website_details);\n    }\n  } else {\n    if (hasAdminRole) {\n      const websiteEmptyStateLabel = this.dynamicUiExternalResourcesService.get('organization-page.organization.about.empty-state.website');\n      const website_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_website, websiteEmptyStateLabel, true, null, false);\n      domainDetails.push(website_details);\n    }\n  }\n\n  if (poBox) {\n    if (hasAdminRole) {\n      const poBox_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_pobox, poBox, false, null, false);\n      domainDetails.push(poBox_details);\n    } else {\n      const poBox_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_pobox, poBox, false, null, false);\n      domainDetails.push(poBox_details);\n    }\n  } else {\n    if (hasAdminRole) {\n      const poboxEmptyStateLabel = this.dynamicUiExternalResourcesService.get('organization-page.organization.about.empty-state.po-box');\n      const poBox_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_pobox, poboxEmptyStateLabel, true, null, false);\n      domainDetails.push(poBox_details);\n    }\n  }\n\n  return domainDetails;\n}\n",
      "prepareOrganizationBadges": "function prepareOrganizationBadges(dataSource, hasAdminRole) {  const domainBadges = [];\n\n  const id = _.get(dataSource, 'id');\n  const name = _.get(dataSource, 'name');\n  const followersCount = _.get(dataSource, 'statistics.followers', 0);\n  const leaderShipMemberCount = _.get(dataSource, 'statistics.boardMembers', 0) + _.get(dataSource, 'statistics.president', 0);\n\n  const countryCode = _.get(dataSource, 'place.country.isoCode', \"\");\n  const cityName = _.get(dataSource, 'place.city.name', \"\");\n  const cityId = _.get(dataSource, 'place.city.lookupId', \"\");\n\n  if(countryCode && cityName) {\n    const countryBadge = new this.BadgeModel(cityName, this.BadgeType.FlagType, null, id, name, countryCode.toLowerCase(), null);\n    domainBadges.push(countryBadge);\n  }\n  const followerBadge = new this.BadgeModel(followersCount === 1 ? this.dynamicUiExternalResourcesService.get('organization-page.organization.main-card.badges.follower') : this.dynamicUiExternalResourcesService.get('organization-page.organization.main-card.badges.followers'), this.BadgeType.TextType, followersCount, id, name, null, 'organization/followers/' + id);\n  const leaderShipBadge = new this.BadgeModel(leaderShipMemberCount === 1 ? this.dynamicUiExternalResourcesService.get('organization-page.organization.main-card.badges.leadership') : this.dynamicUiExternalResourcesService.get('organization-page.organization.main-card.badges.leaderships'), this.BadgeType.TextType, leaderShipMemberCount, id, name, null, 'organization/leaderships/' + id);\n\n  domainBadges.push(followerBadge);\n  domainBadges.push(leaderShipBadge);\n\n  return domainBadges;\n}\n",
      "getOrganizationParentChapters": "function getOrganizationParentChapters(organizationId, $actionHelper) {  return this.getAsyncGraphQl(`\n    query \n      { \n      organization(id: \"${organizationId}\") {                   \n          id\n          name\n          organizationType\n          organizationCategory\n\n          photoCover {\n            imageThumbnailUrl\n          }   \n            \n          place {\n            country {\n              lookupId\n              isoCode\n              name\n            }\n            city{\n              lookupId \n              name\n            }\n          } \n\n          ...organizationParentChapters\n        }\n      }\n  `, $actionHelper)\n  .then(data => { return this.prepareOrganizationParentChapters(data); });        \n}\n",
      "prepareOrganizationParentChapters": "function prepareOrganizationParentChapters(dataSource) {  const parents = dataSource.organization.parent;\n  let rootChapterId = dataSource.organization.id;\n\n  if(!parents || parents.length === 0) {\n    return {rootChapterId: rootChapterId, hasParentChapter: false, parentChapterId: null};\n  }\n\n  const parentChapter = this.getAllParentChapter(parents[0]);\n  let parentChapterId = null;\n\n  if(dataSource.organization && dataSource.organization.parent && dataSource.organization.parent.length > 0)\n    parentChapterId = dataSource.organization.parent[0].id;\n\n  if(parentChapter) {\n    return {rootChapterId: parentChapter.id, hasParentChapter: true, parentChapterId: parentChapterId };\n  }\n\n  return {rootChapterId: rootChapterId, hasParentChapter: false, parentChapterId: null};\n}\n",
      "getAllParentChapter": "function getAllParentChapter(chapter) {  if(!chapter.parent || chapter.parent.length === 0) { return chapter; }\n  const parentChapter = getAllParentChapter(chapter.parent[0]);\n  if(parentChapter) { return parentChapter; }\n  return null;\n}\n",
      "prepareOrganizationChildChapters": "function prepareOrganizationChildChapters(organizationId, $actionHelper, currentOrganizationId) {  return this.getAsyncGraphQl(`\n    query \n      { \n      organization(id: \"${organizationId}\") {\n          id\n          name\n          organizationType\n          organizationCategory\n\n          photoCover {\n            imageThumbnailUrl\n          }\n          \n          place {\n            country {\n              lookupId\n              isoCode\n              name\n            }\n            city{\n              lookupId \n              name\n            }\n          }            \n          ...organizationChildChapters\n        }\n      }\n  `, $actionHelper)\n  .then(data => {const chapters = this.prepareChildChapters(data.organization);  return this.checkChaptersChild(chapters, currentOrganizationId); });\n}\n",
      "prepareChildChapters": "function prepareChildChapters(chapter) {\n  const subtTitle = (_.get(chapter, 'organizationType', \"\").toLowerCase() === 'mentorhub' ? 'Mentor Hub' :_.get(chapter, 'organizationType', \"\").toLowerCase()) + ' • ' + (_.get(chapter, 'organizationCategory', \"\").toLowerCase() === 'researchdevelopment' ? 'Research Development' : _.get(chapter, 'organizationCategory', \"\").toLowerCase());\n  const item = new this.TreeComponentModel(_.get(chapter, 'id', null), _.get(chapter, 'name', \"\"), subtTitle , _.get(chapter, 'photoCover.imageThumbnailUrl'), []);\n\n  item.countryId = _.get(chapter, 'place.country.isoCode', \"\");\n  item.cityTitle = _.get(chapter, 'place.city.name', \"\");\n\n  if (chapter.chapters && chapter.chapters.length > 0) {\n    for (let i = 0; i < chapter.chapters.length; i++) {\n      item.children.push(this.prepareChildChapters(chapter.chapters[i]));\n    }\n  } \n  return item;\n}\n",
      "checkChaptersChild": "function checkChaptersChild(chapter, currentOrganizationId) {  const chaptersTree = [];\n  chaptersTree.push(chapter);\n\n  for (const chapterTree of chaptersTree) {\n    this.checkIfTreeContainsChildChapters(chapterTree, chapterTree.children, currentOrganizationId);\n  }\n\n  return chaptersTree;\n}\n",
      "checkIfTreeContainsChildChapters": "function checkIfTreeContainsChildChapters(tree, childs, currentOrganizationId) {  if (tree.targetId === currentOrganizationId) {\n    return true;\n  }\n\n  for (const child of childs) {\n    const result = this.checkIfTreeContainsChildChapters(child, child.children, currentOrganizationId);\n\n    if (result) {\n      tree.containsChild = true;\n      return result;\n    }\n  }\n  return false;\n}\n",
      "prepareTreeForOrganizationPage": "function prepareTreeForOrganizationPage(parentOrganization, prepareChildChapters) {  const chapterList = [];\n  let count = 0;\n\n  if (parentOrganization) {\n    const subtTitle = (_.get(parentOrganization, 'organizationType', \"\").toLowerCase() === 'mentorhub' ? 'Mentor Hub' : _.get(parentOrganization, 'organizationType', \"\").toLowerCase()) + ' • ' + (_.get(parentOrganization, 'organizationCategory', \"\").toLowerCase() === 'researchdevelopment' ? 'Research Development' : _.get(parentOrganization, 'organizationCategory', \"\").toLowerCase());\n    const item = new this.TreeComponentModel(_.get(parentOrganization, 'id', null), _.get(parentOrganization, 'name', \"\"), subtTitle , _.get(parentOrganization, 'photoCover.imageThumbnailUrl'), []);\n\n    item.countryId = _.get(parentOrganization, 'place.country.isoCode', \"\");\n    item.cityTitle = _.get(parentOrganization, 'place.city.name', \"\");\n\n    chapterList.push(item);\n    count++;\n  }\n\n  for (let i = 0; i < prepareChildChapters.children.length; i++) {\n    if (count < 3) {\n      count++;\n      chapterList.push(prepareChildChapters.children[i]);\n    } else {\n      break;\n    }\n  }\n  return chapterList;\n}\n",
      "prepareDiplomaticMissionInfo": "function prepareDiplomaticMissionInfo(dataSource, hasAdminRole) {  const domainDetails = [];\n\n  const introduction = _.get(dataSource, 'introduction');\n  const address = _.get(dataSource, 'contactUs.address');\n\n  let countryCode = _.get(dataSource, 'contactUs.phone.countryCode');\n  let phoneNumber = _.get(dataSource, 'contactUs.phone.number');\n  let email = _.get(dataSource, 'contactUs.email');\n  let website = _.get(dataSource, 'contactUs.website');\n  let poBox = _.get(dataSource, 'contactUs.poBox');\n\n  if (introduction) {\n    const introduction_details = new this.AboutModel(this.AboutUsTextTypes.ExcerptTextType, this.AppIcons.about_description_icon, introduction, false);\n    domainDetails.push(introduction_details);\n  } else {\n    if (hasAdminRole) {\n      const desriptionEmptyStateLabel = this.dynamicUiExternalResourcesService.get('diplomatic-page.diplomatic.about.empty-state.short-description');\n      const introduction_details = new this.AboutModel(this.AboutUsTextTypes.ExcerptTextType, this.AppIcons.about_description_icon, desriptionEmptyStateLabel, true);\n      domainDetails.push(introduction_details);\n    }\n  }\n  \n  if (address) {\n    const addess_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_location, address, false);\n    domainDetails.push(addess_details);\n  } else {\n    if (hasAdminRole) {\n      const addressEmptyStateLabel = this.dynamicUiExternalResourcesService.get('diplomatic-page.diplomatic.about.empty-state.address');\n      const addess_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_location, addressEmptyStateLabel, true);\n      domainDetails.push(addess_details);\n    }\n  }\n\n  if (countryCode && phoneNumber) {\n    if (hasAdminRole) {\n      const phoneNumber_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_phone, countryCode + phoneNumber, false, null, false);\n      domainDetails.push(phoneNumber_details);\n    } else {\n      const phoneNumbe_action = new this.AboutAction(\"Call\", null, \"phone\");\n      const phoneNumber_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_phone, countryCode + phoneNumber, false, phoneNumbe_action, false);\n      domainDetails.push(phoneNumber_details);\n    }\n  } else {\n    if (hasAdminRole) {\n      const phoneNumberEmptyStateLabel = this.dynamicUiExternalResourcesService.get('diplomatic-page.diplomatic.about.empty-state.phone-number');\n      const phoneNumber_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_phone, phoneNumberEmptyStateLabel, true, null, false);\n      domainDetails.push(phoneNumber_details);\n    }\n  }\n\n  if (email) {\n    if (hasAdminRole) {\n      const email_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_email, email, false, null, false);\n      email_details.withCapitalize = false;\n      domainDetails.push(email_details);\n    } else {\n      const contactEmail_action = new this.AboutAction(\"Email\", null, \"email\");\n      const email_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_email, email, false, contactEmail_action, false);\n      email_details.withCapitalize = false;\n      domainDetails.push(email_details);\n    }\n  } else {\n    if (hasAdminRole) {\n      const emailEmptyStateLabel = this.dynamicUiExternalResourcesService.get('diplomatic-page.diplomatic.about.empty-state.email');\n      const email_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_email, emailEmptyStateLabel, true, null, false);\n      domainDetails.push(email_details);\n    }\n  }\n\n  if (website) {\n    if (hasAdminRole) {\n      const website_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_website, website, false, null, false);\n      website_details.withCapitalize = false;\n      domainDetails.push(website_details);\n    } else {\n      const contactWebsite_action = new this.AboutAction(\"Visit\", null, \"website\");\n      const website_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_website, website, false, contactWebsite_action, false);\n      website_details.withCapitalize = false;\n      domainDetails.push(website_details);\n    }\n  } else {\n    if (hasAdminRole) {\n      const wesbiteEmptyStateLabel = this.dynamicUiExternalResourcesService.get('diplomatic-page.diplomatic.about.empty-state.website');\n      const website_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_website, wesbiteEmptyStateLabel, true, null, false);\n      domainDetails.push(website_details);\n    }\n  }\n\n  if (poBox) {\n    if (hasAdminRole) {\n      const poBox_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_pobox, poBox, false, null, false);\n      domainDetails.push(poBox_details);\n    } else {\n      const poBox_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_pobox, poBox, false, null, false);\n      domainDetails.push(poBox_details);\n    }\n  } else {\n    if (hasAdminRole) {\n        const poboxEmptyStateLabel = this.dynamicUiExternalResourcesService.get('diplomatic-page.diplomatic.about.empty-state.po-box');\n        const poBox_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_pobox, poboxEmptyStateLabel, true, null, false);\n        domainDetails.push(poBox_details);\n    }\n  }\n\n  return domainDetails;        \n}\n",
      "prepareDiplomaticMissionBadges": "function prepareDiplomaticMissionBadges(dataSource, hasAdminRole) {  const domainBadges = [];\n\n  const id = _.get(dataSource, 'id');\n  const name = _.get(dataSource, 'name');\n  const followersCount = _.get(dataSource, 'statistics.followers', 0);\n  const diplomatsMemberCount = _.get(dataSource, 'statistics.keyStaff', 0) + _.get(dataSource, 'statistics.diplomats', 0);\n  const countryCode = _.get(dataSource, 'place.country.isoCode', \"\");\n  const cityName = _.get(dataSource, 'place.city.name', \"\");\n  const cityId = _.get(dataSource, 'place.city.lookupId', \"\");\n\n  if(countryCode && cityName) {\n    const countryBadge = new this.BadgeModel(cityName, this.BadgeType.FlagType, null, id, name, countryCode.toLowerCase(), null);\n    domainBadges.push(countryBadge);\n  }\n\n  const followerBadge = new this.BadgeModel(followersCount === 1 ? this.dynamicUiExternalResourcesService.get('diplomatic-page.diplomatic.about.badges.follower') : this.dynamicUiExternalResourcesService.get('diplomatic-page.diplomatic.about.badges.followers'), this.BadgeType.TextType, followersCount, id, name, null, 'diplomaticMission/followers/' + id);\n  const diplomatBadge = new this.BadgeModel(diplomatsMemberCount === 1 ? this.dynamicUiExternalResourcesService.get('diplomatic-page.diplomatic.about.badges.diplomat') : this.dynamicUiExternalResourcesService.get('diplomatic-page.diplomatic.about.badges.diplomats'), this.BadgeType.TextType, diplomatsMemberCount, id, name, null, ('diplomaticMission/viewDiplomaticKeyStaff/' + id));\n\n  domainBadges.push(followerBadge);\n  domainBadges.push(diplomatBadge);\n\n  return domainBadges;\n}\n",
      "prepareTownInfo": "function prepareTownInfo(dataSource, hasAdminRole) {  const domainDetails = [];\n\n    const about = _.get(dataSource, 'about');\n    const federationName = _.get(dataSource, 'federationName');\n    const etymology = _.get(dataSource, 'etymology');\n\n    let countryCode = _.get(dataSource, 'contactUs.phone.countryCode');\n    let phoneNumber = _.get(dataSource, 'contactUs.phone.number');\n    let email = _.get(dataSource, 'contactUs.email');\n    let website = _.get(dataSource, 'contactUs.website');\n    let poBox = _.get(dataSource, 'contactUs.poBox');\n\n    if (about) {\n      const introduction_details = new this.AboutModel(this.AboutUsTextTypes.ExcerptTextType, this.AppIcons.about_description_icon, about, false);\n      domainDetails.push(introduction_details);\n    } else {\n      if (hasAdminRole) {\n        const descriptionEmptyStateLabel = this.dynamicUiExternalResourcesService.get('town-page.town.about.empty-state.short-description');\n        const introduction_details = new this.AboutModel(this.AboutUsTextTypes.ExcerptTextType, this.AppIcons.about_description_icon, descriptionEmptyStateLabel, true);\n        domainDetails.push(introduction_details);\n      }\n    }\n\n    if (federationName) {\n      const federation_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.about_federation_icon, federationName, false);\n      domainDetails.push(federation_details);\n    } else {\n      const federationEmptyStateLabel = this.dynamicUiExternalResourcesService.get('town-page.town.about.empty-state.federation');\n      const federation_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.about_federation_icon, federationEmptyStateLabel, false);\n      domainDetails.push(federation_details);\n    }\n    \n    if (countryCode && phoneNumber) {\n      if (hasAdminRole) {\n        const phoneNumber_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_phone, countryCode + phoneNumber, false, null, false);\n        domainDetails.push(phoneNumber_details);\n      } else {\n        const phoneNumbe_action = new this.AboutAction(\"Call\", null, \"phone\");\n        const phoneNumber_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_phone, countryCode + phoneNumber, false, phoneNumbe_action, false);\n        domainDetails.push(phoneNumber_details);\n      }\n    } else {\n      if (hasAdminRole) {\n        const phoneNumberEmptyStateLabel = this.dynamicUiExternalResourcesService.get('town-page.town.about.empty-state.phone-number');\n        const phoneNumber_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_phone, phoneNumberEmptyStateLabel, true, null, false);\n        domainDetails.push(phoneNumber_details);\n      }\n    }\n\n    if (email) {\n      if (hasAdminRole) {\n        const email_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_email, email, false, null, false);\n        email_details.withCapitalize = false;\n        domainDetails.push(email_details);\n      } else {\n        const contactEmail_action = new this.AboutAction(\"Email\", null, \"email\");\n        const email_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_email, email, false, contactEmail_action, false);\n        email_details.withCapitalize = false;\n        domainDetails.push(email_details);\n      }\n    } else {\n      if (hasAdminRole) {\n        const emailEmptyStateLabel = this.dynamicUiExternalResourcesService.get('town-page.town.about.empty-state.email');\n        const email_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_email, emailEmptyStateLabel, true, null, false);\n        domainDetails.push(email_details);\n      }\n    }\n\n    if (website) {\n      if (hasAdminRole) {\n        const website_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_website, website, false, null, false);\n        website_details.withCapitalize = false;\n        domainDetails.push(website_details);\n      } else {\n        const contactWebsite_action = new this.AboutAction(\"Visit\", null, \"website\");\n        const website_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_website, website, false, contactWebsite_action, false);\n        website_details.withCapitalize = false;\n        domainDetails.push(website_details);\n      }\n    } else {\n      if (hasAdminRole) {\n        const websiteEmptyStateLabel = this.dynamicUiExternalResourcesService.get('town-page.town.about.empty-state.website');\n        const website_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_website, websiteEmptyStateLabel, true, null, false);\n        domainDetails.push(website_details);\n      }\n    }\n\n    if (poBox) {\n      if (hasAdminRole) {\n        const poBox_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_pobox, poBox, false, null, false);\n        domainDetails.push(poBox_details);\n      } else {\n        const poBox_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_pobox, poBox, false, null, false);\n        domainDetails.push(poBox_details);\n      }\n    } else {\n      if (hasAdminRole) {\n        const poBoxEmptyStateLabel = this.dynamicUiExternalResourcesService.get('town-page.town.about.empty-state.po-box');\n        const poBox_details = new this.AboutModel(this.AboutUsTextTypes.SimpleTextType, this.AppIcons.contact_pobox, poBoxEmptyStateLabel, true, null, false);\n        domainDetails.push(poBox_details);\n      }\n    }\n\n    return domainDetails;\n}\n",
      "prepareTownBadges": "function prepareTownBadges(dataSource, hasAdminRole) {  const domainBadges = [];\n\n  const id = _.get(dataSource, 'id');\n  const name = _.get(dataSource, 'name');\n  const followersCount = _.get(dataSource, 'statistics.followers', 0);\n  const officialsMemberCount = _.get(dataSource, 'statistics.officials', 0);\n  const countryCode = _.get(dataSource, 'country.isoCode', '').toLowerCase();\n  const districtName = _.get(dataSource, 'governateDistrict.district.name', \"\");\n\n  if(districtName) {\n    const countryBadge = new this.BadgeModel(districtName, this.BadgeType.FlagType, null, id, name, countryCode, null);\n    domainBadges.push(countryBadge);\n  }\n  const followerBadge = new this.BadgeModel(followersCount === 1 ? this.dynamicUiExternalResourcesService.get('town-page.town.main-card.badges.follower') : this.dynamicUiExternalResourcesService.get('town-page.town.main-card.badges.followers'), this.BadgeType.TextType, followersCount, id, name, null, 'town/followers/' + id);\n  const officialBadge = new this.BadgeModel(officialsMemberCount === 1 ? this.dynamicUiExternalResourcesService.get('town-page.town.main-card.badges.official') : this.dynamicUiExternalResourcesService.get('town-page.town.main-card.badges.officials'), this.BadgeType.TextType, officialsMemberCount, id, name, null, null);\n  officialBadge.withScroll = true;\n  officialBadge.scrollTo = 'official-section-id';\n\n  domainBadges.push(followerBadge);\n  domainBadges.push(officialBadge);\n\n  return domainBadges;\n}\n",
      "prepareTownGeoLocation": "function prepareTownGeoLocation(dataSource) {  const locationDetails = [];\n  let distanceFromBeirut = _.get(dataSource, 'distanceFromBeirut');\n  let surface = _.get(dataSource, 'surface');\n  let altitude = _.get(dataSource, 'altitude');\n\n  if (distanceFromBeirut || distanceFromBeirut == 0) {\n    const distanceLabel = this.dynamicUiExternalResourcesService.get('town-page.town.geo-location.distance');\n    const distanceInfo = new this.GeoLocationModel(this.AppIcons.contact_distane, distanceFromBeirut + distanceLabel);\n    locationDetails.push(distanceInfo);\n  }\n\n  if (surface || surface == 0) {\n    const surfaceLabel = this.dynamicUiExternalResourcesService.get('town-page.town.geo-location.surface');\n    const surfaceInfo = new this.GeoLocationModel(this.AppIcons.contact_altitude, surface + surfaceLabel);\n    locationDetails.push(surfaceInfo);\n  }\n\n  if (altitude || altitude == 0) {\n    const altitudeLabel = this.dynamicUiExternalResourcesService.get('town-page.town.geo-location.altitude');\n    const altitudeInfo = new this.GeoLocationModel(this.AppIcons.contact_surface, altitude + altitudeLabel);\n    locationDetails.push(altitudeInfo);\n  }\n\n  return locationDetails;\n}\n",
      "prepareSocialMediaInfo": "function prepareSocialMediaInfo(dataSource) {  const socialMediaDetails = [];\n\n  let facebookLink = _.get(dataSource, 'socialMedia.facebook');\n  let linkedinLink = _.get(dataSource, 'socialMedia.linkedin');\n  let twitterLink = _.get(dataSource, 'socialMedia.twitter');\n  let instagramLink = _.get(dataSource, 'socialMedia.instagram');\n\n  if (facebookLink) {\n    const facebook = new this.SocialMediaModel(this.AppIcons.social_media_facebook, facebookLink);\n    socialMediaDetails.push(facebook);\n  }\n\n  if (linkedinLink) {\n    const linkedin = new this.SocialMediaModel(this.AppIcons.social_media_linkedin, linkedinLink);\n    socialMediaDetails.push(linkedin);\n  }\n\n  if (twitterLink) {\n    const twitter = new this.SocialMediaModel(this.AppIcons.social_media_twitter, twitterLink);\n    socialMediaDetails.push(twitter);\n  }\n  if (instagramLink) {\n    const instagram = new this.SocialMediaModel(this.AppIcons.social_media_instagram, instagramLink);\n    socialMediaDetails.push(instagram);\n  }\n\n  return socialMediaDetails;\n}\n",
      "getMoreNotificationsData": "function(infiniteScroll, component, cursor, dataSource, cursorItems, itemList) {    component.getGraphQL(`query{\n      notification {\n        userNotifications (after: \"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize ) {\n          items{\n            id\n            message\n            createdDate\n            read\n            object{\n              __typename ... on User {\n                id \n                firstName\n                lastName\n                photoCover {\n                  image: imageThumbnailUrl\n                }\n              }          \n              __typename ... on Municipality {\n                id\n                name: title\n                photoCover {\n                  image: imageThumbnailUrl\n                }\n              }\n              __typename ... on Company{\n                id\n                name\n                photoCover {\n                  image: imageThumbnailUrl\n                }            \n              }\n              __typename ... on Organization {\n                id\n                name\n                photoCover {\n                  image: imageThumbnailUrl\n                }            \n              }\n              __typename ... on OrganizationCommittee {\n                id\n                name\n                organization {\n                  organization {\n                    id\n                    photoCover {\n                      image: imageThumbnailUrl\n                    }                                          \n                  }\n                }\n              }\n              __typename ... on DiplomaticMission {\n                id\n                name\n                photoCover {\n                  image: imageThumbnailUrl\n                }            \n              }\n              __typename ... on DiplomaticMissionCommittee {\n                id \n                name          \n                diplomaticMission {\n                  diplomaticMission {\n                    photoCover {\n                      image: imageThumbnailUrl\n                    }                  \n                  }\n                }\n              }        \n              __typename ... on Offer {\n                id\n                name\n                photoCover {\n                  image: imageThumbnailUrl\n                }            \n              }         \n              __typename ... on Event {\n                id\n                name: title\n                photoCover {\n                  image: imageThumbnailUrl\n                }            \n              }      \n              __typename ... on Post {\n                id\n                name: title\n                photoCover {\n                  image: imageThumbnailUrl\n                }            \n              }\n              __typename ... on Conversation {\n                id\n                fromMailBoxId\n                toMailBoxId\n              \n                receiver {\n                  id\n                  owner {\n                    entity {                      \n                      __typename ... on User {\n                        id\n                        firstName\n                        lastName\n                        photoCover {\n                          imageThumbnailUrl\n                        }\n                      }\n\n                      __typename ... on Company {\n                        id\n                        name\n                        photoCover {\n                          imageThumbnailUrl\n                        }\n                      }\n\n                      __typename ... on Organization {\n                        id\n                        name\n                        photoCover {\n                          imageThumbnailUrl\n                        }\n                      }\n\n                      __typename ... on DiplomaticMission {\n                        id\n                        name\n                        photoCover {\n                          imageThumbnailUrl\n                        }\n                      }\n\n                      __typename ... on Municipality {\n                        id\n                        name: title\n                        photoCover {\n                          imageThumbnailUrl\n                        }\n                      }\n                    }\n                  }\n                }\n\n                sender {\n                  id\n                  owner {\n                    entity {                          \n                      __typename ... on User {\n                        id\n                        firstName\n                        lastName\n                        photoCover {\n                          imageThumbnailUrl\n                        }\n                      }\n\n                      __typename ... on Company {\n                        id\n                        name\n                        photoCover {\n                          imageThumbnailUrl\n                        }\n                      }\n\n                      __typename ... on Organization {\n                        id\n                        name\n                        photoCover {\n                          imageThumbnailUrl\n                        }\n                      }\n\n                      __typename ... on DiplomaticMission {\n                        id\n                        name\n                        photoCover {\n                          imageThumbnailUrl\n                        }\n                      }\n\n                      __typename ... on Municipality {\n                        id\n                        name: title\n                        photoCover {\n                          imageThumbnailUrl\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              __typename ... on Comment {\n                id\n                text\n\n                creater {\n                  user {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      image: imageThumbnailUrl\n                    }\n                  }\n                }\n\n                listUnder {\n                  entity {\n                    __typename ... on Event {\n                      id\n                      owner {\n                        __typename ... on Company {\n                          name\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n                        __typename ... on Organization {\n                          name\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n                        __typename ... on DiplomaticMission {\n                          name \n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n                        __typename ...  on Municipality {\n                          name: title\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n                      }\n                    }\n                    __typename ... on Post {\n                      id\n                      owner {\n                        __typename ... on User {\n                          firstName\n                          lastName\n                          photoCover {\n                            imageThumbnailUrl\n                          }                              \n                        }\n                        __typename ... on Company {\n                          name\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n                        __typename ... on Organization {\n                          name\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n                        __typename ... on DiplomaticMission {\n                          name \n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n                        __typename ...  on Municipality {\n                          name: title\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n                      }                          \n                    }\n                    __typename ... on Offer {\n                      id\n                      owner {\n                        __typename ... on Company {\n                          name\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n                      }                          \n                    }\n                  }\n                }\n              }\n            }\n          }\n          cursor\n        }\n      }\n    }\n    `).then(\n      (data) => {\n        dataSource[cursorItems] = _.get(data, 'notification.userNotifications.cursor', null);\n        const newItems =  _.get(data, 'notification.userNotifications.items', []).map(x => this.mapNotificationToItem(x));\n        newItems.forEach(x => {\n          dataSource[itemList].push(x);\n        })\n      }\n    ).finally(() => {\n      infiniteScroll.target.complete();\n    });        \n  }\n",
      "getMoreUpdates": "function(infiniteScroll, component, entityType, entityId, cursor, dataSource, cursorItems, itemList) {  component.getGraphQL(`query   { \n    ${entityType}(id: \"${entityId}\") {\n      updates(after: \"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          entity {\n            __typename ... on Event {\n                id\n                title\n                description\n              \n                photoCover {\n                  imageThumbnailUrl\n                }\n                creater {\n                  user {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                } \n                createdDate\n            }\n            \n            __typename ... on Post {\n                id\n                title\n                description\n                photoCover {\n                  imageThumbnailUrl\n                }\n                creater {\n                  user {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                } \n                createdDate            \n            }\n          }\n        }\n        cursor            \n      }\n    }\n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `${entityType}.updates.cursor`);\n      const newItems =  _.get(data, `${entityType}.updates.items`, []).map(x => this.mapUpdateToItem(x));\n      newItems.forEach(x => {\n        dataSource[itemList].push(x);\n      })\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });        \n}\n",
      "getMoreUserUpdates": "function(infiniteScroll, component, entityId, cursor, dataSource, cursorItems, itemList) {  component.getGraphQL(`query   { \n    user(id: \"${entityId}\") {\n      updates(after: \"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          entity {\n            id\n            title\n            description\n            photoCover {\n              imageThumbnailUrl\n            }\n            creater {\n              user {\n                id\n                firstName\n                lastName\n                photoCover {\n                  imageThumbnailUrl\n                }                \n              }\n            } \n            owner {\n              __typename ... on User {\n                id\n                firstName \n                lastName\n                photoCover {\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on  Municipality {\n                id\n                name: title\n                photoCover {\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Company {\n                id\n                name\n                photoCover {\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on Organization {\n                id\n                name\n                photoCover {\n                  imageThumbnailUrl\n                }\n              }\n              \n              __typename ... on DiplomaticMission {\n                id\n                name\n                photoCover {\n                  imageThumbnailUrl\n                }\n              }\n            }\n\n            createdDate            \n          }\n        }\n        cursor            \n      }\n    }\n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `user.updates.cursor`);\n      const newItems =  _.get(data, `user.updates.items`, []).map(x => this.mapPostToItem(x));\n      newItems.forEach(x => {\n        dataSource[itemList].push(x);\n      })\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });        \n}\n",
      "getMoreActivityComments": "function(infiniteScroll, component, activity, entityType, entityId, entityProperty, cursor, dataSource, cursorItems, itemList) {  component.getGraphQL(`query   { \n    ${entityType}(id: \"${entityId}\") {\n      ${entityProperty}(after: \"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          comment {\n            id\n            text\n            createdDate\n            \n            creater {\n              user {\n                id\n                firstName\n                lastName\n                photoCover {\n                  imageThumbnailUrl\n                }\n              }\n            }\n\n            actions {\n              canLike\n              canCreate\n              canDeleteMyComment\n              canUnlike\n              canUpdate\n            }\n                        \n            statistics {\n              comments\n              likers\n            }\n          }\n        }\n        cursor\n      }\n    }\n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `${entityType}.${entityProperty}.cursor`);\n      const newItems =  _.get(data, `${entityType}.${entityProperty}.items`, []).map(x => this.mapCommentToItem(activity, x));\n\n      newItems.forEach(x => {\n        if(dataSource[itemList].findIndex(comment => comment.id === x.id) === -1) {\n          dataSource[itemList].push(x);\n        }\n      });\n\n      dataSource[itemList] = Array.from(this.sortArrayPipe.transform(dataSource[itemList], 'createdDate'));\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });\n}\n",
      "getMoreFavoritesCards": "function(infiniteScroll, component, entityId, cursor, dataSource, cursorItems, itemList) {  component.getGraphQL(`query   { \n    user(id: \"${entityId}\") {\n      favorites(after: \"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          entity {\n            __typename ... on Event {\n                id\n                title\n                description\n              \n                photoCover {\n                  imageThumbnailUrl\n                }\n                creater {\n                  user {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                } \n\n                owner {\n                  __typename ... on User {\n                    id\n                    firstName \n                    lastName\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on  Municipality {\n                    id\n                    name: title\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on Company {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on Organization {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on DiplomaticMission {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                }  \n                                      \n                createdDate\n            }\n\n            __typename ... on Post {\n                id\n                title\n                description\n                photoCover {\n                  imageThumbnailUrl\n                }\n                creater {\n                  user {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                } \n\n                owner {\n                  __typename ... on User {\n                    id\n                    firstName \n                    lastName\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on  Municipality {\n                    id\n                    name: title\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on Company {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on Organization {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                  \n                  __typename ... on DiplomaticMission {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                }  \n                                      \n                createdDate            \n            }\n\n            __typename ... on Offer {\n                id\n                type\n                name\n                description\n                photoCover {\n                  imageThumbnailUrl\n                }\n\n                creater {\n                  user {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                }\n\n                owner {\n                  id\n                  name\n                  photoCover {\n                    imageThumbnailUrl\n                  }\n                }\n                                      \n                createdDate\n                createdBy\n            }        \n          }\n        }\n        cursor\n      }\n    }\n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `user.favorites.cursor`);\n      const newItems =  _.get(data, `user.favorites.items`, []).map(x => this.mapFavoriteCardToItem(x));\n      newItems.forEach(x => {\n        dataSource[itemList].push(x);\n      })\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });\n}\n",
      "getMoreConversationMessages": "function(infiniteScroll, component, entityType, entityId, entityProperty, cursor, dataSource, cursorItems, itemList, fromMailboxId) {  component.getGraphQL(`query   { \n    ${entityType}(id: \"${entityId}\") {\n      id\n      ${entityProperty}(after: \"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          message {\n            id\n            text\n            createdDate\n    \n            receiverMessage: receiver {\n              id\n              owner {\n                entity { \n                  __typename ... on User {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Company {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Organization {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on DiplomaticMission {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Municipality {\n                    id\n                    name: title\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                }\n              }\n            }\n\n            senderMessage: sender {\n              id\n              owner {\n                entity { \n                  __typename ... on User {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Company {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Organization {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on DiplomaticMission {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Municipality {\n                    id\n                    name: title\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                }\n              }              \n            }\n          }\n        }\n        cursor\n      }\n      \n      receiverMailbox: receiver {\n        id\n        owner {\n          entity { \n            __typename ... on User {\n              id\n              firstName\n              lastName\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n\n            __typename ... on Company {\n              id\n              name\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n\n            __typename ... on Organization {\n              id\n              name\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n\n            __typename ... on DiplomaticMission {\n              id\n              name\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n\n            __typename ... on Municipality {\n              id\n              name: title\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n          }\n        }\n      }\n      \n      senderMailbox: sender {\n        id\n        owner {\n          entity { \n            __typename ... on User {\n              id\n              firstName\n              lastName\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n\n            __typename ... on Company {\n              id\n              name\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n\n            __typename ... on Organization {\n              id\n              name\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n\n            __typename ... on DiplomaticMission {\n              id\n              name\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n\n            __typename ... on Municipality {\n              id\n              name: title\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n          }\n        }              \n      }  \n    }\n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `${entityType}.${entityProperty}.cursor`);\n      const items =  _.get(data, `${entityType}.${entityProperty}.items`, []).map(x => this.mapToConversationMessages(x,fromMailboxId));\n      const newItems = items;\n      newItems.forEach(x => {\n        dataSource[itemList].findIndex(conversation => conversation.messageId === x.messageId) === -1 ? dataSource[itemList].unshift(x) : $actionHelper.printData(\"Conversation already Exist\");\n      })\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });\n}\n",
      "getMoreUserData": "function(infiniteScroll, component, entityType, entityId, entityProperty, cursor, dataSource, cursorItems, itemList) {  component.getGraphQL(`query   { \n    ${entityType}(id: \"${entityId}\") {\n      ${entityProperty}(after: \"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items { \n          user {\n            id\n            firstName\n            lastName      \n\n            actions {\n              canFollow\t\n              canUnfollow\n            }\n            ...userImage\n            ...userPlaceDetails\n            ...userFeaturedRole       \n          }\n        }\n        cursor\n      }\n    }\n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `${entityType}.${entityProperty}.cursor`);\n      const newItems =  _.get(data, `${entityType}.${entityProperty}.items`, []).map(x => this.mapUserToItem(x));\n      newItems.forEach(x => {\n        dataSource[itemList].push(x);\n      })\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });\n}\n",
      "getMoreUserSearchData": "function(infiniteScroll, component, entityType, entityId, keyword, entityProperty, cursor, dataSource, cursorItems, itemList) {  component.getGraphQL(`query   { \n    ${entityType}(id: \"${entityId}\") {\n      ${entityProperty}(after: \"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, keyword: \"${keyword}\") {\n        items { \n          user {\n            id\n            firstName\n            lastName      \n\n            actions {\n              canFollow\t\n              canUnfollow\n            }\n            ...userImage\n            ...userPlaceDetails\n            ...userFeaturedRole       \n          }\n        }\n        cursor\n      }\n    }\n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `${entityType}.${entityProperty}.cursor`);\n      const newItems =  _.get(data, `${entityType}.${entityProperty}.items`, []).map(x => this.mapUserToItem(x));\n      newItems.forEach(x => {\n        dataSource[itemList].push(x);\n      })\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });\n}\n",
      "getMoreCompanyData": "function(infiniteScroll, component, entityType, entityId, entityProperty, cursor, dataSource, cursorItems, itemList) {  component.getGraphQL(`query   { \n    ${entityType}(id: \"${entityId}\") {\n      ${entityProperty}(after: \"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          company {\n            ...companyCommonProperties\n          }                  \n        }\n        cursor\n      }\n    }\n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `${entityType}.${entityProperty}.cursor`);\n      const newItems =  _.get(data, `${entityType}.${entityProperty}.items`, []).map(x => this.mapCompanyToItem(x));\n      newItems.forEach(x => {\n        dataSource[itemList].push(x);\n      })\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });\n}\n",
      "getMoreSeachCompanyData": "function(infiniteScroll, component, entityType, entityId, keyword, entityProperty, cursor, dataSource, cursorItems, itemList) {  component.getGraphQL(`query { \n    ${entityType}(id: \"${entityId}\") {\n      ${entityProperty}(after: \"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, keyword: \"${keyword}\") {\n        items {\n          company {\n            ...companyCommonProperties\n          }                  \n        }\n        cursor\n      }\n    }\n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `${entityType}.${entityProperty}.cursor`);\n      const newItems =  _.get(data, `${entityType}.${entityProperty}.items`, []).map(x => this.mapCompanyToItem(x));\n      newItems.forEach(x => {\n        dataSource[itemList].push(x);\n      })\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });\n}\n",
      "getMoreOrganizationData": "function(infiniteScroll, component, entityType, entityId, entityProperty, cursor, dataSource, cursorItems, itemList) {  component.getGraphQL(`query   { \n    ${entityType}(id: \"${entityId}\") {\n      ${entityProperty}(after: \"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          organization {\n            ...organizationCommonProperties\n          }\n        }\n        cursor\n      }\n    }\n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `${entityType}.${entityProperty}.cursor`);\n      const newItems =  _.get(data, `${entityType}.${entityProperty}.items`, []).map(x => this.mapOrganizationToItem(x));\n      newItems.forEach(x => {\n        dataSource[itemList].push(x);\n      })\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });\n}\n",
      "getMoreSearchOrganizationData": "function(infiniteScroll, component, entityType, entityId, keyword, entityProperty, cursor, dataSource, cursorItems, itemList) {  component.getGraphQL(`query   { \n    ${entityType}(id: \"${entityId}\") {\n      ${entityProperty}(after: \"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, keyword: \"${keyword}\") {\n        items {\n          organization {\n            ...organizationCommonProperties\n          }\n        }\n        cursor\n      }\n    }\n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `${entityType}.${entityProperty}.cursor`);\n      const newItems =  _.get(data, `${entityType}.${entityProperty}.items`, []).map(x => this.mapOrganizationToItem(x));\n      newItems.forEach(x => {\n        dataSource[itemList].push(x);\n      })\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });\n}\n",
      "getMoreNetowrkData": "function(infiniteScroll, component, entityType, entityId, entityProperty, cursor, dataSource, cursorItems, itemList) {  component.getGraphQL(`query   { \n    ${entityType}(id: \"${entityId}\") {\n      ${entityProperty}(after: \"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          entity {\n            __typename\n            ... on Organization {\n              ...organizationCommonProperties\n            }\n            ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }\n            ... on Municipality {\n              ...municipalityCommonProperties\n            }\n          }\n        }\n        cursor\n      }\n    }\n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `${entityType}.${entityProperty}.cursor`);\n      const newItems =  _.get(data, `${entityType}.${entityProperty}.items`, []).map(x => this.mapNetworkToItem(x));\n      newItems.forEach(x => {\n        dataSource[itemList].push(x);\n      })\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });\n}\n",
      "getMoreSearchNetowrkData": "function(infiniteScroll, component, entityType, entityId, keyword, entityProperty, cursor, dataSource, cursorItems, itemList) {  component.getGraphQL(`query   { \n    ${entityType}(id: \"${entityId}\") {\n      ${entityProperty}(after: \"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, keyword: \"${keyword}\") {\n        items {\n          entity {\n            __typename\n            ... on Organization {\n              ...organizationCommonProperties\n            }\n            ... on DiplomaticMission {\n              ...diplomaticCommonProperties\n            }\n            ... on Municipality {\n              ...municipalityCommonProperties\n            }\n          }\n        }\n        cursor\n      }\n    }\n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `${entityType}.${entityProperty}.cursor`);\n      const newItems =  _.get(data, `${entityType}.${entityProperty}.items`, []).map(x => this.mapNetworkToItem(x));\n      newItems.forEach(x => {\n        dataSource[itemList].push(x);\n      })\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });\n}\n",
      "getMoreGalleyData": "function(infiniteScroll, component, entityType, entityId, cursor, dataSource, cursorItems, itemList) {  component.getGraphQL(`query   { \n    ${entityType}(id: \"${entityId}\") {\n      gallery {\n        mediaGallery {\n          id\n          name\n          actions {\n            canUploadImage\n            canUploadVideoLink\n          }                \n          galleryItems(after:\"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n            items{\n              media {\n                id\n                createdDate \n\n                actions {\n                  canDelete\n                }\n                                      \n                creator {\n                  user {\n                    id\n                    firstName\n                    lastName\n                  }\n                }\n                details {\n                __typename ... on ImageMedia{\n                    imageThumbnailUrl\n                    caption\n                } \n                __typename ... on VideoLinkMedia{\n                    imageThumbnailUrl\n                    videoUrl\n                    caption\n                } \n                  \n                }\n              }\n            }\n            cursor\n          }\n        }\n      } \n    }\n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `${entityType}.gallery.mediaGallery.galleryItems.cursor`);\n      const newItems =  _.get(data, `${entityType}.gallery.mediaGallery.galleryItems.items`, []).map(x => this.mapGalleryToItem(x));\n      newItems.forEach(x => {\n        dataSource[itemList].push(x);\n      })\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });\n}\n",
      "getMoreOffersData": "function(infiniteScroll, component, entityType, entityId, entityProperty, cursor, dataSource, cursorItems, itemList) {  component.getGraphQL(`query   { \n    ${entityType}(id: \"${entityId}\") {\n      ${entityProperty}(after: \"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          offer {\n            ...offerProperties\n          }\n        }\n        cursor\n      }\n    }\n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `${entityType}.${entityProperty}.cursor`);\n      const newItems =  _.get(data, `${entityType}.${entityProperty}.items`, []).map(x => this.mapCompanyOfferToItem(x));\n      newItems.forEach(x => {\n        dataSource[itemList].push(x);\n      })\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });\n}\n",
      "getMoreOffersSearchData": "function(infiniteScroll, component, entityType, entityId, keyword, entityProperty, cursor, dataSource, cursorItems, itemList) {  component.getGraphQL(`query   { \n    ${entityType}(id: \"${entityId}\") {\n      ${entityProperty}(after: \"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize, keyword: \"${keyword}\") {\n        items {\n          offer {\n            ...offerProperties\n          }\n        }\n        cursor\n      }\n    }\n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `${entityType}.${entityProperty}.cursor`);\n      const newItems =  _.get(data, `${entityType}.${entityProperty}.items`, []).map(x => this.mapCompanyOfferToItem(x));\n      newItems.forEach(x => {\n        dataSource[itemList].push(x);\n      })\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });\n}\n",
      "getMoreActivities": "function(infiniteScroll, component, entityType, entityId, cursor, dataSource, cursorItems, itemList) {  component.getGraphQL(`query   { \n    ${entityType}(id: \"${entityId}\") {\n      activities(after: \"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          __typename ... on UserNewPost {\n            object {\n              ...postProperties\n            }\n          }\n\n          __typename ... on CompanyNewPost {\n            object {\n            ...postProperties\n            }\n          }\n          \n          __typename ... on CompanyNewEvent {\n            object {\n              ...eventProperties\n            }\n          }\n\n          __typename ... on MunicipalityNewPost {\n            object {\n              ...postProperties\n            }\n          }\n          \n          __typename ... on MunicipalityNewEvent {\n            object {\n              ...eventProperties\n            }\n          }\n          \n          __typename ... on OrganizationNewPost {\n            object {\n            ...postProperties          \n            }\n          }\n          \n          __typename ... on OrganizationNewEvent {\n            object {\n              ...eventProperties\n            }\n          }\n          \n          __typename ... on DiplomaticMissionNewPost {\n            object {\n            ...postProperties          \n            }\n          }\n          \n          __typename ... on DiplomaticMissionNewEvent {\n            object {\n              ...eventProperties\n            }\n          }           \n        }  \n        cursor    \n      }\n    }\n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `${entityType}.activities.cursor`);\n      const newItems =  _.get(data, `${entityType}.activities.items`, []).map(x => this.mapUserActivitiesToItem(x));\n      newItems.forEach(x => {\n        dataSource[itemList].push(x);\n      })\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });\n}\n",
      "getMoreSearchData": "function(infiniteScroll, component, section, scope, cursor, dataSource, cursorItems, itemList, searchArguments, properties) {  component.getGraphQL(`query   { \n    search{\n      ${section}{\n        ${scope}(after: \"${cursor}\", ${searchArguments}){\n          items{\n            ${properties}\n          }\n          cursor\n        }\n      }\n    } \n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `search.${section}.${scope}.cursor`);\n      const newItems =  _.get(data, `search.${section}.${scope}.items`, []).map(x => \n                                        ((section === 'businesses' && scope === 'business') || (section === 'businesses' && scope === 'startups') || (section === 'businesses' && scope === 'socialenterprise'))  \n                                          ? this.mapSearchCompanyToItem(x) \n                                       : ((section === 'businesses' && scope === 'products') || (section === 'businesses' && scope === 'services') || (section === 'businesses' && scope === 'franchises')) \n                                          ? this.mapCompanySearchOfferToItem(x)\n                                       : ((section === 'networks' && scope === 'organizations') || (section === 'networks' && scope === 'diplomaticMissions') || (section === 'networks' && scope === 'municipalities'))  \n                                          ? this.mapSearchNetworkToItem(x) \n                                       : ((section === 'networks' && scope === 'posts') || (section === 'networks' && scope === 'events')) \n                                          ? this.mapSearchNewsToItem(x)\n                                       : this.mapSearchPeopleToItem(x));\n      newItems.forEach(x => {\n        dataSource[itemList].push(x);\n      })\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });\n}\n",
      "getMoreMailboxConversations": "function(infiniteScroll, component, entityType, entityId, entityProperty, cursor, dataSource, cursorItems, itemList) {  component.getGraphQL(`query   { \n    ${entityType}(id: \"${entityId}\") {\n      ${entityProperty}(after: \"${cursor}\", first: $dynamicUiVariables->initialDataSource.generalInfo.listPageSize) {\n        items {\n          conversation {\n            id\n            messages(first: 1) {\n              items {\n                message {\n                  id\n                  text\n                  createdDate\n                  \n                  receiver {\n                    id\n                    owner {\n                      entity {\n                        __typename ... on User {\n                          id\n                          firstName\n                          lastName\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n\n                        __typename ... on Company {\n                          id\n                          name\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n\n                        __typename ... on Organization {\n                          id\n                          name\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n\n                        __typename ... on DiplomaticMission {\n                          id\n                          name\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n\n                        __typename ... on Municipality {\n                          id\n                          name: title\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n                      }\n                    }\n                  }\n\n                  sender {\n                    id\n                    owner {\n                      entity {\n                        __typename ... on User {\n                          id\n                          firstName\n                          lastName\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n\n                        __typename ... on Company {\n                          id\n                          name\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n\n                        __typename ... on Organization {\n                          id\n                          name\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n\n                        __typename ... on DiplomaticMission {\n                          id\n                          name\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n\n                        __typename ... on Municipality {\n                          id\n                          name: title\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n                      }\n                    }\n                  }                               \n                }\n              }\n            }\n\n            receiver {\n              id\n              owner {\n                entity {\n                  __typename ... on User {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Company {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Organization {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on DiplomaticMission {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Municipality {\n                    id\n                    name: title\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                }\n              }\n            }\n\n            sender {\n              id\n              owner {\n                entity {\n                  __typename ... on User {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Company {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Organization {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on DiplomaticMission {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Municipality {\n                    id\n                    name: title\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                }\n              }\n            }\n            \n            statistics {\n              totalUnreadMessages\n              totalMessages\n            }\n          }                 \n        }\n        cursor\n      }\n    }\n  }`).then(\n    (data) => {\n      dataSource[cursorItems] = _.get(data, `${entityType}.${entityProperty}.cursor`);\n      const newItems =  _.get(data, `${entityType}.${entityProperty}.items`, []).map(x => this.mapToConversationSummary(x.conversation, entityId)).filter(x => {return x.lastMessageId != null;});\n      newItems.forEach(x => {\n        dataSource[itemList].push(x);\n      })\n    }\n  ).finally(() => {\n    infiniteScroll.target.complete();\n  });\n}\n",
      "openSectorsModal": "async function(title, selectedController, formGroup, options) {  const modal = await this.modalController.create({\n    component: this.SectorComponent,\n    componentProps: { 'title': title, 'sectors': Array.from(options), 'withSearch': true, 'canClearSelectedValue': selectedController.withNullValue }\n  });\n\n  await modal.present();\n\n  modal.onDidDismiss().then((data) => {\n    let isSelected = _.get(data, 'data.withOption');\n    let isClear =  _.get(data, 'data.isClear')\n    if (isSelected) {\n      if (isClear) {\n        formGroup.controls[selectedController.key].setValue(null);\n        selectedController.value = null;\n      } else {\n        const selectedSector = _.get(data, 'data.selectOption');\n        formGroup.controls[selectedController.key].setValue(selectedSector.sectorId);\n        selectedController.value = selectedSector.title;\n      }\n    }\n  });\n}\n",
      "openCountriesModal": "async function(title, selectedController, formGroup, options, isPhoneCountry) {  const modal = await this.modalController.create({\n    component: this.ModalComponent,\n    componentProps: { 'title': title, 'options': Array.from(options), 'withSearch': true, 'isCountry': true, 'isPhoneCountry': isPhoneCountry }\n  });\n\n  await modal.present();\n\n  modal.onDidDismiss().then((data) => {\n    let isSelected = _.get(data, 'data.withOption');\n    if (isSelected) {\n      let selectOption = _.get(data, 'data.selectOption');\n      selectedController.value = isPhoneCountry ? selectOption.code : selectOption.name;\n      selectedController.leftIcon = isPhoneCountry ? selectOption.iso.toLowerCase() : selectOption.isoCode.toLowerCase();\n      formGroup.controls[selectedController.key].setValue(isPhoneCountry ? selectOption.code : selectOption.lookupId);\n      if(isPhoneCountry) {\n        formGroup.controls[selectedController.countryIsoCodeKey].setValue(selectOption.iso);\n      }\n    }\n  });\n}\n",
      "openSearchSectorsModal": "async function(title, scope, filter, options) {  const modal = await this.modalController.create({\n    component: this.SectorComponent,\n    componentProps: { 'title': title, 'sectors': Array.from(options), 'withSearch': true, 'canClearSelectedValue': true }\n  });\n\n  await modal.present();\n\n  modal.onDidDismiss().then((data) => {\n    let isSelected = _.get(data, 'data.withOption');\n    let isClear =  _.get(data, 'data.isClear')\n    if (isSelected) {\n      if (isClear) {\n        filter.label = null;\n        filter.value = null;\n      } else {\n        const selectedSector = _.get(data, 'data.selectOption');\n        filter.value = selectedSector.sectorId;\n        filter.label = selectedSector.title;\n      }\n    }\n  });\n}\n",
      "openSearchCountriesModal": "async function(title, scope, filter, options, callBackFunction) {  const modal = await this.modalController.create({\n    component: this.ModalComponent,\n    componentProps: { 'title': title, 'options': Array.from(options), 'withSearch': true, 'isCountry': true }\n  });\n\n  await modal.present();\n\n  modal.onDidDismiss().then((data) => {\n    let isSelected = _.get(data, 'data.withOption');\n    if (isSelected) {\n      let selectOption = _.get(data, 'data.selectOption');\n      filter.value = selectOption.lookupId;\n      filter.leftIcon = selectOption.isoCode.toLowerCase();\n      filter.label = selectOption.name;\n      if(callBackFunction) {\n        callBackFunction(filter);\n      }\n    }\n  });\n}\n",
      "computeFullName": "(x) => {  x.fullname = (x.firstName + ' ' + x.lastName).trim(); \n  return x \n}\n",
      "getCitiesForCountry": "(getGraphQL, countryId) => {  return getGraphQL(`query   { \n    cities(country: \"${countryId}\") {\n      lookupId\n      name\n    }\n  }`)\n}\n",
      "getEventDate": "function(filter, $searchService) {  if(filter.value) {\n    if(filter.value === 'upcomingStartDate') {\n      $searchService.searchParams.upcomingStartDate = new Date(); \n      $searchService.searchParams.pastEndDate = null;\n    } else {\n      $searchService.searchParams.upcomingStartDate = null; \n      $searchService.searchParams.pastEndDate = new Date();\n    }\n  } else {\n      $searchService.searchParams.upcomingStartDate = null; \n      $searchService.searchParams.pastEndDate = null;\n  } \n}\n",
      "getOrganizationCommittees": "(getGraphQL, organizationId) => {  return getGraphQL(`query {\n      organization(id: \"${organizationId}\") {\n        committees {\n          organizationCommittee {\n            id\n            name\n            statistics {\n              members \n            }                  \n          }\n        }\n      }\n  }`)\n  .then( data => _.get(data, 'organization.committees', []).map(x => x.organizationCommittee))\n}\n",
      "getDiplomaticOffices": "(getGraphQL, diplomaticMissionId) => {  return getGraphQL(`query {\n      diplomaticMission(id: \"${diplomaticMissionId}\") {\n        committees {\n          diplomaticMissionCommittee {\n            id\n            name\n            statistics {\n              members\n            }                  \n          }\n        }\n      }\n  }`)\n  .then( data => _.get(data, 'diplomaticMission.committees', []).map(x => x.diplomaticMissionCommittee))\n}\n",
      "filterDistrict": "(governateId, initialDataSource) => {  const districts = initialDataSource.districts.filter(district => district.governateId == governateId);\n  return districts;\n}\n",
      "getPostUrl": "(domainEntityType, domainEntityId) => {  return 'createPost/' + _.camelCase(domainEntityType) + '/' + domainEntityId;\n}\n",
      "getDomainInviteInfo": "function (domainEntityId, domainEntityType, domainEntityName, domainEntityImage) {  switch (domainEntityType) {\n    case 'Company':\n      return {\n        'sharingMessage': this.$dynamicUiVariables.initialDataSource.firstName + ' ' + this.$dynamicUiVariables.initialDataSource.lastName + ' is inviting you to list your profile on ' + domainEntityName + '. Join the team, get updates and explore business opportunities!', \n        'sharingPhotoUrl': domainEntityImage,\n        'sharingDescription': 'The Global Lebanese Business Network',\n        'sharingTitle': 'Join the '  + domainEntityName + ' Team on DiasporaID',\n        'targetId': domainEntityId,\n        'targetMethod': 'DiasporaCompany'\n      }\n\n    case 'Organization': \n      return {\n        'sharingMessage': 'List your profile with the organization page on DiasporaID alongside influential Lebanese people from the diaspora. Network with your organization members, get updates and be part of the community! ',\n        'sharingPhotoUrl': domainEntityImage,\n        'sharingDescription': 'The Global Lebanese Network',\n        'sharingTitle': 'Join ' + domainEntityName + ' on DiasporaID',\n        'targetId': domainEntityId,\n        'targetMethod': 'DiasporaOrganization'\n      }\n\n    case 'Municipality': \n      return {\n        'sharingMessage': this.$dynamicUiVariables.initialDataSource.firstName + ' ' + this.$dynamicUiVariables.initialDataSource.lastName +  ' is inviting you to visit the global community of ' + domainEntityName + ' on DiasporaID. Contact the municipality or mukhtars. Meet influential diaspora members, don’t miss out!', \n        'sharingPhotoUrl': domainEntityImage,\n        'sharingTitle': this.$dynamicUiVariables.initialDataSource.firstName + ' ' + this.$dynamicUiVariables.initialDataSource.lastName + ' Is Inviting You to ' + domainEntityName + ' on DiasporaID',\n        'sharingDescription': 'The Global Lebanese Network',\n        'targetId': domainEntityId,\n        'targetMethod': 'InviteToTown'\n      }\n\n    case 'DiplomaticMission': \n      return {\n        'sharingMessage': this.$dynamicUiVariables.initialDataSource.firstName + ' ' + this.$dynamicUiVariables.initialDataSource.lastName + ' and thousands of influential Lebanese diaspora have already registered on the page. Contact the diplomatic mission, get updates and be part of the community. Don’t miss out!', \n        'sharingPhotoUrl': domainEntityImage,\n        'sharingTitle': 'Join ' + domainEntityName + ' on DiasporaID',\n        'sharingDescription': 'The Global Lebanese Network', \n        'targetId': domainEntityId,\n        'targetMethod': 'DiasporaDiplomatic'\n    }          \n  }\n}\n",
      "getNotificationUnreadCount": "(getGraphQL) => {  return getGraphQL(`query   { \n    notification {\n      userNotifications{\n        unreadMessagesCount\n      }\n    }\n  }`)\n}\n",
      "getMailboxConversations": "function(mailboxId) {  return this.getAsyncGraphQl(`query   { \n    mailBox(id: \"${mailboxId}\") {\n      conversations(after: null, first:10) {\n        items {\n          conversation {\n            id\n            messages(first: 1) {\n              items {\n                message {\n                  id\n                  text\n                  createdDate\n\n                  receiver {\n                    id\n                    owner {\n                      entity {\n                        __typename ... on User {\n                          id\n                          firstName\n                          lastName\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n\n                        __typename ... on Company {\n                          id\n                          name\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n\n                        __typename ... on Organization {\n                          id\n                          name\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n\n                        __typename ... on DiplomaticMission {\n                          id\n                          name\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n\n                        __typename ... on Municipality {\n                          id\n                          name: title\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n                      }\n                    }\n                  }\n\n                  sender {\n                    id\n                    owner {\n                      entity {\n                        __typename ... on User {\n                          id\n                          firstName\n                          lastName\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n\n                        __typename ... on Company {\n                          id\n                          name\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n\n                        __typename ... on Organization {\n                          id\n                          name\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n\n                        __typename ... on DiplomaticMission {\n                          id\n                          name\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n\n                        __typename ... on Municipality {\n                          id\n                          name: title\n                          photoCover {\n                            imageThumbnailUrl\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n\n            receiver {\n              id\n              owner {\n                entity {                      \n                  __typename ... on User {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Company {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Organization {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on DiplomaticMission {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Municipality {\n                    id\n                    name: title\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                }\n              }\n            }\n\n            sender {\n              id\n              owner {\n                entity {                          \n                  __typename ... on User {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Company {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Organization {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on DiplomaticMission {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Municipality {\n                    id\n                    name: title\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                }\n              }\n            }\n            \n            statistics {\n              totalUnreadMessages\n              totalMessages\n            }\n          }                 \n        }\n        cursor\n      }\n    }   \n  }`)\n  .then(data => {return {cursor: _.get(data, 'mailBox.conversations.cursor', null), messages: _.get(data, 'mailBox.conversations.items', []).map(x => this.mapToConversationSummary(x.conversation, mailboxId)).filter(x => {return x.lastMessageId != null;})  }})\n}\n",
      "getConversationIdBetweenTwoMailboxes": "function(senderMailboxId, receiverMailboxId) {  return this.getAsyncGraphQl(`\n    mutation { \n      conversation {\n        getConversation(fromMailBoxId: \"${senderMailboxId}\", toMailBoxId:\"${receiverMailboxId}\") {\n          id\n        }\n      }   \n    }\n  `)\n  .then((data) =>\n   {\n     return { conversationId: _.get(data, 'conversation.getConversation.id', null) \n   }})\n}\n",
      "getConversationDetails": "function(conversationId) {  return this.getAsyncGraphQl(`query   { \n    conversation(id: \"${conversationId}\") {\n      id\n      messages(after: null, first: 10) {\n        items {\n          message {\n            id\n            text\n            createdDate\n    \n            receiverMessage: receiver {\n              id\n              owner {\n                entity { \n                  __typename ... on User {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Company {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Organization {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on DiplomaticMission {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Municipality {\n                    id\n                    name: title\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                }\n              }\n            }\n\n            senderMessage: sender {\n              id\n              owner {\n                entity { \n                  __typename ... on User {\n                    id\n                    firstName\n                    lastName\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Company {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Organization {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on DiplomaticMission {\n                    id\n                    name\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n\n                  __typename ... on Municipality {\n                    id\n                    name: title\n                    photoCover {\n                      imageThumbnailUrl\n                    }\n                  }\n                }\n              }              \n            }\n          }\n        }\n        cursor\n      }\n      \n      receiverMailbox: receiver {\n        id\n        owner {\n          entity { \n            __typename ... on User {\n              id\n              firstName\n              lastName\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n\n            __typename ... on Company {\n              id\n              name\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n\n            __typename ... on Organization {\n              id\n              name\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n\n            __typename ... on DiplomaticMission {\n              id\n              name\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n\n            __typename ... on Municipality {\n              id\n              name: title\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n          }\n        }\n      }\n      \n      senderMailbox: sender {\n        id\n        owner {\n          entity { \n            __typename ... on User {\n              id\n              firstName\n              lastName\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n\n            __typename ... on Company {\n              id\n              name\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n\n            __typename ... on Organization {\n              id\n              name\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n\n            __typename ... on DiplomaticMission {\n              id\n              name\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n\n            __typename ... on Municipality {\n              id\n              name: title\n              photoCover {\n                imageThumbnailUrl\n              }\n            }\n          }\n        }              \n      }\n    }   \n  }`)\n}\n",
      "setMessagesAsRead": "function(getGraphQL, conversationId) {  getGraphQL(`\n    mutation {\n      conversation {\n        setMessagesAsRead(id: \"${conversationId}\")\n      }\n    }`\n  )\n}\n",
      "saveSelectedMailbox": "function(mailboxId) {  sessionStorage.setItem('savedMailbox', mailboxId);\n}\n",
      "getSelectedMailbox": "function() {  return sessionStorage.getItem('savedMailbox');\n}\n",
      "updateUserInfo": "function(initialDataSource, firstName, lastName, imageUrl) {  initialDataSource.firstName = firstName;\n  initialDataSource.lastName = lastName;\n  initialDataSource.profileImage = imageUrl;\n}\n",
      "changePassword": "function($actionHelper, oldPassword, newPassword, confirmPassword) {    const changePasswordRequest = {'oldPassword': oldPassword, 'newPassword': newPassword, 'confirmPassword': confirmPassword};\n    const params =$actionHelper.FetchConfig.postConfig;\n    params.body = JSON.stringify(changePasswordRequest);\n    params.headers.Authorization = 'Bearer ' + $actionHelper.$authenticationService.getAccessToken();\n    \n    $actionHelper.$loaderService.present().then(res => {\n      $actionHelper.fetchData(query, params).then(() => {\n        $actionHelper.showToast('Success! You may now login with your new password');\n        $actionHelper.goBackPage();\n      }).catch((error) => {\n          if (error.status === 400) {\n            $actionHelper.showToast('Incorrect old password. please retry');\n          }\n      }).finally(()=> {\n        $actionHelper.$loaderService.dismiss();\n      });\n    });\n}\n",
      "getPeoplesInYourSector": "function(getGraphQL, result, hasSector) {  if(!hasSector) {\n    return;\n  }\n  getGraphQL(`\n    query { \n      search {\n        directory {\n          peopleDirectory {\n            inYourSector(first: 9) {\n              items {\n                ...userCommonProperties\n              }  \n            }\n          }\n        }\n      }   \n    }\n  `).then(\n    (data) => {\n      const peoplesInYourSector = _.get(data, \"search.directory.peopleDirectory.inYourSector.items\", []).map(x => this.mapSearchPeopleToItem(x));\n      result.peopleDirectory.peoplesInYourSector = peoplesInYourSector;\n      result.peopleDirectory.hasPeoplesInYourSector = peoplesInYourSector.length > 0\n    }\n  );\n}\n",
      "getBlocksInfo": "function() {  return this.getAsyncGraphQl(`\n    mutation{\n      user {\n        getDirectoryBlocks{\n          blockDP1 {\n            ...blockInfo\n          }\n          blockDP2 {\n            ...blockInfo\n          }\n          blockDB1 {\n            ...blockInfo\n          }\n          blockDB2 {\n            ...blockInfo\n          }\n          blockDN1 {\n            ...blockInfo\n          }\n          blockDN2 {\n            ...blockInfo\n          }\n          blockHP1 {\n            ...blockInfo\n          }\n          blockHP2 {\n            ...blockInfo\n          }\n          blockHB1 {\n            ...blockInfo\n          }\n          blockHB2 {\n            ...blockInfo\n          }\n          blockHN1 {\n            ...blockInfo\n          }\n          blockHN2 {\n            ...blockInfo\n          }\n        }\n      }\n    }\n  `, this.$actionHelper)\n  .then((data) =>\n   {\n     return _.get(data, 'user.getDirectoryBlocks', {});\n   })\n}\n"
    }
  },
  "pageDoesntNeedToClearSearchInput": [
    "searchForCompany",
    "createNewCompany",
    "addCompanyRole",
    "searchForOrganization",
    "createNewOrganization",
    "addOrganizationRole"
  ],
  "domainRoutes": {
    "Profile": "profile/:id",
    "User": "profile/:id",
    "Company": "company/:id",
    "Municipality": "town/:id",
    "Organization": "organization/:id",
    "OrganizationCommittee": "organization/:id",
    "DiplomaticMission": "diplomaticMission/:id",
    "DiplomaticMissionCommittee": "diplomaticMission/:id",
    "Offer": "offerDetails/:id",
    "Post": "postDetails/:id",
    "Event": "eventDetails/:id"
  },
  "manageDomainRoutes": {
    "Company": "company/edit/:id",
    "Organization": "organization/edit/:id",
    "Municipality": "town/edit/:id",
    "DiplomaticMission": "diplomaticMission/edit/:id"
  },
  "globalManageDomainRoutes": {
    "Company": "company/manageCompany/:id",
    "Organization": "organization/manageOrganization/:id",
    "Municipality": "town/manageTown/:id",
    "DiplomaticMission": "diplomaticMission/manageDiplomatic/:id"
  },
  "applicationTabs": [
    {
      "id": "home",
      "icon": "assets/icon/dynamic-ui/Home_Inactive.svg",
      "activeIcon": "assets/icon/dynamic-ui/Home_active.svg",
      "label": "Home",
      "template": "home-page-template",
      "withBadge": false
    },
    {
      "id": "directory",
      "icon": "assets/icon/dynamic-ui/Directory_Inactive.svg",
      "activeIcon": "assets/icon/dynamic-ui/directory_active.svg",
      "label": "Directory",
      "template": "directory-page-template",
      "withBadge": false
    },
    {
      "id": "mailboxConversations",
      "icon": "assets/icon/dynamic-ui/Messages_Inactive.svg",
      "activeIcon": "assets/icon/dynamic-ui/Messages_active.svg",
      "label": "Messages",
      "template": "conversations-page-template",
      "withBadge": true
    },
    {
      "id": "my-profile",
      "icon": "assets/icon/dynamic-ui/Profiles_Inactive.svg",
      "activeIcon": "assets/icon/dynamic-ui/Profiles_active.svg",
      "label": "Profile",
      "template": "my-profile-page-template",
      "withBadge": false
    }
  ]
}